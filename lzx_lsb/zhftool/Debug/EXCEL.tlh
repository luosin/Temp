// Created by Microsoft (R) C/C++ Compiler Version 13.00.9466 (0238b18e).
//
// f:\lzx_lsb\zhftool\debug\EXCEL.tlh
//
// C++ source equivalent of Win32 type library d:\\Program Files\\Microsoft Office\\OFFICE11\\EXCEL.EXE
// compiler-generated file created 10/16/15 at 15:00:24 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace MSExcel {

//
// Forward references and typedefs
//

struct __declspec(uuid("00020813-0000-0000-c000-000000000046"))
/* LIBID */ __Excel;
struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
/* dual interface */ Adjustments;
struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
/* dual interface */ CalloutFormat;
struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
/* dual interface */ ColorFormat;
struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
/* dual interface */ LineFormat;
struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNode;
struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
/* dual interface */ ShapeNodes;
struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
/* dual interface */ PictureFormat;
struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
/* dual interface */ ShadowFormat;
struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
/* dual interface */ TextEffectFormat;
struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
/* dual interface */ ThreeDFormat;
struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
/* dual interface */ FillFormat;
struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodes;
struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNodeChildren;
struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
/* dual interface */ DiagramNode;
struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
/* dual interface */ IRTDUpdateEvent;
struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
/* dual interface */ IRtdServer;
enum Constants;
enum XlCreator;
enum XlChartGallery;
enum XlColorIndex;
enum XlEndStyleCap;
enum XlRowCol;
enum XlScaleType;
enum XlDataSeriesType;
enum XlAxisCrosses;
enum XlAxisGroup;
enum XlBackground;
enum XlWindowState;
enum XlAxisType;
enum XlArrowHeadLength;
enum XlVAlign;
enum XlTickMark;
enum XlErrorBarDirection;
enum XlErrorBarInclude;
enum XlDisplayBlanksAs;
enum XlArrowHeadStyle;
enum XlArrowHeadWidth;
enum XlHAlign;
enum XlTickLabelPosition;
enum XlLegendPosition;
enum XlChartPictureType;
enum XlChartPicturePlacement;
enum XlOrientation;
enum XlTickLabelOrientation;
enum XlBorderWeight;
enum XlDataSeriesDate;
enum XlUnderlineStyle;
enum XlErrorBarType;
enum XlTrendlineType;
enum XlLineStyle;
enum XlDataLabelsType;
enum XlMarkerStyle;
enum XlPictureConvertorType;
enum XlPattern;
enum XlChartSplitType;
enum XlDisplayUnit;
enum XlDataLabelPosition;
enum XlTimeUnit;
enum XlCategoryType;
enum XlBarShape;
enum XlChartType;
enum XlChartItem;
enum XlSizeRepresents;
enum XlInsertShiftDirection;
enum XlDeleteShiftDirection;
enum XlDirection;
enum XlConsolidationFunction;
enum XlSheetType;
enum XlLocationInTable;
enum XlFindLookIn;
enum XlWindowType;
enum XlPivotFieldDataType;
enum XlCopyPictureFormat;
enum XlPivotTableSourceType;
enum XlReferenceStyle;
enum XlMSApplication;
enum XlMouseButton;
enum XlCutCopyMode;
enum XlFillWith;
enum XlFilterAction;
enum XlOrder;
enum XlLinkType;
enum XlApplyNamesOrder;
enum XlEnableCancelKey;
enum XlPageBreak;
enum XlOLEType;
enum XlPageOrientation;
enum XlLinkInfo;
enum XlCommandUnderlines;
enum XlOLEVerb;
enum XlCalculation;
enum XlFileAccess;
enum XlEditionType;
enum XlObjectSize;
enum XlLookAt;
enum XlMailSystem;
enum XlLinkInfoType;
enum XlCVError;
enum XlEditionFormat;
enum XlLink;
enum XlCellType;
enum XlArrangeStyle;
enum XlMousePointer;
enum XlEditionOptionsOption;
enum XlAutoFillType;
enum XlAutoFilterOperator;
enum XlClipboardFormat;
enum XlFileFormat;
enum XlApplicationInternational;
enum XlPageBreakExtent;
enum XlCellInsertionMode;
enum XlFormulaLabel;
enum XlHighlightChangesTime;
enum XlCommentDisplayMode;
enum XlFormatConditionType;
enum XlFormatConditionOperator;
enum XlEnableSelection;
enum XlDVType;
enum XlIMEMode;
enum XlDVAlertStyle;
enum XlChartLocation;
enum XlPaperSize;
enum XlPasteSpecialOperation;
enum XlPasteType;
enum XlPhoneticCharacterType;
enum XlPhoneticAlignment;
enum XlPictureAppearance;
enum XlPivotFieldOrientation;
enum XlPivotFieldCalculation;
enum XlPlacement;
enum XlPlatform;
enum XlPrintLocation;
enum XlPriority;
enum XlPTSelectionMode;
enum XlRangeAutoFormat;
enum XlReferenceType;
enum XlLayoutFormType;
enum XlRoutingSlipDelivery;
enum XlRoutingSlipStatus;
enum XlRunAutoMacro;
enum XlSaveAction;
enum XlSaveAsAccessMode;
enum XlSaveConflictResolution;
enum XlSearchDirection;
enum XlSearchOrder;
enum XlSheetVisibility;
enum XlSortMethod;
enum XlSortMethodOld;
enum XlSortOrder;
enum XlSortOrientation;
enum XlSortType;
enum XlSpecialCellsValue;
enum XlSubscribeToFormat;
enum XlSummaryRow;
enum XlSummaryColumn;
enum XlSummaryReportType;
enum XlTabPosition;
enum XlTextParsingType;
enum XlTextQualifier;
enum XlWBATemplate;
enum XlWindowView;
enum XlXLMMacroType;
enum XlYesNoGuess;
enum XlBordersIndex;
enum XlToolbarProtection;
enum XlBuiltInDialog;
enum XlParameterType;
enum XlParameterDataType;
enum XlFormControl;
enum XlSourceType;
enum XlHtmlType;
enum XlPivotFormatType;
enum XlCmdType;
enum XlColumnDataType;
enum XlQueryType;
enum XlWebSelectionType;
enum XlCubeFieldType;
enum XlWebFormatting;
enum XlDisplayDrawingObjects;
enum XlSubtototalLocationType;
enum XlPivotTableVersionList;
enum XlPrintErrors;
enum XlPivotCellType;
enum XlPivotTableMissingItems;
enum XlCalculationState;
enum XlCalculationInterruptKey;
enum XlSortDataOption;
enum XlUpdateLinks;
enum XlLinkStatus;
enum XlSearchWithin;
enum XlCorruptLoad;
enum XlRobustConnect;
enum XlErrorChecks;
enum XlDataLabelSeparator;
enum XlSmartTagDisplayMode;
enum XlRangeValueDataType;
enum XlSpeakDirection;
enum XlInsertFormatOrigin;
enum XlArabicModes;
enum XlImportDataAs;
enum XlCalculatedMemberType;
enum XlHebrewModes;
enum XlListObjectSourceType;
enum XlTextVisualLayoutType;
enum XlListDataType;
enum XlTotalsCalculation;
enum XlXmlLoadOption;
enum XlSmartTagControlType;
enum XlListConflict;
enum XlXmlExportResult;
enum XlXmlImportResult;
struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
/* interface */ IWindow;
struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
/* interface */ IWindows;
struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
/* interface */ IAppEvents;
struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
/* dual interface */ _Application;
struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
/* interface */ IWorksheetFunction;
struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
/* interface */ IRange;
struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
/* interface */ IChartEvents;
struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
/* dual interface */ _Chart;
struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
/* dual interface */ Sheets;
struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
/* interface */ IVPageBreak;
struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
/* interface */ IHPageBreak;
struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
/* interface */ IHPageBreaks;
struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
/* interface */ IVPageBreaks;
struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
/* interface */ IRecentFile;
struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
/* interface */ IRecentFiles;
struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
/* interface */ IDocEvents;
struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
/* dual interface */ _Worksheet;
struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
/* interface */ IStyle;
struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
/* interface */ IStyles;
struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
/* interface */ IBorders;
struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
/* dual interface */ _Global;
struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
/* interface */ IAddIn;
struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
/* interface */ IAddIns;
struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
/* interface */ IToolbar;
struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
/* interface */ IToolbars;
struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
/* interface */ IToolbarButton;
struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
/* interface */ IToolbarButtons;
struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
/* interface */ IAreas;
struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
/* interface */ IWorkbookEvents;
struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
/* dual interface */ _Workbook;
struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
/* dual interface */ Workbooks;
struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
/* interface */ IMenuBars;
struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
/* interface */ IMenuBar;
struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
/* interface */ IMenus;
struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
/* interface */ IMenu;
struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
/* interface */ IMenuItems;
struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
/* interface */ IMenuItem;
struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
/* interface */ ICharts;
struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
/* interface */ IDrawingObjects;
struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
/* interface */ IPivotCache;
struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
/* interface */ IPivotCaches;
struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
/* interface */ IPivotFormula;
struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
/* interface */ IPivotFormulas;
struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
/* interface */ IPivotTable;
struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
/* interface */ IPivotTables;
struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
/* interface */ IPivotField;
struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
/* interface */ IPivotFields;
struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
/* interface */ ICalculatedFields;
struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
/* interface */ IPivotItem;
struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
/* interface */ IPivotItems;
struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
/* interface */ ICalculatedItems;
struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
/* interface */ ICharacters;
struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
/* interface */ IDialogs;
struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
/* interface */ IDialog;
struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
/* interface */ ISoundNote;
struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
/* interface */ IButton;
struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
/* interface */ IButtons;
struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
/* interface */ ICheckBox;
struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
/* interface */ ICheckBoxes;
struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
/* interface */ IOptionButton;
struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
/* interface */ IOptionButtons;
struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
/* interface */ IEditBox;
struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
/* interface */ IEditBoxes;
struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
/* interface */ IScrollBar;
struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
/* interface */ IScrollBars;
struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
/* interface */ IListBox;
struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
/* interface */ IListBoxes;
struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
/* interface */ IGroupBox;
struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
/* interface */ IGroupBoxes;
struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
/* interface */ IDropDown;
struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
/* interface */ IDropDowns;
struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
/* interface */ ISpinner;
struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
/* interface */ ISpinners;
struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
/* interface */ IDialogFrame;
struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
/* interface */ ILabel;
struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
/* interface */ ILabels;
struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
/* interface */ IPanes;
struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
/* interface */ IPane;
struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
/* interface */ IScenarios;
struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
/* interface */ IScenario;
struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
/* interface */ IGroupObject;
struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
/* interface */ IGroupObjects;
struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
/* interface */ ILine;
struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
/* interface */ ILines;
struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
/* interface */ IRectangle;
struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
/* interface */ IRectangles;
struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
/* interface */ IOval;
struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
/* interface */ IOvals;
struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
/* interface */ IArc;
struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
/* interface */ IArcs;
struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
/* interface */ IOLEObjectEvents;
struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
/* interface */ _IOLEObject;
struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
/* interface */ IOLEObjects;
struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
/* interface */ ITextBox;
struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
/* interface */ ITextBoxes;
struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
/* interface */ IPictures;
struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
/* interface */ IDrawing;
struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
/* interface */ IDrawings;
struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
/* interface */ IRoutingSlip;
struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
/* interface */ IOutline;
struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
/* interface */ IModule;
struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
/* interface */ IModules;
struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
/* interface */ IDialogSheet;
struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
/* interface */ IDialogSheets;
struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
/* interface */ IWorksheets;
struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
/* interface */ IPageSetup;
struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
/* interface */ INames;
struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
/* interface */ IName;
struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
/* interface */ IChartObject;
struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
/* interface */ IChartObjects;
struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
/* interface */ IMailer;
struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
/* interface */ ICustomViews;
struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
/* interface */ ICustomView;
struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
/* interface */ IFormatConditions;
struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
/* interface */ IFormatCondition;
struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
/* interface */ IComments;
struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
/* interface */ IComment;
struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
/* interface */ IRefreshEvents;
struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
/* interface */ _IQueryTable;
struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
/* interface */ IQueryTables;
struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
/* interface */ IParameter;
struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
/* interface */ IParameters;
struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
/* interface */ IODBCError;
struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
/* interface */ IODBCErrors;
struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
/* interface */ IValidation;
struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
/* interface */ IHyperlinks;
struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
/* interface */ IHyperlink;
struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
/* interface */ IAutoFilter;
struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
/* interface */ IFilters;
struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
/* interface */ IFilter;
struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
/* interface */ IAutoCorrect;
struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
/* interface */ IBorder;
struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
/* interface */ IInterior;
struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
/* interface */ IChartFillFormat;
struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
/* interface */ IChartColorFormat;
struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
/* interface */ IAxis;
struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
/* interface */ IChartTitle;
struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
/* interface */ IAxisTitle;
struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
/* interface */ IChartGroup;
struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
/* interface */ IChartGroups;
struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
/* interface */ IAxes;
struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
/* interface */ IPoints;
struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
/* interface */ IPoint;
struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
/* interface */ ISeries;
struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
/* interface */ ISeriesCollection;
struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
/* interface */ IDataLabel;
struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
/* interface */ IDataLabels;
struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
/* interface */ ILegendEntry;
struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
/* interface */ ILegendEntries;
struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
/* interface */ ILegendKey;
struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
/* interface */ ITrendlines;
struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
/* interface */ ITrendline;
struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
/* interface */ ICorners;
struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
/* interface */ ISeriesLines;
struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
/* interface */ IHiLoLines;
struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
/* interface */ IGridlines;
struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
/* interface */ IDropLines;
struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
/* interface */ ILeaderLines;
struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
/* interface */ IUpBars;
struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
/* interface */ IDownBars;
struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
/* interface */ IFloor;
struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
/* interface */ IWalls;
struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
/* interface */ ITickLabels;
struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
/* interface */ IPlotArea;
struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
/* interface */ IChartArea;
struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
/* interface */ ILegend;
struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
/* interface */ IErrorBars;
struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
/* interface */ IDataTable;
struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
/* interface */ IPhonetic;
struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
/* interface */ IShape;
struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
/* interface */ IShapes;
struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
/* interface */ IShapeRange;
struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
/* interface */ IGroupShapes;
struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
/* interface */ ITextFrame;
struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
/* interface */ IConnectorFormat;
struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
/* interface */ IFreeformBuilder;
struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
/* interface */ IControlFormat;
struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
/* interface */ IOLEFormat;
struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
/* interface */ ILinkFormat;
struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
/* interface */ IPublishObjects;
struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
/* dual interface */ PublishObject;
struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
/* interface */ IOLEDBError;
struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
/* interface */ IOLEDBErrors;
struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
/* interface */ IPhonetics;
struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
/* dual interface */ DefaultWebOptions;
struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
/* dual interface */ WebOptions;
struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
/* interface */ IPivotLayout;
struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
/* dual interface */ TreeviewControl;
struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
/* dual interface */ CubeField;
struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
/* dual interface */ CubeFields;
struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
/* interface */ IDisplayUnitLabel;
struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
/* interface */ ICellFormat;
struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
/* interface */ IUsedObjects;
struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
/* interface */ ICustomProperties;
struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
/* interface */ ICustomProperty;
struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMembers;
struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
/* interface */ ICalculatedMember;
struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
/* interface */ IWatches;
struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
/* interface */ IWatch;
struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
/* interface */ IPivotCell;
struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
/* interface */ IGraphic;
struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
/* interface */ IAutoRecover;
struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
/* interface */ IErrorCheckingOptions;
struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
/* interface */ IErrors;
struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
/* interface */ IError;
struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
/* interface */ ISmartTagAction;
struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
/* interface */ ISmartTagActions;
struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
/* interface */ ISmartTag;
struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
/* interface */ ISmartTags;
struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizer;
struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
/* interface */ ISmartTagRecognizers;
struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
/* interface */ ISmartTagOptions;
struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
/* interface */ ISpellingOptions;
struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
/* interface */ ISpeech;
struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
/* interface */ IProtection;
struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
/* interface */ IPivotItemList;
struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
/* interface */ ITab;
struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRanges;
struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
/* interface */ IAllowEditRange;
struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
/* interface */ IUserAccessList;
struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
/* interface */ IUserAccess;
struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
/* interface */ IRTD;
struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
/* interface */ IDiagram;
struct __declspec(uuid("00024470-0001-0000-c000-000000000046"))
/* interface */ IListObjects;
struct __declspec(uuid("00024471-0001-0000-c000-000000000046"))
/* interface */ IListObject;
struct __declspec(uuid("00024472-0001-0000-c000-000000000046"))
/* interface */ IListColumns;
struct __declspec(uuid("00024473-0001-0000-c000-000000000046"))
/* interface */ IListColumn;
struct __declspec(uuid("00024474-0001-0000-c000-000000000046"))
/* interface */ IListRows;
struct __declspec(uuid("00024475-0001-0000-c000-000000000046"))
/* interface */ IListRow;
struct __declspec(uuid("00024476-0001-0000-c000-000000000046"))
/* interface */ IXmlNamespace;
struct __declspec(uuid("00024477-0001-0000-c000-000000000046"))
/* interface */ IXmlNamespaces;
struct __declspec(uuid("00024478-0001-0000-c000-000000000046"))
/* interface */ IXmlDataBinding;
struct __declspec(uuid("00024479-0001-0000-c000-000000000046"))
/* interface */ IXmlSchema;
struct __declspec(uuid("0002447a-0001-0000-c000-000000000046"))
/* interface */ IXmlSchemas;
struct __declspec(uuid("0002447b-0001-0000-c000-000000000046"))
/* interface */ IXmlMap;
struct __declspec(uuid("0002447c-0001-0000-c000-000000000046"))
/* interface */ IXmlMaps;
struct __declspec(uuid("0002447d-0001-0000-c000-000000000046"))
/* interface */ IListDataFormat;
struct __declspec(uuid("0002447e-0001-0000-c000-000000000046"))
/* interface */ IXPath;
struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
/* dispinterface */ Font;
struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
/* dispinterface */ Window;
struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
/* dispinterface */ Windows;
struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
/* dispinterface */ AppEvents;
struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
/* dispinterface */ WorksheetFunction;
struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
/* dispinterface */ Range;
struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
/* dispinterface */ ChartEvents;
struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreak;
struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreak;
struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
/* dispinterface */ HPageBreaks;
struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
/* dispinterface */ VPageBreaks;
struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFile;
struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
/* dispinterface */ RecentFiles;
struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
/* dispinterface */ DocEvents;
struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
/* dispinterface */ Style;
struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
/* dispinterface */ Styles;
struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
/* dispinterface */ Borders;
struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
/* dispinterface */ AddIn;
struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
/* dispinterface */ AddIns;
struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbar;
struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
/* dispinterface */ Toolbars;
struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButton;
struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
/* dispinterface */ ToolbarButtons;
struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
/* dispinterface */ Areas;
struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
/* dispinterface */ WorkbookEvents;
struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBars;
struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
/* dispinterface */ MenuBar;
struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
/* dispinterface */ Menus;
struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
/* dispinterface */ Menu;
struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItems;
struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
/* dispinterface */ MenuItem;
struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
/* dispinterface */ Charts;
struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
/* dispinterface */ DrawingObjects;
struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCache;
struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCaches;
struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormula;
struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFormulas;
struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTable;
struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
/* dispinterface */ PivotTables;
struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
/* dispinterface */ PivotField;
struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
/* dispinterface */ PivotFields;
struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedFields;
struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItem;
struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItems;
struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedItems;
struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
/* dispinterface */ Characters;
struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
/* dispinterface */ Dialogs;
struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
/* dispinterface */ Dialog;
struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
/* dispinterface */ SoundNote;
struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
/* dispinterface */ Button;
struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
/* dispinterface */ Buttons;
struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBox;
struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
/* dispinterface */ CheckBoxes;
struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButton;
struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
/* dispinterface */ OptionButtons;
struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
/* dispinterface */ EditBox;
struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
/* dispinterface */ EditBoxes;
struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBar;
struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
/* dispinterface */ ScrollBars;
struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
/* dispinterface */ ListBox;
struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
/* dispinterface */ ListBoxes;
struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBox;
struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
/* dispinterface */ GroupBoxes;
struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
/* dispinterface */ DropDown;
struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
/* dispinterface */ DropDowns;
struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
/* dispinterface */ Spinner;
struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
/* dispinterface */ Spinners;
struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
/* dispinterface */ DialogFrame;
struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
/* dispinterface */ Label;
struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
/* dispinterface */ Labels;
struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
/* dispinterface */ Panes;
struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
/* dispinterface */ Pane;
struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
/* dispinterface */ Scenarios;
struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
/* dispinterface */ Scenario;
struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObject;
struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
/* dispinterface */ GroupObjects;
struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
/* dispinterface */ Line;
struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
/* dispinterface */ Lines;
struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangle;
struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
/* dispinterface */ Rectangles;
struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
/* dispinterface */ Oval;
struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
/* dispinterface */ Ovals;
struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
/* dispinterface */ Arc;
struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
/* dispinterface */ Arcs;
struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjectEvents;
struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
/* dispinterface */ _OLEObject;
struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
/* dispinterface */ OLEObjects;
struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
/* dispinterface */ TextBox;
struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
/* dispinterface */ TextBoxes;
struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
/* dispinterface */ Picture;
struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
/* dispinterface */ Pictures;
struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
/* dispinterface */ Drawing;
struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
/* dispinterface */ Drawings;
struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
/* dispinterface */ RoutingSlip;
struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
/* dispinterface */ Outline;
struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
/* dispinterface */ Module;
struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
/* dispinterface */ Modules;
struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheet;
struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
/* dispinterface */ DialogSheets;
struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
/* dispinterface */ Worksheets;
struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
/* dispinterface */ PageSetup;
struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
/* dispinterface */ Names;
struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
/* dispinterface */ Name;
struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObject;
struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
/* dispinterface */ ChartObjects;
struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
/* dispinterface */ Mailer;
struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
/* dispinterface */ CustomViews;
struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
/* dispinterface */ CustomView;
struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
/* dispinterface */ FormatConditions;
struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
/* dispinterface */ FormatCondition;
struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
/* dispinterface */ Comments;
struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
/* dispinterface */ Comment;
struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
/* dispinterface */ RefreshEvents;
struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
/* dispinterface */ _QueryTable;
struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
/* dispinterface */ QueryTables;
struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
/* dispinterface */ Parameter;
struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
/* dispinterface */ Parameters;
struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCError;
struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
/* dispinterface */ ODBCErrors;
struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
/* dispinterface */ Validation;
struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlinks;
struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
/* dispinterface */ Hyperlink;
struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
/* dispinterface */ AutoFilter;
struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
/* dispinterface */ Filters;
struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
/* dispinterface */ Filter;
struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
/* dispinterface */ AutoCorrect;
struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
/* dispinterface */ Border;
struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
/* dispinterface */ Interior;
struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
/* dispinterface */ ChartFillFormat;
struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
/* dispinterface */ ChartColorFormat;
struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
/* dispinterface */ Axis;
struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
/* dispinterface */ ChartTitle;
struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
/* dispinterface */ AxisTitle;
struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroup;
struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
/* dispinterface */ ChartGroups;
struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
/* dispinterface */ Axes;
struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
/* dispinterface */ Points;
struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
/* dispinterface */ Point;
struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
/* dispinterface */ Series;
struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesCollection;
struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabel;
struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
/* dispinterface */ DataLabels;
struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntry;
struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
/* dispinterface */ LegendEntries;
struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
/* dispinterface */ LegendKey;
struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
/* dispinterface */ Trendlines;
struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
/* dispinterface */ Trendline;
struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
/* dispinterface */ Corners;
struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
/* dispinterface */ SeriesLines;
struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
/* dispinterface */ HiLoLines;
struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
/* dispinterface */ Gridlines;
struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
/* dispinterface */ DropLines;
struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
/* dispinterface */ LeaderLines;
struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
/* dispinterface */ UpBars;
struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
/* dispinterface */ DownBars;
struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
/* dispinterface */ Floor;
struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
/* dispinterface */ Walls;
struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
/* dispinterface */ TickLabels;
struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
/* dispinterface */ PlotArea;
struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
/* dispinterface */ ChartArea;
struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
/* dispinterface */ Legend;
struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorBars;
struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
/* dispinterface */ DataTable;
struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetic;
struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
/* dispinterface */ Shape;
struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
/* dispinterface */ Shapes;
struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
/* dispinterface */ ShapeRange;
struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
/* dispinterface */ GroupShapes;
struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
/* dispinterface */ TextFrame;
struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
/* dispinterface */ ConnectorFormat;
struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
/* dispinterface */ FreeformBuilder;
struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
/* dispinterface */ ControlFormat;
struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
/* dispinterface */ OLEFormat;
struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
/* dispinterface */ LinkFormat;
struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
/* dispinterface */ PublishObjects;
struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBError;
struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
/* dispinterface */ OLEDBErrors;
struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
/* dispinterface */ Phonetics;
struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
/* dispinterface */ PivotLayout;
struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
/* dispinterface */ DisplayUnitLabel;
struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
/* dispinterface */ CellFormat;
struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
/* dispinterface */ UsedObjects;
struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperties;
struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
/* dispinterface */ CustomProperty;
struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMembers;
struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
/* dispinterface */ CalculatedMember;
struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
/* dispinterface */ Watches;
struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
/* dispinterface */ Watch;
struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
/* dispinterface */ PivotCell;
struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
/* dispinterface */ Graphic;
struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
/* dispinterface */ AutoRecover;
struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
/* dispinterface */ ErrorCheckingOptions;
struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
/* dispinterface */ Errors;
struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
/* dispinterface */ Error;
struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagAction;
struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagActions;
struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTag;
struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTags;
struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizer;
struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagRecognizers;
struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
/* dispinterface */ SmartTagOptions;
struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
/* dispinterface */ SpellingOptions;
struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
/* dispinterface */ Speech;
struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
/* dispinterface */ Protection;
struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
/* dispinterface */ PivotItemList;
struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
/* dispinterface */ Tab;
struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRanges;
struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
/* dispinterface */ AllowEditRange;
struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccessList;
struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
/* dispinterface */ UserAccess;
struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
/* dispinterface */ RTD;
struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
/* dispinterface */ Diagram;
struct __declspec(uuid("00024470-0000-0000-c000-000000000046"))
/* dispinterface */ ListObjects;
struct __declspec(uuid("00024471-0000-0000-c000-000000000046"))
/* dispinterface */ ListObject;
struct __declspec(uuid("00024472-0000-0000-c000-000000000046"))
/* dispinterface */ ListColumns;
struct __declspec(uuid("00024473-0000-0000-c000-000000000046"))
/* dispinterface */ ListColumn;
struct __declspec(uuid("00024474-0000-0000-c000-000000000046"))
/* dispinterface */ ListRows;
struct __declspec(uuid("00024475-0000-0000-c000-000000000046"))
/* dispinterface */ ListRow;
struct __declspec(uuid("00024476-0000-0000-c000-000000000046"))
/* dispinterface */ XmlNamespace;
struct __declspec(uuid("00024477-0000-0000-c000-000000000046"))
/* dispinterface */ XmlNamespaces;
struct __declspec(uuid("00024478-0000-0000-c000-000000000046"))
/* dispinterface */ XmlDataBinding;
struct __declspec(uuid("00024479-0000-0000-c000-000000000046"))
/* dispinterface */ XmlSchema;
struct __declspec(uuid("0002447a-0000-0000-c000-000000000046"))
/* dispinterface */ XmlSchemas;
struct __declspec(uuid("0002447b-0000-0000-c000-000000000046"))
/* dispinterface */ XmlMap;
struct __declspec(uuid("0002447c-0000-0000-c000-000000000046"))
/* dispinterface */ XmlMaps;
struct __declspec(uuid("0002447d-0000-0000-c000-000000000046"))
/* dispinterface */ ListDataFormat;
struct __declspec(uuid("0002447e-0000-0000-c000-000000000046"))
/* dispinterface */ XPath;
struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
/* interface */ IDummy;
struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
/* interface */ ICanvasShapes;
struct /* coclass */ QueryTable;
struct /* coclass */ Application;
struct /* coclass */ Chart;
struct /* coclass */ Worksheet;
struct /* coclass */ Global;
struct /* coclass */ Workbook;
struct /* coclass */ OLEObject;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(Adjustments, __uuidof(Adjustments));
_COM_SMARTPTR_TYPEDEF(CalloutFormat, __uuidof(CalloutFormat));
_COM_SMARTPTR_TYPEDEF(ColorFormat, __uuidof(ColorFormat));
_COM_SMARTPTR_TYPEDEF(LineFormat, __uuidof(LineFormat));
_COM_SMARTPTR_TYPEDEF(ShapeNode, __uuidof(ShapeNode));
_COM_SMARTPTR_TYPEDEF(ShapeNodes, __uuidof(ShapeNodes));
_COM_SMARTPTR_TYPEDEF(PictureFormat, __uuidof(PictureFormat));
_COM_SMARTPTR_TYPEDEF(ShadowFormat, __uuidof(ShadowFormat));
_COM_SMARTPTR_TYPEDEF(TextEffectFormat, __uuidof(TextEffectFormat));
_COM_SMARTPTR_TYPEDEF(ThreeDFormat, __uuidof(ThreeDFormat));
_COM_SMARTPTR_TYPEDEF(FillFormat, __uuidof(FillFormat));
_COM_SMARTPTR_TYPEDEF(IRTDUpdateEvent, __uuidof(IRTDUpdateEvent));
_COM_SMARTPTR_TYPEDEF(IRtdServer, __uuidof(IRtdServer));
_COM_SMARTPTR_TYPEDEF(IChartEvents, __uuidof(IChartEvents));
_COM_SMARTPTR_TYPEDEF(IOLEObjectEvents, __uuidof(IOLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(IRefreshEvents, __uuidof(IRefreshEvents));
_COM_SMARTPTR_TYPEDEF(ISpellingOptions, __uuidof(ISpellingOptions));
_COM_SMARTPTR_TYPEDEF(ISpeech, __uuidof(ISpeech));
_COM_SMARTPTR_TYPEDEF(IUserAccess, __uuidof(IUserAccess));
_COM_SMARTPTR_TYPEDEF(IRTD, __uuidof(IRTD));
_COM_SMARTPTR_TYPEDEF(Font, __uuidof(Font));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(Window));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(Windows));
_COM_SMARTPTR_TYPEDEF(AppEvents, __uuidof(AppEvents));
_COM_SMARTPTR_TYPEDEF(WorksheetFunction, __uuidof(WorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Range, __uuidof(Range));
_COM_SMARTPTR_TYPEDEF(ChartEvents, __uuidof(ChartEvents));
_COM_SMARTPTR_TYPEDEF(VPageBreak, __uuidof(VPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreak, __uuidof(HPageBreak));
_COM_SMARTPTR_TYPEDEF(HPageBreaks, __uuidof(HPageBreaks));
_COM_SMARTPTR_TYPEDEF(VPageBreaks, __uuidof(VPageBreaks));
_COM_SMARTPTR_TYPEDEF(RecentFile, __uuidof(RecentFile));
_COM_SMARTPTR_TYPEDEF(RecentFiles, __uuidof(RecentFiles));
_COM_SMARTPTR_TYPEDEF(DocEvents, __uuidof(DocEvents));
_COM_SMARTPTR_TYPEDEF(Style, __uuidof(Style));
_COM_SMARTPTR_TYPEDEF(Styles, __uuidof(Styles));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(Toolbar, __uuidof(Toolbar));
_COM_SMARTPTR_TYPEDEF(Toolbars, __uuidof(Toolbars));
_COM_SMARTPTR_TYPEDEF(ToolbarButton, __uuidof(ToolbarButton));
_COM_SMARTPTR_TYPEDEF(ToolbarButtons, __uuidof(ToolbarButtons));
_COM_SMARTPTR_TYPEDEF(Areas, __uuidof(Areas));
_COM_SMARTPTR_TYPEDEF(WorkbookEvents, __uuidof(WorkbookEvents));
_COM_SMARTPTR_TYPEDEF(MenuBars, __uuidof(MenuBars));
_COM_SMARTPTR_TYPEDEF(MenuBar, __uuidof(MenuBar));
_COM_SMARTPTR_TYPEDEF(Menus, __uuidof(Menus));
_COM_SMARTPTR_TYPEDEF(Menu, __uuidof(Menu));
_COM_SMARTPTR_TYPEDEF(MenuItems, __uuidof(MenuItems));
_COM_SMARTPTR_TYPEDEF(MenuItem, __uuidof(MenuItem));
_COM_SMARTPTR_TYPEDEF(Charts, __uuidof(Charts));
_COM_SMARTPTR_TYPEDEF(DrawingObjects, __uuidof(DrawingObjects));
_COM_SMARTPTR_TYPEDEF(PivotCache, __uuidof(PivotCache));
_COM_SMARTPTR_TYPEDEF(PivotCaches, __uuidof(PivotCaches));
_COM_SMARTPTR_TYPEDEF(PivotFormula, __uuidof(PivotFormula));
_COM_SMARTPTR_TYPEDEF(PivotFormulas, __uuidof(PivotFormulas));
_COM_SMARTPTR_TYPEDEF(PivotTable, __uuidof(PivotTable));
_COM_SMARTPTR_TYPEDEF(PivotTables, __uuidof(PivotTables));
_COM_SMARTPTR_TYPEDEF(PivotField, __uuidof(PivotField));
_COM_SMARTPTR_TYPEDEF(PivotFields, __uuidof(PivotFields));
_COM_SMARTPTR_TYPEDEF(CalculatedFields, __uuidof(CalculatedFields));
_COM_SMARTPTR_TYPEDEF(PivotItem, __uuidof(PivotItem));
_COM_SMARTPTR_TYPEDEF(PivotItems, __uuidof(PivotItems));
_COM_SMARTPTR_TYPEDEF(CalculatedItems, __uuidof(CalculatedItems));
_COM_SMARTPTR_TYPEDEF(Characters, __uuidof(Characters));
_COM_SMARTPTR_TYPEDEF(Dialogs, __uuidof(Dialogs));
_COM_SMARTPTR_TYPEDEF(Dialog, __uuidof(Dialog));
_COM_SMARTPTR_TYPEDEF(SoundNote, __uuidof(SoundNote));
_COM_SMARTPTR_TYPEDEF(Button, __uuidof(Button));
_COM_SMARTPTR_TYPEDEF(Buttons, __uuidof(Buttons));
_COM_SMARTPTR_TYPEDEF(CheckBox, __uuidof(CheckBox));
_COM_SMARTPTR_TYPEDEF(CheckBoxes, __uuidof(CheckBoxes));
_COM_SMARTPTR_TYPEDEF(OptionButton, __uuidof(OptionButton));
_COM_SMARTPTR_TYPEDEF(OptionButtons, __uuidof(OptionButtons));
_COM_SMARTPTR_TYPEDEF(EditBox, __uuidof(EditBox));
_COM_SMARTPTR_TYPEDEF(EditBoxes, __uuidof(EditBoxes));
_COM_SMARTPTR_TYPEDEF(ScrollBar, __uuidof(ScrollBar));
_COM_SMARTPTR_TYPEDEF(ScrollBars, __uuidof(ScrollBars));
_COM_SMARTPTR_TYPEDEF(ListBox, __uuidof(ListBox));
_COM_SMARTPTR_TYPEDEF(ListBoxes, __uuidof(ListBoxes));
_COM_SMARTPTR_TYPEDEF(GroupBox, __uuidof(GroupBox));
_COM_SMARTPTR_TYPEDEF(GroupBoxes, __uuidof(GroupBoxes));
_COM_SMARTPTR_TYPEDEF(DropDown, __uuidof(DropDown));
_COM_SMARTPTR_TYPEDEF(DropDowns, __uuidof(DropDowns));
_COM_SMARTPTR_TYPEDEF(Spinner, __uuidof(Spinner));
_COM_SMARTPTR_TYPEDEF(Spinners, __uuidof(Spinners));
_COM_SMARTPTR_TYPEDEF(DialogFrame, __uuidof(DialogFrame));
_COM_SMARTPTR_TYPEDEF(Label, __uuidof(Label));
_COM_SMARTPTR_TYPEDEF(Labels, __uuidof(Labels));
_COM_SMARTPTR_TYPEDEF(Panes, __uuidof(Panes));
_COM_SMARTPTR_TYPEDEF(Pane, __uuidof(Pane));
_COM_SMARTPTR_TYPEDEF(Scenarios, __uuidof(Scenarios));
_COM_SMARTPTR_TYPEDEF(Scenario, __uuidof(Scenario));
_COM_SMARTPTR_TYPEDEF(GroupObject, __uuidof(GroupObject));
_COM_SMARTPTR_TYPEDEF(GroupObjects, __uuidof(GroupObjects));
_COM_SMARTPTR_TYPEDEF(Line, __uuidof(Line));
_COM_SMARTPTR_TYPEDEF(Lines, __uuidof(Lines));
_COM_SMARTPTR_TYPEDEF(Rectangle, __uuidof(Rectangle));
_COM_SMARTPTR_TYPEDEF(Rectangles, __uuidof(Rectangles));
_COM_SMARTPTR_TYPEDEF(Oval, __uuidof(Oval));
_COM_SMARTPTR_TYPEDEF(Ovals, __uuidof(Ovals));
_COM_SMARTPTR_TYPEDEF(Arc, __uuidof(Arc));
_COM_SMARTPTR_TYPEDEF(Arcs, __uuidof(Arcs));
_COM_SMARTPTR_TYPEDEF(OLEObjectEvents, __uuidof(OLEObjectEvents));
_COM_SMARTPTR_TYPEDEF(_OLEObject, __uuidof(_OLEObject));
_COM_SMARTPTR_TYPEDEF(OLEObjects, __uuidof(OLEObjects));
_COM_SMARTPTR_TYPEDEF(TextBox, __uuidof(TextBox));
_COM_SMARTPTR_TYPEDEF(TextBoxes, __uuidof(TextBoxes));
_COM_SMARTPTR_TYPEDEF(Picture, __uuidof(Picture));
_COM_SMARTPTR_TYPEDEF(Pictures, __uuidof(Pictures));
_COM_SMARTPTR_TYPEDEF(Drawing, __uuidof(Drawing));
_COM_SMARTPTR_TYPEDEF(Drawings, __uuidof(Drawings));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(RoutingSlip));
_COM_SMARTPTR_TYPEDEF(Outline, __uuidof(Outline));
_COM_SMARTPTR_TYPEDEF(Module, __uuidof(Module));
_COM_SMARTPTR_TYPEDEF(Modules, __uuidof(Modules));
_COM_SMARTPTR_TYPEDEF(DialogSheet, __uuidof(DialogSheet));
_COM_SMARTPTR_TYPEDEF(DialogSheets, __uuidof(DialogSheets));
_COM_SMARTPTR_TYPEDEF(Worksheets, __uuidof(Worksheets));
_COM_SMARTPTR_TYPEDEF(PageSetup, __uuidof(PageSetup));
_COM_SMARTPTR_TYPEDEF(Names, __uuidof(Names));
_COM_SMARTPTR_TYPEDEF(Name, __uuidof(Name));
_COM_SMARTPTR_TYPEDEF(ChartObject, __uuidof(ChartObject));
_COM_SMARTPTR_TYPEDEF(ChartObjects, __uuidof(ChartObjects));
_COM_SMARTPTR_TYPEDEF(Mailer, __uuidof(Mailer));
_COM_SMARTPTR_TYPEDEF(CustomViews, __uuidof(CustomViews));
_COM_SMARTPTR_TYPEDEF(CustomView, __uuidof(CustomView));
_COM_SMARTPTR_TYPEDEF(FormatConditions, __uuidof(FormatConditions));
_COM_SMARTPTR_TYPEDEF(FormatCondition, __uuidof(FormatCondition));
_COM_SMARTPTR_TYPEDEF(Comments, __uuidof(Comments));
_COM_SMARTPTR_TYPEDEF(Comment, __uuidof(Comment));
_COM_SMARTPTR_TYPEDEF(RefreshEvents, __uuidof(RefreshEvents));
_COM_SMARTPTR_TYPEDEF(_QueryTable, __uuidof(_QueryTable));
_COM_SMARTPTR_TYPEDEF(QueryTables, __uuidof(QueryTables));
_COM_SMARTPTR_TYPEDEF(Parameter, __uuidof(Parameter));
_COM_SMARTPTR_TYPEDEF(Parameters, __uuidof(Parameters));
_COM_SMARTPTR_TYPEDEF(ODBCError, __uuidof(ODBCError));
_COM_SMARTPTR_TYPEDEF(ODBCErrors, __uuidof(ODBCErrors));
_COM_SMARTPTR_TYPEDEF(Validation, __uuidof(Validation));
_COM_SMARTPTR_TYPEDEF(Hyperlinks, __uuidof(Hyperlinks));
_COM_SMARTPTR_TYPEDEF(Hyperlink, __uuidof(Hyperlink));
_COM_SMARTPTR_TYPEDEF(IDocEvents, __uuidof(IDocEvents));
_COM_SMARTPTR_TYPEDEF(AutoFilter, __uuidof(AutoFilter));
_COM_SMARTPTR_TYPEDEF(Filters, __uuidof(Filters));
_COM_SMARTPTR_TYPEDEF(Filter, __uuidof(Filter));
_COM_SMARTPTR_TYPEDEF(AutoCorrect, __uuidof(AutoCorrect));
_COM_SMARTPTR_TYPEDEF(Border, __uuidof(Border));
_COM_SMARTPTR_TYPEDEF(Interior, __uuidof(Interior));
_COM_SMARTPTR_TYPEDEF(ChartFillFormat, __uuidof(ChartFillFormat));
_COM_SMARTPTR_TYPEDEF(ChartColorFormat, __uuidof(ChartColorFormat));
_COM_SMARTPTR_TYPEDEF(Axis, __uuidof(Axis));
_COM_SMARTPTR_TYPEDEF(ChartTitle, __uuidof(ChartTitle));
_COM_SMARTPTR_TYPEDEF(AxisTitle, __uuidof(AxisTitle));
_COM_SMARTPTR_TYPEDEF(ChartGroup, __uuidof(ChartGroup));
_COM_SMARTPTR_TYPEDEF(ChartGroups, __uuidof(ChartGroups));
_COM_SMARTPTR_TYPEDEF(Axes, __uuidof(Axes));
_COM_SMARTPTR_TYPEDEF(Points, __uuidof(Points));
_COM_SMARTPTR_TYPEDEF(Point, __uuidof(Point));
_COM_SMARTPTR_TYPEDEF(Series, __uuidof(Series));
_COM_SMARTPTR_TYPEDEF(SeriesCollection, __uuidof(SeriesCollection));
_COM_SMARTPTR_TYPEDEF(DataLabel, __uuidof(DataLabel));
_COM_SMARTPTR_TYPEDEF(DataLabels, __uuidof(DataLabels));
_COM_SMARTPTR_TYPEDEF(LegendEntry, __uuidof(LegendEntry));
_COM_SMARTPTR_TYPEDEF(LegendEntries, __uuidof(LegendEntries));
_COM_SMARTPTR_TYPEDEF(LegendKey, __uuidof(LegendKey));
_COM_SMARTPTR_TYPEDEF(Trendlines, __uuidof(Trendlines));
_COM_SMARTPTR_TYPEDEF(Trendline, __uuidof(Trendline));
_COM_SMARTPTR_TYPEDEF(Corners, __uuidof(Corners));
_COM_SMARTPTR_TYPEDEF(SeriesLines, __uuidof(SeriesLines));
_COM_SMARTPTR_TYPEDEF(HiLoLines, __uuidof(HiLoLines));
_COM_SMARTPTR_TYPEDEF(Gridlines, __uuidof(Gridlines));
_COM_SMARTPTR_TYPEDEF(DropLines, __uuidof(DropLines));
_COM_SMARTPTR_TYPEDEF(LeaderLines, __uuidof(LeaderLines));
_COM_SMARTPTR_TYPEDEF(UpBars, __uuidof(UpBars));
_COM_SMARTPTR_TYPEDEF(DownBars, __uuidof(DownBars));
_COM_SMARTPTR_TYPEDEF(Floor, __uuidof(Floor));
_COM_SMARTPTR_TYPEDEF(Walls, __uuidof(Walls));
_COM_SMARTPTR_TYPEDEF(TickLabels, __uuidof(TickLabels));
_COM_SMARTPTR_TYPEDEF(PlotArea, __uuidof(PlotArea));
_COM_SMARTPTR_TYPEDEF(ChartArea, __uuidof(ChartArea));
_COM_SMARTPTR_TYPEDEF(Legend, __uuidof(Legend));
_COM_SMARTPTR_TYPEDEF(ErrorBars, __uuidof(ErrorBars));
_COM_SMARTPTR_TYPEDEF(DataTable, __uuidof(DataTable));
_COM_SMARTPTR_TYPEDEF(Phonetic, __uuidof(Phonetic));
_COM_SMARTPTR_TYPEDEF(Shape, __uuidof(Shape));
_COM_SMARTPTR_TYPEDEF(Shapes, __uuidof(Shapes));
_COM_SMARTPTR_TYPEDEF(ShapeRange, __uuidof(ShapeRange));
_COM_SMARTPTR_TYPEDEF(GroupShapes, __uuidof(GroupShapes));
_COM_SMARTPTR_TYPEDEF(TextFrame, __uuidof(TextFrame));
_COM_SMARTPTR_TYPEDEF(ConnectorFormat, __uuidof(ConnectorFormat));
_COM_SMARTPTR_TYPEDEF(FreeformBuilder, __uuidof(FreeformBuilder));
_COM_SMARTPTR_TYPEDEF(ControlFormat, __uuidof(ControlFormat));
_COM_SMARTPTR_TYPEDEF(OLEFormat, __uuidof(OLEFormat));
_COM_SMARTPTR_TYPEDEF(LinkFormat, __uuidof(LinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObjects, __uuidof(PublishObjects));
_COM_SMARTPTR_TYPEDEF(OLEDBError, __uuidof(OLEDBError));
_COM_SMARTPTR_TYPEDEF(OLEDBErrors, __uuidof(OLEDBErrors));
_COM_SMARTPTR_TYPEDEF(Phonetics, __uuidof(Phonetics));
_COM_SMARTPTR_TYPEDEF(PivotLayout, __uuidof(PivotLayout));
_COM_SMARTPTR_TYPEDEF(DisplayUnitLabel, __uuidof(DisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(CellFormat, __uuidof(CellFormat));
_COM_SMARTPTR_TYPEDEF(UsedObjects, __uuidof(UsedObjects));
_COM_SMARTPTR_TYPEDEF(CustomProperties, __uuidof(CustomProperties));
_COM_SMARTPTR_TYPEDEF(CustomProperty, __uuidof(CustomProperty));
_COM_SMARTPTR_TYPEDEF(CalculatedMembers, __uuidof(CalculatedMembers));
_COM_SMARTPTR_TYPEDEF(CalculatedMember, __uuidof(CalculatedMember));
_COM_SMARTPTR_TYPEDEF(Watches, __uuidof(Watches));
_COM_SMARTPTR_TYPEDEF(Watch, __uuidof(Watch));
_COM_SMARTPTR_TYPEDEF(PivotCell, __uuidof(PivotCell));
_COM_SMARTPTR_TYPEDEF(Graphic, __uuidof(Graphic));
_COM_SMARTPTR_TYPEDEF(AutoRecover, __uuidof(AutoRecover));
_COM_SMARTPTR_TYPEDEF(ErrorCheckingOptions, __uuidof(ErrorCheckingOptions));
_COM_SMARTPTR_TYPEDEF(Errors, __uuidof(Errors));
_COM_SMARTPTR_TYPEDEF(Error, __uuidof(Error));
_COM_SMARTPTR_TYPEDEF(SmartTagAction, __uuidof(SmartTagAction));
_COM_SMARTPTR_TYPEDEF(SmartTagActions, __uuidof(SmartTagActions));
_COM_SMARTPTR_TYPEDEF(SmartTag, __uuidof(SmartTag));
_COM_SMARTPTR_TYPEDEF(SmartTags, __uuidof(SmartTags));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizer, __uuidof(SmartTagRecognizer));
_COM_SMARTPTR_TYPEDEF(SmartTagRecognizers, __uuidof(SmartTagRecognizers));
_COM_SMARTPTR_TYPEDEF(SmartTagOptions, __uuidof(SmartTagOptions));
_COM_SMARTPTR_TYPEDEF(SpellingOptions, __uuidof(SpellingOptions));
_COM_SMARTPTR_TYPEDEF(Speech, __uuidof(Speech));
_COM_SMARTPTR_TYPEDEF(Protection, __uuidof(Protection));
_COM_SMARTPTR_TYPEDEF(PivotItemList, __uuidof(PivotItemList));
_COM_SMARTPTR_TYPEDEF(Tab, __uuidof(Tab));
_COM_SMARTPTR_TYPEDEF(AllowEditRanges, __uuidof(AllowEditRanges));
_COM_SMARTPTR_TYPEDEF(IProtection, __uuidof(IProtection));
_COM_SMARTPTR_TYPEDEF(AllowEditRange, __uuidof(AllowEditRange));
_COM_SMARTPTR_TYPEDEF(IAllowEditRanges, __uuidof(IAllowEditRanges));
_COM_SMARTPTR_TYPEDEF(UserAccessList, __uuidof(UserAccessList));
_COM_SMARTPTR_TYPEDEF(IAllowEditRange, __uuidof(IAllowEditRange));
_COM_SMARTPTR_TYPEDEF(UserAccess, __uuidof(UserAccess));
_COM_SMARTPTR_TYPEDEF(IUserAccessList, __uuidof(IUserAccessList));
_COM_SMARTPTR_TYPEDEF(RTD, __uuidof(RTD));
_COM_SMARTPTR_TYPEDEF(Diagram, __uuidof(Diagram));
_COM_SMARTPTR_TYPEDEF(ListObjects, __uuidof(ListObjects));
_COM_SMARTPTR_TYPEDEF(ListObject, __uuidof(ListObject));
_COM_SMARTPTR_TYPEDEF(ListColumns, __uuidof(ListColumns));
_COM_SMARTPTR_TYPEDEF(ListColumn, __uuidof(ListColumn));
_COM_SMARTPTR_TYPEDEF(ListRows, __uuidof(ListRows));
_COM_SMARTPTR_TYPEDEF(ListRow, __uuidof(ListRow));
_COM_SMARTPTR_TYPEDEF(XmlNamespace, __uuidof(XmlNamespace));
_COM_SMARTPTR_TYPEDEF(XmlNamespaces, __uuidof(XmlNamespaces));
_COM_SMARTPTR_TYPEDEF(XmlDataBinding, __uuidof(XmlDataBinding));
_COM_SMARTPTR_TYPEDEF(XmlSchema, __uuidof(XmlSchema));
_COM_SMARTPTR_TYPEDEF(XmlSchemas, __uuidof(XmlSchemas));
_COM_SMARTPTR_TYPEDEF(XmlMap, __uuidof(XmlMap));
_COM_SMARTPTR_TYPEDEF(IWorkbookEvents, __uuidof(IWorkbookEvents));
_COM_SMARTPTR_TYPEDEF(XmlMaps, __uuidof(XmlMaps));
_COM_SMARTPTR_TYPEDEF(ListDataFormat, __uuidof(ListDataFormat));
_COM_SMARTPTR_TYPEDEF(XPath, __uuidof(XPath));
_COM_SMARTPTR_TYPEDEF(IDummy, __uuidof(IDummy));
_COM_SMARTPTR_TYPEDEF(ICanvasShapes, __uuidof(ICanvasShapes));
_COM_SMARTPTR_TYPEDEF(IWindows, __uuidof(IWindows));
_COM_SMARTPTR_TYPEDEF(IWorksheetFunction, __uuidof(IWorksheetFunction));
_COM_SMARTPTR_TYPEDEF(Sheets, __uuidof(Sheets));
_COM_SMARTPTR_TYPEDEF(IHPageBreaks, __uuidof(IHPageBreaks));
_COM_SMARTPTR_TYPEDEF(IVPageBreaks, __uuidof(IVPageBreaks));
_COM_SMARTPTR_TYPEDEF(IRecentFiles, __uuidof(IRecentFiles));
_COM_SMARTPTR_TYPEDEF(_Worksheet, __uuidof(_Worksheet));
_COM_SMARTPTR_TYPEDEF(IStyle, __uuidof(IStyle));
_COM_SMARTPTR_TYPEDEF(IStyles, __uuidof(IStyles));
_COM_SMARTPTR_TYPEDEF(IBorders, __uuidof(IBorders));
_COM_SMARTPTR_TYPEDEF(IAddIn, __uuidof(IAddIn));
_COM_SMARTPTR_TYPEDEF(IAddIns, __uuidof(IAddIns));
_COM_SMARTPTR_TYPEDEF(IToolbar, __uuidof(IToolbar));
_COM_SMARTPTR_TYPEDEF(IToolbars, __uuidof(IToolbars));
_COM_SMARTPTR_TYPEDEF(IToolbarButton, __uuidof(IToolbarButton));
_COM_SMARTPTR_TYPEDEF(IToolbarButtons, __uuidof(IToolbarButtons));
_COM_SMARTPTR_TYPEDEF(IAreas, __uuidof(IAreas));
_COM_SMARTPTR_TYPEDEF(IMenuBars, __uuidof(IMenuBars));
_COM_SMARTPTR_TYPEDEF(IMenuBar, __uuidof(IMenuBar));
_COM_SMARTPTR_TYPEDEF(IMenus, __uuidof(IMenus));
_COM_SMARTPTR_TYPEDEF(IMenu, __uuidof(IMenu));
_COM_SMARTPTR_TYPEDEF(IMenuItems, __uuidof(IMenuItems));
_COM_SMARTPTR_TYPEDEF(IMenuItem, __uuidof(IMenuItem));
_COM_SMARTPTR_TYPEDEF(IDrawingObjects, __uuidof(IDrawingObjects));
_COM_SMARTPTR_TYPEDEF(IPivotCache, __uuidof(IPivotCache));
_COM_SMARTPTR_TYPEDEF(IPivotCaches, __uuidof(IPivotCaches));
_COM_SMARTPTR_TYPEDEF(IPivotFormula, __uuidof(IPivotFormula));
_COM_SMARTPTR_TYPEDEF(IPivotFormulas, __uuidof(IPivotFormulas));
_COM_SMARTPTR_TYPEDEF(IPivotTables, __uuidof(IPivotTables));
_COM_SMARTPTR_TYPEDEF(IPivotFields, __uuidof(IPivotFields));
_COM_SMARTPTR_TYPEDEF(ICalculatedFields, __uuidof(ICalculatedFields));
_COM_SMARTPTR_TYPEDEF(IPivotItem, __uuidof(IPivotItem));
_COM_SMARTPTR_TYPEDEF(IPivotItems, __uuidof(IPivotItems));
_COM_SMARTPTR_TYPEDEF(ICalculatedItems, __uuidof(ICalculatedItems));
_COM_SMARTPTR_TYPEDEF(ICharacters, __uuidof(ICharacters));
_COM_SMARTPTR_TYPEDEF(IDialogs, __uuidof(IDialogs));
_COM_SMARTPTR_TYPEDEF(IDialog, __uuidof(IDialog));
_COM_SMARTPTR_TYPEDEF(ISoundNote, __uuidof(ISoundNote));
_COM_SMARTPTR_TYPEDEF(IButton, __uuidof(IButton));
_COM_SMARTPTR_TYPEDEF(IButtons, __uuidof(IButtons));
_COM_SMARTPTR_TYPEDEF(ICheckBox, __uuidof(ICheckBox));
_COM_SMARTPTR_TYPEDEF(ICheckBoxes, __uuidof(ICheckBoxes));
_COM_SMARTPTR_TYPEDEF(IOptionButton, __uuidof(IOptionButton));
_COM_SMARTPTR_TYPEDEF(IOptionButtons, __uuidof(IOptionButtons));
_COM_SMARTPTR_TYPEDEF(IEditBox, __uuidof(IEditBox));
_COM_SMARTPTR_TYPEDEF(IEditBoxes, __uuidof(IEditBoxes));
_COM_SMARTPTR_TYPEDEF(IScrollBar, __uuidof(IScrollBar));
_COM_SMARTPTR_TYPEDEF(IScrollBars, __uuidof(IScrollBars));
_COM_SMARTPTR_TYPEDEF(IListBox, __uuidof(IListBox));
_COM_SMARTPTR_TYPEDEF(IListBoxes, __uuidof(IListBoxes));
_COM_SMARTPTR_TYPEDEF(IGroupBox, __uuidof(IGroupBox));
_COM_SMARTPTR_TYPEDEF(IGroupBoxes, __uuidof(IGroupBoxes));
_COM_SMARTPTR_TYPEDEF(IDropDown, __uuidof(IDropDown));
_COM_SMARTPTR_TYPEDEF(IDropDowns, __uuidof(IDropDowns));
_COM_SMARTPTR_TYPEDEF(ISpinner, __uuidof(ISpinner));
_COM_SMARTPTR_TYPEDEF(ISpinners, __uuidof(ISpinners));
_COM_SMARTPTR_TYPEDEF(IDialogFrame, __uuidof(IDialogFrame));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(ILabels, __uuidof(ILabels));
_COM_SMARTPTR_TYPEDEF(IPanes, __uuidof(IPanes));
_COM_SMARTPTR_TYPEDEF(IPane, __uuidof(IPane));
_COM_SMARTPTR_TYPEDEF(IScenarios, __uuidof(IScenarios));
_COM_SMARTPTR_TYPEDEF(IScenario, __uuidof(IScenario));
_COM_SMARTPTR_TYPEDEF(IGroupObject, __uuidof(IGroupObject));
_COM_SMARTPTR_TYPEDEF(IGroupObjects, __uuidof(IGroupObjects));
_COM_SMARTPTR_TYPEDEF(ILine, __uuidof(ILine));
_COM_SMARTPTR_TYPEDEF(ILines, __uuidof(ILines));
_COM_SMARTPTR_TYPEDEF(IRectangle, __uuidof(IRectangle));
_COM_SMARTPTR_TYPEDEF(IRectangles, __uuidof(IRectangles));
_COM_SMARTPTR_TYPEDEF(IOval, __uuidof(IOval));
_COM_SMARTPTR_TYPEDEF(IOvals, __uuidof(IOvals));
_COM_SMARTPTR_TYPEDEF(IArc, __uuidof(IArc));
_COM_SMARTPTR_TYPEDEF(IArcs, __uuidof(IArcs));
_COM_SMARTPTR_TYPEDEF(_IOLEObject, __uuidof(_IOLEObject));
_COM_SMARTPTR_TYPEDEF(ITextBox, __uuidof(ITextBox));
_COM_SMARTPTR_TYPEDEF(ITextBoxes, __uuidof(ITextBoxes));
_COM_SMARTPTR_TYPEDEF(IPictures, __uuidof(IPictures));
_COM_SMARTPTR_TYPEDEF(IDrawing, __uuidof(IDrawing));
_COM_SMARTPTR_TYPEDEF(IDrawings, __uuidof(IDrawings));
_COM_SMARTPTR_TYPEDEF(IRoutingSlip, __uuidof(IRoutingSlip));
_COM_SMARTPTR_TYPEDEF(IOutline, __uuidof(IOutline));
_COM_SMARTPTR_TYPEDEF(IModule, __uuidof(IModule));
_COM_SMARTPTR_TYPEDEF(IModules, __uuidof(IModules));
_COM_SMARTPTR_TYPEDEF(IDialogSheet, __uuidof(IDialogSheet));
_COM_SMARTPTR_TYPEDEF(IDialogSheets, __uuidof(IDialogSheets));
_COM_SMARTPTR_TYPEDEF(IWorksheets, __uuidof(IWorksheets));
_COM_SMARTPTR_TYPEDEF(IPageSetup, __uuidof(IPageSetup));
_COM_SMARTPTR_TYPEDEF(INames, __uuidof(INames));
_COM_SMARTPTR_TYPEDEF(IName, __uuidof(IName));
_COM_SMARTPTR_TYPEDEF(IChartObjects, __uuidof(IChartObjects));
_COM_SMARTPTR_TYPEDEF(IMailer, __uuidof(IMailer));
_COM_SMARTPTR_TYPEDEF(ICustomViews, __uuidof(ICustomViews));
_COM_SMARTPTR_TYPEDEF(ICustomView, __uuidof(ICustomView));
_COM_SMARTPTR_TYPEDEF(IFormatConditions, __uuidof(IFormatConditions));
_COM_SMARTPTR_TYPEDEF(IFormatCondition, __uuidof(IFormatCondition));
_COM_SMARTPTR_TYPEDEF(IComments, __uuidof(IComments));
_COM_SMARTPTR_TYPEDEF(IComment, __uuidof(IComment));
_COM_SMARTPTR_TYPEDEF(_IQueryTable, __uuidof(_IQueryTable));
_COM_SMARTPTR_TYPEDEF(IQueryTables, __uuidof(IQueryTables));
_COM_SMARTPTR_TYPEDEF(IParameter, __uuidof(IParameter));
_COM_SMARTPTR_TYPEDEF(IParameters, __uuidof(IParameters));
_COM_SMARTPTR_TYPEDEF(IODBCError, __uuidof(IODBCError));
_COM_SMARTPTR_TYPEDEF(IODBCErrors, __uuidof(IODBCErrors));
_COM_SMARTPTR_TYPEDEF(IValidation, __uuidof(IValidation));
_COM_SMARTPTR_TYPEDEF(IHyperlinks, __uuidof(IHyperlinks));
_COM_SMARTPTR_TYPEDEF(IHyperlink, __uuidof(IHyperlink));
_COM_SMARTPTR_TYPEDEF(IAutoFilter, __uuidof(IAutoFilter));
_COM_SMARTPTR_TYPEDEF(IFilters, __uuidof(IFilters));
_COM_SMARTPTR_TYPEDEF(IFilter, __uuidof(IFilter));
_COM_SMARTPTR_TYPEDEF(IAutoCorrect, __uuidof(IAutoCorrect));
_COM_SMARTPTR_TYPEDEF(IBorder, __uuidof(IBorder));
_COM_SMARTPTR_TYPEDEF(IInterior, __uuidof(IInterior));
_COM_SMARTPTR_TYPEDEF(IChartFillFormat, __uuidof(IChartFillFormat));
_COM_SMARTPTR_TYPEDEF(IChartColorFormat, __uuidof(IChartColorFormat));
_COM_SMARTPTR_TYPEDEF(IAxis, __uuidof(IAxis));
_COM_SMARTPTR_TYPEDEF(IChartTitle, __uuidof(IChartTitle));
_COM_SMARTPTR_TYPEDEF(IAxisTitle, __uuidof(IAxisTitle));
_COM_SMARTPTR_TYPEDEF(IChartGroup, __uuidof(IChartGroup));
_COM_SMARTPTR_TYPEDEF(IChartGroups, __uuidof(IChartGroups));
_COM_SMARTPTR_TYPEDEF(IAxes, __uuidof(IAxes));
_COM_SMARTPTR_TYPEDEF(IPoints, __uuidof(IPoints));
_COM_SMARTPTR_TYPEDEF(IPoint, __uuidof(IPoint));
_COM_SMARTPTR_TYPEDEF(ISeries, __uuidof(ISeries));
_COM_SMARTPTR_TYPEDEF(ISeriesCollection, __uuidof(ISeriesCollection));
_COM_SMARTPTR_TYPEDEF(IDataLabel, __uuidof(IDataLabel));
_COM_SMARTPTR_TYPEDEF(IDataLabels, __uuidof(IDataLabels));
_COM_SMARTPTR_TYPEDEF(ILegendEntry, __uuidof(ILegendEntry));
_COM_SMARTPTR_TYPEDEF(ILegendEntries, __uuidof(ILegendEntries));
_COM_SMARTPTR_TYPEDEF(ILegendKey, __uuidof(ILegendKey));
_COM_SMARTPTR_TYPEDEF(ITrendlines, __uuidof(ITrendlines));
_COM_SMARTPTR_TYPEDEF(ITrendline, __uuidof(ITrendline));
_COM_SMARTPTR_TYPEDEF(ICorners, __uuidof(ICorners));
_COM_SMARTPTR_TYPEDEF(ISeriesLines, __uuidof(ISeriesLines));
_COM_SMARTPTR_TYPEDEF(IHiLoLines, __uuidof(IHiLoLines));
_COM_SMARTPTR_TYPEDEF(IGridlines, __uuidof(IGridlines));
_COM_SMARTPTR_TYPEDEF(IDropLines, __uuidof(IDropLines));
_COM_SMARTPTR_TYPEDEF(ILeaderLines, __uuidof(ILeaderLines));
_COM_SMARTPTR_TYPEDEF(IUpBars, __uuidof(IUpBars));
_COM_SMARTPTR_TYPEDEF(IDownBars, __uuidof(IDownBars));
_COM_SMARTPTR_TYPEDEF(IFloor, __uuidof(IFloor));
_COM_SMARTPTR_TYPEDEF(IWalls, __uuidof(IWalls));
_COM_SMARTPTR_TYPEDEF(ITickLabels, __uuidof(ITickLabels));
_COM_SMARTPTR_TYPEDEF(IPlotArea, __uuidof(IPlotArea));
_COM_SMARTPTR_TYPEDEF(IChartArea, __uuidof(IChartArea));
_COM_SMARTPTR_TYPEDEF(ILegend, __uuidof(ILegend));
_COM_SMARTPTR_TYPEDEF(IErrorBars, __uuidof(IErrorBars));
_COM_SMARTPTR_TYPEDEF(IDataTable, __uuidof(IDataTable));
_COM_SMARTPTR_TYPEDEF(IPhonetic, __uuidof(IPhonetic));
_COM_SMARTPTR_TYPEDEF(IShapes, __uuidof(IShapes));
_COM_SMARTPTR_TYPEDEF(IGroupShapes, __uuidof(IGroupShapes));
_COM_SMARTPTR_TYPEDEF(ITextFrame, __uuidof(ITextFrame));
_COM_SMARTPTR_TYPEDEF(IConnectorFormat, __uuidof(IConnectorFormat));
_COM_SMARTPTR_TYPEDEF(IFreeformBuilder, __uuidof(IFreeformBuilder));
_COM_SMARTPTR_TYPEDEF(IControlFormat, __uuidof(IControlFormat));
_COM_SMARTPTR_TYPEDEF(IOLEFormat, __uuidof(IOLEFormat));
_COM_SMARTPTR_TYPEDEF(ILinkFormat, __uuidof(ILinkFormat));
_COM_SMARTPTR_TYPEDEF(PublishObject, __uuidof(PublishObject));
_COM_SMARTPTR_TYPEDEF(IPublishObjects, __uuidof(IPublishObjects));
_COM_SMARTPTR_TYPEDEF(IOLEDBError, __uuidof(IOLEDBError));
_COM_SMARTPTR_TYPEDEF(IOLEDBErrors, __uuidof(IOLEDBErrors));
_COM_SMARTPTR_TYPEDEF(IPhonetics, __uuidof(IPhonetics));
_COM_SMARTPTR_TYPEDEF(DefaultWebOptions, __uuidof(DefaultWebOptions));
_COM_SMARTPTR_TYPEDEF(WebOptions, __uuidof(WebOptions));
_COM_SMARTPTR_TYPEDEF(TreeviewControl, __uuidof(TreeviewControl));
_COM_SMARTPTR_TYPEDEF(CubeField, __uuidof(CubeField));
_COM_SMARTPTR_TYPEDEF(IPivotField, __uuidof(IPivotField));
_COM_SMARTPTR_TYPEDEF(CubeFields, __uuidof(CubeFields));
_COM_SMARTPTR_TYPEDEF(IPivotTable, __uuidof(IPivotTable));
_COM_SMARTPTR_TYPEDEF(IPivotLayout, __uuidof(IPivotLayout));
_COM_SMARTPTR_TYPEDEF(IDisplayUnitLabel, __uuidof(IDisplayUnitLabel));
_COM_SMARTPTR_TYPEDEF(ICellFormat, __uuidof(ICellFormat));
_COM_SMARTPTR_TYPEDEF(IUsedObjects, __uuidof(IUsedObjects));
_COM_SMARTPTR_TYPEDEF(ICustomProperties, __uuidof(ICustomProperties));
_COM_SMARTPTR_TYPEDEF(ICustomProperty, __uuidof(ICustomProperty));
_COM_SMARTPTR_TYPEDEF(ICalculatedMembers, __uuidof(ICalculatedMembers));
_COM_SMARTPTR_TYPEDEF(ICalculatedMember, __uuidof(ICalculatedMember));
_COM_SMARTPTR_TYPEDEF(IWatches, __uuidof(IWatches));
_COM_SMARTPTR_TYPEDEF(IWatch, __uuidof(IWatch));
_COM_SMARTPTR_TYPEDEF(IPivotCell, __uuidof(IPivotCell));
_COM_SMARTPTR_TYPEDEF(IGraphic, __uuidof(IGraphic));
_COM_SMARTPTR_TYPEDEF(IAutoRecover, __uuidof(IAutoRecover));
_COM_SMARTPTR_TYPEDEF(IErrorCheckingOptions, __uuidof(IErrorCheckingOptions));
_COM_SMARTPTR_TYPEDEF(IErrors, __uuidof(IErrors));
_COM_SMARTPTR_TYPEDEF(IError, __uuidof(IError));
_COM_SMARTPTR_TYPEDEF(ISmartTagAction, __uuidof(ISmartTagAction));
_COM_SMARTPTR_TYPEDEF(ISmartTagActions, __uuidof(ISmartTagActions));
_COM_SMARTPTR_TYPEDEF(ISmartTag, __uuidof(ISmartTag));
_COM_SMARTPTR_TYPEDEF(ISmartTags, __uuidof(ISmartTags));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizer, __uuidof(ISmartTagRecognizer));
_COM_SMARTPTR_TYPEDEF(ISmartTagRecognizers, __uuidof(ISmartTagRecognizers));
_COM_SMARTPTR_TYPEDEF(ISmartTagOptions, __uuidof(ISmartTagOptions));
_COM_SMARTPTR_TYPEDEF(IPivotItemList, __uuidof(IPivotItemList));
_COM_SMARTPTR_TYPEDEF(ITab, __uuidof(ITab));
_COM_SMARTPTR_TYPEDEF(IListObjects, __uuidof(IListObjects));
_COM_SMARTPTR_TYPEDEF(IListObject, __uuidof(IListObject));
_COM_SMARTPTR_TYPEDEF(IListColumns, __uuidof(IListColumns));
_COM_SMARTPTR_TYPEDEF(IListColumn, __uuidof(IListColumn));
_COM_SMARTPTR_TYPEDEF(IListRows, __uuidof(IListRows));
_COM_SMARTPTR_TYPEDEF(IListRow, __uuidof(IListRow));
_COM_SMARTPTR_TYPEDEF(IXmlNamespace, __uuidof(IXmlNamespace));
_COM_SMARTPTR_TYPEDEF(IXmlNamespaces, __uuidof(IXmlNamespaces));
_COM_SMARTPTR_TYPEDEF(IXmlDataBinding, __uuidof(IXmlDataBinding));
_COM_SMARTPTR_TYPEDEF(IXmlSchema, __uuidof(IXmlSchema));
_COM_SMARTPTR_TYPEDEF(IXmlSchemas, __uuidof(IXmlSchemas));
_COM_SMARTPTR_TYPEDEF(IXmlMap, __uuidof(IXmlMap));
_COM_SMARTPTR_TYPEDEF(IXmlMaps, __uuidof(IXmlMaps));
_COM_SMARTPTR_TYPEDEF(IListDataFormat, __uuidof(IListDataFormat));
_COM_SMARTPTR_TYPEDEF(IXPath, __uuidof(IXPath));
_COM_SMARTPTR_TYPEDEF(IWindow, __uuidof(IWindow));
_COM_SMARTPTR_TYPEDEF(_Chart, __uuidof(_Chart));
_COM_SMARTPTR_TYPEDEF(_Workbook, __uuidof(_Workbook));
_COM_SMARTPTR_TYPEDEF(ICharts, __uuidof(ICharts));
_COM_SMARTPTR_TYPEDEF(IChartObject, __uuidof(IChartObject));
_COM_SMARTPTR_TYPEDEF(IRange, __uuidof(IRange));
_COM_SMARTPTR_TYPEDEF(IVPageBreak, __uuidof(IVPageBreak));
_COM_SMARTPTR_TYPEDEF(IHPageBreak, __uuidof(IHPageBreak));
_COM_SMARTPTR_TYPEDEF(IAppEvents, __uuidof(IAppEvents));
_COM_SMARTPTR_TYPEDEF(IRecentFile, __uuidof(IRecentFile));
_COM_SMARTPTR_TYPEDEF(Workbooks, __uuidof(Workbooks));
_COM_SMARTPTR_TYPEDEF(_Application, __uuidof(_Application));
_COM_SMARTPTR_TYPEDEF(_Global, __uuidof(_Global));
_COM_SMARTPTR_TYPEDEF(IOLEObjects, __uuidof(IOLEObjects));
_COM_SMARTPTR_TYPEDEF(DiagramNodes, __uuidof(DiagramNodes));
_COM_SMARTPTR_TYPEDEF(IDiagram, __uuidof(IDiagram));
_COM_SMARTPTR_TYPEDEF(DiagramNodeChildren, __uuidof(DiagramNodeChildren));
_COM_SMARTPTR_TYPEDEF(DiagramNode, __uuidof(DiagramNode));
_COM_SMARTPTR_TYPEDEF(IShape, __uuidof(IShape));
_COM_SMARTPTR_TYPEDEF(IShapeRange, __uuidof(IShapeRange));

//
// Type library items
//

struct __declspec(uuid("000c0310-0000-0000-c000-000000000046"))
Adjustments : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    float Item[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    float GetItem (
        int Index );
    void PutItem (
        int Index,
        float Val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ int Index,
        /*[out,retval]*/ float * Val ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ int Index,
        /*[in]*/ float Val ) = 0;
};

struct __declspec(uuid("000c0311-0000-0000-c000-000000000046"))
CalloutFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoLength))
    enum Office::MsoTriState AutoLength;
    __declspec(property(get=GetDrop))
    float Drop;
    __declspec(property(get=GetDropType))
    enum Office::MsoCalloutDropType DropType;
    __declspec(property(get=GetGap,put=PutGap))
    float Gap;
    __declspec(property(get=GetLength))
    float Length;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT AutomaticLength ( );
    HRESULT CustomDrop (
        float Drop );
    HRESULT CustomLength (
        float Length );
    HRESULT PresetDrop (
        enum Office::MsoCalloutDropType DropType );
    enum Office::MsoTriState GetAccent ( );
    void PutAccent (
        enum Office::MsoTriState Accent );
    enum Office::MsoCalloutAngleType GetAngle ( );
    void PutAngle (
        enum Office::MsoCalloutAngleType Angle );
    enum Office::MsoTriState GetAutoAttach ( );
    void PutAutoAttach (
        enum Office::MsoTriState AutoAttach );
    enum Office::MsoTriState GetAutoLength ( );
    enum Office::MsoTriState GetBorder ( );
    void PutBorder (
        enum Office::MsoTriState Border );
    float GetDrop ( );
    enum Office::MsoCalloutDropType GetDropType ( );
    float GetGap ( );
    void PutGap (
        float Gap );
    float GetLength ( );
    enum Office::MsoCalloutType GetType ( );
    void PutType (
        enum Office::MsoCalloutType Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AutomaticLength ( ) = 0;
      virtual HRESULT __stdcall raw_CustomDrop (
        /*[in]*/ float Drop ) = 0;
      virtual HRESULT __stdcall raw_CustomLength (
        /*[in]*/ float Length ) = 0;
      virtual HRESULT __stdcall raw_PresetDrop (
        /*[in]*/ enum Office::MsoCalloutDropType DropType ) = 0;
      virtual HRESULT __stdcall get_Accent (
        /*[out,retval]*/ enum Office::MsoTriState * Accent ) = 0;
      virtual HRESULT __stdcall put_Accent (
        /*[in]*/ enum Office::MsoTriState Accent ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ enum Office::MsoCalloutAngleType * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ enum Office::MsoCalloutAngleType Angle ) = 0;
      virtual HRESULT __stdcall get_AutoAttach (
        /*[out,retval]*/ enum Office::MsoTriState * AutoAttach ) = 0;
      virtual HRESULT __stdcall put_AutoAttach (
        /*[in]*/ enum Office::MsoTriState AutoAttach ) = 0;
      virtual HRESULT __stdcall get_AutoLength (
        /*[out,retval]*/ enum Office::MsoTriState * AutoLength ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ enum Office::MsoTriState * Border ) = 0;
      virtual HRESULT __stdcall put_Border (
        /*[in]*/ enum Office::MsoTriState Border ) = 0;
      virtual HRESULT __stdcall get_Drop (
        /*[out,retval]*/ float * Drop ) = 0;
      virtual HRESULT __stdcall get_DropType (
        /*[out,retval]*/ enum Office::MsoCalloutDropType * DropType ) = 0;
      virtual HRESULT __stdcall get_Gap (
        /*[out,retval]*/ float * Gap ) = 0;
      virtual HRESULT __stdcall put_Gap (
        /*[in]*/ float Gap ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ float * Length ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoCalloutType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoCalloutType Type ) = 0;
};

struct __declspec(uuid("000c0312-0000-0000-c000-000000000046"))
ColorFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    int SchemeColor;
    __declspec(property(get=GetType))
    enum Office::MsoColorType Type;
    __declspec(property(get=GetTintAndShade,put=PutTintAndShade))
    float TintAndShade;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    Office::MsoRGBType GetRGBEx ( );
    void PutRGBEx (
        Office::MsoRGBType RGBEx );
    int GetSchemeColor ( );
    void PutSchemeColor (
        int SchemeColor );
    enum Office::MsoColorType GetType ( );
    float GetTintAndShade ( );
    void PutTintAndShade (
        float pValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_RGBEx (
        /*[out,retval]*/ Office::MsoRGBType * RGBEx ) = 0;
      virtual HRESULT __stdcall put_RGBEx (
        /*[in]*/ Office::MsoRGBType RGBEx ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ int * SchemeColor ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ int SchemeColor ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoColorType * Type ) = 0;
      virtual HRESULT __stdcall get_TintAndShade (
        /*[out,retval]*/ float * pValue ) = 0;
      virtual HRESULT __stdcall put_TintAndShade (
        /*[in]*/ float pValue ) = 0;
};

struct __declspec(uuid("000c0317-0000-0000-c000-000000000046"))
LineFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetWeight,put=PutWeight))
    float Weight;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    enum Office::MsoArrowheadLength GetBeginArrowheadLength ( );
    void PutBeginArrowheadLength (
        enum Office::MsoArrowheadLength BeginArrowheadLength );
    enum Office::MsoArrowheadStyle GetBeginArrowheadStyle ( );
    void PutBeginArrowheadStyle (
        enum Office::MsoArrowheadStyle BeginArrowheadStyle );
    enum Office::MsoArrowheadWidth GetBeginArrowheadWidth ( );
    void PutBeginArrowheadWidth (
        enum Office::MsoArrowheadWidth BeginArrowheadWidth );
    enum Office::MsoLineDashStyle GetDashStyle ( );
    void PutDashStyle (
        enum Office::MsoLineDashStyle DashStyle );
    enum Office::MsoArrowheadLength GetEndArrowheadLength ( );
    void PutEndArrowheadLength (
        enum Office::MsoArrowheadLength EndArrowheadLength );
    enum Office::MsoArrowheadStyle GetEndArrowheadStyle ( );
    void PutEndArrowheadStyle (
        enum Office::MsoArrowheadStyle EndArrowheadStyle );
    enum Office::MsoArrowheadWidth GetEndArrowheadWidth ( );
    void PutEndArrowheadWidth (
        enum Office::MsoArrowheadWidth EndArrowheadWidth );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoPatternType GetPattern ( );
    void PutPattern (
        enum Office::MsoPatternType Pattern );
    enum Office::MsoLineStyle GetStyle ( );
    void PutStyle (
        enum Office::MsoLineStyle Style );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );
    float GetWeight ( );
    void PutWeight (
        float Weight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength BeginArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle BeginArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_BeginArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_BeginArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth BeginArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_DashStyle (
        /*[out,retval]*/ enum Office::MsoLineDashStyle * DashStyle ) = 0;
      virtual HRESULT __stdcall put_DashStyle (
        /*[in]*/ enum Office::MsoLineDashStyle DashStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadLength (
        /*[out,retval]*/ enum Office::MsoArrowheadLength * EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadLength (
        /*[in]*/ enum Office::MsoArrowheadLength EndArrowheadLength ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadStyle (
        /*[out,retval]*/ enum Office::MsoArrowheadStyle * EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadStyle (
        /*[in]*/ enum Office::MsoArrowheadStyle EndArrowheadStyle ) = 0;
      virtual HRESULT __stdcall get_EndArrowheadWidth (
        /*[out,retval]*/ enum Office::MsoArrowheadWidth * EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall put_EndArrowheadWidth (
        /*[in]*/ enum Office::MsoArrowheadWidth EndArrowheadWidth ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum Office::MsoLineStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum Office::MsoLineStyle Style ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ float * Weight ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ float Weight ) = 0;
};

struct __declspec(uuid("000c0318-0000-0000-c000-000000000046"))
ShapeNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEditingType))
    enum Office::MsoEditingType EditingType;
    __declspec(property(get=GetPoints))
    _variant_t Points;
    __declspec(property(get=GetSegmentType))
    enum Office::MsoSegmentType SegmentType;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    enum Office::MsoEditingType GetEditingType ( );
    _variant_t GetPoints ( );
    enum Office::MsoSegmentType GetSegmentType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_EditingType (
        /*[out,retval]*/ enum Office::MsoEditingType * EditingType ) = 0;
      virtual HRESULT __stdcall get_Points (
        /*[out,retval]*/ VARIANT * Points ) = 0;
      virtual HRESULT __stdcall get_SegmentType (
        /*[out,retval]*/ enum Office::MsoSegmentType * SegmentType ) = 0;
};

struct __declspec(uuid("000c0319-0000-0000-c000-000000000046"))
ShapeNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    int GetCount ( );
    ShapeNodePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete (
        int Index );
    HRESULT Insert (
        int Index,
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        float X2,
        float Y2,
        float X3,
        float Y3 );
    HRESULT SetEditingType (
        int Index,
        enum Office::MsoEditingType EditingType );
    HRESULT SetPosition (
        int Index,
        float X1,
        float Y1 );
    HRESULT SetSegmentType (
        int Index,
        enum Office::MsoSegmentType SegmentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeNode * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * _NewEnum ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ int Index ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ float X2,
        /*[in]*/ float Y2,
        /*[in]*/ float X3,
        /*[in]*/ float Y3 ) = 0;
      virtual HRESULT __stdcall raw_SetEditingType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoEditingType EditingType ) = 0;
      virtual HRESULT __stdcall raw_SetPosition (
        /*[in]*/ int Index,
        /*[in]*/ float X1,
        /*[in]*/ float Y1 ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentType (
        /*[in]*/ int Index,
        /*[in]*/ enum Office::MsoSegmentType SegmentType ) = 0;
};

struct __declspec(uuid("000c031a-0000-0000-c000-000000000046"))
PictureFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementBrightness (
        float Increment );
    HRESULT IncrementContrast (
        float Increment );
    float GetBrightness ( );
    void PutBrightness (
        float Brightness );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType ColorType );
    float GetContrast ( );
    void PutContrast (
        float Contrast );
    float GetCropBottom ( );
    void PutCropBottom (
        float CropBottom );
    float GetCropLeft ( );
    void PutCropLeft (
        float CropLeft );
    float GetCropRight ( );
    void PutCropRight (
        float CropRight );
    float GetCropTop ( );
    void PutCropTop (
        float CropTop );
    Office::MsoRGBType GetTransparencyColor ( );
    void PutTransparencyColor (
        Office::MsoRGBType TransparencyColor );
    enum Office::MsoTriState GetTransparentBackground ( );
    void PutTransparentBackground (
        enum Office::MsoTriState TransparentBackground );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementBrightness (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementContrast (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * Brightness ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float Brightness ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * ColorType ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType ColorType ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * Contrast ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float Contrast ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * CropBottom ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float CropBottom ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * CropLeft ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float CropLeft ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * CropRight ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float CropRight ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * CropTop ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float CropTop ) = 0;
      virtual HRESULT __stdcall get_TransparencyColor (
        /*[out,retval]*/ Office::MsoRGBType * TransparencyColor ) = 0;
      virtual HRESULT __stdcall put_TransparencyColor (
        /*[in]*/ Office::MsoRGBType TransparencyColor ) = 0;
      virtual HRESULT __stdcall get_TransparentBackground (
        /*[out,retval]*/ enum Office::MsoTriState * TransparentBackground ) = 0;
      virtual HRESULT __stdcall put_TransparentBackground (
        /*[in]*/ enum Office::MsoTriState TransparentBackground ) = 0;
};

struct __declspec(uuid("000c031b-0000-0000-c000-000000000046"))
ShadowFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetOffsetX,put=PutOffsetX))
    float OffsetX;
    __declspec(property(get=GetOffsetY,put=PutOffsetY))
    float OffsetY;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementOffsetX (
        float Increment );
    HRESULT IncrementOffsetY (
        float Increment );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoTriState GetObscured ( );
    void PutObscured (
        enum Office::MsoTriState Obscured );
    float GetOffsetX ( );
    void PutOffsetX (
        float OffsetX );
    float GetOffsetY ( );
    void PutOffsetY (
        float OffsetY );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoShadowType GetType ( );
    void PutType (
        enum Office::MsoShadowType Type );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementOffsetY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_Obscured (
        /*[out,retval]*/ enum Office::MsoTriState * Obscured ) = 0;
      virtual HRESULT __stdcall put_Obscured (
        /*[in]*/ enum Office::MsoTriState Obscured ) = 0;
      virtual HRESULT __stdcall get_OffsetX (
        /*[out,retval]*/ float * OffsetX ) = 0;
      virtual HRESULT __stdcall put_OffsetX (
        /*[in]*/ float OffsetX ) = 0;
      virtual HRESULT __stdcall get_OffsetY (
        /*[out,retval]*/ float * OffsetY ) = 0;
      virtual HRESULT __stdcall put_OffsetY (
        /*[in]*/ float OffsetY ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShadowType * Type ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoShadowType Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c031f-0000-0000-c000-000000000046"))
TextEffectFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetFontSize,put=PutFontSize))
    float FontSize;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetTracking,put=PutTracking))
    float Tracking;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT ToggleVerticalText ( );
    enum Office::MsoTextEffectAlignment GetAlignment ( );
    void PutAlignment (
        enum Office::MsoTextEffectAlignment Alignment );
    enum Office::MsoTriState GetFontBold ( );
    void PutFontBold (
        enum Office::MsoTriState FontBold );
    enum Office::MsoTriState GetFontItalic ( );
    void PutFontItalic (
        enum Office::MsoTriState FontItalic );
    _bstr_t GetFontName ( );
    void PutFontName (
        _bstr_t FontName );
    float GetFontSize ( );
    void PutFontSize (
        float FontSize );
    enum Office::MsoTriState GetKernedPairs ( );
    void PutKernedPairs (
        enum Office::MsoTriState KernedPairs );
    enum Office::MsoTriState GetNormalizedHeight ( );
    void PutNormalizedHeight (
        enum Office::MsoTriState NormalizedHeight );
    enum Office::MsoPresetTextEffectShape GetPresetShape ( );
    void PutPresetShape (
        enum Office::MsoPresetTextEffectShape PresetShape );
    enum Office::MsoPresetTextEffect GetPresetTextEffect ( );
    void PutPresetTextEffect (
        enum Office::MsoPresetTextEffect Preset );
    enum Office::MsoTriState GetRotatedChars ( );
    void PutRotatedChars (
        enum Office::MsoTriState RotatedChars );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t Text );
    float GetTracking ( );
    void PutTracking (
        float Tracking );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_ToggleVerticalText ( ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum Office::MsoTextEffectAlignment * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum Office::MsoTextEffectAlignment Alignment ) = 0;
      virtual HRESULT __stdcall get_FontBold (
        /*[out,retval]*/ enum Office::MsoTriState * FontBold ) = 0;
      virtual HRESULT __stdcall put_FontBold (
        /*[in]*/ enum Office::MsoTriState FontBold ) = 0;
      virtual HRESULT __stdcall get_FontItalic (
        /*[out,retval]*/ enum Office::MsoTriState * FontItalic ) = 0;
      virtual HRESULT __stdcall put_FontItalic (
        /*[in]*/ enum Office::MsoTriState FontItalic ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_FontSize (
        /*[out,retval]*/ float * FontSize ) = 0;
      virtual HRESULT __stdcall put_FontSize (
        /*[in]*/ float FontSize ) = 0;
      virtual HRESULT __stdcall get_KernedPairs (
        /*[out,retval]*/ enum Office::MsoTriState * KernedPairs ) = 0;
      virtual HRESULT __stdcall put_KernedPairs (
        /*[in]*/ enum Office::MsoTriState KernedPairs ) = 0;
      virtual HRESULT __stdcall get_NormalizedHeight (
        /*[out,retval]*/ enum Office::MsoTriState * NormalizedHeight ) = 0;
      virtual HRESULT __stdcall put_NormalizedHeight (
        /*[in]*/ enum Office::MsoTriState NormalizedHeight ) = 0;
      virtual HRESULT __stdcall get_PresetShape (
        /*[out,retval]*/ enum Office::MsoPresetTextEffectShape * PresetShape ) = 0;
      virtual HRESULT __stdcall put_PresetShape (
        /*[in]*/ enum Office::MsoPresetTextEffectShape PresetShape ) = 0;
      virtual HRESULT __stdcall get_PresetTextEffect (
        /*[out,retval]*/ enum Office::MsoPresetTextEffect * Preset ) = 0;
      virtual HRESULT __stdcall put_PresetTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect Preset ) = 0;
      virtual HRESULT __stdcall get_RotatedChars (
        /*[out,retval]*/ enum Office::MsoTriState * RotatedChars ) = 0;
      virtual HRESULT __stdcall put_RotatedChars (
        /*[in]*/ enum Office::MsoTriState RotatedChars ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Tracking (
        /*[out,retval]*/ float * Tracking ) = 0;
      virtual HRESULT __stdcall put_Tracking (
        /*[in]*/ float Tracking ) = 0;
};

struct __declspec(uuid("000c0321-0000-0000-c000-000000000046"))
ThreeDFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDepth,put=PutDepth))
    float Depth;
    __declspec(property(get=GetExtrusionColor))
    ColorFormatPtr ExtrusionColor;
    __declspec(property(get=GetPresetExtrusionDirection))
    enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection;
    __declspec(property(get=GetPresetThreeDFormat))
    enum Office::MsoPresetThreeDFormat PresetThreeDFormat;
    __declspec(property(get=GetRotationX,put=PutRotationX))
    float RotationX;
    __declspec(property(get=GetRotationY,put=PutRotationY))
    float RotationY;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT IncrementRotationX (
        float Increment );
    HRESULT IncrementRotationY (
        float Increment );
    HRESULT ResetRotation ( );
    HRESULT SetThreeDFormat (
        enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
    HRESULT SetExtrusionDirection (
        enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
    float GetDepth ( );
    void PutDepth (
        float Depth );
    ColorFormatPtr GetExtrusionColor ( );
    enum Office::MsoExtrusionColorType GetExtrusionColorType ( );
    void PutExtrusionColorType (
        enum Office::MsoExtrusionColorType ExtrusionColorType );
    enum Office::MsoTriState GetPerspective ( );
    void PutPerspective (
        enum Office::MsoTriState Perspective );
    enum Office::MsoPresetExtrusionDirection GetPresetExtrusionDirection ( );
    enum Office::MsoPresetLightingDirection GetPresetLightingDirection ( );
    void PutPresetLightingDirection (
        enum Office::MsoPresetLightingDirection PresetLightingDirection );
    enum Office::MsoPresetLightingSoftness GetPresetLightingSoftness ( );
    void PutPresetLightingSoftness (
        enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
    enum Office::MsoPresetMaterial GetPresetMaterial ( );
    void PutPresetMaterial (
        enum Office::MsoPresetMaterial PresetMaterial );
    enum Office::MsoPresetThreeDFormat GetPresetThreeDFormat ( );
    float GetRotationX ( );
    void PutRotationX (
        float RotationX );
    float GetRotationY ( );
    void PutRotationY (
        float RotationY );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationX (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotationY (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_ResetRotation ( ) = 0;
      virtual HRESULT __stdcall raw_SetThreeDFormat (
        /*[in]*/ enum Office::MsoPresetThreeDFormat PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall raw_SetExtrusionDirection (
        /*[in]*/ enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ float * Depth ) = 0;
      virtual HRESULT __stdcall put_Depth (
        /*[in]*/ float Depth ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColor (
        /*[out,retval]*/ struct ColorFormat * * ExtrusionColor ) = 0;
      virtual HRESULT __stdcall get_ExtrusionColorType (
        /*[out,retval]*/ enum Office::MsoExtrusionColorType * ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall put_ExtrusionColorType (
        /*[in]*/ enum Office::MsoExtrusionColorType ExtrusionColorType ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ enum Office::MsoTriState * Perspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ enum Office::MsoTriState Perspective ) = 0;
      virtual HRESULT __stdcall get_PresetExtrusionDirection (
        /*[out,retval]*/ enum Office::MsoPresetExtrusionDirection * PresetExtrusionDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingDirection (
        /*[out,retval]*/ enum Office::MsoPresetLightingDirection * PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall put_PresetLightingDirection (
        /*[in]*/ enum Office::MsoPresetLightingDirection PresetLightingDirection ) = 0;
      virtual HRESULT __stdcall get_PresetLightingSoftness (
        /*[out,retval]*/ enum Office::MsoPresetLightingSoftness * PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall put_PresetLightingSoftness (
        /*[in]*/ enum Office::MsoPresetLightingSoftness PresetLightingSoftness ) = 0;
      virtual HRESULT __stdcall get_PresetMaterial (
        /*[out,retval]*/ enum Office::MsoPresetMaterial * PresetMaterial ) = 0;
      virtual HRESULT __stdcall put_PresetMaterial (
        /*[in]*/ enum Office::MsoPresetMaterial PresetMaterial ) = 0;
      virtual HRESULT __stdcall get_PresetThreeDFormat (
        /*[out,retval]*/ enum Office::MsoPresetThreeDFormat * PresetThreeDFormat ) = 0;
      virtual HRESULT __stdcall get_RotationX (
        /*[out,retval]*/ float * RotationX ) = 0;
      virtual HRESULT __stdcall put_RotationX (
        /*[in]*/ float RotationX ) = 0;
      virtual HRESULT __stdcall get_RotationY (
        /*[out,retval]*/ float * RotationY ) = 0;
      virtual HRESULT __stdcall put_RotationY (
        /*[in]*/ float RotationY ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("000c0314-0000-0000-c000-000000000046"))
FillFormat : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    ColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    ColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    int GradientVariant;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;
    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetTransparency,put=PutTransparency))
    float Transparency;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    HRESULT Background ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        float Degree );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        int Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        int Variant );
    HRESULT UserPicture (
        _bstr_t PictureFile );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    ColorFormatPtr GetBackColor ( );
    void PutBackColor (
        struct ColorFormat * BackColor );
    ColorFormatPtr GetForeColor ( );
    void PutForeColor (
        struct ColorFormat * ForeColor );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    int GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    float GetTransparency ( );
    void PutTransparency (
        float Transparency );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Background ( ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ int Variant ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ BSTR PictureFile ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ColorFormat * * BackColor ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ struct ColorFormat * BackColor ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ColorFormat * * ForeColor ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ struct ColorFormat * ForeColor ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * GradientColorType ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * GradientDegree ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * GradientStyle ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ int * GradientVariant ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * Pattern ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * PresetTexture ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * TextureName ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * TextureType ) = 0;
      virtual HRESULT __stdcall get_Transparency (
        /*[out,retval]*/ float * Transparency ) = 0;
      virtual HRESULT __stdcall put_Transparency (
        /*[in]*/ float Transparency ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState Visible ) = 0;
};

struct __declspec(uuid("a43788c1-d91b-11d3-8f39-00c04f3651b8"))
IRTDUpdateEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHeartbeatInterval,put=PutHeartbeatInterval))
    long HeartbeatInterval;

    //
    // Wrapper methods for error-handling
    //

    HRESULT UpdateNotify ( );
    long GetHeartbeatInterval ( );
    void PutHeartbeatInterval (
        long plRetVal );
    HRESULT Disconnect ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_UpdateNotify ( ) = 0;
      virtual HRESULT __stdcall get_HeartbeatInterval (
        /*[out,retval]*/ long * plRetVal ) = 0;
      virtual HRESULT __stdcall put_HeartbeatInterval (
        /*[in]*/ long plRetVal ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
};

struct __declspec(uuid("ec0e6191-db51-11d3-8f3e-00c04f3651b8"))
IRtdServer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    long ServerStart (
        struct IRTDUpdateEvent * CallbackObject );
    _variant_t ConnectData (
        long TopicID,
        SAFEARRAY * * Strings,
        VARIANT_BOOL * GetNewValues );
    SAFEARRAY * RefreshData (
        long * TopicCount );
    HRESULT DisconnectData (
        long TopicID );
    long Heartbeat ( );
    HRESULT ServerTerminate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ServerStart (
        /*[in]*/ struct IRTDUpdateEvent * CallbackObject,
        /*[out,retval]*/ long * pfRes ) = 0;
      virtual HRESULT __stdcall raw_ConnectData (
        /*[in]*/ long TopicID,
        /*[in]*/ SAFEARRAY * * Strings,
        /*[in,out]*/ VARIANT_BOOL * GetNewValues,
        /*[out,retval]*/ VARIANT * pvarOut ) = 0;
      virtual HRESULT __stdcall raw_RefreshData (
        /*[in,out]*/ long * TopicCount,
        /*[out,retval]*/ SAFEARRAY * * parrayOut ) = 0;
      virtual HRESULT __stdcall raw_DisconnectData (
        /*[in]*/ long TopicID ) = 0;
      virtual HRESULT __stdcall raw_Heartbeat (
        /*[out,retval]*/ long * pfRes ) = 0;
      virtual HRESULT __stdcall raw_ServerTerminate ( ) = 0;
};

enum Constants
{
    xlAll = -4104,
    xlAutomatic = -4105,
    xlBoth = 1,
    xlCenter = -4108,
    xlChecker = 9,
    xlCircle = 8,
    xlCorner = 2,
    xlCrissCross = 16,
    xlCross = 4,
    xlDiamond = 2,
    xlDistributed = -4117,
    xlDoubleAccounting = 5,
    xlFixedValue = 1,
    xlFormats = -4122,
    xlGray16 = 17,
    xlGray8 = 18,
    xlGrid = 15,
    xlHigh = -4127,
    xlInside = 2,
    xlJustify = -4130,
    xlLightDown = 13,
    xlLightHorizontal = 11,
    xlLightUp = 14,
    xlLightVertical = 12,
    xlLow = -4134,
    xlManual = -4135,
    xlMinusValues = 3,
    xlModule = -4141,
    xlNextToAxis = 4,
    xlNone = -4142,
    xlNotes = -4144,
    xlOff = -4146,
    xlOn = 1,
    xlPercent = 2,
    xlPlus = 9,
    xlPlusValues = 2,
    xlSemiGray75 = 10,
    xlShowLabel = 4,
    xlShowLabelAndPercent = 5,
    xlShowPercent = 3,
    xlShowValue = 2,
    xlSimple = -4154,
    xlSingle = 2,
    xlSingleAccounting = 4,
    xlSolid = 1,
    xlSquare = 1,
    xlStar = 5,
    xlStError = 4,
    xlToolbarButton = 2,
    xlTriangle = 3,
    xlGray25 = -4124,
    xlGray50 = -4125,
    xlGray75 = -4126,
    xlBottom = -4107,
    xlLeft = -4131,
    xlRight = -4152,
    xlTop = -4160,
    xl3DBar = -4099,
    xl3DSurface = -4103,
    xlBar = 2,
    xlColumn = 3,
    xlCombination = -4111,
    xlCustom = -4114,
    xlDefaultAutoFormat = -1,
    xlMaximum = 2,
    xlMinimum = 4,
    xlOpaque = 3,
    xlTransparent = 2,
    xlBidi = -5000,
    xlLatin = -5001,
    xlContext = -5002,
    xlLTR = -5003,
    xlRTL = -5004,
    xlFullScript = 1,
    xlPartialScript = 2,
    xlMixedScript = 3,
    xlMixedAuthorizedScript = 4,
    xlVisualCursor = 2,
    xlLogicalCursor = 1,
    xlSystem = 1,
    xlPartial = 3,
    xlHindiNumerals = 3,
    xlBidiCalendar = 3,
    xlGregorian = 2,
    xlComplete = 4,
    xlScale = 3,
    xlClosed = 3,
    xlColor1 = 7,
    xlColor2 = 8,
    xlColor3 = 9,
    xlConstants = 2,
    xlContents = 2,
    xlBelow = 1,
    xlCascade = 7,
    xlCenterAcrossSelection = 7,
    xlChart4 = 2,
    xlChartSeries = 17,
    xlChartShort = 6,
    xlChartTitles = 18,
    xlClassic1 = 1,
    xlClassic2 = 2,
    xlClassic3 = 3,
    xl3DEffects1 = 13,
    xl3DEffects2 = 14,
    xlAbove = 0,
    xlAccounting1 = 4,
    xlAccounting2 = 5,
    xlAccounting3 = 6,
    xlAccounting4 = 17,
    xlAdd = 2,
    xlDebugCodePane = 13,
    xlDesktop = 9,
    xlDirect = 1,
    xlDivide = 5,
    xlDoubleClosed = 5,
    xlDoubleOpen = 4,
    xlDoubleQuote = 1,
    xlEntireChart = 20,
    xlExcelMenus = 1,
    xlExtended = 3,
    xlFill = 5,
    xlFirst = 0,
    xlFloating = 5,
    xlFormula = 5,
    xlGeneral = 1,
    xlGridline = 22,
    xlIcons = 1,
    xlImmediatePane = 12,
    xlInteger = 2,
    xlLast = 1,
    xlLastCell = 11,
    xlList1 = 10,
    xlList2 = 11,
    xlList3 = 12,
    xlLocalFormat1 = 15,
    xlLocalFormat2 = 16,
    xlLong = 3,
    xlLotusHelp = 2,
    xlMacrosheetCell = 7,
    xlMixed = 2,
    xlMultiply = 4,
    xlNarrow = 1,
    xlNoDocuments = 3,
    xlOpen = 2,
    xlOutside = 3,
    xlReference = 4,
    xlSemiautomatic = 2,
    xlShort = 1,
    xlSingleQuote = 2,
    xlStrict = 2,
    xlSubtract = 3,
    xlTextBox = 16,
    xlTiled = 1,
    xlTitleBar = 8,
    xlToolbar = 1,
    xlVisible = 12,
    xlWatchPane = 11,
    xlWide = 3,
    xlWorkbookTab = 6,
    xlWorksheet4 = 1,
    xlWorksheetCell = 3,
    xlWorksheetShort = 5,
    xlAllExceptBorders = 7,
    xlLeftToRight = 2,
    xlTopToBottom = 1,
    xlVeryHidden = 2,
    xlDrawingObject = 14
};

enum XlCreator
{
    xlCreatorCode = 1480803660
};

enum XlChartGallery
{
    xlBuiltIn = 21,
    xlUserDefined = 22,
    xlAnyGallery = 23
};

enum XlColorIndex
{
    xlColorIndexAutomatic = -4105,
    xlColorIndexNone = -4142
};

enum XlEndStyleCap
{
    xlCap = 1,
    xlNoCap = 2
};

enum XlRowCol
{
    xlColumns = 2,
    xlRows = 1
};

enum XlScaleType
{
    xlScaleLinear = -4132,
    xlScaleLogarithmic = -4133
};

enum XlDataSeriesType
{
    xlAutoFill = 4,
    xlChronological = 3,
    xlGrowth = 2,
    xlDataSeriesLinear = -4132
};

enum XlAxisCrosses
{
    xlAxisCrossesAutomatic = -4105,
    xlAxisCrossesCustom = -4114,
    xlAxisCrossesMaximum = 2,
    xlAxisCrossesMinimum = 4
};

enum XlAxisGroup
{
    xlPrimary = 1,
    xlSecondary = 2
};

enum XlBackground
{
    xlBackgroundAutomatic = -4105,
    xlBackgroundOpaque = 3,
    xlBackgroundTransparent = 2
};

enum XlWindowState
{
    xlMaximized = -4137,
    xlMinimized = -4140,
    xlNormal = -4143
};

enum XlAxisType
{
    xlCategory = 1,
    xlSeriesAxis = 3,
    xlValue = 2
};

enum XlArrowHeadLength
{
    xlArrowHeadLengthLong = 3,
    xlArrowHeadLengthMedium = -4138,
    xlArrowHeadLengthShort = 1
};

enum XlVAlign
{
    xlVAlignBottom = -4107,
    xlVAlignCenter = -4108,
    xlVAlignDistributed = -4117,
    xlVAlignJustify = -4130,
    xlVAlignTop = -4160
};

enum XlTickMark
{
    xlTickMarkCross = 4,
    xlTickMarkInside = 2,
    xlTickMarkNone = -4142,
    xlTickMarkOutside = 3
};

enum XlErrorBarDirection
{
    xlX = -4168,
    xlY = 1
};

enum XlErrorBarInclude
{
    xlErrorBarIncludeBoth = 1,
    xlErrorBarIncludeMinusValues = 3,
    xlErrorBarIncludeNone = -4142,
    xlErrorBarIncludePlusValues = 2
};

enum XlDisplayBlanksAs
{
    xlInterpolated = 3,
    xlNotPlotted = 1,
    xlZero = 2
};

enum XlArrowHeadStyle
{
    xlArrowHeadStyleClosed = 3,
    xlArrowHeadStyleDoubleClosed = 5,
    xlArrowHeadStyleDoubleOpen = 4,
    xlArrowHeadStyleNone = -4142,
    xlArrowHeadStyleOpen = 2
};

enum XlArrowHeadWidth
{
    xlArrowHeadWidthMedium = -4138,
    xlArrowHeadWidthNarrow = 1,
    xlArrowHeadWidthWide = 3
};

enum XlHAlign
{
    xlHAlignCenter = -4108,
    xlHAlignCenterAcrossSelection = 7,
    xlHAlignDistributed = -4117,
    xlHAlignFill = 5,
    xlHAlignGeneral = 1,
    xlHAlignJustify = -4130,
    xlHAlignLeft = -4131,
    xlHAlignRight = -4152
};

enum XlTickLabelPosition
{
    xlTickLabelPositionHigh = -4127,
    xlTickLabelPositionLow = -4134,
    xlTickLabelPositionNextToAxis = 4,
    xlTickLabelPositionNone = -4142
};

enum XlLegendPosition
{
    xlLegendPositionBottom = -4107,
    xlLegendPositionCorner = 2,
    xlLegendPositionLeft = -4131,
    xlLegendPositionRight = -4152,
    xlLegendPositionTop = -4160
};

enum XlChartPictureType
{
    xlStackScale = 3,
    xlStack = 2,
    xlStretch = 1
};

enum XlChartPicturePlacement
{
    xlSides = 1,
    xlEnd = 2,
    xlEndSides = 3,
    xlFront = 4,
    xlFrontSides = 5,
    xlFrontEnd = 6,
    xlAllFaces = 7
};

enum XlOrientation
{
    xlDownward = -4170,
    xlHorizontal = -4128,
    xlUpward = -4171,
    xlVertical = -4166
};

enum XlTickLabelOrientation
{
    xlTickLabelOrientationAutomatic = -4105,
    xlTickLabelOrientationDownward = -4170,
    xlTickLabelOrientationHorizontal = -4128,
    xlTickLabelOrientationUpward = -4171,
    xlTickLabelOrientationVertical = -4166
};

enum XlBorderWeight
{
    xlHairline = 1,
    xlMedium = -4138,
    xlThick = 4,
    xlThin = 2
};

enum XlDataSeriesDate
{
    xlDay = 1,
    xlMonth = 3,
    xlWeekday = 2,
    xlYear = 4
};

enum XlUnderlineStyle
{
    xlUnderlineStyleDouble = -4119,
    xlUnderlineStyleDoubleAccounting = 5,
    xlUnderlineStyleNone = -4142,
    xlUnderlineStyleSingle = 2,
    xlUnderlineStyleSingleAccounting = 4
};

enum XlErrorBarType
{
    xlErrorBarTypeCustom = -4114,
    xlErrorBarTypeFixedValue = 1,
    xlErrorBarTypePercent = 2,
    xlErrorBarTypeStDev = -4155,
    xlErrorBarTypeStError = 4
};

enum XlTrendlineType
{
    xlExponential = 5,
    xlLinear = -4132,
    xlLogarithmic = -4133,
    xlMovingAvg = 6,
    xlPolynomial = 3,
    xlPower = 4
};

enum XlLineStyle
{
    xlContinuous = 1,
    xlDash = -4115,
    xlDashDot = 4,
    xlDashDotDot = 5,
    xlDot = -4118,
    xlDouble = -4119,
    xlSlantDashDot = 13,
    xlLineStyleNone = -4142
};

enum XlDataLabelsType
{
    xlDataLabelsShowNone = -4142,
    xlDataLabelsShowValue = 2,
    xlDataLabelsShowPercent = 3,
    xlDataLabelsShowLabel = 4,
    xlDataLabelsShowLabelAndPercent = 5,
    xlDataLabelsShowBubbleSizes = 6
};

enum XlMarkerStyle
{
    xlMarkerStyleAutomatic = -4105,
    xlMarkerStyleCircle = 8,
    xlMarkerStyleDash = -4115,
    xlMarkerStyleDiamond = 2,
    xlMarkerStyleDot = -4118,
    xlMarkerStyleNone = -4142,
    xlMarkerStylePicture = -4147,
    xlMarkerStylePlus = 9,
    xlMarkerStyleSquare = 1,
    xlMarkerStyleStar = 5,
    xlMarkerStyleTriangle = 3,
    xlMarkerStyleX = -4168
};

enum XlPictureConvertorType
{
    xlBMP = 1,
    xlCGM = 7,
    xlDRW = 4,
    xlDXF = 5,
    xlEPS = 8,
    xlHGL = 6,
    xlPCT = 13,
    xlPCX = 10,
    xlPIC = 11,
    xlPLT = 12,
    xlTIF = 9,
    xlWMF = 2,
    xlWPG = 3
};

enum XlPattern
{
    xlPatternAutomatic = -4105,
    xlPatternChecker = 9,
    xlPatternCrissCross = 16,
    xlPatternDown = -4121,
    xlPatternGray16 = 17,
    xlPatternGray25 = -4124,
    xlPatternGray50 = -4125,
    xlPatternGray75 = -4126,
    xlPatternGray8 = 18,
    xlPatternGrid = 15,
    xlPatternHorizontal = -4128,
    xlPatternLightDown = 13,
    xlPatternLightHorizontal = 11,
    xlPatternLightUp = 14,
    xlPatternLightVertical = 12,
    xlPatternNone = -4142,
    xlPatternSemiGray75 = 10,
    xlPatternSolid = 1,
    xlPatternUp = -4162,
    xlPatternVertical = -4166
};

enum XlChartSplitType
{
    xlSplitByPosition = 1,
    xlSplitByPercentValue = 3,
    xlSplitByCustomSplit = 4,
    xlSplitByValue = 2
};

enum XlDisplayUnit
{
    xlHundreds = -2,
    xlThousands = -3,
    xlTenThousands = -4,
    xlHundredThousands = -5,
    xlMillions = -6,
    xlTenMillions = -7,
    xlHundredMillions = -8,
    xlThousandMillions = -9,
    xlMillionMillions = -10
};

enum XlDataLabelPosition
{
    xlLabelPositionCenter = -4108,
    xlLabelPositionAbove = 0,
    xlLabelPositionBelow = 1,
    xlLabelPositionLeft = -4131,
    xlLabelPositionRight = -4152,
    xlLabelPositionOutsideEnd = 2,
    xlLabelPositionInsideEnd = 3,
    xlLabelPositionInsideBase = 4,
    xlLabelPositionBestFit = 5,
    xlLabelPositionMixed = 6,
    xlLabelPositionCustom = 7
};

enum XlTimeUnit
{
    xlDays = 0,
    xlMonths = 1,
    xlYears = 2
};

enum XlCategoryType
{
    xlCategoryScale = 2,
    xlTimeScale = 3,
    xlAutomaticScale = -4105
};

enum XlBarShape
{
    xlBox = 0,
    xlPyramidToPoint = 1,
    xlPyramidToMax = 2,
    xlCylinder = 3,
    xlConeToPoint = 4,
    xlConeToMax = 5
};

enum XlChartType
{
    xlColumnClustered = 51,
    xlColumnStacked = 52,
    xlColumnStacked100 = 53,
    xl3DColumnClustered = 54,
    xl3DColumnStacked = 55,
    xl3DColumnStacked100 = 56,
    xlBarClustered = 57,
    xlBarStacked = 58,
    xlBarStacked100 = 59,
    xl3DBarClustered = 60,
    xl3DBarStacked = 61,
    xl3DBarStacked100 = 62,
    xlLineStacked = 63,
    xlLineStacked100 = 64,
    xlLineMarkers = 65,
    xlLineMarkersStacked = 66,
    xlLineMarkersStacked100 = 67,
    xlPieOfPie = 68,
    xlPieExploded = 69,
    xl3DPieExploded = 70,
    xlBarOfPie = 71,
    xlXYScatterSmooth = 72,
    xlXYScatterSmoothNoMarkers = 73,
    xlXYScatterLines = 74,
    xlXYScatterLinesNoMarkers = 75,
    xlAreaStacked = 76,
    xlAreaStacked100 = 77,
    xl3DAreaStacked = 78,
    xl3DAreaStacked100 = 79,
    xlDoughnutExploded = 80,
    xlRadarMarkers = 81,
    xlRadarFilled = 82,
    xlSurface = 83,
    xlSurfaceWireframe = 84,
    xlSurfaceTopView = 85,
    xlSurfaceTopViewWireframe = 86,
    xlBubble = 15,
    xlBubble3DEffect = 87,
    xlStockHLC = 88,
    xlStockOHLC = 89,
    xlStockVHLC = 90,
    xlStockVOHLC = 91,
    xlCylinderColClustered = 92,
    xlCylinderColStacked = 93,
    xlCylinderColStacked100 = 94,
    xlCylinderBarClustered = 95,
    xlCylinderBarStacked = 96,
    xlCylinderBarStacked100 = 97,
    xlCylinderCol = 98,
    xlConeColClustered = 99,
    xlConeColStacked = 100,
    xlConeColStacked100 = 101,
    xlConeBarClustered = 102,
    xlConeBarStacked = 103,
    xlConeBarStacked100 = 104,
    xlConeCol = 105,
    xlPyramidColClustered = 106,
    xlPyramidColStacked = 107,
    xlPyramidColStacked100 = 108,
    xlPyramidBarClustered = 109,
    xlPyramidBarStacked = 110,
    xlPyramidBarStacked100 = 111,
    xlPyramidCol = 112,
    xl3DColumn = -4100,
    xlLine = 4,
    xl3DLine = -4101,
    xl3DPie = -4102,
    xlPie = 5,
    xlXYScatter = -4169,
    xl3DArea = -4098,
    xlArea = 1,
    xlDoughnut = -4120,
    xlRadar = -4151
};

enum XlChartItem
{
    xlDataLabel = 0,
    xlChartArea = 2,
    xlSeries = 3,
    xlChartTitle = 4,
    xlWalls = 5,
    xlCorners = 6,
    xlDataTable = 7,
    xlTrendline = 8,
    xlErrorBars = 9,
    xlXErrorBars = 10,
    xlYErrorBars = 11,
    xlLegendEntry = 12,
    xlLegendKey = 13,
    xlShape = 14,
    xlMajorGridlines = 15,
    xlMinorGridlines = 16,
    xlAxisTitle = 17,
    xlUpBars = 18,
    xlPlotArea = 19,
    xlDownBars = 20,
    xlAxis = 21,
    xlSeriesLines = 22,
    xlFloor = 23,
    xlLegend = 24,
    xlHiLoLines = 25,
    xlDropLines = 26,
    xlRadarAxisLabels = 27,
    xlNothing = 28,
    xlLeaderLines = 29,
    xlDisplayUnitLabel = 30,
    xlPivotChartFieldButton = 31,
    xlPivotChartDropZone = 32
};

enum XlSizeRepresents
{
    xlSizeIsWidth = 2,
    xlSizeIsArea = 1
};

enum XlInsertShiftDirection
{
    xlShiftDown = -4121,
    xlShiftToRight = -4161
};

enum XlDeleteShiftDirection
{
    xlShiftToLeft = -4159,
    xlShiftUp = -4162
};

enum XlDirection
{
    xlDown = -4121,
    xlToLeft = -4159,
    xlToRight = -4161,
    xlUp = -4162
};

enum XlConsolidationFunction
{
    xlAverage = -4106,
    xlCount = -4112,
    xlCountNums = -4113,
    xlMax = -4136,
    xlMin = -4139,
    xlProduct = -4149,
    xlStDev = -4155,
    xlStDevP = -4156,
    xlSum = -4157,
    xlVar = -4164,
    xlVarP = -4165,
    xlUnknown = 1000
};

enum XlSheetType
{
    xlChart = -4109,
    xlDialogSheet = -4116,
    xlExcel4IntlMacroSheet = 4,
    xlExcel4MacroSheet = 3,
    xlWorksheet = -4167
};

enum XlLocationInTable
{
    xlColumnHeader = -4110,
    xlColumnItem = 5,
    xlDataHeader = 3,
    xlDataItem = 7,
    xlPageHeader = 2,
    xlPageItem = 6,
    xlRowHeader = -4153,
    xlRowItem = 4,
    xlTableBody = 8
};

enum XlFindLookIn
{
    xlFormulas = -4123,
    xlComments = -4144,
    xlValues = -4163
};

enum XlWindowType
{
    xlChartAsWindow = 5,
    xlChartInPlace = 4,
    xlClipboard = 3,
    xlInfo = -4129,
    xlWorkbook = 1
};

enum XlPivotFieldDataType
{
    xlDate = 2,
    xlNumber = -4145,
    xlText = -4158
};

enum XlCopyPictureFormat
{
    xlBitmap = 2,
    xlPicture = -4147
};

enum XlPivotTableSourceType
{
    xlScenario = 4,
    xlConsolidation = 3,
    xlDatabase = 1,
    xlExternal = 2,
    xlPivotTable = -4148
};

enum XlReferenceStyle
{
    xlA1 = 1,
    xlR1C1 = -4150
};

enum XlMSApplication
{
    xlMicrosoftAccess = 4,
    xlMicrosoftFoxPro = 5,
    xlMicrosoftMail = 3,
    xlMicrosoftPowerPoint = 2,
    xlMicrosoftProject = 6,
    xlMicrosoftSchedulePlus = 7,
    xlMicrosoftWord = 1
};

enum XlMouseButton
{
    xlNoButton = 0,
    xlPrimaryButton = 1,
    xlSecondaryButton = 2
};

enum XlCutCopyMode
{
    xlCopy = 1,
    xlCut = 2
};

enum XlFillWith
{
    xlFillWithAll = -4104,
    xlFillWithContents = 2,
    xlFillWithFormats = -4122
};

enum XlFilterAction
{
    xlFilterCopy = 2,
    xlFilterInPlace = 1
};

enum XlOrder
{
    xlDownThenOver = 1,
    xlOverThenDown = 2
};

enum XlLinkType
{
    xlLinkTypeExcelLinks = 1,
    xlLinkTypeOLELinks = 2
};

enum XlApplyNamesOrder
{
    xlColumnThenRow = 2,
    xlRowThenColumn = 1
};

enum XlEnableCancelKey
{
    xlDisabled = 0,
    xlErrorHandler = 2,
    xlInterrupt = 1
};

enum XlPageBreak
{
    xlPageBreakAutomatic = -4105,
    xlPageBreakManual = -4135,
    xlPageBreakNone = -4142
};

enum XlOLEType
{
    xlOLEControl = 2,
    xlOLEEmbed = 1,
    xlOLELink = 0
};

enum XlPageOrientation
{
    xlLandscape = 2,
    xlPortrait = 1
};

enum XlLinkInfo
{
    xlEditionDate = 2,
    xlUpdateState = 1,
    xlLinkInfoStatus = 3
};

enum XlCommandUnderlines
{
    xlCommandUnderlinesAutomatic = -4105,
    xlCommandUnderlinesOff = -4146,
    xlCommandUnderlinesOn = 1
};

enum XlOLEVerb
{
    xlVerbOpen = 2,
    xlVerbPrimary = 1
};

enum XlCalculation
{
    xlCalculationAutomatic = -4105,
    xlCalculationManual = -4135,
    xlCalculationSemiautomatic = 2
};

enum XlFileAccess
{
    xlReadOnly = 3,
    xlReadWrite = 2
};

enum XlEditionType
{
    xlPublisher = 1,
    xlSubscriber = 2
};

enum XlObjectSize
{
    xlFitToPage = 2,
    xlFullPage = 3,
    xlScreenSize = 1
};

enum XlLookAt
{
    xlPart = 2,
    xlWhole = 1
};

enum XlMailSystem
{
    xlMAPI = 1,
    xlNoMailSystem = 0,
    xlPowerTalk = 2
};

enum XlLinkInfoType
{
    xlLinkInfoOLELinks = 2,
    xlLinkInfoPublishers = 5,
    xlLinkInfoSubscribers = 6
};

enum XlCVError
{
    xlErrDiv0 = 2007,
    xlErrNA = 2042,
    xlErrName = 2029,
    xlErrNull = 2000,
    xlErrNum = 2036,
    xlErrRef = 2023,
    xlErrValue = 2015
};

enum XlEditionFormat
{
    xlBIFF = 2,
    xlPICT = 1,
    xlRTF = 4,
    xlVALU = 8
};

enum XlLink
{
    xlExcelLinks = 1,
    xlOLELinks = 2,
    xlPublishers = 5,
    xlSubscribers = 6
};

enum XlCellType
{
    xlCellTypeBlanks = 4,
    xlCellTypeConstants = 2,
    xlCellTypeFormulas = -4123,
    xlCellTypeLastCell = 11,
    xlCellTypeComments = -4144,
    xlCellTypeVisible = 12,
    xlCellTypeAllFormatConditions = -4172,
    xlCellTypeSameFormatConditions = -4173,
    xlCellTypeAllValidation = -4174,
    xlCellTypeSameValidation = -4175
};

enum XlArrangeStyle
{
    xlArrangeStyleCascade = 7,
    xlArrangeStyleHorizontal = -4128,
    xlArrangeStyleTiled = 1,
    xlArrangeStyleVertical = -4166
};

enum XlMousePointer
{
    xlIBeam = 3,
    xlDefault = -4143,
    xlNorthwestArrow = 1,
    xlWait = 2
};

enum XlEditionOptionsOption
{
    xlAutomaticUpdate = 4,
    xlCancel = 1,
    xlChangeAttributes = 6,
    xlManualUpdate = 5,
    xlOpenSource = 3,
    xlSelect = 3,
    xlSendPublisher = 2,
    xlUpdateSubscriber = 2
};

enum XlAutoFillType
{
    xlFillCopy = 1,
    xlFillDays = 5,
    xlFillDefault = 0,
    xlFillFormats = 3,
    xlFillMonths = 7,
    xlFillSeries = 2,
    xlFillValues = 4,
    xlFillWeekdays = 6,
    xlFillYears = 8,
    xlGrowthTrend = 10,
    xlLinearTrend = 9
};

enum XlAutoFilterOperator
{
    xlAnd = 1,
    xlBottom10Items = 4,
    xlBottom10Percent = 6,
    xlOr = 2,
    xlTop10Items = 3,
    xlTop10Percent = 5
};

enum XlClipboardFormat
{
    xlClipboardFormatBIFF = 8,
    xlClipboardFormatBIFF2 = 18,
    xlClipboardFormatBIFF3 = 20,
    xlClipboardFormatBIFF4 = 30,
    xlClipboardFormatBinary = 15,
    xlClipboardFormatBitmap = 9,
    xlClipboardFormatCGM = 13,
    xlClipboardFormatCSV = 5,
    xlClipboardFormatDIF = 4,
    xlClipboardFormatDspText = 12,
    xlClipboardFormatEmbeddedObject = 21,
    xlClipboardFormatEmbedSource = 22,
    xlClipboardFormatLink = 11,
    xlClipboardFormatLinkSource = 23,
    xlClipboardFormatLinkSourceDesc = 32,
    xlClipboardFormatMovie = 24,
    xlClipboardFormatNative = 14,
    xlClipboardFormatObjectDesc = 31,
    xlClipboardFormatObjectLink = 19,
    xlClipboardFormatOwnerLink = 17,
    xlClipboardFormatPICT = 2,
    xlClipboardFormatPrintPICT = 3,
    xlClipboardFormatRTF = 7,
    xlClipboardFormatScreenPICT = 29,
    xlClipboardFormatStandardFont = 28,
    xlClipboardFormatStandardScale = 27,
    xlClipboardFormatSYLK = 6,
    xlClipboardFormatTable = 16,
    xlClipboardFormatText = 0,
    xlClipboardFormatToolFace = 25,
    xlClipboardFormatToolFacePICT = 26,
    xlClipboardFormatVALU = 1,
    xlClipboardFormatWK1 = 10
};

enum XlFileFormat
{
    xlAddIn = 18,
    xlCSV = 6,
    xlCSVMac = 22,
    xlCSVMSDOS = 24,
    xlCSVWindows = 23,
    xlDBF2 = 7,
    xlDBF3 = 8,
    xlDBF4 = 11,
    xlDIF = 9,
    xlExcel2 = 16,
    xlExcel2FarEast = 27,
    xlExcel3 = 29,
    xlExcel4 = 33,
    xlExcel5 = 39,
    xlExcel7 = 39,
    xlExcel9795 = 43,
    xlExcel4Workbook = 35,
    xlIntlAddIn = 26,
    xlIntlMacro = 25,
    xlWorkbookNormal = -4143,
    xlSYLK = 2,
    xlTemplate = 17,
    xlCurrentPlatformText = -4158,
    xlTextMac = 19,
    xlTextMSDOS = 21,
    xlTextPrinter = 36,
    xlTextWindows = 20,
    xlWJ2WD1 = 14,
    xlWK1 = 5,
    xlWK1ALL = 31,
    xlWK1FMT = 30,
    xlWK3 = 15,
    xlWK4 = 38,
    xlWK3FM3 = 32,
    xlWKS = 4,
    xlWorks2FarEast = 28,
    xlWQ1 = 34,
    xlWJ3 = 40,
    xlWJ3FJ3 = 41,
    xlUnicodeText = 42,
    xlHtml = 44,
    xlWebArchive = 45,
    xlXMLSpreadsheet = 46
};

enum XlApplicationInternational
{
    xl24HourClock = 33,
    xl4DigitYears = 43,
    xlAlternateArraySeparator = 16,
    xlColumnSeparator = 14,
    xlCountryCode = 1,
    xlCountrySetting = 2,
    xlCurrencyBefore = 37,
    xlCurrencyCode = 25,
    xlCurrencyDigits = 27,
    xlCurrencyLeadingZeros = 40,
    xlCurrencyMinusSign = 38,
    xlCurrencyNegative = 28,
    xlCurrencySpaceBefore = 36,
    xlCurrencyTrailingZeros = 39,
    xlDateOrder = 32,
    xlDateSeparator = 17,
    xlDayCode = 21,
    xlDayLeadingZero = 42,
    xlDecimalSeparator = 3,
    xlGeneralFormatName = 26,
    xlHourCode = 22,
    xlLeftBrace = 12,
    xlLeftBracket = 10,
    xlListSeparator = 5,
    xlLowerCaseColumnLetter = 9,
    xlLowerCaseRowLetter = 8,
    xlMDY = 44,
    xlMetric = 35,
    xlMinuteCode = 23,
    xlMonthCode = 20,
    xlMonthLeadingZero = 41,
    xlMonthNameChars = 30,
    xlNoncurrencyDigits = 29,
    xlNonEnglishFunctions = 34,
    xlRightBrace = 13,
    xlRightBracket = 11,
    xlRowSeparator = 15,
    xlSecondCode = 24,
    xlThousandsSeparator = 4,
    xlTimeLeadingZero = 45,
    xlTimeSeparator = 18,
    xlUpperCaseColumnLetter = 7,
    xlUpperCaseRowLetter = 6,
    xlWeekdayNameChars = 31,
    xlYearCode = 19
};

enum XlPageBreakExtent
{
    xlPageBreakFull = 1,
    xlPageBreakPartial = 2
};

enum XlCellInsertionMode
{
    xlOverwriteCells = 0,
    xlInsertDeleteCells = 1,
    xlInsertEntireRows = 2
};

enum XlFormulaLabel
{
    xlNoLabels = -4142,
    xlRowLabels = 1,
    xlColumnLabels = 2,
    xlMixedLabels = 3
};

enum XlHighlightChangesTime
{
    xlSinceMyLastSave = 1,
    xlAllChanges = 2,
    xlNotYetReviewed = 3
};

enum XlCommentDisplayMode
{
    xlNoIndicator = 0,
    xlCommentIndicatorOnly = -1,
    xlCommentAndIndicator = 1
};

enum XlFormatConditionType
{
    xlCellValue = 1,
    xlExpression = 2
};

enum XlFormatConditionOperator
{
    xlBetween = 1,
    xlNotBetween = 2,
    xlEqual = 3,
    xlNotEqual = 4,
    xlGreater = 5,
    xlLess = 6,
    xlGreaterEqual = 7,
    xlLessEqual = 8
};

enum XlEnableSelection
{
    xlNoRestrictions = 0,
    xlUnlockedCells = 1,
    xlNoSelection = -4142
};

enum XlDVType
{
    xlValidateInputOnly = 0,
    xlValidateWholeNumber = 1,
    xlValidateDecimal = 2,
    xlValidateList = 3,
    xlValidateDate = 4,
    xlValidateTime = 5,
    xlValidateTextLength = 6,
    xlValidateCustom = 7
};

enum XlIMEMode
{
    xlIMEModeNoControl = 0,
    xlIMEModeOn = 1,
    xlIMEModeOff = 2,
    xlIMEModeDisable = 3,
    xlIMEModeHiragana = 4,
    xlIMEModeKatakana = 5,
    xlIMEModeKatakanaHalf = 6,
    xlIMEModeAlphaFull = 7,
    xlIMEModeAlpha = 8,
    xlIMEModeHangulFull = 9,
    xlIMEModeHangul = 10
};

enum XlDVAlertStyle
{
    xlValidAlertStop = 1,
    xlValidAlertWarning = 2,
    xlValidAlertInformation = 3
};

enum XlChartLocation
{
    xlLocationAsNewSheet = 1,
    xlLocationAsObject = 2,
    xlLocationAutomatic = 3
};

enum XlPaperSize
{
    xlPaper10x14 = 16,
    xlPaper11x17 = 17,
    xlPaperA3 = 8,
    xlPaperA4 = 9,
    xlPaperA4Small = 10,
    xlPaperA5 = 11,
    xlPaperB4 = 12,
    xlPaperB5 = 13,
    xlPaperCsheet = 24,
    xlPaperDsheet = 25,
    xlPaperEnvelope10 = 20,
    xlPaperEnvelope11 = 21,
    xlPaperEnvelope12 = 22,
    xlPaperEnvelope14 = 23,
    xlPaperEnvelope9 = 19,
    xlPaperEnvelopeB4 = 33,
    xlPaperEnvelopeB5 = 34,
    xlPaperEnvelopeB6 = 35,
    xlPaperEnvelopeC3 = 29,
    xlPaperEnvelopeC4 = 30,
    xlPaperEnvelopeC5 = 28,
    xlPaperEnvelopeC6 = 31,
    xlPaperEnvelopeC65 = 32,
    xlPaperEnvelopeDL = 27,
    xlPaperEnvelopeItaly = 36,
    xlPaperEnvelopeMonarch = 37,
    xlPaperEnvelopePersonal = 38,
    xlPaperEsheet = 26,
    xlPaperExecutive = 7,
    xlPaperFanfoldLegalGerman = 41,
    xlPaperFanfoldStdGerman = 40,
    xlPaperFanfoldUS = 39,
    xlPaperFolio = 14,
    xlPaperLedger = 4,
    xlPaperLegal = 5,
    xlPaperLetter = 1,
    xlPaperLetterSmall = 2,
    xlPaperNote = 18,
    xlPaperQuarto = 15,
    xlPaperStatement = 6,
    xlPaperTabloid = 3,
    xlPaperUser = 256
};

enum XlPasteSpecialOperation
{
    xlPasteSpecialOperationAdd = 2,
    xlPasteSpecialOperationDivide = 5,
    xlPasteSpecialOperationMultiply = 4,
    xlPasteSpecialOperationNone = -4142,
    xlPasteSpecialOperationSubtract = 3
};

enum XlPasteType
{
    xlPasteAll = -4104,
    xlPasteAllExceptBorders = 7,
    xlPasteFormats = -4122,
    xlPasteFormulas = -4123,
    xlPasteComments = -4144,
    xlPasteValues = -4163,
    xlPasteColumnWidths = 8,
    xlPasteValidation = 6,
    xlPasteFormulasAndNumberFormats = 11,
    xlPasteValuesAndNumberFormats = 12
};

enum XlPhoneticCharacterType
{
    xlKatakanaHalf = 0,
    xlKatakana = 1,
    xlHiragana = 2,
    xlNoConversion = 3
};

enum XlPhoneticAlignment
{
    xlPhoneticAlignNoControl = 0,
    xlPhoneticAlignLeft = 1,
    xlPhoneticAlignCenter = 2,
    xlPhoneticAlignDistributed = 3
};

enum XlPictureAppearance
{
    xlPrinter = 2,
    xlScreen = 1
};

enum XlPivotFieldOrientation
{
    xlColumnField = 2,
    xlDataField = 4,
    xlHidden = 0,
    xlPageField = 3,
    xlRowField = 1
};

enum XlPivotFieldCalculation
{
    xlDifferenceFrom = 2,
    xlIndex = 9,
    xlNoAdditionalCalculation = -4143,
    xlPercentDifferenceFrom = 4,
    xlPercentOf = 3,
    xlPercentOfColumn = 7,
    xlPercentOfRow = 6,
    xlPercentOfTotal = 8,
    xlRunningTotal = 5
};

enum XlPlacement
{
    xlFreeFloating = 3,
    xlMove = 2,
    xlMoveAndSize = 1
};

enum XlPlatform
{
    xlMacintosh = 1,
    xlMSDOS = 3,
    xlWindows = 2
};

enum XlPrintLocation
{
    xlPrintSheetEnd = 1,
    xlPrintInPlace = 16,
    xlPrintNoComments = -4142
};

enum XlPriority
{
    xlPriorityHigh = -4127,
    xlPriorityLow = -4134,
    xlPriorityNormal = -4143
};

enum XlPTSelectionMode
{
    xlLabelOnly = 1,
    xlDataAndLabel = 0,
    xlDataOnly = 2,
    xlOrigin = 3,
    xlButton = 15,
    xlBlanks = 4,
    xlFirstRow = 256
};

enum XlRangeAutoFormat
{
    xlRangeAutoFormat3DEffects1 = 13,
    xlRangeAutoFormat3DEffects2 = 14,
    xlRangeAutoFormatAccounting1 = 4,
    xlRangeAutoFormatAccounting2 = 5,
    xlRangeAutoFormatAccounting3 = 6,
    xlRangeAutoFormatAccounting4 = 17,
    xlRangeAutoFormatClassic1 = 1,
    xlRangeAutoFormatClassic2 = 2,
    xlRangeAutoFormatClassic3 = 3,
    xlRangeAutoFormatColor1 = 7,
    xlRangeAutoFormatColor2 = 8,
    xlRangeAutoFormatColor3 = 9,
    xlRangeAutoFormatList1 = 10,
    xlRangeAutoFormatList2 = 11,
    xlRangeAutoFormatList3 = 12,
    xlRangeAutoFormatLocalFormat1 = 15,
    xlRangeAutoFormatLocalFormat2 = 16,
    xlRangeAutoFormatLocalFormat3 = 19,
    xlRangeAutoFormatLocalFormat4 = 20,
    xlRangeAutoFormatReport1 = 21,
    xlRangeAutoFormatReport2 = 22,
    xlRangeAutoFormatReport3 = 23,
    xlRangeAutoFormatReport4 = 24,
    xlRangeAutoFormatReport5 = 25,
    xlRangeAutoFormatReport6 = 26,
    xlRangeAutoFormatReport7 = 27,
    xlRangeAutoFormatReport8 = 28,
    xlRangeAutoFormatReport9 = 29,
    xlRangeAutoFormatReport10 = 30,
    xlRangeAutoFormatClassicPivotTable = 31,
    xlRangeAutoFormatTable1 = 32,
    xlRangeAutoFormatTable2 = 33,
    xlRangeAutoFormatTable3 = 34,
    xlRangeAutoFormatTable4 = 35,
    xlRangeAutoFormatTable5 = 36,
    xlRangeAutoFormatTable6 = 37,
    xlRangeAutoFormatTable7 = 38,
    xlRangeAutoFormatTable8 = 39,
    xlRangeAutoFormatTable9 = 40,
    xlRangeAutoFormatTable10 = 41,
    xlRangeAutoFormatPTNone = 42,
    xlRangeAutoFormatNone = -4142,
    xlRangeAutoFormatSimple = -4154
};

enum XlReferenceType
{
    xlAbsolute = 1,
    xlAbsRowRelColumn = 2,
    xlRelative = 4,
    xlRelRowAbsColumn = 3
};

enum XlLayoutFormType
{
    xlTabular = 0,
    xlOutline = 1
};

enum XlRoutingSlipDelivery
{
    xlAllAtOnce = 2,
    xlOneAfterAnother = 1
};

enum XlRoutingSlipStatus
{
    xlNotYetRouted = 0,
    xlRoutingComplete = 2,
    xlRoutingInProgress = 1
};

enum XlRunAutoMacro
{
    xlAutoActivate = 3,
    xlAutoClose = 2,
    xlAutoDeactivate = 4,
    xlAutoOpen = 1
};

enum XlSaveAction
{
    xlDoNotSaveChanges = 2,
    xlSaveChanges = 1
};

enum XlSaveAsAccessMode
{
    xlExclusive = 3,
    xlNoChange = 1,
    xlShared = 2
};

enum XlSaveConflictResolution
{
    xlLocalSessionChanges = 2,
    xlOtherSessionChanges = 3,
    xlUserResolution = 1
};

enum XlSearchDirection
{
    xlNext = 1,
    xlPrevious = 2
};

enum XlSearchOrder
{
    xlByColumns = 2,
    xlByRows = 1
};

enum XlSheetVisibility
{
    xlSheetVisible = -1,
    xlSheetHidden = 0,
    xlSheetVeryHidden = 2
};

enum XlSortMethod
{
    xlPinYin = 1,
    xlStroke = 2
};

enum XlSortMethodOld
{
    xlCodePage = 2,
    xlSyllabary = 1
};

enum XlSortOrder
{
    xlAscending = 1,
    xlDescending = 2
};

enum XlSortOrientation
{
    xlSortRows = 2,
    xlSortColumns = 1
};

enum XlSortType
{
    xlSortLabels = 2,
    xlSortValues = 1
};

enum XlSpecialCellsValue
{
    xlErrors = 16,
    xlLogical = 4,
    xlNumbers = 1,
    xlTextValues = 2
};

enum XlSubscribeToFormat
{
    xlSubscribeToPicture = -4147,
    xlSubscribeToText = -4158
};

enum XlSummaryRow
{
    xlSummaryAbove = 0,
    xlSummaryBelow = 1
};

enum XlSummaryColumn
{
    xlSummaryOnLeft = -4131,
    xlSummaryOnRight = -4152
};

enum XlSummaryReportType
{
    xlSummaryPivotTable = -4148,
    xlStandardSummary = 1
};

enum XlTabPosition
{
    xlTabPositionFirst = 0,
    xlTabPositionLast = 1
};

enum XlTextParsingType
{
    xlDelimited = 1,
    xlFixedWidth = 2
};

enum XlTextQualifier
{
    xlTextQualifierDoubleQuote = 1,
    xlTextQualifierNone = -4142,
    xlTextQualifierSingleQuote = 2
};

enum XlWBATemplate
{
    xlWBATChart = -4109,
    xlWBATExcel4IntlMacroSheet = 4,
    xlWBATExcel4MacroSheet = 3,
    xlWBATWorksheet = -4167
};

enum XlWindowView
{
    xlNormalView = 1,
    xlPageBreakPreview = 2
};

enum XlXLMMacroType
{
    xlCommand = 2,
    xlFunction = 1,
    xlNotXLM = 3
};

enum XlYesNoGuess
{
    xlGuess = 0,
    xlNo = 2,
    xlYes = 1
};

enum XlBordersIndex
{
    xlInsideHorizontal = 12,
    xlInsideVertical = 11,
    xlDiagonalDown = 5,
    xlDiagonalUp = 6,
    xlEdgeBottom = 9,
    xlEdgeLeft = 7,
    xlEdgeRight = 10,
    xlEdgeTop = 8
};

enum XlToolbarProtection
{
    xlNoButtonChanges = 1,
    xlNoChanges = 4,
    xlNoDockingChanges = 3,
    xlToolbarProtectionNone = -4143,
    xlNoShapeChanges = 2
};

enum XlBuiltInDialog
{
    xlDialogOpen = 1,
    xlDialogOpenLinks = 2,
    xlDialogSaveAs = 5,
    xlDialogFileDelete = 6,
    xlDialogPageSetup = 7,
    xlDialogPrint = 8,
    xlDialogPrinterSetup = 9,
    xlDialogArrangeAll = 12,
    xlDialogWindowSize = 13,
    xlDialogWindowMove = 14,
    xlDialogRun = 17,
    xlDialogSetPrintTitles = 23,
    xlDialogFont = 26,
    xlDialogDisplay = 27,
    xlDialogProtectDocument = 28,
    xlDialogCalculation = 32,
    xlDialogExtract = 35,
    xlDialogDataDelete = 36,
    xlDialogSort = 39,
    xlDialogDataSeries = 40,
    xlDialogTable = 41,
    xlDialogFormatNumber = 42,
    xlDialogAlignment = 43,
    xlDialogStyle = 44,
    xlDialogBorder = 45,
    xlDialogCellProtection = 46,
    xlDialogColumnWidth = 47,
    xlDialogClear = 52,
    xlDialogPasteSpecial = 53,
    xlDialogEditDelete = 54,
    xlDialogInsert = 55,
    xlDialogPasteNames = 58,
    xlDialogDefineName = 61,
    xlDialogCreateNames = 62,
    xlDialogFormulaGoto = 63,
    xlDialogFormulaFind = 64,
    xlDialogGalleryArea = 67,
    xlDialogGalleryBar = 68,
    xlDialogGalleryColumn = 69,
    xlDialogGalleryLine = 70,
    xlDialogGalleryPie = 71,
    xlDialogGalleryScatter = 72,
    xlDialogCombination = 73,
    xlDialogGridlines = 76,
    xlDialogAxes = 78,
    xlDialogAttachText = 80,
    xlDialogPatterns = 84,
    xlDialogMainChart = 85,
    xlDialogOverlay = 86,
    xlDialogScale = 87,
    xlDialogFormatLegend = 88,
    xlDialogFormatText = 89,
    xlDialogParse = 91,
    xlDialogUnhide = 94,
    xlDialogWorkspace = 95,
    xlDialogActivate = 103,
    xlDialogCopyPicture = 108,
    xlDialogDeleteName = 110,
    xlDialogDeleteFormat = 111,
    xlDialogNew = 119,
    xlDialogRowHeight = 127,
    xlDialogFormatMove = 128,
    xlDialogFormatSize = 129,
    xlDialogFormulaReplace = 130,
    xlDialogSelectSpecial = 132,
    xlDialogApplyNames = 133,
    xlDialogReplaceFont = 134,
    xlDialogSplit = 137,
    xlDialogOutline = 142,
    xlDialogSaveWorkbook = 145,
    xlDialogCopyChart = 147,
    xlDialogFormatFont = 150,
    xlDialogNote = 154,
    xlDialogSetUpdateStatus = 159,
    xlDialogColorPalette = 161,
    xlDialogChangeLink = 166,
    xlDialogAppMove = 170,
    xlDialogAppSize = 171,
    xlDialogMainChartType = 185,
    xlDialogOverlayChartType = 186,
    xlDialogOpenMail = 188,
    xlDialogSendMail = 189,
    xlDialogStandardFont = 190,
    xlDialogConsolidate = 191,
    xlDialogSortSpecial = 192,
    xlDialogGallery3dArea = 193,
    xlDialogGallery3dColumn = 194,
    xlDialogGallery3dLine = 195,
    xlDialogGallery3dPie = 196,
    xlDialogView3d = 197,
    xlDialogGoalSeek = 198,
    xlDialogWorkgroup = 199,
    xlDialogFillGroup = 200,
    xlDialogUpdateLink = 201,
    xlDialogPromote = 202,
    xlDialogDemote = 203,
    xlDialogShowDetail = 204,
    xlDialogObjectProperties = 207,
    xlDialogSaveNewObject = 208,
    xlDialogApplyStyle = 212,
    xlDialogAssignToObject = 213,
    xlDialogObjectProtection = 214,
    xlDialogCreatePublisher = 217,
    xlDialogSubscribeTo = 218,
    xlDialogShowToolbar = 220,
    xlDialogPrintPreview = 222,
    xlDialogEditColor = 223,
    xlDialogFormatMain = 225,
    xlDialogFormatOverlay = 226,
    xlDialogEditSeries = 228,
    xlDialogDefineStyle = 229,
    xlDialogGalleryRadar = 249,
    xlDialogEditionOptions = 251,
    xlDialogZoom = 256,
    xlDialogInsertObject = 259,
    xlDialogSize = 261,
    xlDialogMove = 262,
    xlDialogFormatAuto = 269,
    xlDialogGallery3dBar = 272,
    xlDialogGallery3dSurface = 273,
    xlDialogCustomizeToolbar = 276,
    xlDialogWorkbookAdd = 281,
    xlDialogWorkbookMove = 282,
    xlDialogWorkbookCopy = 283,
    xlDialogWorkbookOptions = 284,
    xlDialogSaveWorkspace = 285,
    xlDialogChartWizard = 288,
    xlDialogAssignToTool = 293,
    xlDialogPlacement = 300,
    xlDialogFillWorkgroup = 301,
    xlDialogWorkbookNew = 302,
    xlDialogScenarioCells = 305,
    xlDialogScenarioAdd = 307,
    xlDialogScenarioEdit = 308,
    xlDialogScenarioSummary = 311,
    xlDialogPivotTableWizard = 312,
    xlDialogPivotFieldProperties = 313,
    xlDialogOptionsCalculation = 318,
    xlDialogOptionsEdit = 319,
    xlDialogOptionsView = 320,
    xlDialogAddinManager = 321,
    xlDialogMenuEditor = 322,
    xlDialogAttachToolbars = 323,
    xlDialogOptionsChart = 325,
    xlDialogVbaInsertFile = 328,
    xlDialogVbaProcedureDefinition = 330,
    xlDialogRoutingSlip = 336,
    xlDialogMailLogon = 339,
    xlDialogInsertPicture = 342,
    xlDialogGalleryDoughnut = 344,
    xlDialogChartTrend = 350,
    xlDialogWorkbookInsert = 354,
    xlDialogOptionsTransition = 355,
    xlDialogOptionsGeneral = 356,
    xlDialogFilterAdvanced = 370,
    xlDialogMailNextLetter = 378,
    xlDialogDataLabel = 379,
    xlDialogInsertTitle = 380,
    xlDialogFontProperties = 381,
    xlDialogMacroOptions = 382,
    xlDialogWorkbookUnhide = 384,
    xlDialogWorkbookName = 386,
    xlDialogGalleryCustom = 388,
    xlDialogAddChartAutoformat = 390,
    xlDialogChartAddData = 392,
    xlDialogTabOrder = 394,
    xlDialogSubtotalCreate = 398,
    xlDialogWorkbookTabSplit = 415,
    xlDialogWorkbookProtect = 417,
    xlDialogScrollbarProperties = 420,
    xlDialogPivotShowPages = 421,
    xlDialogTextToColumns = 422,
    xlDialogFormatCharttype = 423,
    xlDialogPivotFieldGroup = 433,
    xlDialogPivotFieldUngroup = 434,
    xlDialogCheckboxProperties = 435,
    xlDialogLabelProperties = 436,
    xlDialogListboxProperties = 437,
    xlDialogEditboxProperties = 438,
    xlDialogOpenText = 441,
    xlDialogPushbuttonProperties = 445,
    xlDialogFilter = 447,
    xlDialogFunctionWizard = 450,
    xlDialogSaveCopyAs = 456,
    xlDialogOptionsListsAdd = 458,
    xlDialogSeriesAxes = 460,
    xlDialogSeriesX = 461,
    xlDialogSeriesY = 462,
    xlDialogErrorbarX = 463,
    xlDialogErrorbarY = 464,
    xlDialogFormatChart = 465,
    xlDialogSeriesOrder = 466,
    xlDialogMailEditMailer = 470,
    xlDialogStandardWidth = 472,
    xlDialogScenarioMerge = 473,
    xlDialogProperties = 474,
    xlDialogSummaryInfo = 474,
    xlDialogFindFile = 475,
    xlDialogActiveCellFont = 476,
    xlDialogVbaMakeAddin = 478,
    xlDialogFileSharing = 481,
    xlDialogAutoCorrect = 485,
    xlDialogCustomViews = 493,
    xlDialogInsertNameLabel = 496,
    xlDialogSeriesShape = 504,
    xlDialogChartOptionsDataLabels = 505,
    xlDialogChartOptionsDataTable = 506,
    xlDialogSetBackgroundPicture = 509,
    xlDialogDataValidation = 525,
    xlDialogChartType = 526,
    xlDialogChartLocation = 527,
    _xlDialogPhonetic = 538,
    xlDialogChartSourceData = 540,
    _xlDialogChartSourceData = 541,
    xlDialogSeriesOptions = 557,
    xlDialogPivotTableOptions = 567,
    xlDialogPivotSolveOrder = 568,
    xlDialogPivotCalculatedField = 570,
    xlDialogPivotCalculatedItem = 572,
    xlDialogConditionalFormatting = 583,
    xlDialogInsertHyperlink = 596,
    xlDialogProtectSharing = 620,
    xlDialogOptionsME = 647,
    xlDialogPublishAsWebPage = 653,
    xlDialogPhonetic = 656,
    xlDialogNewWebQuery = 667,
    xlDialogImportTextFile = 666,
    xlDialogExternalDataProperties = 530,
    xlDialogWebOptionsGeneral = 683,
    xlDialogWebOptionsFiles = 684,
    xlDialogWebOptionsPictures = 685,
    xlDialogWebOptionsEncoding = 686,
    xlDialogWebOptionsFonts = 687,
    xlDialogPivotClientServerSet = 689,
    xlDialogPropertyFields = 754,
    xlDialogSearch = 731,
    xlDialogEvaluateFormula = 709,
    xlDialogDataLabelMultiple = 723,
    xlDialogChartOptionsDataLabelMultiple = 724,
    xlDialogErrorChecking = 732,
    xlDialogWebOptionsBrowsers = 773,
    xlDialogCreateList = 796,
    xlDialogPermission = 832,
    xlDialogMyPermission = 834
};

enum XlParameterType
{
    xlPrompt = 0,
    xlConstant = 1,
    xlRange = 2
};

enum XlParameterDataType
{
    xlParamTypeUnknown = 0,
    xlParamTypeChar = 1,
    xlParamTypeNumeric = 2,
    xlParamTypeDecimal = 3,
    xlParamTypeInteger = 4,
    xlParamTypeSmallInt = 5,
    xlParamTypeFloat = 6,
    xlParamTypeReal = 7,
    xlParamTypeDouble = 8,
    xlParamTypeVarChar = 12,
    xlParamTypeDate = 9,
    xlParamTypeTime = 10,
    xlParamTypeTimestamp = 11,
    xlParamTypeLongVarChar = -1,
    xlParamTypeBinary = -2,
    xlParamTypeVarBinary = -3,
    xlParamTypeLongVarBinary = -4,
    xlParamTypeBigInt = -5,
    xlParamTypeTinyInt = -6,
    xlParamTypeBit = -7,
    xlParamTypeWChar = -8
};

enum XlFormControl
{
    xlButtonControl = 0,
    xlCheckBox = 1,
    xlDropDown = 2,
    xlEditBox = 3,
    xlGroupBox = 4,
    xlLabel = 5,
    xlListBox = 6,
    xlOptionButton = 7,
    xlScrollBar = 8,
    xlSpinner = 9
};

enum XlSourceType
{
    xlSourceWorkbook = 0,
    xlSourceSheet = 1,
    xlSourcePrintArea = 2,
    xlSourceAutoFilter = 3,
    xlSourceRange = 4,
    xlSourceChart = 5,
    xlSourcePivotTable = 6,
    xlSourceQuery = 7
};

enum XlHtmlType
{
    xlHtmlStatic = 0,
    xlHtmlCalc = 1,
    xlHtmlList = 2,
    xlHtmlChart = 3
};

enum XlPivotFormatType
{
    xlReport1 = 0,
    xlReport2 = 1,
    xlReport3 = 2,
    xlReport4 = 3,
    xlReport5 = 4,
    xlReport6 = 5,
    xlReport7 = 6,
    xlReport8 = 7,
    xlReport9 = 8,
    xlReport10 = 9,
    xlTable1 = 10,
    xlTable2 = 11,
    xlTable3 = 12,
    xlTable4 = 13,
    xlTable5 = 14,
    xlTable6 = 15,
    xlTable7 = 16,
    xlTable8 = 17,
    xlTable9 = 18,
    xlTable10 = 19,
    xlPTClassic = 20,
    xlPTNone = 21
};

enum XlCmdType
{
    xlCmdCube = 1,
    xlCmdSql = 2,
    xlCmdTable = 3,
    xlCmdDefault = 4,
    xlCmdList = 5
};

enum XlColumnDataType
{
    xlGeneralFormat = 1,
    xlTextFormat = 2,
    xlMDYFormat = 3,
    xlDMYFormat = 4,
    xlYMDFormat = 5,
    xlMYDFormat = 6,
    xlDYMFormat = 7,
    xlYDMFormat = 8,
    xlSkipColumn = 9,
    xlEMDFormat = 10
};

enum XlQueryType
{
    xlODBCQuery = 1,
    xlDAORecordset = 2,
    xlWebQuery = 4,
    xlOLEDBQuery = 5,
    xlTextImport = 6,
    xlADORecordset = 7
};

enum XlWebSelectionType
{
    xlEntirePage = 1,
    xlAllTables = 2,
    xlSpecifiedTables = 3
};

enum XlCubeFieldType
{
    xlHierarchy = 1,
    xlMeasure = 2,
    xlSet = 3
};

enum XlWebFormatting
{
    xlWebFormattingAll = 1,
    xlWebFormattingRTF = 2,
    xlWebFormattingNone = 3
};

enum XlDisplayDrawingObjects
{
    xlDisplayShapes = -4104,
    xlHide = 3,
    xlPlaceholders = 2
};

enum XlSubtototalLocationType
{
    xlAtTop = 1,
    xlAtBottom = 2
};

enum XlPivotTableVersionList
{
    xlPivotTableVersion2000 = 0,
    xlPivotTableVersion10 = 1,
    xlPivotTableVersionCurrent = -1
};

enum XlPrintErrors
{
    xlPrintErrorsDisplayed = 0,
    xlPrintErrorsBlank = 1,
    xlPrintErrorsDash = 2,
    xlPrintErrorsNA = 3
};

enum XlPivotCellType
{
    xlPivotCellValue = 0,
    xlPivotCellPivotItem = 1,
    xlPivotCellSubtotal = 2,
    xlPivotCellGrandTotal = 3,
    xlPivotCellDataField = 4,
    xlPivotCellPivotField = 5,
    xlPivotCellPageFieldItem = 6,
    xlPivotCellCustomSubtotal = 7,
    xlPivotCellDataPivotField = 8,
    xlPivotCellBlankCell = 9
};

enum XlPivotTableMissingItems
{
    xlMissingItemsDefault = -1,
    xlMissingItemsNone = 0,
    xlMissingItemsMax = 32500
};

enum XlCalculationState
{
    xlDone = 0,
    xlCalculating = 1,
    xlPending = 2
};

enum XlCalculationInterruptKey
{
    xlNoKey = 0,
    xlEscKey = 1,
    xlAnyKey = 2
};

enum XlSortDataOption
{
    xlSortNormal = 0,
    xlSortTextAsNumbers = 1
};

enum XlUpdateLinks
{
    xlUpdateLinksUserSetting = 1,
    xlUpdateLinksNever = 2,
    xlUpdateLinksAlways = 3
};

enum XlLinkStatus
{
    xlLinkStatusOK = 0,
    xlLinkStatusMissingFile = 1,
    xlLinkStatusMissingSheet = 2,
    xlLinkStatusOld = 3,
    xlLinkStatusSourceNotCalculated = 4,
    xlLinkStatusIndeterminate = 5,
    xlLinkStatusNotStarted = 6,
    xlLinkStatusInvalidName = 7,
    xlLinkStatusSourceNotOpen = 8,
    xlLinkStatusSourceOpen = 9,
    xlLinkStatusCopiedValues = 10
};

enum XlSearchWithin
{
    xlWithinSheet = 1,
    xlWithinWorkbook = 2
};

enum XlCorruptLoad
{
    xlNormalLoad = 0,
    xlRepairFile = 1,
    xlExtractData = 2
};

enum XlRobustConnect
{
    xlAsRequired = 0,
    xlAlways = 1,
    xlNever = 2
};

enum XlErrorChecks
{
    xlEvaluateToError = 1,
    xlTextDate = 2,
    xlNumberAsText = 3,
    xlInconsistentFormula = 4,
    xlOmittedCells = 5,
    xlUnlockedFormulaCells = 6,
    xlEmptyCellReferences = 7,
    xlListDataValidation = 8
};

enum XlDataLabelSeparator
{
    xlDataLabelSeparatorDefault = 1
};

enum XlSmartTagDisplayMode
{
    xlIndicatorAndButton = 0,
    xlDisplayNone = 1,
    xlButtonOnly = 2
};

enum XlRangeValueDataType
{
    xlRangeValueDefault = 10,
    xlRangeValueXMLSpreadsheet = 11,
    xlRangeValueMSPersistXML = 12
};

enum XlSpeakDirection
{
    xlSpeakByRows = 0,
    xlSpeakByColumns = 1
};

enum XlInsertFormatOrigin
{
    xlFormatFromLeftOrAbove = 0,
    xlFormatFromRightOrBelow = 1
};

enum XlArabicModes
{
    xlArabicNone = 0,
    xlArabicStrictAlefHamza = 1,
    xlArabicStrictFinalYaa = 2,
    xlArabicBothStrict = 3
};

enum XlImportDataAs
{
    xlQueryTable = 0,
    xlPivotTableReport = 1
};

enum XlCalculatedMemberType
{
    xlCalculatedMember = 0,
    xlCalculatedSet = 1
};

enum XlHebrewModes
{
    xlHebrewFullScript = 0,
    xlHebrewPartialScript = 1,
    xlHebrewMixedScript = 2,
    xlHebrewMixedAuthorizedScript = 3
};

enum XlListObjectSourceType
{
    xlSrcExternal = 0,
    xlSrcRange = 1,
    xlSrcXml = 2
};

enum XlTextVisualLayoutType
{
    xlTextVisualLTR = 1,
    xlTextVisualRTL = 2
};

enum XlListDataType
{
    xlListDataTypeNone = 0,
    xlListDataTypeText = 1,
    xlListDataTypeMultiLineText = 2,
    xlListDataTypeNumber = 3,
    xlListDataTypeCurrency = 4,
    xlListDataTypeDateTime = 5,
    xlListDataTypeChoice = 6,
    xlListDataTypeChoiceMulti = 7,
    xlListDataTypeListLookup = 8,
    xlListDataTypeCheckbox = 9,
    xlListDataTypeHyperLink = 10,
    xlListDataTypeCounter = 11,
    xlListDataTypeMultiLineRichText = 12
};

enum XlTotalsCalculation
{
    xlTotalsCalculationNone = 0,
    xlTotalsCalculationSum = 1,
    xlTotalsCalculationAverage = 2,
    xlTotalsCalculationCount = 3,
    xlTotalsCalculationCountNums = 4,
    xlTotalsCalculationMin = 5,
    xlTotalsCalculationMax = 6,
    xlTotalsCalculationStdDev = 7,
    xlTotalsCalculationVar = 8
};

enum XlXmlLoadOption
{
    xlXmlLoadPromptUser = 0,
    xlXmlLoadOpenXml = 1,
    xlXmlLoadImportToList = 2,
    xlXmlLoadMapXml = 3
};

enum XlSmartTagControlType
{
    xlSmartTagControlSmartTag = 1,
    xlSmartTagControlLink = 2,
    xlSmartTagControlHelp = 3,
    xlSmartTagControlHelpURL = 4,
    xlSmartTagControlSeparator = 5,
    xlSmartTagControlButton = 6,
    xlSmartTagControlLabel = 7,
    xlSmartTagControlImage = 8,
    xlSmartTagControlCheckbox = 9,
    xlSmartTagControlTextbox = 10,
    xlSmartTagControlListbox = 11,
    xlSmartTagControlCombo = 12,
    xlSmartTagControlActiveX = 13,
    xlSmartTagControlRadioGroup = 14
};

enum XlListConflict
{
    xlListConflictDialog = 0,
    xlListConflictRetryAllConflicts = 1,
    xlListConflictDiscardAllConflicts = 2,
    xlListConflictError = 3
};

enum XlXmlExportResult
{
    xlXmlExportSuccess = 0,
    xlXmlExportValidationFailed = 1
};

enum XlXmlImportResult
{
    xlXmlImportSuccess = 0,
    xlXmlImportElementsTruncated = 1,
    xlXmlImportValidationFailed = 2
};

struct __declspec(uuid("0002440f-0001-0000-c000-000000000046"))
IChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Resize ( ) = 0;
      virtual HRESULT __stdcall raw_MouseDown (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseUp (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_MouseMove (
        /*[in]*/ long Button,
        /*[in]*/ long Shift,
        /*[in]*/ long x,
        /*[in]*/ long y ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_DragPlot ( ) = 0;
      virtual HRESULT __stdcall raw_DragOver ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ long ElementID,
        /*[in]*/ long Arg1,
        /*[in]*/ long Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SeriesChange (
        /*[in]*/ long SeriesIndex,
        /*[in]*/ long PointIndex ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
};

struct __declspec(uuid("00024410-0001-0000-c000-000000000046"))
IOLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GotFocus ( );
    HRESULT LostFocus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GotFocus ( ) = 0;
      virtual HRESULT __stdcall raw_LostFocus ( ) = 0;
};

struct __declspec(uuid("0002441b-0001-0000-c000-000000000046"))
IRefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRefresh (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterRefresh (
        /*[in]*/ VARIANT_BOOL Success ) = 0;
};

struct __declspec(uuid("00024465-0001-0000-c000-000000000046"))
ISpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    long GetDictLang ( );
    void PutDictLang (
        long RHS );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t RHS );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL RHS );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes RHS );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DictLang (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DictLang (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_UserDict (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_UserDict (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreCaps (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreCaps (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SuggestMainOnly (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SuggestMainOnly (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreMixedDigits (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreMixedDigits (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GermanPostReform (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_GermanPostReform (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanCombineAux (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanCombineAux (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanUseAutoChangeList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanUseAutoChangeList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KoreanProcessCompound (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KoreanProcessCompound (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HebrewModes (
        /*[out,retval]*/ enum XlHebrewModes * RHS ) = 0;
      virtual HRESULT __stdcall put_HebrewModes (
        /*[in]*/ enum XlHebrewModes RHS ) = 0;
      virtual HRESULT __stdcall get_ArabicModes (
        /*[out,retval]*/ enum XlArabicModes * RHS ) = 0;
      virtual HRESULT __stdcall put_ArabicModes (
        /*[in]*/ enum XlArabicModes RHS ) = 0;
};

struct __declspec(uuid("00024466-0001-0000-c000-000000000046"))
ISpeech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection RHS );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Speak (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT SpeakAsync = vtMissing,
        /*[in]*/ VARIANT SpeakXML = vtMissing,
        /*[in]*/ VARIANT Purge = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Direction (
        /*[out,retval]*/ enum XlSpeakDirection * RHS ) = 0;
      virtual HRESULT __stdcall put_Direction (
        /*[in]*/ enum XlSpeakDirection RHS ) = 0;
      virtual HRESULT __stdcall get_SpeakCellOnEnter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SpeakCellOnEnter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002446d-0001-0000-c000-000000000046"))
IUserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("0002446e-0001-0000-c000-000000000046"))
IRTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long RHS );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ThrottleInterval (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ThrottleInterval (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshData ( ) = 0;
      virtual HRESULT __stdcall raw_RestartServers ( ) = 0;
};

struct __declspec(uuid("0002084d-0000-0000-c000-000000000046"))
Font : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBold,put=PutBold))
    _variant_t Bold;
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetItalic,put=PutItalic))
    _variant_t Italic;
    __declspec(property(get=GetShadow,put=PutShadow))
    _variant_t Shadow;
    __declspec(property(get=GetSize,put=PutSize))
    _variant_t Size;
    __declspec(property(get=GetStrikethrough,put=PutStrikethrough))
    _variant_t Strikethrough;
    __declspec(property(get=GetUnderline,put=PutUnderline))
    _variant_t Underline;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    _variant_t FontStyle;
    __declspec(property(get=GetSuperscript,put=PutSuperscript))
    _variant_t Superscript;
    __declspec(property(get=GetSubscript,put=PutSubscript))
    _variant_t Subscript;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBackground,put=PutBackground))
    _variant_t Background;
    __declspec(property(get=GetOutlineFont,put=PutOutlineFont))
    _variant_t OutlineFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBackground ( );
    void PutBackground (
        const _variant_t & _arg1 );
    _variant_t GetBold ( );
    void PutBold (
        const _variant_t & _arg1 );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetFontStyle ( );
    void PutFontStyle (
        const _variant_t & _arg1 );
    _variant_t GetItalic ( );
    void PutItalic (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t GetOutlineFont ( );
    void PutOutlineFont (
        const _variant_t & _arg1 );
    _variant_t GetShadow ( );
    void PutShadow (
        const _variant_t & _arg1 );
    _variant_t GetSize ( );
    void PutSize (
        const _variant_t & _arg1 );
    _variant_t GetStrikethrough ( );
    void PutStrikethrough (
        const _variant_t & _arg1 );
    _variant_t GetSubscript ( );
    void PutSubscript (
        const _variant_t & _arg1 );
    _variant_t GetSuperscript ( );
    void PutSuperscript (
        const _variant_t & _arg1 );
    _variant_t GetUnderline ( );
    void PutUnderline (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020893-0000-0000-c000-000000000046"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & _arg1 );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL _arg1 );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long _arg1 );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t _arg1 );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL _arg1 );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long _arg1 );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double _arg1 );
    long GetSplitRow ( );
    void PutSplitRow (
        long _arg1 );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double _arg1 );
    double GetTabRatio ( );
    void PutTabRatio (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView _arg1 );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020892-0000-0000-c000-000000000046"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetSyncScrollingSideBySide,put=PutSyncScrollingSideBySide))
    VARIANT_BOOL SyncScrollingSideBySide;
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
    VARIANT_BOOL CompareSideBySideWith (
        const _variant_t & WindowName );
    VARIANT_BOOL BreakSideBySide ( );
    VARIANT_BOOL GetSyncScrollingSideBySide ( );
    void PutSyncScrollingSideBySide (
        VARIANT_BOOL _arg1 );
    HRESULT ResetPositionsSideBySide ( );
};

struct __declspec(uuid("00024413-0000-0000-c000-000000000046"))
AppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookSync (
        struct _Workbook * Wb,
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT WorkbookBeforeXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT WorkbookBeforeXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );
};

struct __declspec(uuid("00020845-0000-0000-c000-000000000046"))
WorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );
};

struct __declspec(uuid("00020846-0000-0000-c000-000000000046"))
Range : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr _Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2;
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & _arg1 );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t DialogBoxEx ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula ( );
    void PutFormula (
        const _variant_t & _arg1 );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & _arg1 );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & _arg1 );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        const _variant_t & _arg3 = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & _arg1 );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & _arg1 );
    long GetPageBreak ( );
    void PutPageBreak (
        long _arg1 );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & _arg1 );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & _arg1 );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & _arg1 );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & _arg1 );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & _arg1 );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing );
    void PutValue (
        const _variant_t & RangeValueDataType,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetValue2 ( );
    void PutValue2 (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t _arg1 );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );
    ListObjectPtr GetListObject ( );
    XPathPtr GetXPath ( );
};

struct __declspec(uuid("0002440f-0000-0000-c000-000000000046"))
ChartEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Resize ( );
    HRESULT MouseDown (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseUp (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT MouseMove (
        long Button,
        long Shift,
        long x,
        long y );
    HRESULT BeforeRightClick (
        VARIANT_BOOL * Cancel );
    HRESULT DragPlot ( );
    HRESULT DragOver ( );
    HRESULT BeforeDoubleClick (
        long ElementID,
        long Arg1,
        long Arg2,
        VARIANT_BOOL * Cancel );
    HRESULT Select (
        long ElementID,
        long Arg1,
        long Arg2 );
    HRESULT SeriesChange (
        long SeriesIndex,
        long PointIndex );
    HRESULT Calculate ( );
};

struct __declspec(uuid("00024402-0000-0000-c000-000000000046"))
VPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024401-0000-0000-c000-000000000046"))
HPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak _arg1 );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * _arg1 );
};

struct __declspec(uuid("00024404-0000-0000-c000-000000000046"))
HPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024405-0000-0000-c000-000000000046"))
VPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );
};

struct __declspec(uuid("00024407-0000-0000-c000-000000000046"))
RecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024406-0000-0000-c000-000000000046"))
RecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long _arg1 );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024411-0000-0000-c000-000000000046"))
DocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );
};

struct __declspec(uuid("00020852-0000-0000-c000-000000000046"))
Style : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL _arg1 );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL _arg1 );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t _arg1 );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation _arg1 );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL _arg1 );
    _bstr_t GetValue ( );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL _arg1 );
    _bstr_t Get_Default ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020853-0000-0000-c000-000000000046"))
Styles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[];
    __declspec(property(get=GetItem))
    StylePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("00020855-0000-0000-c000-000000000046"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );
};

struct __declspec(uuid("00020857-0000-0000-c000-000000000046"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );
};

struct __declspec(uuid("00020858-0000-0000-c000-000000000046"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & CopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002085c-0000-0000-c000-000000000046"))
Toolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetLeft ( );
    void PutLeft (
        long _arg1 );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection _arg1 );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085d-0000-0000-c000-000000000046"))
Toolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002085e-0000-0000-c000-000000000046"))
ToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL _arg1 );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
};

struct __declspec(uuid("0002085f-0000-0000-c000-000000000046"))
ToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020860-0000-0000-c000-000000000046"))
Areas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00024412-0000-0000-c000-000000000046"))
WorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );
    HRESULT Sync (
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT BeforeXmlImport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlImport (
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT BeforeXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );
};

struct __declspec(uuid("00020863-0000-0000-c000-000000000046"))
MenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020864-0000-0000-c000-000000000046"))
MenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );
};

struct __declspec(uuid("00020865-0000-0000-c000-000000000046"))
Menus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020866-0000-0000-c000-000000000046"))
Menu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );
};

struct __declspec(uuid("00020867-0000-0000-c000-000000000046"))
MenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00020868-0000-0000-c000-000000000046"))
MenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002086d-0000-0000-c000-000000000046"))
Charts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("0002086f-0000-0000-c000-000000000046"))
DrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002441c-0000-0000-c000-000000000046"))
PivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL _arg1 );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & _arg1 );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
};

struct __declspec(uuid("0002441d-0000-0000-c000-000000000046"))
PivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );
};

struct __declspec(uuid("0002441e-0000-0000-c000-000000000046"))
PivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    long GetIndex ( );
    void PutIndex (
        long _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002441f-0000-0000-c000-000000000046"))
PivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020872-0000-0000-c000-000000000046"))
PivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL _arg1 );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & _arg1 );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long _arg1 );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL _arg1 );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t _arg1 );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t _arg1 );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL _arg1 );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long _arg1 );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t _arg1 );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t _arg1 );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode _arg1 );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t _arg1 );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL _arg1 );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL _arg1 );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t _arg1 );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL _arg1 );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL _arg1 );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL _arg1 );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020873-0000-0000-c000-000000000046"))
PivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
};

struct __declspec(uuid("00020874-0000-0000-c000-000000000046"))
PivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation _arg1 );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & _arg1 );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction _arg1 );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation _arg1 );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL _arg1 );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & _arg1 );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & _arg1 );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & _arg1 );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL _arg1 );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL _arg1 );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType _arg1 );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL _arg1 );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType _arg1 );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long _arg1 );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL _arg1 );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & _arg1 );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );
};

struct __declspec(uuid("00020875-0000-0000-c000-000000000046"))
PivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024420-0000-0000-c000-000000000046"))
CalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020876-0000-0000-c000-000000000046"))
PivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t _arg1 );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long _arg1 );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL _arg1 );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL _arg1 );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t _arg1 );
    _bstr_t GetSourceNameStandard ( );
};

struct __declspec(uuid("00020877-0000-0000-c000-000000000046"))
PivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024421-0000-0000-c000-000000000046"))
CalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );
};

struct __declspec(uuid("00020878-0000-0000-c000-000000000046"))
Characters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020879-0000-0000-c000-000000000046"))
Dialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002087a-0000-0000-c000-000000000046"))
Dialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
};

struct __declspec(uuid("0002087b-0000-0000-c000-000000000046"))
SoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );
};

struct __declspec(uuid("0002087d-0000-0000-c000-000000000046"))
Button : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002087e-0000-0000-c000-000000000046"))
Buttons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002087f-0000-0000-c000-000000000046"))
CheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020880-0000-0000-c000-000000000046"))
CheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020881-0000-0000-c000-000000000046"))
OptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
};

struct __declspec(uuid("00020882-0000-0000-c000-000000000046"))
OptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020883-0000-0000-c000-000000000046"))
EditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020884-0000-0000-c000-000000000046"))
EditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL _arg1 );
    long GetInputType ( );
    void PutInputType (
        long _arg1 );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL _arg1 );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020885-0000-0000-c000-000000000046"))
ScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
};

struct __declspec(uuid("00020886-0000-0000-c000-000000000046"))
ScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020887-0000-0000-c000-000000000046"))
ListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00020888-0000-0000-c000-000000000046"))
ListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020889-0000-0000-c000-000000000046"))
GroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002088a-0000-0000-c000-000000000046"))
GroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088b-0000-0000-c000-000000000046"))
DropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002088c-0000-0000-c000-000000000046"))
DropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088d-0000-0000-c000-000000000046"))
Spinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("0002088e-0000-0000-c000-000000000046"))
Spinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002088f-0000-0000-c000-000000000046"))
DialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00020890-0000-0000-c000-000000000046"))
Label : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020891-0000-0000-c000-000000000046"))
Labels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & _arg1 );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & _arg1 );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020894-0000-0000-c000-000000000046"))
Panes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );
};

struct __declspec(uuid("00020895-0000-0000-c000-000000000046"))
Pane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long _arg1 );
    long GetScrollRow ( );
    void PutScrollRow (
        long _arg1 );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );
};

struct __declspec(uuid("00020896-0000-0000-c000-000000000046"))
Scenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020897-0000-0000-c000-000000000046"))
Scenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL _arg1 );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );
};

struct __declspec(uuid("00020898-0000-0000-c000-000000000046"))
GroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
};

struct __declspec(uuid("00020899-0000-0000-c000-000000000046"))
GroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089a-0000-0000-c000-000000000046"))
Line : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
};

struct __declspec(uuid("0002089b-0000-0000-c000-000000000046"))
Lines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & _arg1 );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & _arg1 );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089c-0000-0000-c000-000000000046"))
Rectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089d-0000-0000-c000-000000000046"))
Rectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002089e-0000-0000-c000-000000000046"))
Oval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002089f-0000-0000-c000-000000000046"))
Ovals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a0-0000-0000-c000-000000000046"))
Arc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
};

struct __declspec(uuid("000208a1-0000-0000-c000-000000000046"))
Arcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024410-0000-0000-c000-000000000046"))
OLEObjectEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GotFocus ( );
    HRESULT LostFocus ( );
};

struct __declspec(uuid("000208a2-0000-0000-c000-000000000046"))
_OLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a3-0000-0000-c000-000000000046"))
OLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t _arg1 );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a4-0000-0000-c000-000000000046"))
TextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208a5-0000-0000-c000-000000000046"))
TextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208a6-0000-0000-c000-000000000046"))
Picture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
};

struct __declspec(uuid("000208a7-0000-0000-c000-000000000046"))
Pictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );
};

struct __declspec(uuid("000208a8-0000-0000-c000-000000000046"))
Drawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
};

struct __declspec(uuid("000208a9-0000-0000-c000-000000000046"))
Drawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208aa-0000-0000-c000-000000000046"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery _arg1 );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & _arg1 );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL _arg1 );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208ab-0000-0000-c000-000000000046"))
Outline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL _arg1 );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn _arg1 );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow _arg1 );
};

struct __declspec(uuid("000208ad-0000-0000-c000-000000000046"))
Module : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectionMode ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
};

struct __declspec(uuid("000208ae-0000-0000-c000-000000000046"))
Modules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208af-0000-0000-c000-000000000046"))
DialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter;
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining;
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects;
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick;
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    HRESULT Delete ( );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t _arg1 );
    long GetIndex ( );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick ( );
    void PutOnDoubleClick (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetActivate ( );
    void PutOnSheetActivate (
        _bstr_t _arg1 );
    _bstr_t GetOnSheetDeactivate ( );
    void PutOnSheetDeactivate (
        _bstr_t _arg1 );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );
    VARIANT_BOOL GetProtectContents ( );
    VARIANT_BOOL GetProtectDrawingObjects ( );
    VARIANT_BOOL GetProtectionMode ( );
    VARIANT_BOOL GetProtectScenarios ( );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    enum XlSheetVisibility GetVisible ( );
    void PutVisible (
        enum XlSheetVisibility _arg1 );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL _arg1 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks ( );
    void PutDisplayAutomaticPageBreaks (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetEnableAutoFilter ( );
    void PutEnableAutoFilter (
        VARIANT_BOOL _arg1 );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection _arg1 );
    VARIANT_BOOL GetEnableOutlining ( );
    void PutEnableOutlining (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnablePivotTable ( );
    void PutEnablePivotTable (
        VARIANT_BOOL _arg1 );
    _variant_t Evaluate (
        const _variant_t & Name );
    _variant_t _Evaluate (
        const _variant_t & Name );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t _arg1 );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL _arg1 );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        long _arg1 );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL _arg1 );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & _arg1 );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & _arg1 );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );
};

struct __declspec(uuid("000208b0-0000-0000-c000-000000000046"))
DialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b1-0000-0000-c000-000000000046"))
Worksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    long GetCount ( );
    HRESULT Delete ( );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible ( );
    void PutVisible (
        const _variant_t & _arg1 );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
};

struct __declspec(uuid("000208b4-0000-0000-c000-000000000046"))
PageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL _arg1 );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double _arg1 );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t _arg1 );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t _arg1 );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL _arg1 );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize _arg1 );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL _arg1 );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long _arg1 );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & _arg1 );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & _arg1 );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double _arg1 );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double _arg1 );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t _arg1 );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t _arg1 );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double _arg1 );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder _arg1 );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation _arg1 );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize _arg1 );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t _arg1 );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL _arg1 );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t _arg1 );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t _arg1 );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t _arg1 );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t _arg1 );
    double GetRightMargin ( );
    void PutRightMargin (
        double _arg1 );
    double GetTopMargin ( );
    void PutTopMargin (
        double _arg1 );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & _arg1 );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation _arg1 );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors _arg1 );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );
};

struct __declspec(uuid("000208b8-0000-0000-c000-000000000046"))
Names : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("000208b9-0000-0000-c000-000000000046"))
Name : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t _Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1;
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t _arg1 );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetRefersTo ( );
    void PutRefersTo (
        const _variant_t & _arg1 );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t _arg1 );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1 ( );
    void PutRefersToR1C1 (
        const _variant_t & _arg1 );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & _arg1 );
    RangePtr GetRefersToRange ( );
};

struct __declspec(uuid("000208cf-0000-0000-c000-000000000046"))
ChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208d0-0000-0000-c000-000000000046"))
ChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208d1-0000-0000-c000-000000000046"))
Mailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & _arg1 );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t _arg1 );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & _arg1 );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024422-0000-0000-c000-000000000046"))
CustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024423-0000-0000-c000-000000000046"))
CustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024424-0000-0000-c000-000000000046"))
FormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024425-0000-0000-c000-000000000046"))
FormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024426-0000-0000-c000-000000000046"))
Comments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024427-0000-0000-c000-000000000046"))
Comment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );
};

struct __declspec(uuid("0002441b-0000-0000-c000-000000000046"))
RefreshEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRefresh (
        VARIANT_BOOL * Cancel );
    HRESULT AfterRefresh (
        VARIANT_BOOL Success );
};

struct __declspec(uuid("00024428-0000-0000-c000-000000000046"))
_QueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetTextFileVisualLayout,put=PutTextFileVisualLayout))
    enum XlTextVisualLayoutType TextFileVisualLayout;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL _arg1 );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode _arg1 );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL _arg1 );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & _arg1 );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & _arg1 );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t _arg1 );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * _arg1 );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL _arg1 );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long _arg1 );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long _arg1 );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType _arg1 );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier _arg1 );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t _arg1 );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & _arg1 );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & _arg1 );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType _arg1 );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL _arg1 );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t _arg1 );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t _arg1 );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long _arg1 );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType _arg1 );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting _arg1 );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t _arg1 );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL _arg1 );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & _arg1 );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t _arg1 );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t _arg1 );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect _arg1 );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL _arg1 );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
    ListObjectPtr GetListObject ( );
    enum XlTextVisualLayoutType GetTextFileVisualLayout ( );
    void PutTextFileVisualLayout (
        enum XlTextVisualLayoutType _arg1 );
};

struct __declspec(uuid("00024429-0000-0000-c000-000000000046"))
QueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442a-0000-0000-c000-000000000046"))
Parameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType _arg1 );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002442b-0000-0000-c000-000000000046"))
Parameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442c-0000-0000-c000-000000000046"))
ODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
};

struct __declspec(uuid("0002442d-0000-0000-c000-000000000046"))
ODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002442f-0000-0000-c000-000000000046"))
Validation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL _arg1 );
    long GetIMEMode ( );
    void PutIMEMode (
        long _arg1 );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t _arg1 );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t _arg1 );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t _arg1 );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t _arg1 );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL _arg1 );
    long GetType ( );
    VARIANT_BOOL GetValue ( );
};

struct __declspec(uuid("00024430-0000-0000-c000-000000000046"))
Hyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024431-0000-0000-c000-000000000046"))
Hyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t _arg1 );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t _arg1 );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t _arg1 );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t _arg1 );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t _arg1 );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );
};

struct __declspec(uuid("00024411-0001-0000-c000-000000000046"))
IDocEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SelectionChange (
        struct Range * Target );
    HRESULT BeforeDoubleClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT BeforeRightClick (
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Calculate ( );
    HRESULT Change (
        struct Range * Target );
    HRESULT FollowHyperlink (
        struct Hyperlink * Target );
    HRESULT PivotTableUpdate (
        struct PivotTable * Target );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SelectionChange (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_BeforeDoubleClick (
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeRightClick (
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Calculate ( ) = 0;
      virtual HRESULT __stdcall raw_Change (
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableUpdate (
        /*[in]*/ struct PivotTable * Target ) = 0;
};

struct __declspec(uuid("00024432-0000-0000-c000-000000000046"))
AutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );
};

struct __declspec(uuid("00024433-0000-0000-c000-000000000046"))
Filters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024434-0000-0000-c000-000000000046"))
Filter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );
};

struct __declspec(uuid("000208d4-0000-0000-c000-000000000046"))
AutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetAutoExpandListRange,put=PutAutoExpandListRange))
    VARIANT_BOOL AutoExpandListRange;
    __declspec(property(get=GetReplaceText,put=PutReplaceText))
    VARIANT_BOOL ReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL _arg1 );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & _arg2 = vtMissing );
    VARIANT_BOOL GetReplaceText ( );
    void PutReplaceText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoExpandListRange ( );
    void PutAutoExpandListRange (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00020854-0000-0000-c000-000000000046"))
Border : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & _arg1 );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020870-0000-0000-c000-000000000046"))
Interior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & _arg1 );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & _arg1 );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & _arg1 );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & _arg1 );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024435-0000-0000-c000-000000000046"))
ChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
};

struct __declspec(uuid("00024436-0000-0000-c000-000000000046"))
ChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRGBEx))
    long RGBEx;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long _arg1 );
    long GetRGBEx ( );
    long Get_Default ( );
    long GetType ( );
};

struct __declspec(uuid("00020848-0000-0000-c000-000000000046"))
Axis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL _arg1 );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & _arg1 );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses _arg1 );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double _arg1 );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark _arg1 );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double _arg1 );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double _arg1 );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double _arg1 );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL _arg1 );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark _arg1 );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double _arg1 );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL _arg1 );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType _arg1 );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition _arg1 );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long _arg1 );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long _arg1 );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType _arg1 );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit _arg1 );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL _arg1 );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit _arg1 );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit _arg1 );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double _arg1 );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL _arg1 );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );
};

struct __declspec(uuid("00020849-0000-0000-c000-000000000046"))
ChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("0002084a-0000-0000-c000-000000000046"))
AxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00020859-0000-0000-c000-000000000046"))
ChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long _arg1 );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long _arg1 );
    long GetGapWidth ( );
    void PutGapWidth (
        long _arg1 );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL _arg1 );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long _arg1 );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long _arg1 );
    long GetType ( );
    void PutType (
        long _arg1 );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL _arg1 );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents _arg1 );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long _arg1 );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL _arg1 );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType _arg1 );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & _arg1 );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long _arg1 );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002085a-0000-0000-c000-000000000046"))
ChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002085b-0000-0000-c000-000000000046"))
Axes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00020869-0000-0000-c000-000000000046"))
Points : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("0002086a-0000-0000-c000-000000000046"))
Point : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL _arg1 );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086b-0000-0000-c000-000000000046"))
Series : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long _arg1 );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t _arg1 );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t _arg1 );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long _arg1 );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long _arg1 );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType _arg1 );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & _arg1 );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & _arg1 );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & _arg1 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape _arg1 );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL _arg1 );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );
};

struct __declspec(uuid("0002086c-0000-0000-c000-000000000046"))
SeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );
};

struct __declspec(uuid("000208b2-0000-0000-c000-000000000046"))
DataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208b3-0000-0000-c000-000000000046"))
DataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL _arg1 );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & _arg1 );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition _arg1 );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL _arg1 );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & _arg1 );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208ba-0000-0000-c000-000000000046"))
LegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
};

struct __declspec(uuid("000208bb-0000-0000-c000-000000000046"))
LegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208bc-0000-0000-c000-000000000046"))
LegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL _arg1 );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long _arg1 );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex _arg1 );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long _arg1 );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle _arg1 );
    long GetPictureType ( );
    void PutPictureType (
        long _arg1 );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long _arg1 );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL _arg1 );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("000208bd-0000-0000-c000-000000000046"))
Trendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("000208be-0000-0000-c000-000000000046"))
Trendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long _arg1 );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL _arg1 );
    long GetForward ( );
    void PutForward (
        long _arg1 );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double _arg1 );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL _arg1 );
    long GetOrder ( );
    void PutOrder (
        long _arg1 );
    long GetPeriod ( );
    void PutPeriod (
        long _arg1 );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType _arg1 );
};

struct __declspec(uuid("000208c0-0000-0000-c000-000000000046"))
Corners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
};

struct __declspec(uuid("000208c1-0000-0000-c000-000000000046"))
SeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c2-0000-0000-c000-000000000046"))
HiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c3-0000-0000-c000-000000000046"))
Gridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("000208c4-0000-0000-c000-000000000046"))
DropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
};

struct __declspec(uuid("00024437-0000-0000-c000-000000000046"))
LeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );
};

struct __declspec(uuid("000208c5-0000-0000-c000-000000000046"))
UpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c6-0000-0000-c000-000000000046"))
DownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
};

struct __declspec(uuid("000208c7-0000-0000-c000-000000000046"))
Floor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
};

struct __declspec(uuid("000208c8-0000-0000-c000-000000000046"))
Walls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & _arg1 );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208c9-0000-0000-c000-000000000046"))
TickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t _arg1 );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation _arg1 );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
};

struct __declspec(uuid("000208cb-0000-0000-c000-000000000046"))
PlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );
};

struct __declspec(uuid("000208cc-0000-0000-c000-000000000046"))
ChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208cd-0000-0000-c000-000000000046"))
Legend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("000208ce-0000-0000-c000-000000000046"))
ErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap _arg1 );
};

struct __declspec(uuid("00020843-0000-0000-c000-000000000046"))
DataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL _arg1 );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024438-0000-0000-c000-000000000046"))
Phonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
};

struct __declspec(uuid("00024439-0000-0000-c000-000000000046"))
Shape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement _arg1 );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443a-0000-0000-c000-000000000046"))
Shapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );
};

struct __declspec(uuid("0002443b-0000-0000-c000-000000000046"))
ShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType _arg1 );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float _arg1 );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float _arg1 );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float _arg1 );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode _arg1 );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t _arg1 );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );
};

struct __declspec(uuid("0002443c-0000-0000-c000-000000000046"))
GroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
};

struct __declspec(uuid("0002443d-0000-0000-c000-000000000046"))
TextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float _arg1 );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float _arg1 );
    float GetMarginRight ( );
    void PutMarginRight (
        float _arg1 );
    float GetMarginTop ( );
    void PutMarginTop (
        float _arg1 );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation _arg1 );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign _arg1 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign _arg1 );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002443e-0000-0000-c000-000000000046"))
ConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType _arg1 );
};

struct __declspec(uuid("0002443f-0000-0000-c000-000000000046"))
FreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );
};

struct __declspec(uuid("00024440-0000-0000-c000-000000000046"))
ControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetLargeChange ( );
    void PutLargeChange (
        long _arg1 );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t _arg1 );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long _arg1 );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t _arg1 );
    long GetListIndex ( );
    void PutListIndex (
        long _arg1 );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL _arg1 );
    long GetMax ( );
    void PutMax (
        long _arg1 );
    long GetMin ( );
    void PutMin (
        long _arg1 );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long _arg1 );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL _arg1 );
    long GetSmallChange ( );
    void PutSmallChange (
        long _arg1 );
    long Get_Default ( );
    void Put_Default (
        long _arg1 );
    long GetValue ( );
    void PutValue (
        long _arg1 );
};

struct __declspec(uuid("00024441-0000-0000-c000-000000000046"))
OLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );
};

struct __declspec(uuid("00024442-0000-0000-c000-000000000046"))
LinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL _arg1 );
    HRESULT Update ( );
};

struct __declspec(uuid("00024443-0000-0000-c000-000000000046"))
PublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );
};

struct __declspec(uuid("00024445-0000-0000-c000-000000000046"))
OLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );
};

struct __declspec(uuid("00024446-0000-0000-c000-000000000046"))
OLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024447-0000-0000-c000-000000000046"))
Phonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetCharacterType ( );
    void PutCharacterType (
        long _arg1 );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002444a-0000-0000-c000-000000000046"))
PivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t _arg1 );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );
};

struct __declspec(uuid("0002084c-0000-0000-c000-000000000046"))
DisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    double GetLeft ( );
    void PutLeft (
        double _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t _arg1 );
    double GetTop ( );
    void PutTop (
        double _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long _arg1 );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & _arg1 );
};

struct __declspec(uuid("00024450-0000-0000-c000-000000000046"))
CellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * _arg1 );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * _arg1 );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * _arg1 );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & _arg1 );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & _arg1 );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & _arg1 );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & _arg1 );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & _arg1 );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & _arg1 );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & _arg1 );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & _arg1 );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & _arg1 );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & _arg1 );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & _arg1 );
    HRESULT Clear ( );
};

struct __declspec(uuid("00024451-0000-0000-c000-000000000046"))
UsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
};

struct __declspec(uuid("00024452-0000-0000-c000-000000000046"))
CustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024453-0000-0000-c000-000000000046"))
CustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    _variant_t Get_Default ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024454-0000-0000-c000-000000000046"))
CalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );
};

struct __declspec(uuid("00024455-0000-0000-c000-000000000046"))
CalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );
};

struct __declspec(uuid("00024456-0000-0000-c000-000000000046"))
Watches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
};

struct __declspec(uuid("00024457-0000-0000-c000-000000000046"))
Watch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );
};

struct __declspec(uuid("00024458-0000-0000-c000-000000000046"))
PivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );
};

struct __declspec(uuid("00024459-0000-0000-c000-000000000046"))
Graphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float _arg1 );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType _arg1 );
    float GetContrast ( );
    void PutContrast (
        float _arg1 );
    float GetCropBottom ( );
    void PutCropBottom (
        float _arg1 );
    float GetCropLeft ( );
    void PutCropLeft (
        float _arg1 );
    float GetCropRight ( );
    void PutCropRight (
        float _arg1 );
    float GetCropTop ( );
    void PutCropTop (
        float _arg1 );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t _arg1 );
    float GetHeight ( );
    void PutHeight (
        float _arg1 );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState _arg1 );
    float GetWidth ( );
    void PutWidth (
        float _arg1 );
};

struct __declspec(uuid("0002445a-0000-0000-c000-000000000046"))
AutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetTime ( );
    void PutTime (
        long _arg1 );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0002445b-0000-0000-c000-000000000046"))
ErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetListDataValidation,put=PutListDataValidation))
    VARIANT_BOOL ListDataValidation;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL _arg1 );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex _arg1 );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetListDataValidation ( );
    void PutListDataValidation (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445c-0000-0000-c000-000000000046"))
Errors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );
};

struct __declspec(uuid("0002445d-0000-0000-c000-000000000046"))
Error : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("0002445e-0000-0000-c000-000000000046"))
SmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetType))
    enum XlSmartTagControlType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresentInPane))
    VARIANT_BOOL PresentInPane;
    __declspec(property(get=GetExpandHelp,put=PutExpandHelp))
    VARIANT_BOOL ExpandHelp;
    __declspec(property(get=GetCheckboxState,put=PutCheckboxState))
    VARIANT_BOOL CheckboxState;
    __declspec(property(get=GetTextboxText,put=PutTextboxText))
    _bstr_t TextboxText;
    __declspec(property(get=GetListSelection,put=PutListSelection))
    long ListSelection;
    __declspec(property(get=GetRadioGroupSelection,put=PutRadioGroupSelection))
    long RadioGroupSelection;
    __declspec(property(get=GetActiveXControl))
    IDispatchPtr ActiveXControl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );
    enum XlSmartTagControlType GetType ( );
    VARIANT_BOOL GetPresentInPane ( );
    VARIANT_BOOL GetExpandHelp ( );
    void PutExpandHelp (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCheckboxState ( );
    void PutCheckboxState (
        VARIANT_BOOL _arg1 );
    _bstr_t GetTextboxText ( );
    void PutTextboxText (
        _bstr_t _arg1 );
    long GetListSelection ( );
    void PutListSelection (
        long _arg1 );
    long GetRadioGroupSelection ( );
    void PutRadioGroupSelection (
        long _arg1 );
    IDispatchPtr GetActiveXControl ( );
};

struct __declspec(uuid("0002445f-0000-0000-c000-000000000046"))
SmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024460-0000-0000-c000-000000000046"))
SmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );
};

struct __declspec(uuid("00024461-0000-0000-c000-000000000046"))
SmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024462-0000-0000-c000-000000000046"))
SmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );
};

struct __declspec(uuid("00024463-0000-0000-c000-000000000046"))
SmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024464-0000-0000-c000-000000000046"))
SmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode _arg1 );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024465-0000-0000-c000-000000000046"))
SpellingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDictLang,put=PutDictLang))
    long DictLang;
    __declspec(property(get=GetUserDict,put=PutUserDict))
    _bstr_t UserDict;
    __declspec(property(get=GetIgnoreCaps,put=PutIgnoreCaps))
    VARIANT_BOOL IgnoreCaps;
    __declspec(property(get=GetSuggestMainOnly,put=PutSuggestMainOnly))
    VARIANT_BOOL SuggestMainOnly;
    __declspec(property(get=GetIgnoreMixedDigits,put=PutIgnoreMixedDigits))
    VARIANT_BOOL IgnoreMixedDigits;
    __declspec(property(get=GetIgnoreFileNames,put=PutIgnoreFileNames))
    VARIANT_BOOL IgnoreFileNames;
    __declspec(property(get=GetGermanPostReform,put=PutGermanPostReform))
    VARIANT_BOOL GermanPostReform;
    __declspec(property(get=GetKoreanCombineAux,put=PutKoreanCombineAux))
    VARIANT_BOOL KoreanCombineAux;
    __declspec(property(get=GetKoreanUseAutoChangeList,put=PutKoreanUseAutoChangeList))
    VARIANT_BOOL KoreanUseAutoChangeList;
    __declspec(property(get=GetKoreanProcessCompound,put=PutKoreanProcessCompound))
    VARIANT_BOOL KoreanProcessCompound;
    __declspec(property(get=GetHebrewModes,put=PutHebrewModes))
    enum XlHebrewModes HebrewModes;
    __declspec(property(get=GetArabicModes,put=PutArabicModes))
    enum XlArabicModes ArabicModes;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetDictLang ( );
    void PutDictLang (
        long _arg1 );
    _bstr_t GetUserDict ( );
    void PutUserDict (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIgnoreCaps ( );
    void PutIgnoreCaps (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuggestMainOnly ( );
    void PutSuggestMainOnly (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreMixedDigits ( );
    void PutIgnoreMixedDigits (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIgnoreFileNames ( );
    void PutIgnoreFileNames (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetGermanPostReform ( );
    void PutGermanPostReform (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanCombineAux ( );
    void PutKoreanCombineAux (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanUseAutoChangeList ( );
    void PutKoreanUseAutoChangeList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetKoreanProcessCompound ( );
    void PutKoreanProcessCompound (
        VARIANT_BOOL _arg1 );
    enum XlHebrewModes GetHebrewModes ( );
    void PutHebrewModes (
        enum XlHebrewModes _arg1 );
    enum XlArabicModes GetArabicModes ( );
    void PutArabicModes (
        enum XlArabicModes _arg1 );
};

struct __declspec(uuid("00024466-0000-0000-c000-000000000046"))
Speech : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDirection,put=PutDirection))
    enum XlSpeakDirection Direction;
    __declspec(property(get=GetSpeakCellOnEnter,put=PutSpeakCellOnEnter))
    VARIANT_BOOL SpeakCellOnEnter;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Speak (
        _bstr_t Text,
        const _variant_t & SpeakAsync = vtMissing,
        const _variant_t & SpeakXML = vtMissing,
        const _variant_t & Purge = vtMissing );
    enum XlSpeakDirection GetDirection ( );
    void PutDirection (
        enum XlSpeakDirection _arg1 );
    VARIANT_BOOL GetSpeakCellOnEnter ( );
    void PutSpeakCellOnEnter (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("00024467-0000-0000-c000-000000000046"))
Protection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );
};

struct __declspec(uuid("00024468-0000-0000-c000-000000000046"))
PivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
};

struct __declspec(uuid("00024469-0000-0000-c000-000000000046"))
Tab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & _arg1 );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex _arg1 );
};

struct __declspec(uuid("0002446a-0000-0000-c000-000000000046"))
AllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("00024467-0001-0000-c000-000000000046"))
IProtection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowFormattingCells))
    VARIANT_BOOL AllowFormattingCells;
    __declspec(property(get=GetAllowFormattingColumns))
    VARIANT_BOOL AllowFormattingColumns;
    __declspec(property(get=GetAllowFormattingRows))
    VARIANT_BOOL AllowFormattingRows;
    __declspec(property(get=GetAllowInsertingColumns))
    VARIANT_BOOL AllowInsertingColumns;
    __declspec(property(get=GetAllowInsertingRows))
    VARIANT_BOOL AllowInsertingRows;
    __declspec(property(get=GetAllowInsertingHyperlinks))
    VARIANT_BOOL AllowInsertingHyperlinks;
    __declspec(property(get=GetAllowDeletingColumns))
    VARIANT_BOOL AllowDeletingColumns;
    __declspec(property(get=GetAllowDeletingRows))
    VARIANT_BOOL AllowDeletingRows;
    __declspec(property(get=GetAllowSorting))
    VARIANT_BOOL AllowSorting;
    __declspec(property(get=GetAllowFiltering))
    VARIANT_BOOL AllowFiltering;
    __declspec(property(get=GetAllowUsingPivotTables))
    VARIANT_BOOL AllowUsingPivotTables;
    __declspec(property(get=GetAllowEditRanges))
    AllowEditRangesPtr AllowEditRanges;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetAllowFormattingCells ( );
    VARIANT_BOOL GetAllowFormattingColumns ( );
    VARIANT_BOOL GetAllowFormattingRows ( );
    VARIANT_BOOL GetAllowInsertingColumns ( );
    VARIANT_BOOL GetAllowInsertingRows ( );
    VARIANT_BOOL GetAllowInsertingHyperlinks ( );
    VARIANT_BOOL GetAllowDeletingColumns ( );
    VARIANT_BOOL GetAllowDeletingRows ( );
    VARIANT_BOOL GetAllowSorting ( );
    VARIANT_BOOL GetAllowFiltering ( );
    VARIANT_BOOL GetAllowUsingPivotTables ( );
    AllowEditRangesPtr GetAllowEditRanges ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AllowFormattingCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFormattingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFormattingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowInsertingHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowDeletingColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowDeletingRows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowSorting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFiltering (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowUsingPivotTables (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEditRanges (
        /*[out,retval]*/ struct AllowEditRanges * * RHS ) = 0;
};

struct __declspec(uuid("0002446b-0000-0000-c000-000000000046"))
AllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t _arg1 );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * _arg1 );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );
};

struct __declspec(uuid("0002446a-0001-0000-c000-000000000046"))
IAllowEditRanges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AllowEditRangePtr _Default[];
    __declspec(property(get=GetItem))
    AllowEditRangePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    AllowEditRangePtr GetItem (
        const _variant_t & Index );
    AllowEditRangePtr Add (
        _bstr_t Title,
        struct Range * Range,
        const _variant_t & Password = vtMissing );
    AllowEditRangePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Title,
        /*[in]*/ struct Range * Range,
        /*[in]*/ VARIANT Password,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AllowEditRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446c-0000-0000-c000-000000000046"))
UserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002446b-0001-0000-c000-000000000046"))
IAllowEditRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange,put=PutRefRange))
    RangePtr Range;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetUsers))
    UserAccessListPtr Users;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    RangePtr GetRange ( );
    void PutRefRange (
        struct Range * RHS );
    HRESULT ChangePassword (
        _bstr_t Password );
    HRESULT Delete ( );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing );
    UserAccessListPtr GetUsers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Range (
        /*[in]*/ struct Range * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangePassword (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct UserAccessList * * RHS ) = 0;
};

struct __declspec(uuid("0002446d-0000-0000-c000-000000000046"))
UserAccess : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAllowEdit,put=PutAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    VARIANT_BOOL GetAllowEdit ( );
    void PutAllowEdit (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );
};

struct __declspec(uuid("0002446c-0001-0000-c000-000000000046"))
IUserAccessList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    UserAccessPtr _Default[];
    __declspec(property(get=GetItem))
    UserAccessPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    UserAccessPtr GetItem (
        const _variant_t & Index );
    UserAccessPtr Add (
        _bstr_t Name,
        VARIANT_BOOL AllowEdit );
    HRESULT DeleteAll ( );
    UserAccessPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL AllowEdit,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UserAccess * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002446e-0000-0000-c000-000000000046"))
RTD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetThrottleInterval,put=PutThrottleInterval))
    long ThrottleInterval;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetThrottleInterval ( );
    void PutThrottleInterval (
        long _arg1 );
    HRESULT RefreshData ( );
    HRESULT RestartServers ( );
};

struct __declspec(uuid("0002446f-0000-0000-c000-000000000046"))
Diagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState _arg1 );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState _arg1 );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
    HRESULT FitText ( );
};

struct __declspec(uuid("00024470-0000-0000-c000-000000000046"))
ListObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListObjectPtr _Default[];
    __declspec(property(get=GetItem))
    ListObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListObjectPtr Add (
        enum XlListObjectSourceType SourceType,
        const _variant_t & Source,
        const _variant_t & LinkSource,
        enum XlYesNoGuess XlListObjectHasHeaders,
        const _variant_t & Destination = vtMissing );
    ListObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListObjectPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024471-0000-0000-c000-000000000046"))
ListObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetHeaderRowRange))
    RangePtr HeaderRowRange;
    __declspec(property(get=GetInsertRowRange))
    RangePtr InsertRowRange;
    __declspec(property(get=GetListColumns))
    ListColumnsPtr ListColumns;
    __declspec(property(get=GetListRows))
    ListRowsPtr ListRows;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShowAutoFilter,put=PutShowAutoFilter))
    VARIANT_BOOL ShowAutoFilter;
    __declspec(property(get=GetShowTotals,put=PutShowTotals))
    VARIANT_BOOL ShowTotals;
    __declspec(property(get=GetSourceType))
    enum XlListObjectSourceType SourceType;
    __declspec(property(get=GetTotalsRowRange))
    RangePtr TotalsRowRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointURL))
    _bstr_t SharePointURL;
    __declspec(property(get=GetXmlMap))
    XmlMapPtr XmlMap;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Publish (
        const _variant_t & Target,
        VARIANT_BOOL LinkSource );
    HRESULT Refresh ( );
    HRESULT Unlink ( );
    HRESULT Unlist ( );
    HRESULT UpdateChanges (
        enum XlListConflict iConflictType );
    HRESULT Resize (
        struct Range * Range );
    _bstr_t Get_Default ( );
    VARIANT_BOOL GetActive ( );
    RangePtr GetDataBodyRange ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    RangePtr GetHeaderRowRange ( );
    RangePtr GetInsertRowRange ( );
    ListColumnsPtr GetListColumns ( );
    ListRowsPtr GetListRows ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange ( );
    VARIANT_BOOL GetShowAutoFilter ( );
    void PutShowAutoFilter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowTotals ( );
    void PutShowTotals (
        VARIANT_BOOL _arg1 );
    enum XlListObjectSourceType GetSourceType ( );
    RangePtr GetTotalsRowRange ( );
    _bstr_t GetSharePointURL ( );
    XmlMapPtr GetXmlMap ( );
};

struct __declspec(uuid("00024472-0000-0000-c000-000000000046"))
ListColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListColumnPtr _Default[];
    __declspec(property(get=GetItem))
    ListColumnPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListColumnPtr Add (
        const _variant_t & Position = vtMissing );
    ListColumnPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListColumnPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024473-0000-0000-c000-000000000046"))
ListColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetListDataFormat))
    ListDataFormatPtr ListDataFormat;
    __declspec(property(get=GetTotalsCalculation,put=PutTotalsCalculation))
    enum XlTotalsCalculation TotalsCalculation;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointFormula))
    _bstr_t SharePointFormula;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    ListDataFormatPtr GetListDataFormat ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    RangePtr GetRange ( );
    enum XlTotalsCalculation GetTotalsCalculation ( );
    void PutTotalsCalculation (
        enum XlTotalsCalculation _arg1 );
    XPathPtr GetXPath ( );
    _bstr_t GetSharePointFormula ( );
};

struct __declspec(uuid("00024474-0000-0000-c000-000000000046"))
ListRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListRowPtr _Default[];
    __declspec(property(get=GetItem))
    ListRowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListRowPtr Add (
        const _variant_t & Position = vtMissing );
    ListRowPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListRowPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
};

struct __declspec(uuid("00024475-0000-0000-c000-000000000046"))
ListRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInvalidData))
    VARIANT_BOOL InvalidData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    long GetIndex ( );
    VARIANT_BOOL GetInvalidData ( );
    RangePtr GetRange ( );
};

struct __declspec(uuid("00024476-0000-0000-c000-000000000046"))
XmlNamespace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPrefix))
    _bstr_t Prefix;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetUri ( );
    _bstr_t GetPrefix ( );
};

struct __declspec(uuid("00024477-0000-0000-c000-000000000046"))
XmlNamespaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlNamespacePtr _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetItem))
    XmlNamespacePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr Get_Default (
        const _variant_t & Index );
    XmlNamespacePtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    _bstr_t GetValue ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT InstallManifest (
        _bstr_t Path,
        const _variant_t & InstallForAllUsers = vtMissing );
};

struct __declspec(uuid("00024478-0000-0000-c000-000000000046"))
XmlDataBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceUrl))
    _bstr_t SourceUrl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    enum XlXmlImportResult Refresh ( );
    HRESULT LoadSettings (
        _bstr_t Url );
    HRESULT ClearSettings ( );
    _bstr_t GetSourceUrl ( );
};

struct __declspec(uuid("00024479-0000-0000-c000-000000000046"))
XmlSchema : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNamespace))
    XmlNamespacePtr Namespace;
    __declspec(property(get=GetXML))
    _bstr_t XML;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr GetNamespace ( );
    _bstr_t GetXML ( );
    _bstr_t GetName ( );
};

struct __declspec(uuid("0002447a-0000-0000-c000-000000000046"))
XmlSchemas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlSchemaPtr _Default[];
    __declspec(property(get=GetItem))
    XmlSchemaPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlSchemaPtr Get_Default (
        const _variant_t & Index );
    XmlSchemaPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002447b-0000-0000-c000-000000000046"))
XmlMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetSaveDataSourceDefinition,put=PutSaveDataSourceDefinition))
    VARIANT_BOOL SaveDataSourceDefinition;
    __declspec(property(get=GetPreserveColumnFilter,put=PutPreserveColumnFilter))
    VARIANT_BOOL PreserveColumnFilter;
    __declspec(property(get=GetPreserveNumberFormatting,put=PutPreserveNumberFormatting))
    VARIANT_BOOL PreserveNumberFormatting;
    __declspec(property(get=GetAppendOnImport,put=PutAppendOnImport))
    VARIANT_BOOL AppendOnImport;
    __declspec(property(get=GetRootElementName))
    _bstr_t RootElementName;
    __declspec(property(get=GetRootElementNamespace))
    XmlNamespacePtr RootElementNamespace;
    __declspec(property(get=GetSchemas))
    XmlSchemasPtr Schemas;
    __declspec(property(get=GetDataBinding))
    XmlDataBindingPtr DataBinding;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsExportable))
    VARIANT_BOOL IsExportable;
    __declspec(property(get=GetShowImportExportValidationErrors,put=PutShowImportExportValidationErrors))
    VARIANT_BOOL ShowImportExportValidationErrors;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetIsExportable ( );
    VARIANT_BOOL GetShowImportExportValidationErrors ( );
    void PutShowImportExportValidationErrors (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSaveDataSourceDefinition ( );
    void PutSaveDataSourceDefinition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveColumnFilter ( );
    void PutPreserveColumnFilter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPreserveNumberFormatting ( );
    void PutPreserveNumberFormatting (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAppendOnImport ( );
    void PutAppendOnImport (
        VARIANT_BOOL _arg1 );
    _bstr_t GetRootElementName ( );
    XmlNamespacePtr GetRootElementNamespace ( );
    XmlSchemasPtr GetSchemas ( );
    XmlDataBindingPtr GetDataBinding ( );
    HRESULT Delete ( );
    enum XlXmlImportResult Import (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlImportResult ImportXml (
        _bstr_t XmlData,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult Export (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult ExportXml (
        BSTR * Data );
};

struct __declspec(uuid("00024412-0001-0000-c000-000000000046"))
IWorkbookEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Open ( );
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT BeforeClose (
        VARIANT_BOOL * Cancel );
    HRESULT BeforeSave (
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT BeforePrint (
        VARIANT_BOOL * Cancel );
    HRESULT NewSheet (
        IDispatch * Sh );
    HRESULT AddinInstall ( );
    HRESULT AddinUninstall ( );
    HRESULT WindowResize (
        struct Window * Wn );
    HRESULT WindowActivate (
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct Window * Wn );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT PivotTableCloseConnection (
        struct PivotTable * Target );
    HRESULT PivotTableOpenConnection (
        struct PivotTable * Target );
    HRESULT Sync (
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT BeforeXmlImport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlImport (
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT BeforeXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT AfterXmlExport (
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeClose (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforeSave (
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_BeforePrint (
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_NewSheet (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_AddinInstall ( ) = 0;
      virtual HRESULT __stdcall raw_AddinUninstall ( ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableCloseConnection (
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_PivotTableOpenConnection (
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_Sync (
        /*[in]*/ enum Office::MsoSyncEventType SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_BeforeXmlImport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterXmlImport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in]*/ enum XlXmlImportResult Result ) = 0;
      virtual HRESULT __stdcall raw_BeforeXmlExport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_AfterXmlExport (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ enum XlXmlExportResult Result ) = 0;
};

struct __declspec(uuid("0002447c-0000-0000-c000-000000000046"))
XmlMaps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlMapPtr _Default[];
    __declspec(property(get=GetItem))
    XmlMapPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlMapPtr Add (
        _bstr_t Schema,
        const _variant_t & RootElementName = vtMissing );
    XmlMapPtr Get_Default (
        const _variant_t & Index );
    XmlMapPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
};

struct __declspec(uuid("0002447d-0000-0000-c000-000000000046"))
ListDataFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    enum XlListDataType _Default;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetChoices))
    _variant_t Choices;
    __declspec(property(get=GetDecimalPlaces))
    long DecimalPlaces;
    __declspec(property(get=GetDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetIsPercent))
    VARIANT_BOOL IsPercent;
    __declspec(property(get=Getlcid))
    long lcid;
    __declspec(property(get=GetMaxCharacters))
    long MaxCharacters;
    __declspec(property(get=GetMaxNumber))
    _variant_t MaxNumber;
    __declspec(property(get=GetMinNumber))
    _variant_t MinNumber;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetType))
    enum XlListDataType Type;
    __declspec(property(get=GetAllowFillIn))
    VARIANT_BOOL AllowFillIn;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlListDataType Get_Default ( );
    _variant_t GetChoices ( );
    long GetDecimalPlaces ( );
    _variant_t GetDefaultValue ( );
    VARIANT_BOOL GetIsPercent ( );
    long Getlcid ( );
    long GetMaxCharacters ( );
    _variant_t GetMaxNumber ( );
    _variant_t GetMinNumber ( );
    VARIANT_BOOL GetRequired ( );
    enum XlListDataType GetType ( );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetAllowFillIn ( );
};

struct __declspec(uuid("0002447e-0000-0000-c000-000000000046"))
XPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMap))
    XmlMapPtr Map;
    __declspec(property(get=GetRepeating))
    VARIANT_BOOL Repeating;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetValue ( );
    XmlMapPtr GetMap ( );
    HRESULT SetValue (
        struct XmlMap * Map,
        _bstr_t XPath,
        const _variant_t & SelectionNamespace = vtMissing,
        const _variant_t & Repeating = vtMissing );
    HRESULT Clear ( );
    VARIANT_BOOL GetRepeating ( );
};

struct __declspec(uuid("0002442e-0001-0000-c000-000000000046"))
IDummy : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT _ActiveSheetOrChart ( );
    HRESULT RGBEx ( );
    HRESULT ChDir ( );
    HRESULT DoScript ( );
    HRESULT DirectObject ( );
    HRESULT RefreshDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw__ActiveSheetOrChart ( ) = 0;
      virtual HRESULT __stdcall raw_RGBEx ( ) = 0;
      virtual HRESULT __stdcall raw_ChDir ( ) = 0;
      virtual HRESULT __stdcall raw_DoScript ( ) = 0;
      virtual HRESULT __stdcall raw_DirectObject ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshDocument ( ) = 0;
};

struct __declspec(uuid("0002444f-0001-0000-c000-000000000046"))
ICanvasShapes : IDispatch
{};

struct __declspec(uuid("59191da1-ea47-11ce-a51f-00aa0061507f"))
QueryTable;
    // [ default ] dispinterface _QueryTable
    // [ default, source ] dispinterface RefreshEvents

struct __declspec(uuid("00024500-0000-0000-c000-000000000046"))
Application;
    // [ default ] interface _Application
    // [ default, source ] dispinterface AppEvents

struct __declspec(uuid("00020892-0001-0000-c000-000000000046"))
IWindows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WindowPtr _Default[];
    __declspec(property(get=GetSyncScrollingSideBySide,put=PutSyncScrollingSideBySide))
    VARIANT_BOOL SyncScrollingSideBySide;
    __declspec(property(get=GetItem))
    WindowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Arrange (
        enum XlArrangeStyle ArrangeStyle,
        const _variant_t & ActiveWorkbook = vtMissing,
        const _variant_t & SyncHorizontal = vtMissing,
        const _variant_t & SyncVertical = vtMissing );
    long GetCount ( );
    WindowPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WindowPtr Get_Default (
        const _variant_t & Index );
    VARIANT_BOOL CompareSideBySideWith (
        const _variant_t & WindowName );
    VARIANT_BOOL BreakSideBySide ( );
    VARIANT_BOOL GetSyncScrollingSideBySide ( );
    void PutSyncScrollingSideBySide (
        VARIANT_BOOL RHS );
    HRESULT ResetPositionsSideBySide ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Arrange (
        /*[in]*/ enum XlArrangeStyle ArrangeStyle,
        /*[in]*/ VARIANT ActiveWorkbook,
        /*[in]*/ VARIANT SyncHorizontal,
        /*[in]*/ VARIANT SyncVertical,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CompareSideBySideWith (
        /*[in]*/ VARIANT WindowName,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_BreakSideBySide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SyncScrollingSideBySide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SyncScrollingSideBySide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetPositionsSideBySide ( ) = 0;
};

struct __declspec(uuid("00020845-0001-0000-c000-000000000046"))
IWorksheetFunction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Count (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL IsNA (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsError (
        const _variant_t & Arg1 );
    double Sum (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Average (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Min (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Max (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Npv (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double StDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _bstr_t Dollar (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Fixed (
        double Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing );
    double Pi ( );
    double Ln (
        double Arg1 );
    double Log10 (
        double Arg1 );
    double Round (
        double Arg1,
        double Arg2 );
    _variant_t Lookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Index (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _bstr_t Rept (
        _bstr_t Arg1,
        double Arg2 );
    VARIANT_BOOL And (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL Or (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DCount (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DSum (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DAverage (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMin (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DMax (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DStDev (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Var (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DVar (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t Text (
        const _variant_t & Arg1,
        _bstr_t Arg2 );
    _variant_t LinEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Trend (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t LogEst (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Growth (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    double Pv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Fv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double NPer (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Pmt (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double Rate (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double MIrr (
        const _variant_t & Arg1,
        double Arg2,
        double Arg3 );
    double Irr (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Match (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Weekday (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing );
    double Search (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _variant_t Transpose (
        const _variant_t & Arg1 );
    double Atan2 (
        double Arg1,
        double Arg2 );
    double Asin (
        double Arg1 );
    double Acos (
        double Arg1 );
    _variant_t Choose (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t HLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    _variant_t VLookup (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Log (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Proper (
        _bstr_t Arg1 );
    _bstr_t Trim (
        _bstr_t Arg1 );
    _bstr_t Replace (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    _bstr_t Substitute (
        _bstr_t Arg1,
        _bstr_t Arg2,
        _bstr_t Arg3,
        const _variant_t & Arg4 = vtMissing );
    double Find (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    VARIANT_BOOL IsErr (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsText (
        const _variant_t & Arg1 );
    VARIANT_BOOL IsNumber (
        const _variant_t & Arg1 );
    double Sln (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Syd (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double Ddb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _bstr_t Clean (
        _bstr_t Arg1 );
    double MDeterm (
        const _variant_t & Arg1 );
    _variant_t MInverse (
        const _variant_t & Arg1 );
    _variant_t MMult (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Ipmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double Ppmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing );
    double CountA (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Product (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Fact (
        double Arg1 );
    double DProduct (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsNonText (
        const _variant_t & Arg1 );
    double StDevP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double VarP (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double DStDevP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double DVarP (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    VARIANT_BOOL IsLogical (
        const _variant_t & Arg1 );
    double DCountA (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    _bstr_t USDollar (
        double Arg1,
        double Arg2 );
    double FindB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    double SearchB (
        _bstr_t Arg1,
        _bstr_t Arg2,
        const _variant_t & Arg3 = vtMissing );
    _bstr_t ReplaceB (
        _bstr_t Arg1,
        double Arg2,
        double Arg3,
        _bstr_t Arg4 );
    double RoundUp (
        double Arg1,
        double Arg2 );
    double RoundDown (
        double Arg1,
        double Arg2 );
    double Rank (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Days360 (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Vdb (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        double Arg5,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing );
    double Median (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumProduct (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Sinh (
        double Arg1 );
    double Cosh (
        double Arg1 );
    double Tanh (
        double Arg1 );
    double Asinh (
        double Arg1 );
    double Acosh (
        double Arg1 );
    double Atanh (
        double Arg1 );
    _variant_t DGet (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double Db (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4,
        const _variant_t & Arg5 = vtMissing );
    _variant_t Frequency (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double AveDev (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double BetaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double GammaLn (
        double Arg1 );
    double BetaInv (
        double Arg1,
        double Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing );
    double BinomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double ChiDist (
        double Arg1,
        double Arg2 );
    double ChiInv (
        double Arg1,
        double Arg2 );
    double Combin (
        double Arg1,
        double Arg2 );
    double Confidence (
        double Arg1,
        double Arg2,
        double Arg3 );
    double CritBinom (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Even (
        double Arg1 );
    double ExponDist (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double FDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double FInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Fisher (
        double Arg1 );
    double FisherInv (
        double Arg1 );
    double Floor (
        double Arg1,
        double Arg2 );
    double GammaDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double GammaInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Ceiling (
        double Arg1,
        double Arg2 );
    double HypGeomDist (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    double LogNormDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double LogInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NegBinomDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormDist (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double NormSDist (
        double Arg1 );
    double NormInv (
        double Arg1,
        double Arg2,
        double Arg3 );
    double NormSInv (
        double Arg1 );
    double Standardize (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Odd (
        double Arg1 );
    double Permut (
        double Arg1,
        double Arg2 );
    double Poisson (
        double Arg1,
        double Arg2,
        VARIANT_BOOL Arg3 );
    double TDist (
        double Arg1,
        double Arg2,
        double Arg3 );
    double Weibull (
        double Arg1,
        double Arg2,
        double Arg3,
        VARIANT_BOOL Arg4 );
    double SumXMY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2MY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double SumX2PY2 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double ChiTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Correl (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Covar (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Forecast (
        double Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 );
    double FTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Intercept (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Pearson (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double RSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double StEyx (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double Slope (
        const _variant_t & Arg1,
        const _variant_t & Arg2 );
    double TTest (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        double Arg4 );
    double Prob (
        const _variant_t & Arg1,
        const _variant_t & Arg2,
        double Arg3,
        const _variant_t & Arg4 = vtMissing );
    double DevSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double GeoMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double HarMean (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumSq (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Kurt (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double Skew (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double ZTest (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Large (
        const _variant_t & Arg1,
        double Arg2 );
    double Small (
        const _variant_t & Arg1,
        double Arg2 );
    double Quartile (
        const _variant_t & Arg1,
        double Arg2 );
    double Percentile (
        const _variant_t & Arg1,
        double Arg2 );
    double PercentRank (
        const _variant_t & Arg1,
        double Arg2,
        const _variant_t & Arg3 = vtMissing );
    double Mode (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double TrimMean (
        const _variant_t & Arg1,
        double Arg2 );
    double TInv (
        double Arg1,
        double Arg2 );
    double Power (
        double Arg1,
        double Arg2 );
    double Radians (
        double Arg1 );
    double Degrees (
        double Arg1 );
    double Subtotal (
        double Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    double SumIf (
        struct Range * Arg1,
        const _variant_t & Arg2,
        const _variant_t & Arg3 = vtMissing );
    double CountIf (
        struct Range * Arg1,
        const _variant_t & Arg2 );
    double CountBlank (
        struct Range * Arg1 );
    double Ispmt (
        double Arg1,
        double Arg2,
        double Arg3,
        double Arg4 );
    _bstr_t Roman (
        double Arg1,
        const _variant_t & Arg2 = vtMissing );
    _bstr_t Asc (
        _bstr_t Arg1 );
    _bstr_t Dbcs (
        _bstr_t Arg1 );
    _bstr_t Phonetic (
        struct Range * Arg1 );
    _bstr_t BahtText (
        double Arg1 );
    _bstr_t ThaiDayOfWeek (
        double Arg1 );
    _bstr_t ThaiDigit (
        _bstr_t Arg1 );
    _bstr_t ThaiMonthOfYear (
        double Arg1 );
    _bstr_t ThaiNumSound (
        double Arg1 );
    _bstr_t ThaiNumString (
        double Arg1 );
    double ThaiStringLength (
        _bstr_t Arg1 );
    VARIANT_BOOL IsThaiDigit (
        _bstr_t Arg1 );
    double RoundBahtDown (
        double Arg1 );
    double RoundBahtUp (
        double Arg1 );
    double ThaiYear (
        double Arg1 );
    _variant_t RTD (
        const _variant_t & progID,
        const _variant_t & server,
        const _variant_t & topic1,
        const _variant_t & topic2 = vtMissing,
        const _variant_t & topic3 = vtMissing,
        const _variant_t & topic4 = vtMissing,
        const _variant_t & topic5 = vtMissing,
        const _variant_t & topic6 = vtMissing,
        const _variant_t & topic7 = vtMissing,
        const _variant_t & topic8 = vtMissing,
        const _variant_t & topic9 = vtMissing,
        const _variant_t & topic10 = vtMissing,
        const _variant_t & topic11 = vtMissing,
        const _variant_t & topic12 = vtMissing,
        const _variant_t & topic13 = vtMissing,
        const _variant_t & topic14 = vtMissing,
        const _variant_t & topic15 = vtMissing,
        const _variant_t & topic16 = vtMissing,
        const _variant_t & topic17 = vtMissing,
        const _variant_t & topic18 = vtMissing,
        const _variant_t & topic19 = vtMissing,
        const _variant_t & topic20 = vtMissing,
        const _variant_t & topic21 = vtMissing,
        const _variant_t & topic22 = vtMissing,
        const _variant_t & topic23 = vtMissing,
        const _variant_t & topic24 = vtMissing,
        const _variant_t & topic25 = vtMissing,
        const _variant_t & topic26 = vtMissing,
        const _variant_t & topic27 = vtMissing,
        const _variant_t & topic28 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Count (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNA (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsError (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sum (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Average (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Min (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Max (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Npv (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dollar (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fixed (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pi (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ln (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log10 (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Round (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Index (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rept (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_And (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Or (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCount (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DSum (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DAverage (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMin (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DMax (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDev (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Var (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVar (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ BSTR Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trend (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogEst (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Growth (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NPer (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rate (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MIrr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Irr (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Match (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weekday (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Transpose (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atan2 (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asin (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acos (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Choose (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_HLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_VLookup (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Log (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Proper (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Substitute (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ BSTR Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsErr (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNumber (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sln (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Syd (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ddb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clean (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MDeterm (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_MInverse (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_MMult (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ipmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ppmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountA (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Product (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fact (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DProduct (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsNonText (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_StDevP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_VarP (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DStDevP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DVarP (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsLogical (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_DCountA (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_USDollar (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SearchB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ BSTR Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReplaceB (
        /*[in]*/ BSTR Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ BSTR Arg4,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundUp (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundDown (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rank (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Days360 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Vdb (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ double Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Median (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumProduct (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Sinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Tanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asinh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Acosh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Atanh (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DGet (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Db (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Frequency (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AveDev (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaLn (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BetaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_BinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Combin (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Confidence (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CritBinom (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Even (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExponDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Fisher (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FisherInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Floor (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GammaInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ceiling (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HypGeomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogNormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_LogInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NegBinomDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSDist (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_NormSInv (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Standardize (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Odd (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Permut (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Poisson (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT_BOOL Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TDist (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Weibull (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT_BOOL Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumXMY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2MY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumX2PY2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChiTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Correl (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Covar (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Forecast (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_FTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intercept (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Pearson (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_StEyx (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Slope (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Prob (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_DevSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_GeoMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_HarMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumSq (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Kurt (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Skew (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZTest (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Large (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Small (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Quartile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Percentile (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_PercentRank (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Mode (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TrimMean (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_TInv (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Power (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Radians (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Degrees (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ double Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_SumIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountIf (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CountBlank (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ispmt (
        /*[in]*/ double Arg1,
        /*[in]*/ double Arg2,
        /*[in]*/ double Arg3,
        /*[in]*/ double Arg4,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_Roman (
        /*[in]*/ double Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Asc (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dbcs (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Phonetic (
        /*[in]*/ struct Range * Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_BahtText (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiDayOfWeek (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiDigit (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiMonthOfYear (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiNumSound (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiNumString (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiStringLength (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_IsThaiDigit (
        /*[in]*/ BSTR Arg1,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundBahtDown (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RoundBahtUp (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ThaiYear (
        /*[in]*/ double Arg1,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_RTD (
        /*[in]*/ VARIANT progID,
        /*[in]*/ VARIANT server,
        /*[in]*/ VARIANT topic1,
        /*[in]*/ VARIANT topic2,
        /*[in]*/ VARIANT topic3,
        /*[in]*/ VARIANT topic4,
        /*[in]*/ VARIANT topic5,
        /*[in]*/ VARIANT topic6,
        /*[in]*/ VARIANT topic7,
        /*[in]*/ VARIANT topic8,
        /*[in]*/ VARIANT topic9,
        /*[in]*/ VARIANT topic10,
        /*[in]*/ VARIANT topic11,
        /*[in]*/ VARIANT topic12,
        /*[in]*/ VARIANT topic13,
        /*[in]*/ VARIANT topic14,
        /*[in]*/ VARIANT topic15,
        /*[in]*/ VARIANT topic16,
        /*[in]*/ VARIANT topic17,
        /*[in]*/ VARIANT topic18,
        /*[in]*/ VARIANT topic19,
        /*[in]*/ VARIANT topic20,
        /*[in]*/ VARIANT topic21,
        /*[in]*/ VARIANT topic22,
        /*[in]*/ VARIANT topic23,
        /*[in]*/ VARIANT topic24,
        /*[in]*/ VARIANT topic25,
        /*[in]*/ VARIANT topic26,
        /*[in]*/ VARIANT topic27,
        /*[in]*/ VARIANT topic28,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d7-0000-0000-c000-000000000046"))
Sheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("00024404-0001-0000-c000-000000000046"))
IHPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    HPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HPageBreakPtr GetItem (
        long Index );
    HPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    HPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct HPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024405-0001-0000-c000-000000000046"))
IVPageBreaks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    VPageBreakPtr _Default[];
    __declspec(property(get=GetItem))
    VPageBreakPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    VPageBreakPtr GetItem (
        long Index );
    VPageBreakPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    VPageBreakPtr Add (
        IDispatch * Before );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Before,
        /*[out,retval]*/ struct VPageBreak * * RHS ) = 0;
};

struct __declspec(uuid("00024406-0001-0000-c000-000000000046"))
IRecentFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RecentFilePtr _Default[];
    __declspec(property(get=GetItem))
    RecentFilePtr Item[];
    __declspec(property(get=GetMaximum,put=PutMaximum))
    long Maximum;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetMaximum ( );
    void PutMaximum (
        long RHS );
    long GetCount ( );
    RecentFilePtr GetItem (
        long Index );
    RecentFilePtr Get_Default (
        long Index );
    RecentFilePtr Add (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Maximum (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Maximum (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct RecentFile * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d8-0000-0000-c000-000000000046"))
_Worksheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetConsolidationFunction))
    enum XlConsolidationFunction ConsolidationFunction[];
    __declspec(property(get=GetConsolidationOptions))
    _variant_t ConsolidationOptions[];
    __declspec(property(get=GetConsolidationSources))
    _variant_t ConsolidationSources[];
    __declspec(property(get=GetAutoFilterMode,put=PutAutoFilterMode))
    VARIANT_BOOL AutoFilterMode[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetFilterMode))
    VARIANT_BOOL FilterMode[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetListObjects))
    ListObjectsPtr ListObjects;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetTransitionExpEval,put=PutTransitionExpEval))
    VARIANT_BOOL TransitionExpEval[];
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetTransitionFormEntry,put=PutTransitionFormEntry))
    VARIANT_BOOL TransitionFormEntry[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetCircularReference))
    RangePtr CircularReference[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetStandardHeight))
    double StandardHeight[];
    __declspec(property(get=GetUsedRange))
    RangePtr UsedRange[];
    __declspec(property(get=GetStandardWidth,put=PutStandardWidth))
    double StandardWidth[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetOutline))
    OutlinePtr Outline;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetType))
    enum XlSheetType Type[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    VARIANT_BOOL GetTransitionExpEval (
        long lcid = 0 );
    void PutTransitionExpEval (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAutoFilterMode (
        long lcid = 0 );
    void PutAutoFilterMode (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Calculate (
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    RangePtr GetCells ( );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    RangePtr GetCircularReference (
        long lcid = 0 );
    HRESULT ClearArrows (
        long lcid = 0 );
    RangePtr GetColumns ( );
    enum XlConsolidationFunction GetConsolidationFunction (
        long lcid = 0 );
    _variant_t GetConsolidationOptions (
        long lcid = 0 );
    _variant_t GetConsolidationSources (
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    VARIANT_BOOL GetFilterMode (
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    OutlinePtr GetOutline ( );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr PivotTables (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PivotTablePtr PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    RangePtr GetRows ( );
    IDispatchPtr Scenarios (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT ShowAllData (
        long lcid = 0 );
    HRESULT ShowDataForm (
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    double GetStandardHeight (
        long lcid = 0 );
    double GetStandardWidth (
        long lcid = 0 );
    void PutStandardWidth (
        long lcid,
        double RHS );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetTransitionFormEntry (
        long lcid = 0 );
    void PutTransitionFormEntry (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlSheetType GetType (
        long lcid = 0 );
    RangePtr GetUsedRange (
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    ListObjectsPtr GetListObjects ( );
    RangePtr XmlDataQuery (
        _bstr_t XPath,
        const _variant_t & SelectionNamespaces = vtMissing,
        const _variant_t & Map = vtMissing );
    RangePtr XmlMapQuery (
        _bstr_t XPath,
        const _variant_t & SelectionNamespaces = vtMissing,
        const _variant_t & Map = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionExpEval (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFilterMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CircularReference (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearArrows (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationFunction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationOptions (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ConsolidationSources (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FilterMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Outline (
        /*[out,retval]*/ struct Outline * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTables (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT RowGrand,
        /*[in]*/ VARIANT ColumnGrand,
        /*[in]*/ VARIANT SaveData,
        /*[in]*/ VARIANT HasAutoFormat,
        /*[in]*/ VARIANT AutoPage,
        /*[in]*/ VARIANT Reserved,
        /*[in]*/ VARIANT BackgroundQuery,
        /*[in]*/ VARIANT OptimizeCache,
        /*[in]*/ VARIANT PageFieldOrder,
        /*[in]*/ VARIANT PageFieldWrapCount,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT Connection,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Scenarios (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowAllData (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ShowDataForm (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardWidth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionFormEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsedRange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CustomProperties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ struct Protection * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in]*/ VARIANT NoHTMLFormatting = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in]*/ VARIANT AllowFormattingCells = vtMissing,
        /*[in]*/ VARIANT AllowFormattingColumns = vtMissing,
        /*[in]*/ VARIANT AllowFormattingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingColumns = vtMissing,
        /*[in]*/ VARIANT AllowInsertingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingHyperlinks = vtMissing,
        /*[in]*/ VARIANT AllowDeletingColumns = vtMissing,
        /*[in]*/ VARIANT AllowDeletingRows = vtMissing,
        /*[in]*/ VARIANT AllowSorting = vtMissing,
        /*[in]*/ VARIANT AllowFiltering = vtMissing,
        /*[in]*/ VARIANT AllowUsingPivotTables = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListObjects (
        /*[out,retval]*/ struct ListObjects * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlDataQuery (
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespaces,
        /*[in]*/ VARIANT Map,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlMapQuery (
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespaces,
        /*[in]*/ VARIANT Map,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00020852-0001-0000-c000-000000000046"))
IStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value[];
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlOrientation Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _bstr_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    long IndentLevel;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    VARIANT_BOOL FormulaHidden;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    VARIANT_BOOL ShrinkToFit;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    VARIANT_BOOL WrapText;
    __declspec(property(get=GetNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetIncludeAlignment,put=PutIncludeAlignment))
    VARIANT_BOOL IncludeAlignment;
    __declspec(property(get=GetIncludeBorder,put=PutIncludeBorder))
    VARIANT_BOOL IncludeBorder;
    __declspec(property(get=GetIncludeFont,put=PutIncludeFont))
    VARIANT_BOOL IncludeFont;
    __declspec(property(get=GetIncludeNumber,put=PutIncludeNumber))
    VARIANT_BOOL IncludeNumber;
    __declspec(property(get=GetIncludePatterns,put=PutIncludePatterns))
    VARIANT_BOOL IncludePatterns;
    __declspec(property(get=GetIncludeProtection,put=PutIncludeProtection))
    VARIANT_BOOL IncludeProtection;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetBuiltIn ( );
    BordersPtr GetBorders ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetFormulaHidden ( );
    void PutFormulaHidden (
        VARIANT_BOOL RHS );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    VARIANT_BOOL GetIncludeAlignment ( );
    void PutIncludeAlignment (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeBorder ( );
    void PutIncludeBorder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeFont ( );
    void PutIncludeFont (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeNumber ( );
    void PutIncludeNumber (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludePatterns ( );
    void PutIncludePatterns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIncludeProtection ( );
    void PutIncludeProtection (
        VARIANT_BOOL RHS );
    long GetIndentLevel ( );
    void PutIndentLevel (
        long RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _bstr_t GetName (
        long lcid = 0 );
    _bstr_t GetNameLocal ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    _bstr_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        _bstr_t RHS );
    enum XlOrientation GetOrientation ( );
    void PutOrientation (
        enum XlOrientation RHS );
    VARIANT_BOOL GetShrinkToFit ( );
    void PutShrinkToFit (
        VARIANT_BOOL RHS );
    _bstr_t GetValue (
        long lcid = 0 );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetWrapText ( );
    void PutWrapText (
        VARIANT_BOOL RHS );
    _bstr_t Get_Default (
        long lcid = 0 );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeAlignment (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeAlignment (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeBorder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeBorder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeFont (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeFont (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeNumber (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeNumber (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludePatterns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludePatterns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IncludeProtection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IncludeProtection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020853-0001-0000-c000-000000000046"))
IStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    StylePtr _Default[][];
    __declspec(property(get=GetItem))
    StylePtr Item[][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    StylePtr Add (
        _bstr_t Name,
        const _variant_t & BasedOn = vtMissing );
    long GetCount ( );
    StylePtr GetItem (
        const _variant_t & Index,
        long lcid = 0 );
    _variant_t Merge (
        const _variant_t & Workbook );
    IUnknownPtr Get_NewEnum ( );
    StylePtr Get_Default (
        const _variant_t & Index,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT BasedOn,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Workbook,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Style * * RHS ) = 0;
};

struct __declspec(uuid("00020855-0001-0000-c000-000000000046"))
IBorders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    BorderPtr _Default[];
    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetItem))
    BorderPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    long GetCount ( );
    BorderPtr GetItem (
        enum XlBordersIndex Index );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    IUnknownPtr Get_NewEnum ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );
    BorderPtr Get_Default (
        enum XlBordersIndex Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBordersIndex Index,
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("00020857-0001-0000-c000-000000000046"))
IAddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetInstalled,put=PutInstalled))
    VARIANT_BOOL Installed;
    __declspec(property(get=GetTitle))
    _bstr_t Title;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetCLSID))
    _bstr_t CLSID;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;
    __declspec(property(get=GetComments))
    _bstr_t Comments;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    _bstr_t GetComments ( );
    _bstr_t GetFullName ( );
    VARIANT_BOOL GetInstalled ( );
    void PutInstalled (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    _bstr_t GetSubject ( );
    _bstr_t GetTitle ( );
    _bstr_t GetprogID ( );
    _bstr_t GetCLSID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Installed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Installed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_CLSID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020858-0001-0000-c000-000000000046"))
IAddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    AddInPtr _Default[];
    __declspec(property(get=GetItem))
    AddInPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    AddInPtr Add (
        _bstr_t Filename,
        const _variant_t & CopyFile = vtMissing );
    long GetCount ( );
    AddInPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT CopyFile,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * RHS ) = 0;
};

struct __declspec(uuid("0002085c-0001-0000-c000-000000000046"))
IToolbar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolbarButtons))
    ToolbarButtonsPtr ToolbarButtons;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetProtection,put=PutProtection))
    enum XlToolbarProtection Protection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    HRESULT Delete ( );
    long GetHeight ( );
    void PutHeight (
        long RHS );
    long GetLeft ( );
    void PutLeft (
        long RHS );
    _bstr_t GetName ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    enum XlToolbarProtection GetProtection ( );
    void PutProtection (
        enum XlToolbarProtection RHS );
    HRESULT Reset ( );
    ToolbarButtonsPtr GetToolbarButtons ( );
    long GetTop ( );
    void PutTop (
        long RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ enum XlToolbarProtection * RHS ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ enum XlToolbarProtection RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_ToolbarButtons (
        /*[out,retval]*/ struct ToolbarButtons * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085d-0001-0000-c000-000000000046"))
IToolbars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    ToolbarPtr Get_Default (
        const _variant_t & Index );
    ToolbarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Toolbar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085e-0001-0000-c000-000000000046"))
IToolbarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPushed,put=PutPushed))
    VARIANT_BOOL Pushed;
    __declspec(property(get=GetIsGap))
    VARIANT_BOOL IsGap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL RHS );
    HRESULT Copy (
        struct Toolbar * Toolbar,
        long Before );
    HRESULT CopyFace ( );
    HRESULT Delete ( );
    HRESULT Edit ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetID ( );
    VARIANT_BOOL GetIsGap ( );
    HRESULT Move (
        struct Toolbar * Toolbar,
        long Before );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    HRESULT PasteFace ( );
    VARIANT_BOOL GetPushed ( );
    void PutPushed (
        VARIANT_BOOL RHS );
    HRESULT Reset ( );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );
    long GetWidth ( );
    void PutWidth (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltInFace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BuiltInFace (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall raw_CopyFace ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Edit ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IsGap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ struct Toolbar * Toolbar,
        /*[in]*/ long Before ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteFace ( ) = 0;
      virtual HRESULT __stdcall get_Pushed (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Pushed (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002085f-0001-0000-c000-000000000046"))
IToolbarButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ToolbarButtonPtr _Default[];
    __declspec(property(get=GetItem))
    ToolbarButtonPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ToolbarButtonPtr Add (
        const _variant_t & Button = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & Pushed = vtMissing,
        const _variant_t & Enabled = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    long GetCount ( );
    ToolbarButtonPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    ToolbarButtonPtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Button,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT Pushed,
        /*[in]*/ VARIANT Enabled,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ToolbarButton * * RHS ) = 0;
};

struct __declspec(uuid("00020860-0001-0000-c000-000000000046"))
IAreas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    RangePtr _Default[];
    __declspec(property(get=GetItem))
    RangePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RangePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );
    RangePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00020863-0001-0000-c000-000000000046"))
IMenuBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuBarPtr _Default[];
    __declspec(property(get=GetItem))
    MenuBarPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuBarPtr Add (
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    MenuBarPtr Get_Default (
        const _variant_t & Index );
    MenuBarPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020864-0001-0000-c000-000000000046"))
IMenuBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenus))
    MenusPtr Menus;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetBuiltIn ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    long GetIndex ( );
    MenusPtr GetMenus ( );
    HRESULT Reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Menus (
        /*[out,retval]*/ struct Menus * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
};

struct __declspec(uuid("00020865-0001-0000-c000-000000000046"))
IMenus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    MenuPtr _Default[];
    __declspec(property(get=GetItem))
    MenuPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuPtr Add (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    MenuPtr Get_Default (
        const _variant_t & Index );
    MenuPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020866-0001-0000-c000-000000000046"))
IMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMenuItems))
    MenuItemsPtr MenuItems;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    MenuItemsPtr GetMenuItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuItems (
        /*[out,retval]*/ struct MenuItems * * RHS ) = 0;
};

struct __declspec(uuid("00020867-0001-0000-c000-000000000046"))
IMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    MenuItemPtr Add (
        _bstr_t Caption,
        const _variant_t & OnAction = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing );
    MenuPtr AddMenu (
        _bstr_t Caption,
        const _variant_t & Before = vtMissing,
        const _variant_t & Restore = vtMissing );
    long GetCount ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT OnAction,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[in]*/ VARIANT StatusBar,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[out,retval]*/ struct MenuItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddMenu (
        /*[in]*/ BSTR Caption,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Restore,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020868-0001-0000-c000-000000000046"))
IMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetHelpContextID,put=PutHelpContextID))
    long HelpContextID;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetHelpContextID ( );
    void PutHelpContextID (
        long RHS );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t RHS );
    long GetIndex ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpContextID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpContextID (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002086f-0001-0000-c000-000000000046"))
IDrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    VARIANT_BOOL MultiSelect;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    FontPtr GetFont ( );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    InteriorPtr GetInterior ( );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMultiSelect ( );
    void PutMultiSelect (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t Reshape (
        long Vertex,
        const _variant_t & Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    _variant_t Selected (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Ungroup ( );
    long GetValue ( );
    void PutValue (
        long RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t Vertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    GroupObjectPtr Group ( );
    _variant_t LinkCombo (
        const _variant_t & Link = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkCombo (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002441c-0001-0000-c000-000000000046"))
IPivotCache : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetSourceType))
    enum XlPivotTableSourceType SourceType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetADOConnection))
    IDispatchPtr ADOConnection;
    __declspec(property(get=GetIsConnected))
    VARIANT_BOOL IsConnected;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetOLAP))
    VARIANT_BOOL OLAP;
    __declspec(property(get=GetMissingItemsLimit,put=PutMissingItemsLimit))
    enum XlPivotTableMissingItems MissingItemsLimit;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetOptimizeCache,put=PutOptimizeCache))
    VARIANT_BOOL OptimizeCache;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetLocalConnection,put=PutLocalConnection))
    _variant_t LocalConnection;
    __declspec(property(get=GetUseLocalConnection,put=PutUseLocalConnection))
    VARIANT_BOOL UseLocalConnection;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetOptimizeCache ( );
    void PutOptimizeCache (
        VARIANT_BOOL RHS );
    long GetRecordCount ( );
    HRESULT Refresh ( );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    HRESULT ResetTimer ( );
    _variant_t GetLocalConnection ( );
    void PutLocalConnection (
        const _variant_t & RHS );
    PivotTablePtr CreatePivotTable (
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );
    VARIANT_BOOL GetUseLocalConnection ( );
    void PutUseLocalConnection (
        VARIANT_BOOL RHS );
    IDispatchPtr GetADOConnection ( );
    VARIANT_BOOL GetIsConnected ( );
    HRESULT MakeConnection ( );
    VARIANT_BOOL GetOLAP ( );
    enum XlPivotTableSourceType GetSourceType ( );
    enum XlPivotTableMissingItems GetMissingItemsLimit ( );
    void PutMissingItemsLimit (
        enum XlPivotTableMissingItems RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_OptimizeCache (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OptimizeCache (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum XlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_LocalConnection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LocalConnection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePivotTable (
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT DefaultVersion,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_UseLocalConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLocalConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ADOConnection (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_MakeConnection ( ) = 0;
      virtual HRESULT __stdcall get_OLAP (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlPivotTableSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_MissingItemsLimit (
        /*[out,retval]*/ enum XlPivotTableMissingItems * RHS ) = 0;
      virtual HRESULT __stdcall put_MissingItemsLimit (
        /*[in]*/ enum XlPivotTableMissingItems RHS ) = 0;
      virtual HRESULT __stdcall get_SourceConnectionFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceConnectionFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceDataFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RobustConnect (
        /*[out,retval]*/ enum XlRobustConnect * RHS ) = 0;
      virtual HRESULT __stdcall put_RobustConnect (
        /*[in]*/ enum XlRobustConnect RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsODC (
        /*[in]*/ BSTR ODCFileName,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT Keywords = vtMissing ) = 0;
};

struct __declspec(uuid("0002441d-0001-0000-c000-000000000046"))
IPivotCaches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotCachePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotCachePtr Item (
        const _variant_t & Index );
    PivotCachePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotCachePtr Add (
        enum XlPivotTableSourceType SourceType,
        const _variant_t & SourceData = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlPivotTableSourceType SourceType,
        /*[in]*/ VARIANT SourceData,
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
};

struct __declspec(uuid("0002441e-0001-0000-c000-000000000046"))
IPivotFormula : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetIndex,put=PutIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    long GetIndex ( );
    void PutIndex (
        long RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Index (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002441f-0001-0000-c000-000000000046"))
IPivotFormulas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFormulaPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFormulaPtr _Add (
        _bstr_t Formula );
    PivotFormulaPtr Item (
        const _variant_t & Index );
    PivotFormulaPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotFormulaPtr Add (
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotFormula * * RHS ) = 0;
};

struct __declspec(uuid("00020873-0001-0000-c000-000000000046"))
IPivotTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotTablePtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PivotTablePtr Add (
        struct PivotCache * PivotCache,
        const _variant_t & TableDestination,
        const _variant_t & TableName = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & DefaultVersion = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct PivotCache * PivotCache,
        /*[in]*/ VARIANT TableDestination,
        /*[in]*/ VARIANT TableName,
        /*[in]*/ VARIANT ReadData,
        /*[in]*/ VARIANT DefaultVersion,
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
};

struct __declspec(uuid("00020875-0001-0000-c000-000000000046"))
IPivotFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotTablePtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotTablePtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024420-0001-0000-c000-000000000046"))
ICalculatedFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotFieldPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotFieldPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotFieldPtr Item (
        const _variant_t & Index );
    PivotFieldPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotFieldPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
};

struct __declspec(uuid("00020876-0001-0000-c000-000000000046"))
IPivotItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    VARIANT_BOOL ShowDetail;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _variant_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetRecordCount))
    long RecordCount;
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetParentShowDetail))
    VARIANT_BOOL ParentShowDetail;
    __declspec(property(get=GetSourceNameStandard))
    _bstr_t SourceNameStandard;
    __declspec(property(get=GetParentItem))
    PivotItemPtr ParentItem;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    PivotItemPtr GetParentItem ( );
    VARIANT_BOOL GetParentShowDetail ( );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    VARIANT_BOOL GetShowDetail ( );
    void PutShowDetail (
        VARIANT_BOOL RHS );
    _variant_t GetSourceName ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsCalculated ( );
    long GetRecordCount ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _bstr_t GetSourceNameStandard ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RecordCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceNameStandard (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00020877-0001-0000-c000-000000000046"))
IPivotItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    PivotFieldPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    PivotFieldPtr GetParent ( );
    HRESULT Add (
        _bstr_t Name );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024421-0001-0000-c000-000000000046"))
ICalculatedItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr _Add (
        _bstr_t Name,
        _bstr_t Formula );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );
    PivotItemPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & UseStandardFormula = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw__Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT UseStandardFormula,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
};

struct __declspec(uuid("00020878-0001-0000-c000-000000000046"))
ICharacters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetPhoneticCharacters,put=PutPhoneticCharacters))
    _bstr_t PhoneticCharacters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    long GetCount ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _variant_t Insert (
        _bstr_t String );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _bstr_t GetPhoneticCharacters ( );
    void PutPhoneticCharacters (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticCharacters (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticCharacters (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020879-0001-0000-c000-000000000046"))
IDialogs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    DialogPtr _Default[];
    __declspec(property(get=GetItem))
    DialogPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    DialogPtr GetItem (
        enum XlBuiltInDialog Index );
    DialogPtr Get_Default (
        enum XlBuiltInDialog Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ enum XlBuiltInDialog Index,
        /*[out,retval]*/ struct Dialog * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087a-0001-0000-c000-000000000046"))
IDialog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Show (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002087b-0001-0000-c000-000000000046"))
ISoundNote : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    _variant_t Import (
        _bstr_t Filename );
    _variant_t Play ( );
    _variant_t Record ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Play (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Record (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002087d-0001-0000-c000-000000000046"))
IButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002087e-0001-0000-c000-000000000046"))
IButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetCancelButton,put=PutCancelButton))
    VARIANT_BOOL CancelButton;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    VARIANT_BOOL DefaultButton;
    __declspec(property(get=GetDismissButton,put=PutDismissButton))
    VARIANT_BOOL DismissButton;
    __declspec(property(get=GetHelpButton,put=PutHelpButton))
    VARIANT_BOOL HelpButton;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetCancelButton ( );
    void PutCancelButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDefaultButton ( );
    void PutDefaultButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDismissButton ( );
    void PutDismissButton (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHelpButton ( );
    void PutHelpButton (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    ButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CancelButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CancelButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DismissButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DismissButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HelpButton (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HelpButton (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Button * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002087f-0001-0000-c000-000000000046"))
ICheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020880-0001-0000-c000-000000000046"))
ICheckBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    CheckBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct CheckBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020881-0001-0000-c000-000000000046"))
IOptionButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
};

struct __declspec(uuid("00020882-0001-0000-c000-000000000046"))
IOptionButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetGroupBox))
    GroupBoxPtr GroupBox;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    GroupBoxPtr GetGroupBox ( );
    OptionButtonPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_GroupBox (
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct OptionButton * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020883-0001-0000-c000-000000000046"))
IEditBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLinkedObject))
    _bstr_t LinkedObject;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    _bstr_t GetLinkedObject ( );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020884-0001-0000-c000-000000000046"))
IEditBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetInputType,put=PutInputType))
    long InputType;
    __declspec(property(get=GetMultiLine,put=PutMultiLine))
    VARIANT_BOOL MultiLine;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPasswordEdit,put=PutPasswordEdit))
    VARIANT_BOOL PasswordEdit;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    long GetInputType ( );
    void PutInputType (
        long RHS );
    VARIANT_BOOL GetMultiLine ( );
    void PutMultiLine (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPasswordEdit ( );
    void PutPasswordEdit (
        VARIANT_BOOL RHS );
    EditBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    _variant_t Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InputType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_InputType (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_MultiLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PasswordEdit (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct EditBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020885-0001-0000-c000-000000000046"))
IScrollBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020886-0001-0000-c000-000000000046"))
IScrollBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    ScrollBarPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ScrollBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020887-0001-0000-c000-000000000046"))
IListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020888-0001-0000-c000-000000000046"))
IListBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    ListBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ListBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020889-0001-0000-c000-000000000046"))
IGroupBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002088a-0001-0000-c000-000000000046"))
IGroupBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    GroupBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct GroupBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088b-0001-0000-c000-000000000046"))
IDropDown : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetLinkedObject))
    _variant_t LinkedObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetLinkedObject ( );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetListCount ( );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedObject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002088c-0001-0000-c000-000000000046"))
IDropDowns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetSelected,put=PutSelected))
    _variant_t Selected[];
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetList,put=PutList))
    _variant_t List[];
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t AddItem (
        const _variant_t & Text,
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t GetList (
        const _variant_t & Index = vtMissing );
    void PutList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    _variant_t RemoveAllItems ( );
    _variant_t RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    _variant_t GetSelected (
        const _variant_t & Index = vtMissing );
    void PutSelected (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    long GetValue ( );
    void PutValue (
        long RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    DropDownPtr Add (
        double Left,
        double Top,
        double Width,
        double Height,
        const _variant_t & Editable = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual HRESULT __stdcall get_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_List (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selected (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Selected (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ VARIANT Editable,
        /*[out,retval]*/ struct DropDown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088d-0001-0000-c000-000000000046"))
ISpinner : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("0002088e-0001-0000-c000-000000000046"))
ISpinners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplay3DShading,put=PutDisplay3DShading))
    VARIANT_BOOL Display3DShading;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    VARIANT_BOOL GetDisplay3DShading ( );
    void PutDisplay3DShading (
        VARIANT_BOOL RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );
    SpinnerPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Display3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Display3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Spinner * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002088f-0001-0000-c000-000000000046"))
IDialogFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual void __stdcall _Dummy4 ( ) = 0;
      virtual void __stdcall _Dummy5 ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual void __stdcall _Dummy8 ( ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy20 ( ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("00020890-0001-0000-c000-000000000046"))
ILabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020891-0001-0000-c000-000000000046"))
ILabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAccelerator,put=PutAccelerator))
    _variant_t Accelerator;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPhoneticAccelerator,put=PutPhoneticAccelerator))
    _variant_t PhoneticAccelerator;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetAccelerator ( );
    void PutAccelerator (
        const _variant_t & RHS );
    _variant_t GetPhoneticAccelerator ( );
    void PutPhoneticAccelerator (
        const _variant_t & RHS );
    LabelPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Accelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Accelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual HRESULT __stdcall get_PhoneticAccelerator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PhoneticAccelerator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Label * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020894-0001-0000-c000-000000000046"))
IPanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PanePtr _Default[];
    __declspec(property(get=GetItem))
    PanePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PanePtr GetItem (
        long Index );
    PanePtr Get_Default (
        long Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
};

struct __declspec(uuid("00020895-0001-0000-c000-000000000046"))
IPane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL Activate ( );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    RangePtr GetVisibleRange ( );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("00020896-0001-0000-c000-000000000046"))
IScenarios : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ScenarioPtr Add (
        _bstr_t Name,
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing,
        const _variant_t & Comment = vtMissing,
        const _variant_t & Locked = vtMissing,
        const _variant_t & Hidden = vtMissing );
    long GetCount ( );
    _variant_t CreateSummary (
        enum XlSummaryReportType ReportType,
        const _variant_t & ResultCells = vtMissing );
    ScenarioPtr Item (
        const _variant_t & Index );
    _variant_t Merge (
        const _variant_t & Source );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[in]*/ VARIANT Comment,
        /*[in]*/ VARIANT Locked,
        /*[in]*/ VARIANT Hidden,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateSummary (
        /*[in]*/ enum XlSummaryReportType ReportType,
        /*[in]*/ VARIANT ResultCells,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Scenario * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Source,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020897-0001-0000-c000-000000000046"))
IScenario : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValues))
    _variant_t Values[];
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetChangingCells))
    RangePtr ChangingCells;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t ChangeScenario (
        const _variant_t & ChangingCells,
        const _variant_t & Values = vtMissing );
    RangePtr GetChangingCells ( );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL RHS );
    long GetIndex ( );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Show ( );
    _variant_t GetValues (
        const _variant_t & Index = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeScenario (
        /*[in]*/ VARIANT ChangingCells,
        /*[in]*/ VARIANT Values,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ChangingCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00020898-0001-0000-c000-000000000046"))
IGroupObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00020899-0001-0000-c000-000000000046"))
IGroupObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    InteriorPtr GetInterior ( );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    IDispatchPtr Ungroup ( );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual void __stdcall _Dummy47 ( ) = 0;
      virtual void __stdcall _Dummy48 ( ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy50 ( ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy52 ( ) = 0;
      virtual void __stdcall _Dummy53 ( ) = 0;
      virtual void __stdcall _Dummy54 ( ) = 0;
      virtual void __stdcall _Dummy55 ( ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual void __stdcall _Dummy57 ( ) = 0;
      virtual void __stdcall _Dummy58 ( ) = 0;
      virtual void __stdcall _Dummy59 ( ) = 0;
      virtual void __stdcall _Dummy60 ( ) = 0;
      virtual void __stdcall _Dummy61 ( ) = 0;
      virtual void __stdcall _Dummy62 ( ) = 0;
      virtual void __stdcall _Dummy63 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual void __stdcall _Dummy68 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy70 ( ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy72 ( ) = 0;
      virtual void __stdcall _Dummy73 ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy77 ( ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089a-0001-0000-c000-000000000046"))
ILine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
};

struct __declspec(uuid("0002089b-0001-0000-c000-000000000046"))
ILines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetArrowHeadLength,put=PutArrowHeadLength))
    _variant_t ArrowHeadLength;
    __declspec(property(get=GetArrowHeadStyle,put=PutArrowHeadStyle))
    _variant_t ArrowHeadStyle;
    __declspec(property(get=GetArrowHeadWidth,put=PutArrowHeadWidth))
    _variant_t ArrowHeadWidth;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t GetArrowHeadLength ( );
    void PutArrowHeadLength (
        const _variant_t & RHS );
    _variant_t GetArrowHeadStyle ( );
    void PutArrowHeadStyle (
        const _variant_t & RHS );
    _variant_t GetArrowHeadWidth ( );
    void PutArrowHeadWidth (
        const _variant_t & RHS );
    BorderPtr GetBorder ( );
    LinePtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadLength (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadLength (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ArrowHeadWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ArrowHeadWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Line * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089c-0001-0000-c000-000000000046"))
IRectangle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089d-0001-0000-c000-000000000046"))
IRectangles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    RectanglePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Rectangle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002089e-0001-0000-c000-000000000046"))
IOval : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002089f-0001-0000-c000-000000000046"))
IOvals : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    OvalPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Oval * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a0-0001-0000-c000-000000000046"))
IArc : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
};

struct __declspec(uuid("000208a1-0001-0000-c000-000000000046"))
IArcs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    ArcPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2 );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[out,retval]*/ struct Arc * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a2-0001-0000-c000-000000000046"))
_IOLEObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;
    __declspec(property(get=GetOLEType))
    _variant_t OLEType;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetAltHTML,put=PutAltHTML))
    _bstr_t AltHTML;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Activate ( );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    IDispatchPtr GetObject ( );
    _variant_t GetOLEType ( );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _variant_t Update ( );
    _variant_t Verb (
        enum XlOLEVerb Verb );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    _bstr_t GetprogID ( );
    _bstr_t GetAltHTML ( );
    void PutAltHTML (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ enum XlOLEVerb Verb,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AltHTML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltHTML (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("000208a4-0001-0000-c000-000000000046"))
ITextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208a5-0001-0000-c000-000000000046"))
ITextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    TextBoxPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct TextBox * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208a7-0001-0000-c000-000000000046"))
IPictures : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    PicturePtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    PicturePtr Insert (
        _bstr_t Filename,
        const _variant_t & Converter = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    PicturePtr Paste (
        const _variant_t & Link = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Converter,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Link,
        /*[out,retval]*/ struct Picture * * RHS ) = 0;
};

struct __declspec(uuid("000208a8-0001-0000-c000-000000000046"))
IDrawing : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetVertices))
    _variant_t Vertices[][];
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t AddVertex (
        double Left,
        double Top );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    _variant_t GetVertices (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208a9-0001-0000-c000-000000000046"))
IDrawings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    VARIANT_BOOL AddIndent;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetAddIndent ( );
    void PutAddIndent (
        VARIANT_BOOL RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    FontPtr GetFont ( );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Reshape (
        long Vertex,
        VARIANT_BOOL Insert,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing );
    DrawingPtr Add (
        double X1,
        double Y1,
        double X2,
        double Y2,
        VARIANT_BOOL Closed );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual HRESULT __stdcall raw_Reshape (
        /*[in]*/ long Vertex,
        /*[in]*/ VARIANT_BOOL Insert,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy46 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ VARIANT_BOOL Closed,
        /*[out,retval]*/ struct Drawing * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208aa-0001-0000-c000-000000000046"))
IRoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRecipients,put=PutRecipients))
    _variant_t Recipients[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _variant_t Subject;
    __declspec(property(get=GetMessage,put=PutMessage))
    _variant_t Message;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum XlRoutingSlipDelivery Delivery;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetStatus))
    enum XlRoutingSlipStatus Status;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlRoutingSlipDelivery GetDelivery ( );
    void PutDelivery (
        enum XlRoutingSlipDelivery RHS );
    _variant_t GetMessage ( );
    void PutMessage (
        const _variant_t & RHS );
    _variant_t GetRecipients (
        const _variant_t & Index = vtMissing );
    void PutRecipients (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t Reset ( );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutReturnWhenDone (
        VARIANT_BOOL RHS );
    enum XlRoutingSlipStatus GetStatus ( );
    _variant_t GetSubject ( );
    void PutSubject (
        const _variant_t & RHS );
    VARIANT_BOOL GetTrackStatus ( );
    void PutTrackStatus (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ enum XlRoutingSlipDelivery * RHS ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ enum XlRoutingSlipDelivery RHS ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Message (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Recipients (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Recipients (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReturnWhenDone (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReturnWhenDone (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum XlRoutingSlipStatus * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TrackStatus (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TrackStatus (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208ab-0001-0000-c000-000000000046"))
IOutline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSummaryColumn,put=PutSummaryColumn))
    enum XlSummaryColumn SummaryColumn;
    __declspec(property(get=GetSummaryRow,put=PutSummaryRow))
    enum XlSummaryRow SummaryRow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutomaticStyles,put=PutAutomaticStyles))
    VARIANT_BOOL AutomaticStyles;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutomaticStyles ( );
    void PutAutomaticStyles (
        VARIANT_BOOL RHS );
    _variant_t ShowLevels (
        const _variant_t & RowLevels = vtMissing,
        const _variant_t & ColumnLevels = vtMissing );
    enum XlSummaryColumn GetSummaryColumn ( );
    void PutSummaryColumn (
        enum XlSummaryColumn RHS );
    enum XlSummaryRow GetSummaryRow ( );
    void PutSummaryRow (
        enum XlSummaryRow RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutomaticStyles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutomaticStyles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowLevels (
        /*[in]*/ VARIANT RowLevels,
        /*[in]*/ VARIANT ColumnLevels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryColumn (
        /*[out,retval]*/ enum XlSummaryColumn * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryColumn (
        /*[in]*/ enum XlSummaryColumn RHS ) = 0;
      virtual HRESULT __stdcall get_SummaryRow (
        /*[out,retval]*/ enum XlSummaryRow * RHS ) = 0;
      virtual HRESULT __stdcall put_SummaryRow (
        /*[in]*/ enum XlSummaryRow RHS ) = 0;
};

struct __declspec(uuid("000208ad-0001-0000-c000-000000000046"))
IModule : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    _variant_t InsertFile (
        const _variant_t & Filename,
        const _variant_t & Merge = vtMissing );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy18 ( ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy21 ( ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertFile (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Merge,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208ae-0001-0000-c000-000000000046"))
IModules : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ModulePtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct Module * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208af-0001-0000-c000-000000000046"))
IDialogSheet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetComments))
    CommentsPtr Comments;
    __declspec(property(get=GetEnableAutoFilter,put=PutEnableAutoFilter))
    VARIANT_BOOL EnableAutoFilter[];
    __declspec(property(get=GetEnableOutlining,put=PutEnableOutlining))
    VARIANT_BOOL EnableOutlining[];
    __declspec(property(get=GetEnablePivotTable,put=PutEnablePivotTable))
    VARIANT_BOOL EnablePivotTable[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetProtection))
    ProtectionPtr Protection;
    __declspec(property(get=GetDialogFrame))
    DialogFramePtr DialogFrame;
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetEnableCalculation,put=PutEnableCalculation))
    VARIANT_BOOL EnableCalculation;
    __declspec(property(get=GetEnableSelection,put=PutEnableSelection))
    enum XlEnableSelection EnableSelection;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetDefaultButton,put=PutDefaultButton))
    _variant_t DefaultButton;
    __declspec(property(get=GetScrollArea,put=PutScrollArea))
    _bstr_t ScrollArea;
    __declspec(property(get=GetQueryTables))
    QueryTablesPtr QueryTables;
    __declspec(property(get=GetDisplayPageBreaks,put=PutDisplayPageBreaks))
    VARIANT_BOOL DisplayPageBreaks;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetProtectScenarios))
    VARIANT_BOOL ProtectScenarios[];
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetAutoFilter))
    AutoFilterPtr AutoFilter;
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetCustomProperties))
    CustomPropertiesPtr CustomProperties;
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDisplayAutomaticPageBreaks,put=PutDisplayAutomaticPageBreaks))
    VARIANT_BOOL DisplayAutomaticPageBreaks[];
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    long _DisplayRightToLeft[];
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetFocus,put=PutFocus))
    _variant_t Focus;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    VARIANT_BOOL GetProtectScenarios (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableCalculation ( );
    void PutEnableCalculation (
        VARIANT_BOOL RHS );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayAutomaticPageBreaks (
        long lcid = 0 );
    void PutDisplayAutomaticPageBreaks (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoFilter (
        long lcid = 0 );
    void PutEnableAutoFilter (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlEnableSelection GetEnableSelection ( );
    void PutEnableSelection (
        enum XlEnableSelection RHS );
    VARIANT_BOOL GetEnableOutlining (
        long lcid = 0 );
    void PutEnableOutlining (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnablePivotTable (
        long lcid = 0 );
    void PutEnablePivotTable (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    HRESULT ResetAllPageBreaks ( );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    NamesPtr GetNames ( );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Destination = vtMissing,
        const _variant_t & Link = vtMissing,
        long lcid = 0 );
    HRESULT _PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        long lcid = 0 );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _bstr_t GetScrollArea ( );
    void PutScrollArea (
        _bstr_t RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    QueryTablesPtr GetQueryTables ( );
    VARIANT_BOOL GetDisplayPageBreaks ( );
    void PutDisplayPageBreaks (
        VARIANT_BOOL RHS );
    CommentsPtr GetComments ( );
    HyperlinksPtr GetHyperlinks ( );
    HRESULT ClearCircles ( );
    HRESULT CircleInvalid ( );
    long Get_DisplayRightToLeft (
        long lcid = 0 );
    void Put_DisplayRightToLeft (
        long lcid,
        long RHS );
    AutoFilterPtr GetAutoFilter ( );
    VARIANT_BOOL GetDisplayRightToLeft (
        long lcid = 0 );
    void PutDisplayRightToLeft (
        long lcid,
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT _CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        const _variant_t & IgnoreFinalYaa = vtMissing,
        const _variant_t & SpellScript = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    CustomPropertiesPtr GetCustomProperties ( );
    SmartTagsPtr GetSmartTags ( );
    ProtectionPtr GetProtection ( );
    HRESULT PasteSpecial (
        const _variant_t & Format = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & NoHTMLFormatting = vtMissing,
        long lcid = 0 );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        const _variant_t & AllowFormattingCells = vtMissing,
        const _variant_t & AllowFormattingColumns = vtMissing,
        const _variant_t & AllowFormattingRows = vtMissing,
        const _variant_t & AllowInsertingColumns = vtMissing,
        const _variant_t & AllowInsertingRows = vtMissing,
        const _variant_t & AllowInsertingHyperlinks = vtMissing,
        const _variant_t & AllowDeletingColumns = vtMissing,
        const _variant_t & AllowDeletingRows = vtMissing,
        const _variant_t & AllowSorting = vtMissing,
        const _variant_t & AllowFiltering = vtMissing,
        const _variant_t & AllowUsingPivotTables = vtMissing );
    _variant_t GetDefaultButton ( );
    void PutDefaultButton (
        const _variant_t & RHS );
    DialogFramePtr GetDialogFrame ( );
    IDispatchPtr EditBoxes (
        const _variant_t & Index = vtMissing );
    _variant_t GetFocus ( );
    void PutFocus (
        const _variant_t & RHS );
    VARIANT_BOOL Hide (
        const _variant_t & Cancel = vtMissing );
    VARIANT_BOOL Show ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectScenarios (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy31 ( ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_EnableCalculation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCalculation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual void __stdcall _Dummy42 ( ) = 0;
      virtual void __stdcall _Dummy43 ( ) = 0;
      virtual void __stdcall _Dummy44 ( ) = 0;
      virtual void __stdcall _Dummy45 ( ) = 0;
      virtual HRESULT __stdcall get_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutomaticPageBreaks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoFilter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSelection (
        /*[out,retval]*/ enum XlEnableSelection * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSelection (
        /*[in]*/ enum XlEnableSelection RHS ) = 0;
      virtual HRESULT __stdcall get_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableOutlining (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnablePivotTable (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual void __stdcall _Dummy56 ( ) = 0;
      virtual HRESULT __stdcall raw_ResetAllPageBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy65 ( ) = 0;
      virtual void __stdcall _Dummy66 ( ) = 0;
      virtual void __stdcall _Dummy67 ( ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy69 ( ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Destination = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy74 ( ) = 0;
      virtual void __stdcall _Dummy75 ( ) = 0;
      virtual void __stdcall _Dummy76 ( ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy78 ( ) = 0;
      virtual void __stdcall _Dummy79 ( ) = 0;
      virtual HRESULT __stdcall get_ScrollArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy82 ( ) = 0;
      virtual void __stdcall _Dummy83 ( ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy85 ( ) = 0;
      virtual void __stdcall _Dummy86 ( ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy88 ( ) = 0;
      virtual void __stdcall _Dummy89 ( ) = 0;
      virtual void __stdcall _Dummy90 ( ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTables (
        /*[out,retval]*/ struct QueryTables * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayPageBreaks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPageBreaks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ struct Comments * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearCircles ( ) = 0;
      virtual HRESULT __stdcall raw_CircleInvalid ( ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFilter (
        /*[out,retval]*/ struct AutoFilter * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in]*/ VARIANT IgnoreFinalYaa = vtMissing,
        /*[in]*/ VARIANT SpellScript = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CustomProperties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ struct Protection * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT Link = vtMissing,
        /*[in]*/ VARIANT DisplayAsIcon = vtMissing,
        /*[in]*/ VARIANT IconFileName = vtMissing,
        /*[in]*/ VARIANT IconIndex = vtMissing,
        /*[in]*/ VARIANT IconLabel = vtMissing,
        /*[in]*/ VARIANT NoHTMLFormatting = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in]*/ VARIANT AllowFormattingCells = vtMissing,
        /*[in]*/ VARIANT AllowFormattingColumns = vtMissing,
        /*[in]*/ VARIANT AllowFormattingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingColumns = vtMissing,
        /*[in]*/ VARIANT AllowInsertingRows = vtMissing,
        /*[in]*/ VARIANT AllowInsertingHyperlinks = vtMissing,
        /*[in]*/ VARIANT AllowDeletingColumns = vtMissing,
        /*[in]*/ VARIANT AllowDeletingRows = vtMissing,
        /*[in]*/ VARIANT AllowSorting = vtMissing,
        /*[in]*/ VARIANT AllowFiltering = vtMissing,
        /*[in]*/ VARIANT AllowUsingPivotTables = vtMissing ) = 0;
      virtual void __stdcall _Dummy113 ( ) = 0;
      virtual void __stdcall _Dummy114 ( ) = 0;
      virtual void __stdcall _Dummy115 ( ) = 0;
      virtual HRESULT __stdcall get_DefaultButton (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultButton (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DialogFrame (
        /*[out,retval]*/ struct DialogFrame * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditBoxes (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Focus (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Focus (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Hide (
        /*[in]*/ VARIANT Cancel,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("000208b0-0001-0000-c000-000000000046"))
IDialogSheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DialogSheetPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b1-0001-0000-c000-000000000046"))
IWorksheets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    HRESULT FillAcrossSheets (
        struct Range * Range,
        enum XlFillWith Type,
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_FillAcrossSheets (
        /*[in]*/ struct Range * Range,
        /*[in]*/ enum XlFillWith Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208b4-0001-0000-c000-000000000046"))
IPageSetup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    double LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    double RightMargin;
    __declspec(property(get=GetPrintErrors,put=PutPrintErrors))
    enum XlPrintErrors PrintErrors;
    __declspec(property(get=GetCenterHeaderPicture))
    GraphicPtr CenterHeaderPicture;
    __declspec(property(get=GetCenterFooterPicture))
    GraphicPtr CenterFooterPicture;
    __declspec(property(get=GetLeftHeaderPicture))
    GraphicPtr LeftHeaderPicture;
    __declspec(property(get=GetLeftFooterPicture))
    GraphicPtr LeftFooterPicture;
    __declspec(property(get=GetRightHeaderPicture))
    GraphicPtr RightHeaderPicture;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    double TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    double BottomMargin;
    __declspec(property(get=GetPrintHeadings,put=PutPrintHeadings))
    VARIANT_BOOL PrintHeadings;
    __declspec(property(get=GetPrintGridlines,put=PutPrintGridlines))
    VARIANT_BOOL PrintGridlines;
    __declspec(property(get=GetCenterHorizontally,put=PutCenterHorizontally))
    VARIANT_BOOL CenterHorizontally;
    __declspec(property(get=GetOrder,put=PutOrder))
    enum XlOrder Order;
    __declspec(property(get=GetCenterVertically,put=PutCenterVertically))
    VARIANT_BOOL CenterVertically;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum XlPaperSize PaperSize;
    __declspec(property(get=GetFirstPageNumber,put=PutFirstPageNumber))
    long FirstPageNumber;
    __declspec(property(get=GetBlackAndWhite,put=PutBlackAndWhite))
    VARIANT_BOOL BlackAndWhite;
    __declspec(property(get=GetCenterFooter,put=PutCenterFooter))
    _bstr_t CenterFooter;
    __declspec(property(get=GetCenterHeader,put=PutCenterHeader))
    _bstr_t CenterHeader;
    __declspec(property(get=GetChartSize,put=PutChartSize))
    enum XlObjectSize ChartSize;
    __declspec(property(get=GetDraft,put=PutDraft))
    VARIANT_BOOL Draft;
    __declspec(property(get=GetPrintNotes,put=PutPrintNotes))
    VARIANT_BOOL PrintNotes;
    __declspec(property(get=GetPrintQuality,put=PutPrintQuality))
    _variant_t PrintQuality[];
    __declspec(property(get=GetPrintTitleColumns,put=PutPrintTitleColumns))
    _bstr_t PrintTitleColumns;
    __declspec(property(get=GetPrintTitleRows,put=PutPrintTitleRows))
    _bstr_t PrintTitleRows;
    __declspec(property(get=GetRightFooter,put=PutRightFooter))
    _bstr_t RightFooter;
    __declspec(property(get=GetRightHeader,put=PutRightHeader))
    _bstr_t RightHeader;
    __declspec(property(get=GetFitToPagesTall,put=PutFitToPagesTall))
    _variant_t FitToPagesTall;
    __declspec(property(get=GetFitToPagesWide,put=PutFitToPagesWide))
    _variant_t FitToPagesWide;
    __declspec(property(get=GetFooterMargin,put=PutFooterMargin))
    double FooterMargin;
    __declspec(property(get=GetHeaderMargin,put=PutHeaderMargin))
    double HeaderMargin;
    __declspec(property(get=GetLeftFooter,put=PutLeftFooter))
    _bstr_t LeftFooter;
    __declspec(property(get=GetPrintComments,put=PutPrintComments))
    enum XlPrintLocation PrintComments;
    __declspec(property(get=GetLeftHeader,put=PutLeftHeader))
    _bstr_t LeftHeader;
    __declspec(property(get=GetPrintArea,put=PutPrintArea))
    _bstr_t PrintArea;
    __declspec(property(get=GetRightFooterPicture))
    GraphicPtr RightFooterPicture;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPageOrientation Orientation;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBlackAndWhite ( );
    void PutBlackAndWhite (
        VARIANT_BOOL RHS );
    double GetBottomMargin ( );
    void PutBottomMargin (
        double RHS );
    _bstr_t GetCenterFooter ( );
    void PutCenterFooter (
        _bstr_t RHS );
    _bstr_t GetCenterHeader ( );
    void PutCenterHeader (
        _bstr_t RHS );
    VARIANT_BOOL GetCenterHorizontally ( );
    void PutCenterHorizontally (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCenterVertically ( );
    void PutCenterVertically (
        VARIANT_BOOL RHS );
    enum XlObjectSize GetChartSize ( );
    void PutChartSize (
        enum XlObjectSize RHS );
    VARIANT_BOOL GetDraft ( );
    void PutDraft (
        VARIANT_BOOL RHS );
    long GetFirstPageNumber ( );
    void PutFirstPageNumber (
        long RHS );
    _variant_t GetFitToPagesTall ( );
    void PutFitToPagesTall (
        const _variant_t & RHS );
    _variant_t GetFitToPagesWide ( );
    void PutFitToPagesWide (
        const _variant_t & RHS );
    double GetFooterMargin ( );
    void PutFooterMargin (
        double RHS );
    double GetHeaderMargin ( );
    void PutHeaderMargin (
        double RHS );
    _bstr_t GetLeftFooter ( );
    void PutLeftFooter (
        _bstr_t RHS );
    _bstr_t GetLeftHeader ( );
    void PutLeftHeader (
        _bstr_t RHS );
    double GetLeftMargin ( );
    void PutLeftMargin (
        double RHS );
    enum XlOrder GetOrder ( );
    void PutOrder (
        enum XlOrder RHS );
    enum XlPageOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPageOrientation RHS );
    enum XlPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum XlPaperSize RHS );
    _bstr_t GetPrintArea ( );
    void PutPrintArea (
        _bstr_t RHS );
    VARIANT_BOOL GetPrintGridlines ( );
    void PutPrintGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintHeadings ( );
    void PutPrintHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPrintNotes ( );
    void PutPrintNotes (
        VARIANT_BOOL RHS );
    _variant_t GetPrintQuality (
        const _variant_t & Index = vtMissing );
    void PutPrintQuality (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _bstr_t GetPrintTitleColumns ( );
    void PutPrintTitleColumns (
        _bstr_t RHS );
    _bstr_t GetPrintTitleRows ( );
    void PutPrintTitleRows (
        _bstr_t RHS );
    _bstr_t GetRightFooter ( );
    void PutRightFooter (
        _bstr_t RHS );
    _bstr_t GetRightHeader ( );
    void PutRightHeader (
        _bstr_t RHS );
    double GetRightMargin ( );
    void PutRightMargin (
        double RHS );
    double GetTopMargin ( );
    void PutTopMargin (
        double RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlPrintLocation GetPrintComments ( );
    void PutPrintComments (
        enum XlPrintLocation RHS );
    enum XlPrintErrors GetPrintErrors ( );
    void PutPrintErrors (
        enum XlPrintErrors RHS );
    GraphicPtr GetCenterHeaderPicture ( );
    GraphicPtr GetCenterFooterPicture ( );
    GraphicPtr GetLeftHeaderPicture ( );
    GraphicPtr GetLeftFooterPicture ( );
    GraphicPtr GetRightHeaderPicture ( );
    GraphicPtr GetRightFooterPicture ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackAndWhite (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackAndWhite (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_BottomMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_BottomMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_CenterFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHorizontally (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterHorizontally (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CenterVertically (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CenterVertically (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChartSize (
        /*[out,retval]*/ enum XlObjectSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartSize (
        /*[in]*/ enum XlObjectSize RHS ) = 0;
      virtual HRESULT __stdcall get_Draft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Draft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FirstPageNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstPageNumber (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesTall (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesTall (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FitToPagesWide (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FitToPagesWide (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FooterMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_FooterMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HeaderMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_HeaderMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LeftFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_LeftMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_LeftMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ enum XlOrder * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ enum XlOrder RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPageOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPageOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_PaperSize (
        /*[out,retval]*/ enum XlPaperSize * RHS ) = 0;
      virtual HRESULT __stdcall put_PaperSize (
        /*[in]*/ enum XlPaperSize RHS ) = 0;
      virtual HRESULT __stdcall get_PrintArea (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintArea (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintNotes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintNotes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintQuality (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PrintTitleColumns (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleColumns (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PrintTitleRows (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitleRows (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightFooter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightFooter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightHeader (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_RightHeader (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RightMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_RightMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopMargin (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TopMargin (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintComments (
        /*[out,retval]*/ enum XlPrintLocation * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintComments (
        /*[in]*/ enum XlPrintLocation RHS ) = 0;
      virtual HRESULT __stdcall get_PrintErrors (
        /*[out,retval]*/ enum XlPrintErrors * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintErrors (
        /*[in]*/ enum XlPrintErrors RHS ) = 0;
      virtual HRESULT __stdcall get_CenterHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_CenterFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_LeftHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_LeftFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightHeaderPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightFooterPicture (
        /*[out,retval]*/ struct Graphic * * RHS ) = 0;
};

struct __declspec(uuid("000208b8-0001-0000-c000-000000000046"))
INames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    NamePtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & MacroType = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & NameLocal = vtMissing,
        const _variant_t & RefersToLocal = vtMissing,
        const _variant_t & CategoryLocal = vtMissing,
        const _variant_t & RefersToR1C1 = vtMissing,
        const _variant_t & RefersToR1C1Local = vtMissing );
    NamePtr Item (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    NamePtr _Default (
        const _variant_t & Index = vtMissing,
        const _variant_t & IndexLocal = vtMissing,
        const _variant_t & RefersTo = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT RefersTo,
        /*[in]*/ VARIANT Visible,
        /*[in]*/ VARIANT MacroType,
        /*[in]*/ VARIANT ShortcutKey,
        /*[in]*/ VARIANT Category,
        /*[in]*/ VARIANT NameLocal,
        /*[in]*/ VARIANT RefersToLocal,
        /*[in]*/ VARIANT CategoryLocal,
        /*[in]*/ VARIANT RefersToR1C1,
        /*[in]*/ VARIANT RefersToR1C1Local,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT IndexLocal,
        /*[in]*/ VARIANT RefersTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Name * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208b9-0001-0000-c000-000000000046"))
IName : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category[];
    __declspec(property(get=GetCategoryLocal,put=PutCategoryLocal))
    _bstr_t CategoryLocal;
    __declspec(property(get=GetMacroType,put=PutMacroType))
    enum XlXLMMacroType MacroType;
    __declspec(property(get=GetRefersTo,put=PutRefersTo))
    _variant_t RefersTo[];
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetRefersToLocal,put=PutRefersToLocal))
    _variant_t RefersToLocal;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetRefersToR1C1,put=PutRefersToR1C1))
    _variant_t RefersToR1C1[];
    __declspec(property(get=GetRefersToR1C1Local,put=PutRefersToR1C1Local))
    _variant_t RefersToR1C1Local;
    __declspec(property(get=GetRefersToRange))
    RangePtr RefersToRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    _bstr_t ShortcutKey;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    long GetIndex ( );
    _bstr_t GetCategory (
        long lcidIn = 0 );
    void PutCategory (
        long lcidIn,
        _bstr_t RHS );
    _bstr_t GetCategoryLocal ( );
    void PutCategoryLocal (
        _bstr_t RHS );
    HRESULT Delete ( );
    enum XlXLMMacroType GetMacroType ( );
    void PutMacroType (
        enum XlXLMMacroType RHS );
    _bstr_t GetName (
        long lcidIn = 0 );
    void PutName (
        long lcidIn,
        _bstr_t RHS );
    _variant_t GetRefersTo (
        long lcidIn = 0 );
    void PutRefersTo (
        long lcidIn,
        const _variant_t & RHS );
    _bstr_t GetShortcutKey ( );
    void PutShortcutKey (
        _bstr_t RHS );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t RHS );
    _variant_t GetRefersToLocal ( );
    void PutRefersToLocal (
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1 (
        long lcidIn = 0 );
    void PutRefersToR1C1 (
        long lcidIn,
        const _variant_t & RHS );
    _variant_t GetRefersToR1C1Local ( );
    void PutRefersToR1C1Local (
        const _variant_t & RHS );
    RangePtr GetRefersToRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_MacroType (
        /*[out,retval]*/ enum XlXLMMacroType * RHS ) = 0;
      virtual HRESULT __stdcall put_MacroType (
        /*[in]*/ enum XlXLMMacroType RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersTo (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutKey (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ShortcutKey (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1 (
        /*[in,lcid]*/ long lcidIn,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RefersToR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_RefersToRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("000208d0-0001-0000-c000-000000000046"))
IChartObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    ShapeRangePtr GetShapeRange ( );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    ChartObjectPtr Add (
        double Left,
        double Top,
        double Width,
        double Height );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy25 ( ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual void __stdcall _Dummy27 ( ) = 0;
      virtual void __stdcall _Dummy28 ( ) = 0;
      virtual void __stdcall _Dummy29 ( ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double Left,
        /*[in]*/ double Top,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[out,retval]*/ struct ChartObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208d1-0001-0000-c000-000000000046"))
IMailer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWhichAddress,put=PutWhichAddress))
    _variant_t WhichAddress;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBCCRecipients,put=PutBCCRecipients))
    _variant_t BCCRecipients;
    __declspec(property(get=GetCCRecipients,put=PutCCRecipients))
    _variant_t CCRecipients;
    __declspec(property(get=GetEnclosures,put=PutEnclosures))
    _variant_t Enclosures;
    __declspec(property(get=GetReceived))
    VARIANT_BOOL Received;
    __declspec(property(get=GetSendDateTime))
    DATE SendDateTime;
    __declspec(property(get=GetSender))
    _bstr_t Sender;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetToRecipients,put=PutToRecipients))
    _variant_t ToRecipients;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetBCCRecipients ( );
    void PutBCCRecipients (
        const _variant_t & RHS );
    _variant_t GetCCRecipients ( );
    void PutCCRecipients (
        const _variant_t & RHS );
    _variant_t GetEnclosures ( );
    void PutEnclosures (
        const _variant_t & RHS );
    VARIANT_BOOL GetReceived ( );
    DATE GetSendDateTime ( );
    _bstr_t GetSender ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t RHS );
    _variant_t GetToRecipients ( );
    void PutToRecipients (
        const _variant_t & RHS );
    _variant_t GetWhichAddress ( );
    void PutWhichAddress (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BCCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BCCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CCRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CCRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Enclosures (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Enclosures (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Received (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_SendDateTime (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_Sender (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ToRecipients (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ToRecipients (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_WhichAddress (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WhichAddress (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024422-0001-0000-c000-000000000046"))
ICustomViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomViewPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CustomViewPtr Item (
        const _variant_t & ViewName );
    CustomViewPtr Add (
        _bstr_t ViewName,
        const _variant_t & PrintSettings = vtMissing,
        const _variant_t & RowColSettings = vtMissing );
    CustomViewPtr Get_Default (
        const _variant_t & ViewName );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR ViewName,
        /*[in]*/ VARIANT PrintSettings,
        /*[in]*/ VARIANT RowColSettings,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT ViewName,
        /*[out,retval]*/ struct CustomView * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024423-0001-0000-c000-000000000046"))
ICustomView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPrintSettings))
    VARIANT_BOOL PrintSettings;
    __declspec(property(get=GetRowColSettings))
    VARIANT_BOOL RowColSettings;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    VARIANT_BOOL GetPrintSettings ( );
    VARIANT_BOOL GetRowColSettings ( );
    HRESULT Show ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowColSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024424-0001-0000-c000-000000000046"))
IFormatConditions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FormatConditionPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FormatConditionPtr Item (
        const _variant_t & Index );
    FormatConditionPtr Add (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    FormatConditionPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator,
        /*[in]*/ VARIANT Formula1,
        /*[in]*/ VARIANT Formula2,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FormatCondition * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024425-0001-0000-c000-000000000046"))
IFormatCondition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Modify (
        enum XlFormatConditionType Type,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetType ( );
    long GetOperator ( );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    InteriorPtr GetInterior ( );
    BordersPtr GetBorders ( );
    FontPtr GetFont ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ enum XlFormatConditionType Type,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024426-0001-0000-c000-000000000046"))
IComments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CommentPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommentPtr Item (
        long Index );
    CommentPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024427-0001-0000-c000-000000000046"))
IComment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAuthor))
    _bstr_t Author;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetAuthor ( );
    ShapePtr GetShape ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    _bstr_t Text (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Overwrite = vtMissing );
    HRESULT Delete ( );
    CommentPtr Next ( );
    CommentPtr Previous ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Text (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Next (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Previous (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
};

struct __declspec(uuid("00024428-0001-0000-c000-000000000046"))
_IQueryTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTextFilePromptOnRefresh,put=PutTextFilePromptOnRefresh))
    VARIANT_BOOL TextFilePromptOnRefresh;
    __declspec(property(get=GetConnection,put=PutConnection))
    _variant_t Connection;
    __declspec(property(get=GetTextFileDecimalSeparator,put=PutTextFileDecimalSeparator))
    _bstr_t TextFileDecimalSeparator;
    __declspec(property(get=GetTextFileThousandsSeparator,put=PutTextFileThousandsSeparator))
    _bstr_t TextFileThousandsSeparator;
    __declspec(property(get=GetWebSelectionType,put=PutWebSelectionType))
    enum XlWebSelectionType WebSelectionType;
    __declspec(property(get=GetWebFormatting,put=PutWebFormatting))
    enum XlWebFormatting WebFormatting;
    __declspec(property(get=GetWebTables,put=PutWebTables))
    _bstr_t WebTables;
    __declspec(property(get=GetWebPreFormattedTextToColumns,put=PutWebPreFormattedTextToColumns))
    VARIANT_BOOL WebPreFormattedTextToColumns;
    __declspec(property(get=GetWebSingleBlockTextImport,put=PutWebSingleBlockTextImport))
    VARIANT_BOOL WebSingleBlockTextImport;
    __declspec(property(get=GetWebDisableDateRecognition,put=PutWebDisableDateRecognition))
    VARIANT_BOOL WebDisableDateRecognition;
    __declspec(property(get=GetWebConsecutiveDelimitersAsOne,put=PutWebConsecutiveDelimitersAsOne))
    VARIANT_BOOL WebConsecutiveDelimitersAsOne;
    __declspec(property(get=GetSourceConnectionFile,put=PutSourceConnectionFile))
    _bstr_t SourceConnectionFile;
    __declspec(property(get=GetSourceDataFile,put=PutSourceDataFile))
    _bstr_t SourceDataFile;
    __declspec(property(get=GetRobustConnect,put=PutRobustConnect))
    enum XlRobustConnect RobustConnect;
    __declspec(property(get=GetDestination))
    RangePtr Destination;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFieldNames,put=PutFieldNames))
    VARIANT_BOOL FieldNames;
    __declspec(property(get=GetRowNumbers,put=PutRowNumbers))
    VARIANT_BOOL RowNumbers;
    __declspec(property(get=GetFillAdjacentFormulas,put=PutFillAdjacentFormulas))
    VARIANT_BOOL FillAdjacentFormulas;
    __declspec(property(get=GetEnableRefresh,put=PutEnableRefresh))
    VARIANT_BOOL EnableRefresh;
    __declspec(property(get=GetRefreshing))
    VARIANT_BOOL Refreshing;
    __declspec(property(get=GetRefreshOnFileOpen,put=PutRefreshOnFileOpen))
    VARIANT_BOOL RefreshOnFileOpen;
    __declspec(property(get=GetSql,put=PutSql))
    _variant_t Sql;
    __declspec(property(get=GetSavePassword,put=PutSavePassword))
    VARIANT_BOOL SavePassword;
    __declspec(property(get=GetFetchedRowOverflow))
    VARIANT_BOOL FetchedRowOverflow;
    __declspec(property(get=GetRefreshStyle,put=PutRefreshStyle))
    enum XlCellInsertionMode RefreshStyle;
    __declspec(property(get=GetPostText,put=PutPostText))
    _bstr_t PostText;
    __declspec(property(get=GetResultRange))
    RangePtr ResultRange;
    __declspec(property(get=GetParameters))
    ParametersPtr Parameters;
    __declspec(property(get=GetTablesOnlyFromHTML,put=PutTablesOnlyFromHTML))
    VARIANT_BOOL TablesOnlyFromHTML;
    __declspec(property(get=GetEnableEditing,put=PutEnableEditing))
    VARIANT_BOOL EnableEditing;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetTextFileVisualLayout,put=PutTextFileVisualLayout))
    enum XlTextVisualLayoutType TextFileVisualLayout;
    __declspec(property(get=GetRecordset,put=PutRefRecordset))
    IDispatchPtr Recordset;
    __declspec(property(get=GetCommandText,put=PutCommandText))
    _variant_t CommandText;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetCommandType,put=PutCommandType))
    enum XlCmdType CommandType;
    __declspec(property(get=GetQueryType))
    enum XlQueryType QueryType;
    __declspec(property(get=GetMaintainConnection,put=PutMaintainConnection))
    VARIANT_BOOL MaintainConnection;
    __declspec(property(get=GetRefreshPeriod,put=PutRefreshPeriod))
    long RefreshPeriod;
    __declspec(property(get=GetWebDisableRedirections,put=PutWebDisableRedirections))
    VARIANT_BOOL WebDisableRedirections;
    __declspec(property(get=GetEditWebPage,put=PutEditWebPage))
    _variant_t EditWebPage;
    __declspec(property(get=GetTextFileTrailingMinusNumbers,put=PutTextFileTrailingMinusNumbers))
    VARIANT_BOOL TextFileTrailingMinusNumbers;
    __declspec(property(get=GetTextFilePlatform,put=PutTextFilePlatform))
    long TextFilePlatform;
    __declspec(property(get=GetTextFileStartRow,put=PutTextFileStartRow))
    long TextFileStartRow;
    __declspec(property(get=GetTextFileParseType,put=PutTextFileParseType))
    enum XlTextParsingType TextFileParseType;
    __declspec(property(get=GetTextFileTextQualifier,put=PutTextFileTextQualifier))
    enum XlTextQualifier TextFileTextQualifier;
    __declspec(property(get=GetTextFileConsecutiveDelimiter,put=PutTextFileConsecutiveDelimiter))
    VARIANT_BOOL TextFileConsecutiveDelimiter;
    __declspec(property(get=GetTextFileTabDelimiter,put=PutTextFileTabDelimiter))
    VARIANT_BOOL TextFileTabDelimiter;
    __declspec(property(get=GetTextFileSemicolonDelimiter,put=PutTextFileSemicolonDelimiter))
    VARIANT_BOOL TextFileSemicolonDelimiter;
    __declspec(property(get=GetTextFileCommaDelimiter,put=PutTextFileCommaDelimiter))
    VARIANT_BOOL TextFileCommaDelimiter;
    __declspec(property(get=GetTextFileSpaceDelimiter,put=PutTextFileSpaceDelimiter))
    VARIANT_BOOL TextFileSpaceDelimiter;
    __declspec(property(get=GetTextFileOtherDelimiter,put=PutTextFileOtherDelimiter))
    _bstr_t TextFileOtherDelimiter;
    __declspec(property(get=GetTextFileColumnDataTypes,put=PutTextFileColumnDataTypes))
    _variant_t TextFileColumnDataTypes;
    __declspec(property(get=GetTextFileFixedColumnWidths,put=PutTextFileFixedColumnWidths))
    _variant_t TextFileFixedColumnWidths;
    __declspec(property(get=GetBackgroundQuery,put=PutBackgroundQuery))
    VARIANT_BOOL BackgroundQuery;
    __declspec(property(get=GetPreserveColumnInfo,put=PutPreserveColumnInfo))
    VARIANT_BOOL PreserveColumnInfo;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetFieldNames ( );
    void PutFieldNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRowNumbers ( );
    void PutRowNumbers (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFillAdjacentFormulas ( );
    void PutFillAdjacentFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshOnFileOpen ( );
    void PutRefreshOnFileOpen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRefreshing ( );
    VARIANT_BOOL GetFetchedRowOverflow ( );
    VARIANT_BOOL GetBackgroundQuery ( );
    void PutBackgroundQuery (
        VARIANT_BOOL RHS );
    HRESULT CancelRefresh ( );
    enum XlCellInsertionMode GetRefreshStyle ( );
    void PutRefreshStyle (
        enum XlCellInsertionMode RHS );
    VARIANT_BOOL GetEnableRefresh ( );
    void PutEnableRefresh (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSavePassword ( );
    void PutSavePassword (
        VARIANT_BOOL RHS );
    RangePtr GetDestination ( );
    _variant_t GetConnection ( );
    void PutConnection (
        const _variant_t & RHS );
    _variant_t GetSql ( );
    void PutSql (
        const _variant_t & RHS );
    _bstr_t GetPostText ( );
    void PutPostText (
        _bstr_t RHS );
    RangePtr GetResultRange ( );
    HRESULT Delete ( );
    VARIANT_BOOL Refresh (
        const _variant_t & BackgroundQuery = vtMissing );
    ParametersPtr GetParameters ( );
    IDispatchPtr GetRecordset ( );
    void PutRefRecordset (
        IDispatch * RHS );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTablesOnlyFromHTML ( );
    void PutTablesOnlyFromHTML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableEditing ( );
    void PutEnableEditing (
        VARIANT_BOOL RHS );
    long GetTextFilePlatform ( );
    void PutTextFilePlatform (
        long RHS );
    long GetTextFileStartRow ( );
    void PutTextFileStartRow (
        long RHS );
    enum XlTextParsingType GetTextFileParseType ( );
    void PutTextFileParseType (
        enum XlTextParsingType RHS );
    enum XlTextQualifier GetTextFileTextQualifier ( );
    void PutTextFileTextQualifier (
        enum XlTextQualifier RHS );
    VARIANT_BOOL GetTextFileConsecutiveDelimiter ( );
    void PutTextFileConsecutiveDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileTabDelimiter ( );
    void PutTextFileTabDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSemicolonDelimiter ( );
    void PutTextFileSemicolonDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileCommaDelimiter ( );
    void PutTextFileCommaDelimiter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextFileSpaceDelimiter ( );
    void PutTextFileSpaceDelimiter (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileOtherDelimiter ( );
    void PutTextFileOtherDelimiter (
        _bstr_t RHS );
    _variant_t GetTextFileColumnDataTypes ( );
    void PutTextFileColumnDataTypes (
        const _variant_t & RHS );
    _variant_t GetTextFileFixedColumnWidths ( );
    void PutTextFileFixedColumnWidths (
        const _variant_t & RHS );
    VARIANT_BOOL GetPreserveColumnInfo ( );
    void PutPreserveColumnInfo (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    _variant_t GetCommandText ( );
    void PutCommandText (
        const _variant_t & RHS );
    enum XlCmdType GetCommandType ( );
    void PutCommandType (
        enum XlCmdType RHS );
    VARIANT_BOOL GetTextFilePromptOnRefresh ( );
    void PutTextFilePromptOnRefresh (
        VARIANT_BOOL RHS );
    enum XlQueryType GetQueryType ( );
    VARIANT_BOOL GetMaintainConnection ( );
    void PutMaintainConnection (
        VARIANT_BOOL RHS );
    _bstr_t GetTextFileDecimalSeparator ( );
    void PutTextFileDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetTextFileThousandsSeparator ( );
    void PutTextFileThousandsSeparator (
        _bstr_t RHS );
    long GetRefreshPeriod ( );
    void PutRefreshPeriod (
        long RHS );
    HRESULT ResetTimer ( );
    enum XlWebSelectionType GetWebSelectionType ( );
    void PutWebSelectionType (
        enum XlWebSelectionType RHS );
    enum XlWebFormatting GetWebFormatting ( );
    void PutWebFormatting (
        enum XlWebFormatting RHS );
    _bstr_t GetWebTables ( );
    void PutWebTables (
        _bstr_t RHS );
    VARIANT_BOOL GetWebPreFormattedTextToColumns ( );
    void PutWebPreFormattedTextToColumns (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebSingleBlockTextImport ( );
    void PutWebSingleBlockTextImport (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableDateRecognition ( );
    void PutWebDisableDateRecognition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebConsecutiveDelimitersAsOne ( );
    void PutWebConsecutiveDelimitersAsOne (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetWebDisableRedirections ( );
    void PutWebDisableRedirections (
        VARIANT_BOOL RHS );
    _variant_t GetEditWebPage ( );
    void PutEditWebPage (
        const _variant_t & RHS );
    _bstr_t GetSourceConnectionFile ( );
    void PutSourceConnectionFile (
        _bstr_t RHS );
    _bstr_t GetSourceDataFile ( );
    void PutSourceDataFile (
        _bstr_t RHS );
    enum XlRobustConnect GetRobustConnect ( );
    void PutRobustConnect (
        enum XlRobustConnect RHS );
    VARIANT_BOOL GetTextFileTrailingMinusNumbers ( );
    void PutTextFileTrailingMinusNumbers (
        VARIANT_BOOL RHS );
    HRESULT SaveAsODC (
        _bstr_t ODCFileName,
        const _variant_t & Description = vtMissing,
        const _variant_t & Keywords = vtMissing );
    ListObjectPtr GetListObject ( );
    enum XlTextVisualLayoutType GetTextFileVisualLayout ( );
    void PutTextFileVisualLayout (
        enum XlTextVisualLayoutType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FieldNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FieldNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowNumbers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowNumbers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FillAdjacentFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FillAdjacentFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshOnFileOpen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnFileOpen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Refreshing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FetchedRowOverflow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundQuery (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundQuery (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CancelRefresh ( ) = 0;
      virtual HRESULT __stdcall get_RefreshStyle (
        /*[out,retval]*/ enum XlCellInsertionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshStyle (
        /*[in]*/ enum XlCellInsertionMode RHS ) = 0;
      virtual HRESULT __stdcall get_EnableRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SavePassword (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SavePassword (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Destination (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Connection (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Connection (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Sql (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Sql (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PostText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PostText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ResultRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ VARIANT BackgroundQuery,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct Parameters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Recordset (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Recordset (
        /*[in]*/ IDispatch * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TablesOnlyFromHTML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TablesOnlyFromHTML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEditing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEditing (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePlatform (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePlatform (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileStartRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileStartRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileParseType (
        /*[out,retval]*/ enum XlTextParsingType * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileParseType (
        /*[in]*/ enum XlTextParsingType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTextQualifier (
        /*[out,retval]*/ enum XlTextQualifier * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTextQualifier (
        /*[in]*/ enum XlTextQualifier RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileConsecutiveDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileConsecutiveDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTabDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTabDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSemicolonDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSemicolonDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileCommaDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileCommaDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileSpaceDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileSpaceDelimiter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileOtherDelimiter (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileOtherDelimiter (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileColumnDataTypes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileColumnDataTypes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileFixedColumnWidths (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileFixedColumnWidths (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveColumnInfo (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveColumnInfo (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AdjustColumnWidth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AdjustColumnWidth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_CommandType (
        /*[out,retval]*/ enum XlCmdType * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandType (
        /*[in]*/ enum XlCmdType RHS ) = 0;
      virtual HRESULT __stdcall get_TextFilePromptOnRefresh (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFilePromptOnRefresh (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_QueryType (
        /*[out,retval]*/ enum XlQueryType * RHS ) = 0;
      virtual HRESULT __stdcall get_MaintainConnection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaintainConnection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileDecimalSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileDecimalSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileThousandsSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileThousandsSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshPeriod (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshPeriod (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ResetTimer ( ) = 0;
      virtual HRESULT __stdcall get_WebSelectionType (
        /*[out,retval]*/ enum XlWebSelectionType * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSelectionType (
        /*[in]*/ enum XlWebSelectionType RHS ) = 0;
      virtual HRESULT __stdcall get_WebFormatting (
        /*[out,retval]*/ enum XlWebFormatting * RHS ) = 0;
      virtual HRESULT __stdcall put_WebFormatting (
        /*[in]*/ enum XlWebFormatting RHS ) = 0;
      virtual HRESULT __stdcall get_WebTables (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_WebTables (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_WebPreFormattedTextToColumns (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebPreFormattedTextToColumns (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebSingleBlockTextImport (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebSingleBlockTextImport (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebDisableDateRecognition (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebDisableDateRecognition (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebConsecutiveDelimitersAsOne (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebConsecutiveDelimitersAsOne (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_WebDisableRedirections (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WebDisableRedirections (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EditWebPage (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_EditWebPage (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SourceConnectionFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceConnectionFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SourceDataFile (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceDataFile (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_RobustConnect (
        /*[out,retval]*/ enum XlRobustConnect * RHS ) = 0;
      virtual HRESULT __stdcall put_RobustConnect (
        /*[in]*/ enum XlRobustConnect RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileTrailingMinusNumbers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileTrailingMinusNumbers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsODC (
        /*[in]*/ BSTR ODCFileName,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT Keywords = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ListObject (
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFileVisualLayout (
        /*[out,retval]*/ enum XlTextVisualLayoutType * RHS ) = 0;
      virtual HRESULT __stdcall put_TextFileVisualLayout (
        /*[in]*/ enum XlTextVisualLayoutType RHS ) = 0;
};

struct __declspec(uuid("00024429-0001-0000-c000-000000000046"))
IQueryTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _QueryTablePtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    _QueryTablePtr Add (
        const _variant_t & Connection,
        struct Range * Destination,
        const _variant_t & Sql = vtMissing );
    _QueryTablePtr Item (
        const _variant_t & Index );
    _QueryTablePtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Connection,
        /*[in]*/ struct Range * Destination,
        /*[in]*/ VARIANT Sql,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442a-0001-0000-c000-000000000046"))
IParameter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceRange))
    RangePtr SourceRange;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum XlParameterType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDataType,put=PutDataType))
    enum XlParameterDataType DataType;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRefreshOnChange,put=PutRefreshOnChange))
    VARIANT_BOOL RefreshOnChange;
    __declspec(property(get=GetPromptString))
    _bstr_t PromptString;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlParameterDataType GetDataType ( );
    void PutDataType (
        enum XlParameterDataType RHS );
    enum XlParameterType GetType ( );
    _bstr_t GetPromptString ( );
    _variant_t GetValue ( );
    RangePtr GetSourceRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    HRESULT SetParam (
        enum XlParameterType Type,
        const _variant_t & Value );
    VARIANT_BOOL GetRefreshOnChange ( );
    void PutRefreshOnChange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlParameterDataType * RHS ) = 0;
      virtual HRESULT __stdcall put_DataType (
        /*[in]*/ enum XlParameterDataType RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlParameterType * RHS ) = 0;
      virtual HRESULT __stdcall get_PromptString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_SetParam (
        /*[in]*/ enum XlParameterType Type,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_RefreshOnChange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RefreshOnChange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002442b-0001-0000-c000-000000000046"))
IParameters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ParameterPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ParameterPtr Add (
        _bstr_t Name,
        const _variant_t & iDataType = vtMissing );
    long GetCount ( );
    ParameterPtr Item (
        const _variant_t & Index );
    ParameterPtr Get_Default (
        const _variant_t & Index );
    HRESULT Delete ( );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT iDataType,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Parameter * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442c-0001-0000-c000-000000000046"))
IODBCError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002442d-0001-0000-c000-000000000046"))
IODBCErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ODBCErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ODBCErrorPtr Item (
        long Index );
    ODBCErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ODBCError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002442f-0001-0000-c000-000000000046"))
IValidation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlertStyle))
    long AlertStyle;
    __declspec(property(get=GetIgnoreBlank,put=PutIgnoreBlank))
    VARIANT_BOOL IgnoreBlank;
    __declspec(property(get=GetIMEMode,put=PutIMEMode))
    long IMEMode;
    __declspec(property(get=GetInCellDropdown,put=PutInCellDropdown))
    VARIANT_BOOL InCellDropdown;
    __declspec(property(get=GetErrorMessage,put=PutErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorTitle,put=PutErrorTitle))
    _bstr_t ErrorTitle;
    __declspec(property(get=GetInputMessage,put=PutInputMessage))
    _bstr_t InputMessage;
    __declspec(property(get=GetInputTitle,put=PutInputTitle))
    _bstr_t InputTitle;
    __declspec(property(get=GetFormula1))
    _bstr_t Formula1;
    __declspec(property(get=GetFormula2))
    _bstr_t Formula2;
    __declspec(property(get=GetShowError,put=PutShowError))
    VARIANT_BOOL ShowError;
    __declspec(property(get=GetShowInput,put=PutShowInput))
    VARIANT_BOOL ShowInput;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOperator))
    long Operator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Add (
        enum XlDVType Type,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetAlertStyle ( );
    VARIANT_BOOL GetIgnoreBlank ( );
    void PutIgnoreBlank (
        VARIANT_BOOL RHS );
    long GetIMEMode ( );
    void PutIMEMode (
        long RHS );
    VARIANT_BOOL GetInCellDropdown ( );
    void PutInCellDropdown (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );
    _bstr_t GetErrorMessage ( );
    void PutErrorMessage (
        _bstr_t RHS );
    _bstr_t GetErrorTitle ( );
    void PutErrorTitle (
        _bstr_t RHS );
    _bstr_t GetInputMessage ( );
    void PutInputMessage (
        _bstr_t RHS );
    _bstr_t GetInputTitle ( );
    void PutInputTitle (
        _bstr_t RHS );
    _bstr_t GetFormula1 ( );
    _bstr_t GetFormula2 ( );
    HRESULT Modify (
        const _variant_t & Type = vtMissing,
        const _variant_t & AlertStyle = vtMissing,
        const _variant_t & Operator = vtMissing,
        const _variant_t & Formula1 = vtMissing,
        const _variant_t & Formula2 = vtMissing );
    long GetOperator ( );
    VARIANT_BOOL GetShowError ( );
    void PutShowError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowInput ( );
    void PutShowInput (
        VARIANT_BOOL RHS );
    long GetType ( );
    VARIANT_BOOL GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlDVType Type,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AlertStyle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IgnoreBlank (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreBlank (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IMEMode (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_IMEMode (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_InCellDropdown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InCellDropdown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_ErrorMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputMessage (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputMessage (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_InputTitle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InputTitle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Formula1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula2 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Modify (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in]*/ VARIANT AlertStyle = vtMissing,
        /*[in]*/ VARIANT Operator = vtMissing,
        /*[in]*/ VARIANT Formula1 = vtMissing,
        /*[in]*/ VARIANT Formula2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowError (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowError (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowInput (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowInput (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00024430-0001-0000-c000-000000000046"))
IHyperlinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    HyperlinkPtr _Default[];
    __declspec(property(get=GetItem))
    HyperlinkPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        IDispatch * Anchor,
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & ScreenTip = vtMissing,
        const _variant_t & TextToDisplay = vtMissing );
    long GetCount ( );
    HyperlinkPtr GetItem (
        const _variant_t & Index );
    HyperlinkPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Anchor,
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress,
        /*[in]*/ VARIANT ScreenTip,
        /*[in]*/ VARIANT TextToDisplay,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024431-0001-0000-c000-000000000046"))
IHyperlink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetAddress,put=PutAddress))
    _bstr_t Address;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetScreenTip,put=PutScreenTip))
    _bstr_t ScreenTip;
    __declspec(property(get=GetTextToDisplay,put=PutTextToDisplay))
    _bstr_t TextToDisplay;
    __declspec(property(get=GetEmailSubject,put=PutEmailSubject))
    _bstr_t EmailSubject;
    __declspec(property(get=GetSubAddress,put=PutSubAddress))
    _bstr_t SubAddress;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    RangePtr GetRange ( );
    ShapePtr GetShape ( );
    _bstr_t GetSubAddress ( );
    void PutSubAddress (
        _bstr_t RHS );
    _bstr_t GetAddress ( );
    void PutAddress (
        _bstr_t RHS );
    long GetType ( );
    HRESULT AddToFavorites ( );
    HRESULT Delete ( );
    HRESULT Follow (
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    _bstr_t GetEmailSubject ( );
    void PutEmailSubject (
        _bstr_t RHS );
    _bstr_t GetScreenTip ( );
    void PutScreenTip (
        _bstr_t RHS );
    _bstr_t GetTextToDisplay ( );
    void PutTextToDisplay (
        _bstr_t RHS );
    HRESULT CreateNewDocument (
        _bstr_t Filename,
        VARIANT_BOOL EditNow,
        VARIANT_BOOL Overwrite );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubAddress (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubAddress (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Address (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Follow (
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EmailSubject (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_EmailSubject (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenTip (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenTip (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TextToDisplay (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextToDisplay (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDocument (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT_BOOL EditNow,
        /*[in]*/ VARIANT_BOOL Overwrite ) = 0;
};

struct __declspec(uuid("00024432-0001-0000-c000-000000000046"))
IAutoFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetFilters))
    FiltersPtr Filters;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetRange ( );
    FiltersPtr GetFilters ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Filters (
        /*[out,retval]*/ struct Filters * * RHS ) = 0;
};

struct __declspec(uuid("00024433-0001-0000-c000-000000000046"))
IFilters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    FilterPtr _Default[];
    __declspec(property(get=GetItem))
    FilterPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    FilterPtr Get_Default (
        long Index );
    FilterPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Filter * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024434-0001-0000-c000-000000000046"))
IFilter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetOn))
    VARIANT_BOOL On;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCriteria1))
    _variant_t Criteria1;
    __declspec(property(get=GetOperator))
    enum XlAutoFilterOperator Operator;
    __declspec(property(get=GetCriteria2))
    _variant_t Criteria2;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetOn ( );
    _variant_t GetCriteria1 ( );
    enum XlAutoFilterOperator GetOperator ( );
    _variant_t GetCriteria2 ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_On (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria1 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ enum XlAutoFilterOperator * RHS ) = 0;
      virtual HRESULT __stdcall get_Criteria2 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d4-0001-0000-c000-000000000046"))
IAutoCorrect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayAutoCorrectOptions,put=PutDisplayAutoCorrectOptions))
    VARIANT_BOOL DisplayAutoCorrectOptions;
    __declspec(property(get=GetCorrectSentenceCap,put=PutCorrectSentenceCap))
    VARIANT_BOOL CorrectSentenceCap;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCorrectCapsLock,put=PutCorrectCapsLock))
    VARIANT_BOOL CorrectCapsLock;
    __declspec(property(get=GetAutoExpandListRange,put=PutAutoExpandListRange))
    VARIANT_BOOL AutoExpandListRange;
    __declspec(property(get=GetReplaceText,put=PutReplaceText))
    VARIANT_BOOL ReplaceText;
    __declspec(property(get=GetTwoInitialCapitals,put=PutTwoInitialCapitals))
    VARIANT_BOOL TwoInitialCapitals;
    __declspec(property(get=GetCapitalizeNamesOfDays,put=PutCapitalizeNamesOfDays))
    VARIANT_BOOL CapitalizeNamesOfDays;
    __declspec(property(get=GetReplacementList,put=PutReplacementList))
    _variant_t ReplacementList[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddReplacement (
        _bstr_t What,
        _bstr_t Replacement );
    VARIANT_BOOL GetCapitalizeNamesOfDays ( );
    void PutCapitalizeNamesOfDays (
        VARIANT_BOOL RHS );
    _variant_t DeleteReplacement (
        _bstr_t What );
    _variant_t GetReplacementList (
        const _variant_t & Index = vtMissing );
    void PutReplacementList (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetReplaceText ( );
    void PutReplaceText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTwoInitialCapitals ( );
    void PutTwoInitialCapitals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectSentenceCap ( );
    void PutCorrectSentenceCap (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCorrectCapsLock ( );
    void PutCorrectCapsLock (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayAutoCorrectOptions ( );
    void PutDisplayAutoCorrectOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoExpandListRange ( );
    void PutAutoExpandListRange (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddReplacement (
        /*[in]*/ BSTR What,
        /*[in]*/ BSTR Replacement,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CapitalizeNamesOfDays (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CapitalizeNamesOfDays (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteReplacement (
        /*[in]*/ BSTR What,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ReplacementList (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ReplaceText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReplaceText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TwoInitialCapitals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TwoInitialCapitals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectSentenceCap (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectSentenceCap (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CorrectCapsLock (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CorrectCapsLock (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAutoCorrectOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAutoCorrectOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoExpandListRange (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoExpandListRange (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020854-0001-0000-c000-000000000046"))
IBorder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    _variant_t LineStyle;
    __declspec(property(get=GetWeight,put=PutWeight))
    _variant_t Weight;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetLineStyle ( );
    void PutLineStyle (
        const _variant_t & RHS );
    _variant_t GetWeight ( );
    void PutWeight (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_LineStyle (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_LineStyle (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Weight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Weight (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020870-0001-0000-c000-000000000046"))
IInterior : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    _variant_t ColorIndex;
    __declspec(property(get=GetPatternColorIndex,put=PutPatternColorIndex))
    _variant_t PatternColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    _variant_t InvertIfNegative;
    __declspec(property(get=GetPatternColor,put=PutPatternColor))
    _variant_t PatternColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPattern,put=PutPattern))
    _variant_t Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    _variant_t GetColorIndex ( );
    void PutColorIndex (
        const _variant_t & RHS );
    _variant_t GetInvertIfNegative ( );
    void PutInvertIfNegative (
        const _variant_t & RHS );
    _variant_t GetPattern ( );
    void PutPattern (
        const _variant_t & RHS );
    _variant_t GetPatternColor ( );
    void PutPatternColor (
        const _variant_t & RHS );
    _variant_t GetPatternColorIndex ( );
    void PutPatternColorIndex (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Pattern (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColor (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColor (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PatternColorIndex (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PatternColorIndex (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024435-0001-0000-c000-000000000046"))
IChartFillFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPresetGradientType))
    enum Office::MsoPresetGradientType PresetGradientType;
    __declspec(property(get=GetBackColor))
    ChartColorFormatPtr BackColor;
    __declspec(property(get=GetForeColor))
    ChartColorFormatPtr ForeColor;
    __declspec(property(get=GetGradientColorType))
    enum Office::MsoGradientColorType GradientColorType;
    __declspec(property(get=GetGradientDegree))
    float GradientDegree;
    __declspec(property(get=GetGradientStyle))
    enum Office::MsoGradientStyle GradientStyle;
    __declspec(property(get=GetGradientVariant))
    long GradientVariant;
    __declspec(property(get=GetTextureName))
    _bstr_t TextureName;
    __declspec(property(get=GetTextureType))
    enum Office::MsoTextureType TextureType;
    __declspec(property(get=GetType))
    enum Office::MsoFillType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresetTexture))
    enum Office::MsoPresetTexture PresetTexture;
    __declspec(property(get=GetPattern))
    enum Office::MsoPatternType Pattern;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT OneColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        float Degree );
    HRESULT TwoColorGradient (
        enum Office::MsoGradientStyle Style,
        long Variant );
    HRESULT PresetTextured (
        enum Office::MsoPresetTexture PresetTexture );
    HRESULT Solid ( );
    HRESULT Patterned (
        enum Office::MsoPatternType Pattern );
    HRESULT UserPicture (
        const _variant_t & PictureFile = vtMissing,
        const _variant_t & PictureFormat = vtMissing,
        const _variant_t & PictureStackUnit = vtMissing,
        const _variant_t & PicturePlacement = vtMissing );
    HRESULT UserTextured (
        _bstr_t TextureFile );
    HRESULT PresetGradient (
        enum Office::MsoGradientStyle Style,
        long Variant,
        enum Office::MsoPresetGradientType PresetGradientType );
    ChartColorFormatPtr GetBackColor ( );
    ChartColorFormatPtr GetForeColor ( );
    enum Office::MsoGradientColorType GetGradientColorType ( );
    float GetGradientDegree ( );
    enum Office::MsoGradientStyle GetGradientStyle ( );
    long GetGradientVariant ( );
    enum Office::MsoPatternType GetPattern ( );
    enum Office::MsoPresetGradientType GetPresetGradientType ( );
    enum Office::MsoPresetTexture GetPresetTexture ( );
    _bstr_t GetTextureName ( );
    enum Office::MsoTextureType GetTextureType ( );
    enum Office::MsoFillType GetType ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OneColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ float Degree ) = 0;
      virtual HRESULT __stdcall raw_TwoColorGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant ) = 0;
      virtual HRESULT __stdcall raw_PresetTextured (
        /*[in]*/ enum Office::MsoPresetTexture PresetTexture ) = 0;
      virtual HRESULT __stdcall raw_Solid ( ) = 0;
      virtual HRESULT __stdcall raw_Patterned (
        /*[in]*/ enum Office::MsoPatternType Pattern ) = 0;
      virtual HRESULT __stdcall raw_UserPicture (
        /*[in]*/ VARIANT PictureFile = vtMissing,
        /*[in]*/ VARIANT PictureFormat = vtMissing,
        /*[in]*/ VARIANT PictureStackUnit = vtMissing,
        /*[in]*/ VARIANT PicturePlacement = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UserTextured (
        /*[in]*/ BSTR TextureFile ) = 0;
      virtual HRESULT __stdcall raw_PresetGradient (
        /*[in]*/ enum Office::MsoGradientStyle Style,
        /*[in]*/ long Variant,
        /*[in]*/ enum Office::MsoPresetGradientType PresetGradientType ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ struct ChartColorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientColorType (
        /*[out,retval]*/ enum Office::MsoGradientColorType * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientDegree (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientStyle (
        /*[out,retval]*/ enum Office::MsoGradientStyle * RHS ) = 0;
      virtual HRESULT __stdcall get_GradientVariant (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Pattern (
        /*[out,retval]*/ enum Office::MsoPatternType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetGradientType (
        /*[out,retval]*/ enum Office::MsoPresetGradientType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresetTexture (
        /*[out,retval]*/ enum Office::MsoPresetTexture * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_TextureType (
        /*[out,retval]*/ enum Office::MsoTextureType * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoFillType * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
};

struct __declspec(uuid("00024436-0001-0000-c000-000000000046"))
IChartColorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    long _Default;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSchemeColor,put=PutSchemeColor))
    long SchemeColor;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRGBEx))
    long RGBEx;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetSchemeColor ( );
    void PutSchemeColor (
        long RHS );
    long GetRGBEx ( );
    long Get_Default ( );
    long GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SchemeColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SchemeColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RGBEx (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00020848-0001-0000-c000-000000000046"))
IAxis : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAxisTitle))
    AxisTitlePtr AxisTitle;
    __declspec(property(get=GetDisplayUnit,put=PutDisplayUnit))
    enum XlDisplayUnit DisplayUnit;
    __declspec(property(get=GetDisplayUnitCustom,put=PutDisplayUnitCustom))
    double DisplayUnitCustom;
    __declspec(property(get=GetHasDisplayUnitLabel,put=PutHasDisplayUnitLabel))
    VARIANT_BOOL HasDisplayUnitLabel;
    __declspec(property(get=GetDisplayUnitLabel))
    DisplayUnitLabelPtr DisplayUnitLabel;
    __declspec(property(get=GetMajorGridlines))
    GridlinesPtr MajorGridlines;
    __declspec(property(get=GetMinorGridlines))
    GridlinesPtr MinorGridlines;
    __declspec(property(get=GetTickLabels))
    TickLabelsPtr TickLabels;
    __declspec(property(get=GetBaseUnit,put=PutBaseUnit))
    enum XlTimeUnit BaseUnit;
    __declspec(property(get=GetBaseUnitIsAuto,put=PutBaseUnitIsAuto))
    VARIANT_BOOL BaseUnitIsAuto;
    __declspec(property(get=GetMajorUnitScale,put=PutMajorUnitScale))
    enum XlTimeUnit MajorUnitScale;
    __declspec(property(get=GetMinorUnitScale,put=PutMinorUnitScale))
    enum XlTimeUnit MinorUnitScale;
    __declspec(property(get=GetCategoryType,put=PutCategoryType))
    enum XlCategoryType CategoryType;
    __declspec(property(get=GetHasMajorGridlines,put=PutHasMajorGridlines))
    VARIANT_BOOL HasMajorGridlines;
    __declspec(property(get=GetHasMinorGridlines,put=PutHasMinorGridlines))
    VARIANT_BOOL HasMinorGridlines;
    __declspec(property(get=GetMajorTickMark,put=PutMajorTickMark))
    enum XlTickMark MajorTickMark;
    __declspec(property(get=GetMinorTickMark,put=PutMinorTickMark))
    enum XlTickMark MinorTickMark;
    __declspec(property(get=GetTickLabelPosition,put=PutTickLabelPosition))
    enum XlTickLabelPosition TickLabelPosition;
    __declspec(property(get=GetTickLabelSpacing,put=PutTickLabelSpacing))
    long TickLabelSpacing;
    __declspec(property(get=GetType,put=PutType))
    enum XlAxisType Type;
    __declspec(property(get=GetTickMarkSpacing,put=PutTickMarkSpacing))
    long TickMarkSpacing;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    double MinimumScale;
    __declspec(property(get=GetMinimumScaleIsAuto,put=PutMinimumScaleIsAuto))
    VARIANT_BOOL MinimumScaleIsAuto;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    double MaximumScale;
    __declspec(property(get=GetMaximumScaleIsAuto,put=PutMaximumScaleIsAuto))
    VARIANT_BOOL MaximumScaleIsAuto;
    __declspec(property(get=GetMajorUnit,put=PutMajorUnit))
    double MajorUnit;
    __declspec(property(get=GetMajorUnitIsAuto,put=PutMajorUnitIsAuto))
    VARIANT_BOOL MajorUnitIsAuto;
    __declspec(property(get=GetMinorUnit,put=PutMinorUnit))
    double MinorUnit;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetMinorUnitIsAuto,put=PutMinorUnitIsAuto))
    VARIANT_BOOL MinorUnitIsAuto;
    __declspec(property(get=GetScaleType,put=PutScaleType))
    enum XlScaleType ScaleType;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetReversePlotOrder,put=PutReversePlotOrder))
    VARIANT_BOOL ReversePlotOrder;
    __declspec(property(get=GetAxisBetweenCategories,put=PutAxisBetweenCategories))
    VARIANT_BOOL AxisBetweenCategories;
    __declspec(property(get=GetAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetCrosses,put=PutCrosses))
    enum XlAxisCrosses Crosses;
    __declspec(property(get=GetCrossesAt,put=PutCrossesAt))
    double CrossesAt;
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCategoryNames,put=PutCategoryNames))
    _variant_t CategoryNames;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAxisBetweenCategories ( );
    void PutAxisBetweenCategories (
        VARIANT_BOOL RHS );
    enum XlAxisGroup GetAxisGroup ( );
    AxisTitlePtr GetAxisTitle ( );
    BorderPtr GetBorder ( );
    _variant_t GetCategoryNames ( );
    void PutCategoryNames (
        const _variant_t & RHS );
    enum XlAxisCrosses GetCrosses ( );
    void PutCrosses (
        enum XlAxisCrosses RHS );
    double GetCrossesAt ( );
    void PutCrossesAt (
        double RHS );
    _variant_t Delete ( );
    VARIANT_BOOL GetHasMajorGridlines ( );
    void PutHasMajorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasMinorGridlines ( );
    void PutHasMinorGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle ( );
    void PutHasTitle (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMajorGridlines ( );
    enum XlTickMark GetMajorTickMark ( );
    void PutMajorTickMark (
        enum XlTickMark RHS );
    double GetMajorUnit ( );
    void PutMajorUnit (
        double RHS );
    VARIANT_BOOL GetMajorUnitIsAuto ( );
    void PutMajorUnitIsAuto (
        VARIANT_BOOL RHS );
    double GetMaximumScale ( );
    void PutMaximumScale (
        double RHS );
    VARIANT_BOOL GetMaximumScaleIsAuto ( );
    void PutMaximumScaleIsAuto (
        VARIANT_BOOL RHS );
    double GetMinimumScale ( );
    void PutMinimumScale (
        double RHS );
    VARIANT_BOOL GetMinimumScaleIsAuto ( );
    void PutMinimumScaleIsAuto (
        VARIANT_BOOL RHS );
    GridlinesPtr GetMinorGridlines ( );
    enum XlTickMark GetMinorTickMark ( );
    void PutMinorTickMark (
        enum XlTickMark RHS );
    double GetMinorUnit ( );
    void PutMinorUnit (
        double RHS );
    VARIANT_BOOL GetMinorUnitIsAuto ( );
    void PutMinorUnitIsAuto (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetReversePlotOrder ( );
    void PutReversePlotOrder (
        VARIANT_BOOL RHS );
    enum XlScaleType GetScaleType ( );
    void PutScaleType (
        enum XlScaleType RHS );
    _variant_t Select ( );
    enum XlTickLabelPosition GetTickLabelPosition ( );
    void PutTickLabelPosition (
        enum XlTickLabelPosition RHS );
    TickLabelsPtr GetTickLabels ( );
    long GetTickLabelSpacing ( );
    void PutTickLabelSpacing (
        long RHS );
    long GetTickMarkSpacing ( );
    void PutTickMarkSpacing (
        long RHS );
    enum XlAxisType GetType ( );
    void PutType (
        enum XlAxisType RHS );
    enum XlTimeUnit GetBaseUnit ( );
    void PutBaseUnit (
        enum XlTimeUnit RHS );
    VARIANT_BOOL GetBaseUnitIsAuto ( );
    void PutBaseUnitIsAuto (
        VARIANT_BOOL RHS );
    enum XlTimeUnit GetMajorUnitScale ( );
    void PutMajorUnitScale (
        enum XlTimeUnit RHS );
    enum XlTimeUnit GetMinorUnitScale ( );
    void PutMinorUnitScale (
        enum XlTimeUnit RHS );
    enum XlCategoryType GetCategoryType ( );
    void PutCategoryType (
        enum XlCategoryType RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    enum XlDisplayUnit GetDisplayUnit ( );
    void PutDisplayUnit (
        enum XlDisplayUnit RHS );
    double GetDisplayUnitCustom ( );
    void PutDisplayUnitCustom (
        double RHS );
    VARIANT_BOOL GetHasDisplayUnitLabel ( );
    void PutHasDisplayUnitLabel (
        VARIANT_BOOL RHS );
    DisplayUnitLabelPtr GetDisplayUnitLabel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisBetweenCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisBetweenCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisTitle (
        /*[out,retval]*/ struct AxisTitle * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryNames (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Crosses (
        /*[out,retval]*/ enum XlAxisCrosses * RHS ) = 0;
      virtual HRESULT __stdcall put_Crosses (
        /*[in]*/ enum XlAxisCrosses RHS ) = 0;
      virtual HRESULT __stdcall get_CrossesAt (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_CrossesAt (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMajorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMajorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasMinorGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMinorGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MajorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaximumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MaximumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScale (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScale (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinimumScaleIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinimumScaleIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MinorGridlines (
        /*[out,retval]*/ struct Gridlines * * RHS ) = 0;
      virtual HRESULT __stdcall get_MinorTickMark (
        /*[out,retval]*/ enum XlTickMark * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorTickMark (
        /*[in]*/ enum XlTickMark RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnit (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnit (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReversePlotOrder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReversePlotOrder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScaleType (
        /*[out,retval]*/ enum XlScaleType * RHS ) = 0;
      virtual HRESULT __stdcall put_ScaleType (
        /*[in]*/ enum XlScaleType RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelPosition (
        /*[out,retval]*/ enum XlTickLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelPosition (
        /*[in]*/ enum XlTickLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall get_TickLabelSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickLabelSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TickMarkSpacing (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TickMarkSpacing (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlAxisType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlAxisType RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnit (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnit (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_BaseUnitIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseUnitIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MajorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MajorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_MinorUnitScale (
        /*[out,retval]*/ enum XlTimeUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_MinorUnitScale (
        /*[in]*/ enum XlTimeUnit RHS ) = 0;
      virtual HRESULT __stdcall get_CategoryType (
        /*[out,retval]*/ enum XlCategoryType * RHS ) = 0;
      virtual HRESULT __stdcall put_CategoryType (
        /*[in]*/ enum XlCategoryType RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnit (
        /*[out,retval]*/ enum XlDisplayUnit * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnit (
        /*[in]*/ enum XlDisplayUnit RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitCustom (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayUnitCustom (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_HasDisplayUnitLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDisplayUnitLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayUnitLabel (
        /*[out,retval]*/ struct DisplayUnitLabel * * RHS ) = 0;
};

struct __declspec(uuid("00020849-0001-0000-c000-000000000046"))
IChartTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002084a-0001-0000-c000-000000000046"))
IAxisTitle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00020859-0001-0000-c000-000000000046"))
IChartGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVaryByCategories,put=PutVaryByCategories))
    VARIANT_BOOL VaryByCategories;
    __declspec(property(get=GetHasDropLines,put=PutHasDropLines))
    VARIANT_BOOL HasDropLines;
    __declspec(property(get=GetHasHiLoLines,put=PutHasHiLoLines))
    VARIANT_BOOL HasHiLoLines;
    __declspec(property(get=GetFirstSliceAngle,put=PutFirstSliceAngle))
    long FirstSliceAngle;
    __declspec(property(get=GetHasRadarAxisLabels,put=PutHasRadarAxisLabels))
    VARIANT_BOOL HasRadarAxisLabels;
    __declspec(property(get=GetHasSeriesLines,put=PutHasSeriesLines))
    VARIANT_BOOL HasSeriesLines;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetHasUpDownBars,put=PutHasUpDownBars))
    VARIANT_BOOL HasUpDownBars;
    __declspec(property(get=GetUpBars))
    UpBarsPtr UpBars;
    __declspec(property(get=GetDownBars))
    DownBarsPtr DownBars;
    __declspec(property(get=GetDropLines))
    DropLinesPtr DropLines;
    __declspec(property(get=GetHiLoLines))
    HiLoLinesPtr HiLoLines;
    __declspec(property(get=GetRadarAxisLabels))
    TickLabelsPtr RadarAxisLabels;
    __declspec(property(get=GetSeriesLines))
    SeriesLinesPtr SeriesLines;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSizeRepresents,put=PutSizeRepresents))
    enum XlSizeRepresents SizeRepresents;
    __declspec(property(get=GetBubbleScale,put=PutBubbleScale))
    long BubbleScale;
    __declspec(property(get=GetShowNegativeBubbles,put=PutShowNegativeBubbles))
    VARIANT_BOOL ShowNegativeBubbles;
    __declspec(property(get=GetSplitType,put=PutSplitType))
    enum XlChartSplitType SplitType;
    __declspec(property(get=GetSplitValue,put=PutSplitValue))
    _variant_t SplitValue;
    __declspec(property(get=GetSecondPlotSize,put=PutSecondPlotSize))
    long SecondPlotSize;
    __declspec(property(get=GetHas3DShading,put=PutHas3DShading))
    VARIANT_BOOL Has3DShading;
    __declspec(property(get=GetDoughnutHoleSize,put=PutDoughnutHoleSize))
    long DoughnutHoleSize;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType;
    __declspec(property(get=GetGapWidth,put=PutGapWidth))
    long GapWidth;
    __declspec(property(get=GetOverlap,put=PutOverlap))
    long Overlap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    long GetDoughnutHoleSize ( );
    void PutDoughnutHoleSize (
        long RHS );
    DownBarsPtr GetDownBars ( );
    DropLinesPtr GetDropLines ( );
    long GetFirstSliceAngle ( );
    void PutFirstSliceAngle (
        long RHS );
    long GetGapWidth ( );
    void PutGapWidth (
        long RHS );
    VARIANT_BOOL GetHasDropLines ( );
    void PutHasDropLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasHiLoLines ( );
    void PutHasHiLoLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasRadarAxisLabels ( );
    void PutHasRadarAxisLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasSeriesLines ( );
    void PutHasSeriesLines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasUpDownBars ( );
    void PutHasUpDownBars (
        VARIANT_BOOL RHS );
    HiLoLinesPtr GetHiLoLines ( );
    long GetIndex ( );
    long GetOverlap ( );
    void PutOverlap (
        long RHS );
    TickLabelsPtr GetRadarAxisLabels ( );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing );
    SeriesLinesPtr GetSeriesLines ( );
    long GetSubType ( );
    void PutSubType (
        long RHS );
    long GetType ( );
    void PutType (
        long RHS );
    UpBarsPtr GetUpBars ( );
    VARIANT_BOOL GetVaryByCategories ( );
    void PutVaryByCategories (
        VARIANT_BOOL RHS );
    enum XlSizeRepresents GetSizeRepresents ( );
    void PutSizeRepresents (
        enum XlSizeRepresents RHS );
    long GetBubbleScale ( );
    void PutBubbleScale (
        long RHS );
    VARIANT_BOOL GetShowNegativeBubbles ( );
    void PutShowNegativeBubbles (
        VARIANT_BOOL RHS );
    enum XlChartSplitType GetSplitType ( );
    void PutSplitType (
        enum XlChartSplitType RHS );
    _variant_t GetSplitValue ( );
    void PutSplitValue (
        const _variant_t & RHS );
    long GetSecondPlotSize ( );
    void PutSecondPlotSize (
        long RHS );
    VARIANT_BOOL GetHas3DShading ( );
    void PutHas3DShading (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_DoughnutHoleSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DoughnutHoleSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DownBars (
        /*[out,retval]*/ struct DownBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DropLines (
        /*[out,retval]*/ struct DropLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_FirstSliceAngle (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FirstSliceAngle (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GapWidth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapWidth (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDropLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDropLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasHiLoLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasHiLoLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasRadarAxisLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRadarAxisLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasSeriesLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasSeriesLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasUpDownBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasUpDownBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiLoLines (
        /*[out,retval]*/ struct HiLoLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Overlap (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Overlap (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadarAxisLabels (
        /*[out,retval]*/ struct TickLabels * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SeriesLines (
        /*[out,retval]*/ struct SeriesLines * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_UpBars (
        /*[out,retval]*/ struct UpBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_VaryByCategories (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_VaryByCategories (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SizeRepresents (
        /*[out,retval]*/ enum XlSizeRepresents * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeRepresents (
        /*[in]*/ enum XlSizeRepresents RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleScale (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleScale (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowNegativeBubbles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowNegativeBubbles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitType (
        /*[out,retval]*/ enum XlChartSplitType * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitType (
        /*[in]*/ enum XlChartSplitType RHS ) = 0;
      virtual HRESULT __stdcall get_SplitValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitValue (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SecondPlotSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondPlotSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DShading (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DShading (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002085a-0001-0000-c000-000000000046"))
IChartGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ChartGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002085b-0001-0000-c000-000000000046"))
IAxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    AxisPtr Item (
        enum XlAxisType Type,
        enum XlAxisGroup AxisGroup );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ enum XlAxisType Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[out,retval]*/ struct Axis * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00020869-0001-0000-c000-000000000046"))
IPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PointPtr Item (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Point * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002086a-0001-0000-c000-000000000046"))
IPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetHasDataLabel,put=PutHasDataLabel))
    VARIANT_BOOL HasDataLabel;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetSecondaryPlot,put=PutSecondaryPlot))
    VARIANT_BOOL SecondaryPlot;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    VARIANT_BOOL GetHasDataLabel ( );
    void PutHasDataLabel (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSecondaryPlot ( );
    void PutSecondaryPlot (
        VARIANT_BOOL RHS );
    ChartFillFormatPtr GetFill ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SecondaryPlot (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SecondaryPlot (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086b-0001-0000-c000-000000000046"))
ISeries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExplosion,put=PutExplosion))
    long Explosion;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetHasDataLabels,put=PutHasDataLabels))
    VARIANT_BOOL HasDataLabels;
    __declspec(property(get=GetHasLeaderLines,put=PutHasLeaderLines))
    VARIANT_BOOL HasLeaderLines;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _bstr_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _bstr_t FormulaR1C1;
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _bstr_t FormulaR1C1Local;
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetXValues,put=PutXValues))
    _variant_t XValues;
    __declspec(property(get=GetErrorBars))
    ErrorBarsPtr ErrorBars;
    __declspec(property(get=GetHasErrorBars,put=PutHasErrorBars))
    VARIANT_BOOL HasErrorBars;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    enum XlChartPictureType PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetValues,put=PutValues))
    _variant_t Values;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetBubbleSizes,put=PutBubbleSizes))
    _variant_t BubbleSizes;
    __declspec(property(get=GetAxisGroup,put=PutAxisGroup))
    enum XlAxisGroup AxisGroup;
    __declspec(property(get=GetPlotOrder,put=PutPlotOrder))
    long PlotOrder;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetApplyPictToSides,put=PutApplyPictToSides))
    VARIANT_BOOL ApplyPictToSides;
    __declspec(property(get=GetApplyPictToFront,put=PutApplyPictToFront))
    VARIANT_BOOL ApplyPictToFront;
    __declspec(property(get=GetApplyPictToEnd,put=PutApplyPictToEnd))
    VARIANT_BOOL ApplyPictToEnd;
    __declspec(property(get=GetHas3DEffect,put=PutHas3DEffect))
    VARIANT_BOOL Has3DEffect;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetLeaderLines))
    LeaderLinesPtr LeaderLines;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing );
    enum XlAxisGroup GetAxisGroup ( );
    void PutAxisGroup (
        enum XlAxisGroup RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Copy ( );
    IDispatchPtr DataLabels (
        const _variant_t & Index = vtMissing );
    _variant_t Delete ( );
    _variant_t ErrorBar (
        enum XlErrorBarDirection Direction,
        enum XlErrorBarInclude Include,
        enum XlErrorBarType Type,
        const _variant_t & Amount = vtMissing,
        const _variant_t & MinusValues = vtMissing );
    ErrorBarsPtr GetErrorBars ( );
    long GetExplosion ( );
    void PutExplosion (
        long RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    _bstr_t GetFormulaLocal ( );
    void PutFormulaLocal (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1 ( );
    void PutFormulaR1C1 (
        _bstr_t RHS );
    _bstr_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        _bstr_t RHS );
    VARIANT_BOOL GetHasDataLabels ( );
    void PutHasDataLabels (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasErrorBars ( );
    void PutHasErrorBars (
        VARIANT_BOOL RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t Paste ( );
    enum XlChartPictureType GetPictureType ( );
    void PutPictureType (
        enum XlChartPictureType RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    long GetPlotOrder ( );
    void PutPlotOrder (
        long RHS );
    IDispatchPtr Points (
        const _variant_t & Index = vtMissing );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    IDispatchPtr Trendlines (
        const _variant_t & Index = vtMissing );
    long GetType ( );
    void PutType (
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType );
    _variant_t GetValues ( );
    void PutValues (
        const _variant_t & RHS );
    _variant_t GetXValues ( );
    void PutXValues (
        const _variant_t & RHS );
    _variant_t GetBubbleSizes ( );
    void PutBubbleSizes (
        const _variant_t & RHS );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    VARIANT_BOOL GetApplyPictToSides ( );
    void PutApplyPictToSides (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToFront ( );
    void PutApplyPictToFront (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetApplyPictToEnd ( );
    void PutApplyPictToEnd (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHas3DEffect ( );
    void PutHas3DEffect (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLeaderLines ( );
    void PutHasLeaderLines (
        VARIANT_BOOL RHS );
    LeaderLinesPtr GetLeaderLines ( );
    _variant_t ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AxisGroup (
        /*[out,retval]*/ enum XlAxisGroup * RHS ) = 0;
      virtual HRESULT __stdcall put_AxisGroup (
        /*[in]*/ enum XlAxisGroup RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataLabels (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ErrorBar (
        /*[in]*/ enum XlErrorBarDirection Direction,
        /*[in]*/ enum XlErrorBarInclude Include,
        /*[in]*/ enum XlErrorBarType Type,
        /*[in]*/ VARIANT Amount,
        /*[in]*/ VARIANT MinusValues,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorBars (
        /*[out,retval]*/ struct ErrorBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Explosion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Explosion (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasDataLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasErrorBars (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasErrorBars (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ enum XlChartPictureType * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ enum XlChartPictureType RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PlotOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Points (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Trendlines (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType ) = 0;
      virtual HRESULT __stdcall get_Values (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Values (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_XValues (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_XValues (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BubbleSizes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BubbleSizes (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToSides (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToSides (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToFront (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToFront (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ApplyPictToEnd (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ApplyPictToEnd (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Has3DEffect (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Has3DEffect (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLeaderLines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLeaderLines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LeaderLines (
        /*[out,retval]*/ struct LeaderLines * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey,
        /*[in]*/ VARIANT AutoText,
        /*[in]*/ VARIANT HasLeaderLines,
        /*[in]*/ VARIANT ShowSeriesName,
        /*[in]*/ VARIANT ShowCategoryName,
        /*[in]*/ VARIANT ShowValue,
        /*[in]*/ VARIANT ShowPercentage,
        /*[in]*/ VARIANT ShowBubbleSize,
        /*[in]*/ VARIANT Separator,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("0002086c-0001-0000-c000-000000000046"))
ISeriesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SeriesPtr Add (
        const _variant_t & Source,
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing );
    long GetCount ( );
    _variant_t Extend (
        const _variant_t & Source,
        const _variant_t & Rowcol = vtMissing,
        const _variant_t & CategoryLabels = vtMissing );
    SeriesPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );
    _variant_t Paste (
        enum XlRowCol Rowcol,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & Replace = vtMissing,
        const _variant_t & NewSeries = vtMissing );
    SeriesPtr NewSeries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ VARIANT CategoryLabels,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Series * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ enum XlRowCol Rowcol,
        /*[in]*/ VARIANT SeriesLabels,
        /*[in]*/ VARIANT CategoryLabels,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT NewSeries,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewSeries (
        /*[out,retval]*/ struct Series * * RHS ) = 0;
};

struct __declspec(uuid("000208b2-0001-0000-c000-000000000046"))
IDataLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;
    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208b3-0001-0000-c000-000000000046"))
IDataLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCategoryName,put=PutShowCategoryName))
    VARIANT_BOOL ShowCategoryName;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlDataLabelPosition Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAutoText,put=PutAutoText))
    VARIANT_BOOL AutoText;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetShowValue,put=PutShowValue))
    VARIANT_BOOL ShowValue;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetShowPercentage,put=PutShowPercentage))
    VARIANT_BOOL ShowPercentage;
    __declspec(property(get=GetShowBubbleSize,put=PutShowBubbleSize))
    VARIANT_BOOL ShowBubbleSize;
    __declspec(property(get=GetSeparator,put=PutSeparator))
    _variant_t Separator;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetType,put=PutType))
    _variant_t Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetShowSeriesName,put=PutShowSeriesName))
    VARIANT_BOOL ShowSeriesName;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    VARIANT_BOOL GetAutoText ( );
    void PutAutoText (
        VARIANT_BOOL RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    _variant_t GetType ( );
    void PutType (
        const _variant_t & RHS );
    enum XlDataLabelPosition GetPosition ( );
    void PutPosition (
        enum XlDataLabelPosition RHS );
    VARIANT_BOOL GetShowSeriesName ( );
    void PutShowSeriesName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCategoryName ( );
    void PutShowCategoryName (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowValue ( );
    void PutShowValue (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPercentage ( );
    void PutShowPercentage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowBubbleSize ( );
    void PutShowBubbleSize (
        VARIANT_BOOL RHS );
    _variant_t GetSeparator ( );
    void PutSeparator (
        const _variant_t & RHS );
    long GetCount ( );
    DataLabelPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual void __stdcall _Dummy9 ( ) = 0;
      virtual void __stdcall _Dummy10 ( ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual void __stdcall _Dummy13 ( ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy16 ( ) = 0;
      virtual void __stdcall _Dummy17 ( ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AutoText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlDataLabelPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlDataLabelPosition RHS ) = 0;
      virtual HRESULT __stdcall get_ShowSeriesName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowSeriesName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCategoryName (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCategoryName (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowValue (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowValue (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPercentage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPercentage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowBubbleSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowBubbleSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Separator (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Separator (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208ba-0001-0000-c000-000000000046"))
ILegendEntry : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLegendKey))
    LegendKeyPtr LegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    long GetIndex ( );
    LegendKeyPtr GetLegendKey ( );
    _variant_t Select ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_LegendKey (
        /*[out,retval]*/ struct LegendKey * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208bb-0001-0000-c000-000000000046"))
ILegendEntries : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LegendEntryPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LegendEntry * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208bc-0001-0000-c000-000000000046"))
ILegendKey : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    long PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    long PictureUnit;
    __declspec(property(get=GetInvertIfNegative,put=PutInvertIfNegative))
    VARIANT_BOOL InvertIfNegative;
    __declspec(property(get=GetSmooth,put=PutSmooth))
    VARIANT_BOOL Smooth;
    __declspec(property(get=GetLeft))
    double Left;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    long MarkerSize;
    __declspec(property(get=GetMarkerStyle,put=PutMarkerStyle))
    enum XlMarkerStyle MarkerStyle;
    __declspec(property(get=GetMarkerBackgroundColor,put=PutMarkerBackgroundColor))
    long MarkerBackgroundColor;
    __declspec(property(get=GetMarkerBackgroundColorIndex,put=PutMarkerBackgroundColorIndex))
    enum XlColorIndex MarkerBackgroundColorIndex;
    __declspec(property(get=GetMarkerForegroundColor,put=PutMarkerForegroundColor))
    long MarkerForegroundColor;
    __declspec(property(get=GetMarkerForegroundColorIndex,put=PutMarkerForegroundColorIndex))
    enum XlColorIndex MarkerForegroundColorIndex;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth))
    double Width;
    __declspec(property(get=GetHeight))
    double Height;
    __declspec(property(get=GetTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    VARIANT_BOOL GetInvertIfNegative ( );
    void PutInvertIfNegative (
        VARIANT_BOOL RHS );
    long GetMarkerBackgroundColor ( );
    void PutMarkerBackgroundColor (
        long RHS );
    enum XlColorIndex GetMarkerBackgroundColorIndex ( );
    void PutMarkerBackgroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerForegroundColor ( );
    void PutMarkerForegroundColor (
        long RHS );
    enum XlColorIndex GetMarkerForegroundColorIndex ( );
    void PutMarkerForegroundColorIndex (
        enum XlColorIndex RHS );
    long GetMarkerSize ( );
    void PutMarkerSize (
        long RHS );
    enum XlMarkerStyle GetMarkerStyle ( );
    void PutMarkerStyle (
        enum XlMarkerStyle RHS );
    long GetPictureType ( );
    void PutPictureType (
        long RHS );
    long GetPictureUnit ( );
    void PutPictureUnit (
        long RHS );
    _variant_t Select ( );
    VARIANT_BOOL GetSmooth ( );
    void PutSmooth (
        VARIANT_BOOL RHS );
    double GetLeft ( );
    double GetTop ( );
    double GetWidth ( );
    double GetHeight ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_InvertIfNegative (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InvertIfNegative (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerBackgroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerBackgroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerForegroundColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerForegroundColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerSize (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerSize (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MarkerStyle (
        /*[out,retval]*/ enum XlMarkerStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_MarkerStyle (
        /*[in]*/ enum XlMarkerStyle RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Smooth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Smooth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("000208bd-0001-0000-c000-000000000046"))
ITrendlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    TrendlinePtr Add (
        enum XlTrendlineType Type,
        const _variant_t & Order = vtMissing,
        const _variant_t & Period = vtMissing,
        const _variant_t & Forward = vtMissing,
        const _variant_t & Backward = vtMissing,
        const _variant_t & Intercept = vtMissing,
        const _variant_t & DisplayEquation = vtMissing,
        const _variant_t & DisplayRSquared = vtMissing,
        const _variant_t & Name = vtMissing );
    long GetCount ( );
    TrendlinePtr Item (
        const _variant_t & Index = vtMissing );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlTrendlineType Type,
        /*[in]*/ VARIANT Order,
        /*[in]*/ VARIANT Period,
        /*[in]*/ VARIANT Forward,
        /*[in]*/ VARIANT Backward,
        /*[in]*/ VARIANT Intercept,
        /*[in]*/ VARIANT DisplayEquation,
        /*[in]*/ VARIANT DisplayRSquared,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Trendline * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000208be-0001-0000-c000-000000000046"))
ITrendline : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetForward,put=PutForward))
    long Forward;
    __declspec(property(get=GetOrder,put=PutOrder))
    long Order;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetType,put=PutType))
    enum XlTrendlineType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPeriod,put=PutPeriod))
    long Period;
    __declspec(property(get=GetBackward,put=PutBackward))
    long Backward;
    __declspec(property(get=GetIntercept,put=PutIntercept))
    double Intercept;
    __declspec(property(get=GetInterceptIsAuto,put=PutInterceptIsAuto))
    VARIANT_BOOL InterceptIsAuto;
    __declspec(property(get=GetNameIsAuto,put=PutNameIsAuto))
    VARIANT_BOOL NameIsAuto;
    __declspec(property(get=GetDisplayRSquared,put=PutDisplayRSquared))
    VARIANT_BOOL DisplayRSquared;
    __declspec(property(get=GetDataLabel))
    DataLabelPtr DataLabel;
    __declspec(property(get=GetDisplayEquation,put=PutDisplayEquation))
    VARIANT_BOOL DisplayEquation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetBackward ( );
    void PutBackward (
        long RHS );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    DataLabelPtr GetDataLabel ( );
    _variant_t Delete ( );
    VARIANT_BOOL GetDisplayEquation ( );
    void PutDisplayEquation (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRSquared ( );
    void PutDisplayRSquared (
        VARIANT_BOOL RHS );
    long GetForward ( );
    void PutForward (
        long RHS );
    long GetIndex ( );
    double GetIntercept ( );
    void PutIntercept (
        double RHS );
    VARIANT_BOOL GetInterceptIsAuto ( );
    void PutInterceptIsAuto (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetNameIsAuto ( );
    void PutNameIsAuto (
        VARIANT_BOOL RHS );
    long GetOrder ( );
    void PutOrder (
        long RHS );
    long GetPeriod ( );
    void PutPeriod (
        long RHS );
    _variant_t Select ( );
    enum XlTrendlineType GetType ( );
    void PutType (
        enum XlTrendlineType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Backward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Backward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabel (
        /*[out,retval]*/ struct DataLabel * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEquation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEquation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRSquared (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRSquared (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Forward (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Forward (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Intercept (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Intercept (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InterceptIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InterceptIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NameIsAuto (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NameIsAuto (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Order (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Period (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Period (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlTrendlineType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlTrendlineType RHS ) = 0;
};

struct __declspec(uuid("000208c0-0001-0000-c000-000000000046"))
ICorners : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c1-0001-0000-c000-000000000046"))
ISeriesLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c2-0001-0000-c000-000000000046"))
IHiLoLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c3-0001-0000-c000-000000000046"))
IGridlines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208c4-0001-0000-c000-000000000046"))
IDropLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024437-0001-0000-c000-000000000046"))
ILeaderLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BorderPtr GetBorder ( );
    HRESULT Delete ( );
    HRESULT Select ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
};

struct __declspec(uuid("000208c5-0001-0000-c000-000000000046"))
IUpBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c6-0001-0000-c000-000000000046"))
IDownBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
};

struct __declspec(uuid("000208c7-0001-0000-c000-000000000046"))
IFloor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
};

struct __declspec(uuid("000208c8-0001-0000-c000-000000000046"))
IWalls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPictureType,put=PutPictureType))
    _variant_t PictureType;
    __declspec(property(get=GetPictureUnit,put=PutPictureUnit))
    _variant_t PictureUnit;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _variant_t GetPictureType ( );
    void PutPictureType (
        const _variant_t & RHS );
    HRESULT Paste ( );
    _variant_t GetPictureUnit ( );
    void PutPictureUnit (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_PictureType (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureType (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_PictureUnit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_PictureUnit (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208c9-0001-0000-c000-000000000046"))
ITickLabels : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetNumberFormatLinked,put=PutNumberFormatLinked))
    VARIANT_BOOL NumberFormatLinked;
    __declspec(property(get=GetDepth))
    long Depth;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlTickLabelOrientation Orientation;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    _bstr_t GetName ( );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    VARIANT_BOOL GetNumberFormatLinked ( );
    void PutNumberFormatLinked (
        VARIANT_BOOL RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    enum XlTickLabelOrientation GetOrientation ( );
    void PutOrientation (
        enum XlTickLabelOrientation RHS );
    _variant_t Select ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );
    long GetDepth ( );
    long GetOffset ( );
    void PutOffset (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLinked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLinked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlTickLabelOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlTickLabelOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Depth (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("000208cb-0001-0000-c000-000000000046"))
IPlotArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetInsideLeft))
    double InsideLeft;
    __declspec(property(get=GetInsideTop))
    double InsideTop;
    __declspec(property(get=GetInsideWidth))
    double InsideWidth;
    __declspec(property(get=GetInsideHeight))
    double InsideHeight;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    double GetInsideLeft ( );
    double GetInsideTop ( );
    double GetInsideWidth ( );
    double GetInsideHeight ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_InsideLeft (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideTop (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_InsideHeight (
        /*[out,retval]*/ double * RHS ) = 0;
};

struct __declspec(uuid("000208cc-0001-0000-c000-000000000046"))
IChartArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t Copy ( );
    FontPtr GetFont ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t ClearFormats ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208cd-0001-0000-c000-000000000046"))
ILegend : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum XlLegendPosition Position;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    FontPtr GetFont ( );
    IDispatchPtr LegendEntries (
        const _variant_t & Index = vtMissing );
    enum XlLegendPosition GetPosition ( );
    void PutPosition (
        enum XlLegendPosition RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _variant_t Clear ( );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LegendEntries (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum XlLegendPosition * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum XlLegendPosition RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("000208ce-0001-0000-c000-000000000046"))
IErrorBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetEndStyle,put=PutEndStyle))
    enum XlEndStyleCap EndStyle;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    _variant_t ClearFormats ( );
    enum XlEndStyleCap GetEndStyle ( );
    void PutEndStyle (
        enum XlEndStyleCap RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EndStyle (
        /*[out,retval]*/ enum XlEndStyleCap * RHS ) = 0;
      virtual HRESULT __stdcall put_EndStyle (
        /*[in]*/ enum XlEndStyleCap RHS ) = 0;
};

struct __declspec(uuid("00020843-0001-0000-c000-000000000046"))
IDataTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetHasBorderHorizontal,put=PutHasBorderHorizontal))
    VARIANT_BOOL HasBorderHorizontal;
    __declspec(property(get=GetHasBorderVertical,put=PutHasBorderVertical))
    VARIANT_BOOL HasBorderVertical;
    __declspec(property(get=GetHasBorderOutline,put=PutHasBorderOutline))
    VARIANT_BOOL HasBorderOutline;
    __declspec(property(get=GetShowLegendKey,put=PutShowLegendKey))
    VARIANT_BOOL ShowLegendKey;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetShowLegendKey ( );
    void PutShowLegendKey (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderHorizontal ( );
    void PutHasBorderHorizontal (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderVertical ( );
    void PutHasBorderVertical (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasBorderOutline ( );
    void PutHasBorderOutline (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    FontPtr GetFont ( );
    HRESULT Select ( );
    HRESULT Delete ( );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowLegendKey (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowLegendKey (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderHorizontal (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderVertical (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderVertical (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasBorderOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasBorderOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024438-0001-0000-c000-000000000046"))
IPhonetic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002443a-0001-0000-c000-000000000046"))
IShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapePtr AddCallout (
        enum Office::MsoCalloutType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddConnector (
        enum Office::MsoConnectorType Type,
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddCurve (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddLabel (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddLine (
        float BeginX,
        float BeginY,
        float EndX,
        float EndY );
    ShapePtr AddPicture (
        _bstr_t Filename,
        enum Office::MsoTriState LinkToFile,
        enum Office::MsoTriState SaveWithDocument,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddPolyline (
        const _variant_t & SafeArrayOfPoints );
    ShapePtr AddShape (
        enum Office::MsoAutoShapeType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddTextEffect (
        enum Office::MsoPresetTextEffect PresetTextEffect,
        _bstr_t Text,
        _bstr_t FontName,
        float FontSize,
        enum Office::MsoTriState FontBold,
        enum Office::MsoTriState FontItalic,
        float Left,
        float Top );
    ShapePtr AddTextbox (
        enum Office::MsoTextOrientation Orientation,
        float Left,
        float Top,
        float Width,
        float Height );
    FreeformBuilderPtr BuildFreeform (
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1 );
    ShapeRangePtr GetRange (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    ShapePtr AddFormControl (
        enum XlFormControl Type,
        long Left,
        long Top,
        long Width,
        long Height );
    ShapePtr AddOLEObject (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    ShapePtr AddDiagram (
        enum Office::MsoDiagramType Type,
        float Left,
        float Top,
        float Width,
        float Height );
    ShapePtr AddCanvas (
        float Left,
        float Top,
        float Width,
        float Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCallout (
        /*[in]*/ enum Office::MsoCalloutType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddConnector (
        /*[in]*/ enum Office::MsoConnectorType Type,
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCurve (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLabel (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddLine (
        /*[in]*/ float BeginX,
        /*[in]*/ float BeginY,
        /*[in]*/ float EndX,
        /*[in]*/ float EndY,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPicture (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum Office::MsoTriState LinkToFile,
        /*[in]*/ enum Office::MsoTriState SaveWithDocument,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPolyline (
        /*[in]*/ VARIANT SafeArrayOfPoints,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddShape (
        /*[in]*/ enum Office::MsoAutoShapeType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextEffect (
        /*[in]*/ enum Office::MsoPresetTextEffect PresetTextEffect,
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR FontName,
        /*[in]*/ float FontSize,
        /*[in]*/ enum Office::MsoTriState FontBold,
        /*[in]*/ enum Office::MsoTriState FontItalic,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddTextbox (
        /*[in]*/ enum Office::MsoTextOrientation Orientation,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BuildFreeform (
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[out,retval]*/ struct FreeformBuilder * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall raw_AddFormControl (
        /*[in]*/ enum XlFormControl Type,
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddOLEObject (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddDiagram (
        /*[in]*/ enum Office::MsoDiagramType Type,
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddCanvas (
        /*[in]*/ float Left,
        /*[in]*/ float Top,
        /*[in]*/ float Width,
        /*[in]*/ float Height,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("0002443c-0001-0000-c000-000000000046"))
IGroupShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    ShapeRangePtr Range[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ShapeRangePtr GetRange (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
};

struct __declspec(uuid("0002443d-0001-0000-c000-000000000046"))
ITextFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum XlHAlign HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum XlVAlign VerticalAlignment;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetMarginBottom,put=PutMarginBottom))
    float MarginBottom;
    __declspec(property(get=GetMarginLeft,put=PutMarginLeft))
    float MarginLeft;
    __declspec(property(get=GetMarginRight,put=PutMarginRight))
    float MarginRight;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMarginTop,put=PutMarginTop))
    float MarginTop;
    __declspec(property(get=GetAutoMargins,put=PutAutoMargins))
    VARIANT_BOOL AutoMargins;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetMarginBottom ( );
    void PutMarginBottom (
        float RHS );
    float GetMarginLeft ( );
    void PutMarginLeft (
        float RHS );
    float GetMarginRight ( );
    void PutMarginRight (
        float RHS );
    float GetMarginTop ( );
    void PutMarginTop (
        float RHS );
    enum Office::MsoTextOrientation GetOrientation ( );
    void PutOrientation (
        enum Office::MsoTextOrientation RHS );
    CharactersPtr Characters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    enum XlHAlign GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        enum XlHAlign RHS );
    enum XlVAlign GetVerticalAlignment ( );
    void PutVerticalAlignment (
        enum XlVAlign RHS );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    VARIANT_BOOL GetAutoMargins ( );
    void PutAutoMargins (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_MarginBottom (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginBottom (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginLeft (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginLeft (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginRight (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginRight (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_MarginTop (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_MarginTop (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Office::MsoTextOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Office::MsoTextOrientation RHS ) = 0;
      virtual HRESULT __stdcall raw_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum XlHAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum XlHAlign RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum XlVAlign * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum XlVAlign RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoMargins (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoMargins (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002443e-0001-0000-c000-000000000046"))
IConnectorFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndConnectedShape))
    ShapePtr EndConnectedShape;
    __declspec(property(get=GetEndConnectionSite))
    long EndConnectionSite;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetBeginConnected))
    enum Office::MsoTriState BeginConnected;
    __declspec(property(get=GetBeginConnectedShape))
    ShapePtr BeginConnectedShape;
    __declspec(property(get=GetBeginConnectionSite))
    long BeginConnectionSite;
    __declspec(property(get=GetEndConnected))
    enum Office::MsoTriState EndConnected;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT BeginConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT BeginDisconnect ( );
    HRESULT EndConnect (
        struct Shape * ConnectedShape,
        long ConnectionSite );
    HRESULT EndDisconnect ( );
    enum Office::MsoTriState GetBeginConnected ( );
    ShapePtr GetBeginConnectedShape ( );
    long GetBeginConnectionSite ( );
    enum Office::MsoTriState GetEndConnected ( );
    ShapePtr GetEndConnectedShape ( );
    long GetEndConnectionSite ( );
    enum Office::MsoConnectorType GetType ( );
    void PutType (
        enum Office::MsoConnectorType RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BeginConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_BeginDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_EndConnect (
        /*[in]*/ struct Shape * ConnectedShape,
        /*[in]*/ long ConnectionSite ) = 0;
      virtual HRESULT __stdcall raw_EndDisconnect ( ) = 0;
      virtual HRESULT __stdcall get_BeginConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_BeginConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnected (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectedShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_EndConnectionSite (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoConnectorType * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum Office::MsoConnectorType RHS ) = 0;
};

struct __declspec(uuid("0002443f-0001-0000-c000-000000000046"))
IFreeformBuilder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddNodes (
        enum Office::MsoSegmentType SegmentType,
        enum Office::MsoEditingType EditingType,
        float X1,
        float Y1,
        const _variant_t & X2 = vtMissing,
        const _variant_t & Y2 = vtMissing,
        const _variant_t & X3 = vtMissing,
        const _variant_t & Y3 = vtMissing );
    ShapePtr ConvertToShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddNodes (
        /*[in]*/ enum Office::MsoSegmentType SegmentType,
        /*[in]*/ enum Office::MsoEditingType EditingType,
        /*[in]*/ float X1,
        /*[in]*/ float Y1,
        /*[in]*/ VARIANT X2 = vtMissing,
        /*[in]*/ VARIANT Y2 = vtMissing,
        /*[in]*/ VARIANT X3 = vtMissing,
        /*[in]*/ VARIANT Y3 = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ConvertToShape (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
};

struct __declspec(uuid("00024440-0001-0000-c000-000000000046"))
IControlFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMultiSelect,put=PutMultiSelect))
    long MultiSelect;
    __declspec(property(get=Get_Default,put=Put_Default))
    long _Default;
    __declspec(property(get=GetLinkedCell,put=PutLinkedCell))
    _bstr_t LinkedCell;
    __declspec(property(get=GetValue,put=PutValue))
    long Value;
    __declspec(property(get=GetLockedText,put=PutLockedText))
    VARIANT_BOOL LockedText;
    __declspec(property(get=GetMax,put=PutMax))
    long Max;
    __declspec(property(get=GetMin,put=PutMin))
    long Min;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLargeChange,put=PutLargeChange))
    long LargeChange;
    __declspec(property(get=GetSmallChange,put=PutSmallChange))
    long SmallChange;
    __declspec(property(get=GetListFillRange,put=PutListFillRange))
    _bstr_t ListFillRange;
    __declspec(property(get=GetDropDownLines,put=PutDropDownLines))
    long DropDownLines;
    __declspec(property(get=GetListCount,put=PutListCount))
    long ListCount;
    __declspec(property(get=GetListIndex,put=PutListIndex))
    long ListIndex;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT AddItem (
        _bstr_t Text,
        const _variant_t & Index = vtMissing );
    HRESULT RemoveAllItems ( );
    HRESULT RemoveItem (
        long Index,
        const _variant_t & Count = vtMissing );
    long GetDropDownLines ( );
    void PutDropDownLines (
        long RHS );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetLargeChange ( );
    void PutLargeChange (
        long RHS );
    _bstr_t GetLinkedCell ( );
    void PutLinkedCell (
        _bstr_t RHS );
    _variant_t List (
        const _variant_t & Index = vtMissing );
    long GetListCount ( );
    void PutListCount (
        long RHS );
    _bstr_t GetListFillRange ( );
    void PutListFillRange (
        _bstr_t RHS );
    long GetListIndex ( );
    void PutListIndex (
        long RHS );
    VARIANT_BOOL GetLockedText ( );
    void PutLockedText (
        VARIANT_BOOL RHS );
    long GetMax ( );
    void PutMax (
        long RHS );
    long GetMin ( );
    void PutMin (
        long RHS );
    long GetMultiSelect ( );
    void PutMultiSelect (
        long RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    long GetSmallChange ( );
    void PutSmallChange (
        long RHS );
    long Get_Default ( );
    void Put_Default (
        long RHS );
    long GetValue ( );
    void PutValue (
        long RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ BSTR Text,
        /*[in]*/ VARIANT Index = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllItems ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ long Index,
        /*[in]*/ VARIANT Count = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DropDownLines (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DropDownLines (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LinkedCell (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LinkedCell (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_List (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ListFillRange (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ListFillRange (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LockedText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LockedText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Max (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Max (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Min (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Min (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MultiSelect (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MultiSelect (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmallChange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallChange (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ long RHS ) = 0;
};

struct __declspec(uuid("00024441-0001-0000-c000-000000000046"))
IOLEFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate ( );
    IDispatchPtr GetObject ( );
    _bstr_t GetprogID ( );
    HRESULT Verb (
        const _variant_t & Verb = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Verb (
        /*[in]*/ VARIANT Verb = vtMissing ) = 0;
};

struct __declspec(uuid("00024442-0001-0000-c000-000000000046"))
ILinkFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoUpdate,put=PutAutoUpdate))
    VARIANT_BOOL AutoUpdate;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAutoUpdate ( );
    void PutAutoUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("00024444-0000-0000-c000-000000000046"))
PublishObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAutoRepublish,put=PutAutoRepublish))
    VARIANT_BOOL AutoRepublish;
    __declspec(property(get=GetHtmlType,put=PutHtmlType))
    enum XlHtmlType HtmlType;
    __declspec(property(get=GetDivID))
    _bstr_t DivID;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetSourceType))
    enum XlSourceType SourceType;
    __declspec(property(get=GetSheet))
    _bstr_t Sheet;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _bstr_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT Publish (
        const _variant_t & Create = vtMissing );
    _bstr_t GetDivID ( );
    _bstr_t GetSheet ( );
    enum XlSourceType GetSourceType ( );
    _bstr_t GetSource ( );
    enum XlHtmlType GetHtmlType ( );
    void PutHtmlType (
        enum XlHtmlType RHS );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    VARIANT_BOOL GetAutoRepublish ( );
    void PutAutoRepublish (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ VARIANT Create = vtMissing ) = 0;
      virtual HRESULT __stdcall get_DivID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Sheet (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HtmlType (
        /*[out,retval]*/ enum XlHtmlType * RHS ) = 0;
      virtual HRESULT __stdcall put_HtmlType (
        /*[in]*/ enum XlHtmlType RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AutoRepublish (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoRepublish (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024443-0001-0000-c000-000000000046"))
IPublishObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PublishObjectPtr _Default[];
    __declspec(property(get=GetItem))
    PublishObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    PublishObjectPtr Add (
        enum XlSourceType SourceType,
        _bstr_t Filename,
        const _variant_t & Sheet = vtMissing,
        const _variant_t & Source = vtMissing,
        const _variant_t & HtmlType = vtMissing,
        const _variant_t & DivID = vtMissing,
        const _variant_t & Title = vtMissing );
    long GetCount ( );
    PublishObjectPtr GetItem (
        const _variant_t & Index );
    PublishObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );
    HRESULT Publish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlSourceType SourceType,
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Sheet,
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT HtmlType,
        /*[in]*/ VARIANT DivID,
        /*[in]*/ VARIANT Title,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PublishObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish ( ) = 0;
};

struct __declspec(uuid("00024445-0001-0000-c000-000000000046"))
IOLEDBError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSqlState))
    _bstr_t SqlState;
    __declspec(property(get=GetNumber))
    long Number;
    __declspec(property(get=GetNative))
    long Native;
    __declspec(property(get=GetStage))
    long Stage;
    __declspec(property(get=GetErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetSqlState ( );
    _bstr_t GetErrorString ( );
    long GetNative ( );
    long GetNumber ( );
    long GetStage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SqlState (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Native (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Stage (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024446-0001-0000-c000-000000000046"))
IOLEDBErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    OLEDBErrorPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    OLEDBErrorPtr Item (
        long Index );
    OLEDBErrorPtr Get_Default (
        long Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct OLEDBError * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024447-0001-0000-c000-000000000046"))
IPhonetics : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStart))
    long Start;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetCharacterType,put=PutCharacterType))
    long CharacterType;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetStart ( );
    long GetLength ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    long GetCharacterType ( );
    void PutCharacterType (
        long RHS );
    long GetAlignment ( );
    void PutAlignment (
        long RHS );
    FontPtr GetFont ( );
    IDispatchPtr GetItem (
        long Index );
    HRESULT Delete ( );
    HRESULT Add (
        long Start,
        long Length,
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    IDispatchPtr Get_Default (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Start (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CharacterType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CharacterType (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Start,
        /*[in]*/ long Length,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024448-0000-0000-c000-000000000046"))
DefaultWebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetSaveHiddenData,put=PutSaveHiddenData))
    VARIANT_BOOL SaveHiddenData;
    __declspec(property(get=GetLoadPictures,put=PutLoadPictures))
    VARIANT_BOOL LoadPictures;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUpdateLinksOnSave,put=PutUpdateLinksOnSave))
    VARIANT_BOOL UpdateLinksOnSave;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetCheckIfOfficeIsHTMLEditor,put=PutCheckIfOfficeIsHTMLEditor))
    VARIANT_BOOL CheckIfOfficeIsHTMLEditor;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetSaveNewWebPagesAsWebArchives,put=PutSaveNewWebPagesAsWebArchives))
    VARIANT_BOOL SaveNewWebPagesAsWebArchives;
    __declspec(property(get=GetAlwaysSaveInDefaultEncoding,put=PutAlwaysSaveInDefaultEncoding))
    VARIANT_BOOL AlwaysSaveInDefaultEncoding;
    __declspec(property(get=GetFonts))
    Office::WebPageFontsPtr Fonts;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveHiddenData ( );
    void PutSaveHiddenData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLoadPictures ( );
    void PutLoadPictures (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUpdateLinksOnSave ( );
    void PutUpdateLinksOnSave (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckIfOfficeIsHTMLEditor ( );
    void PutCheckIfOfficeIsHTMLEditor (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    VARIANT_BOOL GetAlwaysSaveInDefaultEncoding ( );
    void PutAlwaysSaveInDefaultEncoding (
        VARIANT_BOOL RHS );
    Office::WebPageFontsPtr GetFonts ( );
    _bstr_t GetFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );
    VARIANT_BOOL GetSaveNewWebPagesAsWebArchives ( );
    void PutSaveNewWebPagesAsWebArchives (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveHiddenData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveHiddenData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LoadPictures (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LoadPictures (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UpdateLinksOnSave (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateLinksOnSave (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CheckIfOfficeIsHTMLEditor (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CheckIfOfficeIsHTMLEditor (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_AlwaysSaveInDefaultEncoding (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlwaysSaveInDefaultEncoding (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Fonts (
        /*[out,retval]*/ struct Office::WebPageFonts * * RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * RHS ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser RHS ) = 0;
      virtual HRESULT __stdcall get_SaveNewWebPagesAsWebArchives (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveNewWebPagesAsWebArchives (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024449-0000-0000-c000-000000000046"))
WebOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRelyOnCSS,put=PutRelyOnCSS))
    VARIANT_BOOL RelyOnCSS;
    __declspec(property(get=GetOrganizeInFolder,put=PutOrganizeInFolder))
    VARIANT_BOOL OrganizeInFolder;
    __declspec(property(get=GetUseLongFileNames,put=PutUseLongFileNames))
    VARIANT_BOOL UseLongFileNames;
    __declspec(property(get=GetDownloadComponents,put=PutDownloadComponents))
    VARIANT_BOOL DownloadComponents;
    __declspec(property(get=GetRelyOnVML,put=PutRelyOnVML))
    VARIANT_BOOL RelyOnVML;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAllowPNG,put=PutAllowPNG))
    VARIANT_BOOL AllowPNG;
    __declspec(property(get=GetPixelsPerInch,put=PutPixelsPerInch))
    long PixelsPerInch;
    __declspec(property(get=GetLocationOfComponents,put=PutLocationOfComponents))
    _bstr_t LocationOfComponents;
    __declspec(property(get=GetFolderSuffix))
    _bstr_t FolderSuffix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetRelyOnCSS ( );
    void PutRelyOnCSS (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOrganizeInFolder ( );
    void PutOrganizeInFolder (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUseLongFileNames ( );
    void PutUseLongFileNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDownloadComponents ( );
    void PutDownloadComponents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRelyOnVML ( );
    void PutRelyOnVML (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAllowPNG ( );
    void PutAllowPNG (
        VARIANT_BOOL RHS );
    enum Office::MsoScreenSize GetScreenSize ( );
    void PutScreenSize (
        enum Office::MsoScreenSize RHS );
    long GetPixelsPerInch ( );
    void PutPixelsPerInch (
        long RHS );
    _bstr_t GetLocationOfComponents ( );
    void PutLocationOfComponents (
        _bstr_t RHS );
    enum Office::MsoEncoding GetEncoding ( );
    void PutEncoding (
        enum Office::MsoEncoding RHS );
    _bstr_t GetFolderSuffix ( );
    HRESULT UseDefaultFolderSuffix ( );
    enum Office::MsoTargetBrowser GetTargetBrowser ( );
    void PutTargetBrowser (
        enum Office::MsoTargetBrowser RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnCSS (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnCSS (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizeInFolder (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OrganizeInFolder (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UseLongFileNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseLongFileNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadComponents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DownloadComponents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RelyOnVML (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RelyOnVML (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AllowPNG (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AllowPNG (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ScreenSize (
        /*[out,retval]*/ enum Office::MsoScreenSize * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenSize (
        /*[in]*/ enum Office::MsoScreenSize RHS ) = 0;
      virtual HRESULT __stdcall get_PixelsPerInch (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PixelsPerInch (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_LocationOfComponents (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_LocationOfComponents (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ enum Office::MsoEncoding * RHS ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ enum Office::MsoEncoding RHS ) = 0;
      virtual HRESULT __stdcall get_FolderSuffix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_UseDefaultFolderSuffix ( ) = 0;
      virtual HRESULT __stdcall get_TargetBrowser (
        /*[out,retval]*/ enum Office::MsoTargetBrowser * RHS ) = 0;
      virtual HRESULT __stdcall put_TargetBrowser (
        /*[in]*/ enum Office::MsoTargetBrowser RHS ) = 0;
};

struct __declspec(uuid("0002444b-0000-0000-c000-000000000046"))
TreeviewControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrilled,put=PutDrilled))
    _variant_t Drilled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetDrilled ( );
    void PutDrilled (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Drilled (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Drilled (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("0002444c-0000-0000-c000-000000000046"))
CubeField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetPosition,put=PutPosition))
    long Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetPivotFields))
    PivotFieldsPtr PivotFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetHasMemberProperties))
    VARIANT_BOOL HasMemberProperties;
    __declspec(property(get=GetCubeFieldType))
    enum XlCubeFieldType CubeFieldType;
    __declspec(property(get=GetTreeviewControl))
    TreeviewControlPtr TreeviewControl;
    __declspec(property(get=GetHiddenLevels,put=PutHiddenLevels))
    long HiddenLevels;
    __declspec(property(get=GetEnableMultiplePageItems,put=PutEnableMultiplePageItems))
    VARIANT_BOOL EnableMultiplePageItems;
    __declspec(property(get=GetShowInFieldList,put=PutShowInFieldList))
    VARIANT_BOOL ShowInFieldList;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlCubeFieldType GetCubeFieldType ( );
    _bstr_t GetCaption ( );
    _bstr_t GetName ( );
    _bstr_t GetValue ( );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    long GetPosition ( );
    void PutPosition (
        long RHS );
    TreeviewControlPtr GetTreeviewControl ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    long GetHiddenLevels ( );
    void PutHiddenLevels (
        long RHS );
    VARIANT_BOOL GetHasMemberProperties ( );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    PivotFieldsPtr GetPivotFields ( );
    HRESULT AddMemberPropertyField (
        _bstr_t Property,
        const _variant_t & PropertyOrder = vtMissing );
    VARIANT_BOOL GetEnableMultiplePageItems ( );
    void PutEnableMultiplePageItems (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetShowInFieldList ( );
    void PutShowInFieldList (
        VARIANT_BOOL RHS );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFieldType (
        /*[out,retval]*/ enum XlCubeFieldType * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TreeviewControl (
        /*[out,retval]*/ struct TreeviewControl * * RHS ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenLevels (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HiddenLevels (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_HasMemberProperties (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutForm (
        /*[out,retval]*/ enum XlLayoutFormType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutForm (
        /*[in]*/ enum XlLayoutFormType RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFields (
        /*[out,retval]*/ struct PivotFields * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddMemberPropertyField (
        /*[in]*/ BSTR Property,
        /*[in]*/ VARIANT PropertyOrder = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EnableMultiplePageItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableMultiplePageItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        /*[out,retval]*/ enum XlSubtototalLocationType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        /*[in]*/ enum XlSubtototalLocationType RHS ) = 0;
      virtual HRESULT __stdcall get_ShowInFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowInFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00020874-0001-0000-c000-000000000046"))
IPivotField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetShowAllItems,put=PutShowAllItems))
    VARIANT_BOOL ShowAllItems;
    __declspec(property(get=GetFunction,put=PutFunction))
    enum XlConsolidationFunction Function;
    __declspec(property(get=GetPosition,put=PutPosition))
    _variant_t Position;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum XlPivotFieldOrientation Orientation;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed;
    __declspec(property(get=GetHiddenItemsList,put=PutHiddenItemsList))
    _variant_t HiddenItemsList;
    __declspec(property(get=GetDatabaseSort,put=PutDatabaseSort))
    VARIANT_BOOL DatabaseSort;
    __declspec(property(get=GetIsMemberProperty))
    VARIANT_BOOL IsMemberProperty;
    __declspec(property(get=GetPropertyParentField))
    PivotFieldPtr PropertyParentField;
    __declspec(property(get=GetPropertyOrder,put=PutPropertyOrder))
    long PropertyOrder;
    __declspec(property(get=GetEnableItemSelection,put=PutEnableItemSelection))
    VARIANT_BOOL EnableItemSelection;
    __declspec(property(get=GetCurrentPageList,put=PutCurrentPageList))
    _variant_t CurrentPageList;
    __declspec(property(get=GetLabelRange))
    RangePtr LabelRange;
    __declspec(property(get=GetDataRange))
    RangePtr DataRange;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetDataType))
    enum XlPivotFieldDataType DataType;
    __declspec(property(get=GetGroupLevel))
    _variant_t GroupLevel;
    __declspec(property(get=GetTotalLevels))
    _variant_t TotalLevels;
    __declspec(property(get=GetVisibleItems))
    _variant_t VisibleItems[];
    __declspec(property(get=GetHiddenItems))
    _variant_t HiddenItems[];
    __declspec(property(get=GetParentItems))
    _variant_t ParentItems[];
    __declspec(property(get=GetChildItems))
    _variant_t ChildItems[];
    __declspec(property(get=GetParentField))
    PivotFieldPtr ParentField;
    __declspec(property(get=GetSubtotals,put=PutSubtotals))
    _variant_t Subtotals[];
    __declspec(property(get=GetBaseField,put=PutBaseField))
    _variant_t BaseField;
    __declspec(property(get=GetBaseItem,put=PutBaseItem))
    _variant_t BaseItem;
    __declspec(property(get=GetChildField))
    PivotFieldPtr ChildField;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    _variant_t CurrentPage;
    __declspec(property(get=GetDragToColumn,put=PutDragToColumn))
    VARIANT_BOOL DragToColumn;
    __declspec(property(get=GetDragToHide,put=PutDragToHide))
    VARIANT_BOOL DragToHide;
    __declspec(property(get=GetDragToPage,put=PutDragToPage))
    VARIANT_BOOL DragToPage;
    __declspec(property(get=GetDragToRow,put=PutDragToRow))
    VARIANT_BOOL DragToRow;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _bstr_t NumberFormat;
    __declspec(property(get=GetIsCalculated))
    VARIANT_BOOL IsCalculated;
    __declspec(property(get=GetServerBased,put=PutServerBased))
    VARIANT_BOOL ServerBased;
    __declspec(property(get=GetAutoSortOrder))
    long AutoSortOrder;
    __declspec(property(get=GetAutoSortField))
    _bstr_t AutoSortField;
    __declspec(property(get=GetAutoShowType))
    long AutoShowType;
    __declspec(property(get=GetAutoShowRange))
    long AutoShowRange;
    __declspec(property(get=GetDragToData,put=PutDragToData))
    VARIANT_BOOL DragToData;
    __declspec(property(get=GetAutoShowCount))
    long AutoShowCount;
    __declspec(property(get=GetAutoShowField))
    _bstr_t AutoShowField;
    __declspec(property(get=GetLayoutBlankLine,put=PutLayoutBlankLine))
    VARIANT_BOOL LayoutBlankLine;
    __declspec(property(get=GetLayoutSubtotalLocation,put=PutLayoutSubtotalLocation))
    enum XlSubtototalLocationType LayoutSubtotalLocation;
    __declspec(property(get=GetLayoutPageBreak,put=PutLayoutPageBreak))
    VARIANT_BOOL LayoutPageBreak;
    __declspec(property(get=GetLayoutForm,put=PutLayoutForm))
    enum XlLayoutFormType LayoutForm;
    __declspec(property(get=GetSubtotalName,put=PutSubtotalName))
    _bstr_t SubtotalName;
    __declspec(property(get=GetDrilledDown,put=PutDrilledDown))
    VARIANT_BOOL DrilledDown;
    __declspec(property(get=GetCubeField))
    CubeFieldPtr CubeField;
    __declspec(property(get=GetCurrentPageName,put=PutCurrentPageName))
    _bstr_t CurrentPageName;
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlPivotFieldCalculation Calculation;
    __declspec(property(get=GetStandardFormula,put=PutStandardFormula))
    _bstr_t StandardFormula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotFieldCalculation GetCalculation ( );
    void PutCalculation (
        enum XlPivotFieldCalculation RHS );
    PivotFieldPtr GetChildField ( );
    _variant_t GetChildItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetCurrentPage ( );
    void PutCurrentPage (
        const _variant_t & RHS );
    RangePtr GetDataRange ( );
    enum XlPivotFieldDataType GetDataType ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    enum XlConsolidationFunction GetFunction ( );
    void PutFunction (
        enum XlConsolidationFunction RHS );
    _variant_t GetGroupLevel ( );
    _variant_t GetHiddenItems (
        const _variant_t & Index = vtMissing );
    RangePtr GetLabelRange ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetNumberFormat ( );
    void PutNumberFormat (
        _bstr_t RHS );
    enum XlPivotFieldOrientation GetOrientation ( );
    void PutOrientation (
        enum XlPivotFieldOrientation RHS );
    VARIANT_BOOL GetShowAllItems ( );
    void PutShowAllItems (
        VARIANT_BOOL RHS );
    PivotFieldPtr GetParentField ( );
    _variant_t GetParentItems (
        const _variant_t & Index = vtMissing );
    _variant_t PivotItems (
        const _variant_t & Index = vtMissing );
    _variant_t GetPosition ( );
    void PutPosition (
        const _variant_t & RHS );
    _bstr_t GetSourceName ( );
    _variant_t GetSubtotals (
        const _variant_t & Index = vtMissing );
    void PutSubtotals (
        const _variant_t & Index,
        const _variant_t & RHS = vtMissing );
    _variant_t GetBaseField ( );
    void PutBaseField (
        const _variant_t & RHS );
    _variant_t GetBaseItem ( );
    void PutBaseItem (
        const _variant_t & RHS );
    _variant_t GetTotalLevels ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    _variant_t GetVisibleItems (
        const _variant_t & Index = vtMissing );
    CalculatedItemsPtr CalculatedItems ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetDragToColumn ( );
    void PutDragToColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToHide ( );
    void PutDragToHide (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToPage ( );
    void PutDragToPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToRow ( );
    void PutDragToRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDragToData ( );
    void PutDragToData (
        VARIANT_BOOL RHS );
    _bstr_t GetFormula ( );
    void PutFormula (
        _bstr_t RHS );
    VARIANT_BOOL GetIsCalculated ( );
    long GetMemoryUsed ( );
    VARIANT_BOOL GetServerBased ( );
    void PutServerBased (
        VARIANT_BOOL RHS );
    HRESULT AutoSort (
        long Order,
        _bstr_t Field );
    HRESULT AutoShow (
        long Type,
        long Range,
        long Count,
        _bstr_t Field );
    long GetAutoSortOrder ( );
    _bstr_t GetAutoSortField ( );
    long GetAutoShowType ( );
    long GetAutoShowRange ( );
    long GetAutoShowCount ( );
    _bstr_t GetAutoShowField ( );
    VARIANT_BOOL GetLayoutBlankLine ( );
    void PutLayoutBlankLine (
        VARIANT_BOOL RHS );
    enum XlSubtototalLocationType GetLayoutSubtotalLocation ( );
    void PutLayoutSubtotalLocation (
        enum XlSubtototalLocationType RHS );
    VARIANT_BOOL GetLayoutPageBreak ( );
    void PutLayoutPageBreak (
        VARIANT_BOOL RHS );
    enum XlLayoutFormType GetLayoutForm ( );
    void PutLayoutForm (
        enum XlLayoutFormType RHS );
    _bstr_t GetSubtotalName ( );
    void PutSubtotalName (
        _bstr_t RHS );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetDrilledDown ( );
    void PutDrilledDown (
        VARIANT_BOOL RHS );
    CubeFieldPtr GetCubeField ( );
    _bstr_t GetCurrentPageName ( );
    void PutCurrentPageName (
        _bstr_t RHS );
    _bstr_t GetStandardFormula ( );
    void PutStandardFormula (
        _bstr_t RHS );
    _variant_t GetHiddenItemsList ( );
    void PutHiddenItemsList (
        const _variant_t & RHS );
    VARIANT_BOOL GetDatabaseSort ( );
    void PutDatabaseSort (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsMemberProperty ( );
    PivotFieldPtr GetPropertyParentField ( );
    long GetPropertyOrder ( );
    void PutPropertyOrder (
        long RHS );
    VARIANT_BOOL GetEnableItemSelection ( );
    void PutEnableItemSelection (
        VARIANT_BOOL RHS );
    _variant_t GetCurrentPageList ( );
    void PutCurrentPageList (
        const _variant_t & RHS );
    HRESULT AddPageItem (
        _bstr_t Item,
        const _variant_t & ClearList = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[out,retval]*/ enum XlPivotFieldCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in]*/ enum XlPivotFieldCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_ChildField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChildItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DataRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataType (
        /*[out,retval]*/ enum XlPivotFieldDataType * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Function (
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
      virtual HRESULT __stdcall put_Function (
        /*[in]*/ enum XlConsolidationFunction RHS ) = 0;
      virtual HRESULT __stdcall get_GroupLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum XlPivotFieldOrientation * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum XlPivotFieldOrientation RHS ) = 0;
      virtual HRESULT __stdcall get_ShowAllItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowAllItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ParentField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Subtotals (
        /*[in]*/ VARIANT Index,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_BaseField (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseField (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_BaseItem (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_BaseItem (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TotalLevels (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleItems (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedItems (
        /*[out,retval]*/ struct CalculatedItems * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_DragToColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToHide (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToHide (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DragToData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DragToData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IsCalculated (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ServerBased (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ServerBased (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoSort (
        /*[in]*/ long Order,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall raw_AutoShow (
        /*[in]*/ long Type,
        /*[in]*/ long Range,
        /*[in]*/ long Count,
        /*[in]*/ BSTR Field ) = 0;
      virtual HRESULT __stdcall get_AutoSortOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoSortField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowType (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowRange (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShowField (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutBlankLine (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutBlankLine (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutSubtotalLocation (
        /*[out,retval]*/ enum XlSubtototalLocationType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutSubtotalLocation (
        /*[in]*/ enum XlSubtototalLocationType RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutPageBreak (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutPageBreak (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LayoutForm (
        /*[out,retval]*/ enum XlLayoutFormType * RHS ) = 0;
      virtual HRESULT __stdcall put_LayoutForm (
        /*[in]*/ enum XlLayoutFormType RHS ) = 0;
      virtual HRESULT __stdcall get_SubtotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DrilledDown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DrilledDown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeField (
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPageName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPageName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFormula (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenItemsList (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HiddenItemsList (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_DatabaseSort (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DatabaseSort (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IsMemberProperty (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_PropertyParentField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PropertyOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PropertyOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_EnableItemSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableItemSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentPageList (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_CurrentPageList (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_AddPageItem (
        /*[in]*/ BSTR Item,
        /*[in]*/ VARIANT ClearList = vtMissing ) = 0;
};

struct __declspec(uuid("0002444d-0000-0000-c000-000000000046"))
CubeFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CubeFieldPtr _Default[];
    __declspec(property(get=GetItem))
    CubeFieldPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CubeFieldPtr GetItem (
        const _variant_t & Index );
    CubeFieldPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CubeFieldPtr AddSet (
        _bstr_t Name,
        _bstr_t Caption );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddSet (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Caption,
        /*[out,retval]*/ struct CubeField * * RHS ) = 0;
};

struct __declspec(uuid("00020872-0001-0000-c000-000000000046"))
IPivotTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _bstr_t _Default;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageFieldWrapCount,put=PutPageFieldWrapCount))
    long PageFieldWrapCount;
    __declspec(property(get=GetPivotSelectionStandard,put=PutPivotSelectionStandard))
    _bstr_t PivotSelectionStandard;
    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetSourceData,put=PutSourceData))
    _variant_t SourceData;
    __declspec(property(get=GetDataPivotField))
    PivotFieldPtr DataPivotField;
    __declspec(property(get=GetEnableDataValueEditing,put=PutEnableDataValueEditing))
    VARIANT_BOOL EnableDataValueEditing;
    __declspec(property(get=GetSaveData,put=PutSaveData))
    VARIANT_BOOL SaveData;
    __declspec(property(get=GetRowGrand,put=PutRowGrand))
    VARIANT_BOOL RowGrand;
    __declspec(property(get=GetColumnGrand,put=PutColumnGrand))
    VARIANT_BOOL ColumnGrand;
    __declspec(property(get=GetHasAutoFormat,put=PutHasAutoFormat))
    VARIANT_BOOL HasAutoFormat;
    __declspec(property(get=GetRefreshDate))
    DATE RefreshDate;
    __declspec(property(get=GetRefreshName))
    _bstr_t RefreshName;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;
    __declspec(property(get=GetTableRange1))
    RangePtr TableRange1;
    __declspec(property(get=GetTableRange2))
    RangePtr TableRange2;
    __declspec(property(get=GetRowRange))
    RangePtr RowRange;
    __declspec(property(get=GetColumnRange))
    RangePtr ColumnRange;
    __declspec(property(get=GetPageRange))
    RangePtr PageRange;
    __declspec(property(get=GetDataLabelRange))
    RangePtr DataLabelRange;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMDX))
    _bstr_t MDX;
    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetPageRangeCells))
    RangePtr PageRangeCells;
    __declspec(property(get=GetCacheIndex,put=PutCacheIndex))
    long CacheIndex;
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetDisplayErrorString,put=PutDisplayErrorString))
    VARIANT_BOOL DisplayErrorString;
    __declspec(property(get=GetDisplayNullString,put=PutDisplayNullString))
    VARIANT_BOOL DisplayNullString;
    __declspec(property(get=GetEnableDrilldown,put=PutEnableDrilldown))
    VARIANT_BOOL EnableDrilldown;
    __declspec(property(get=GetEnableFieldDialog,put=PutEnableFieldDialog))
    VARIANT_BOOL EnableFieldDialog;
    __declspec(property(get=GetEnableWizard,put=PutEnableWizard))
    VARIANT_BOOL EnableWizard;
    __declspec(property(get=GetErrorString,put=PutErrorString))
    _bstr_t ErrorString;
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetMergeLabels,put=PutMergeLabels))
    VARIANT_BOOL MergeLabels;
    __declspec(property(get=GetNullString,put=PutNullString))
    _bstr_t NullString;
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotFormulas))
    PivotFormulasPtr PivotFormulas;
    __declspec(property(get=GetSubtotalHiddenPageItems,put=PutSubtotalHiddenPageItems))
    VARIANT_BOOL SubtotalHiddenPageItems;
    __declspec(property(get=GetPageFieldStyle,put=PutPageFieldStyle))
    _bstr_t PageFieldStyle;
    __declspec(property(get=GetPreserveFormatting,put=PutPreserveFormatting))
    VARIANT_BOOL PreserveFormatting;
    __declspec(property(get=GetViewCalculatedMembers,put=PutViewCalculatedMembers))
    VARIANT_BOOL ViewCalculatedMembers;
    __declspec(property(get=GetPivotSelection,put=PutPivotSelection))
    _bstr_t PivotSelection;
    __declspec(property(get=GetSelectionMode,put=PutSelectionMode))
    enum XlPTSelectionMode SelectionMode;
    __declspec(property(get=GetTableStyle,put=PutTableStyle))
    _bstr_t TableStyle;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetVacatedStyle,put=PutVacatedStyle))
    _bstr_t VacatedStyle;
    __declspec(property(get=GetCalculatedMembers))
    CalculatedMembersPtr CalculatedMembers;
    __declspec(property(get=GetPrintTitles,put=PutPrintTitles))
    VARIANT_BOOL PrintTitles;
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetGrandTotalName,put=PutGrandTotalName))
    _bstr_t GrandTotalName;
    __declspec(property(get=GetSmallGrid,put=PutSmallGrid))
    VARIANT_BOOL SmallGrid;
    __declspec(property(get=GetRepeatItemsOnEachPrintedPage,put=PutRepeatItemsOnEachPrintedPage))
    VARIANT_BOOL RepeatItemsOnEachPrintedPage;
    __declspec(property(get=GetTotalsAnnotation,put=PutTotalsAnnotation))
    VARIANT_BOOL TotalsAnnotation;
    __declspec(property(get=GetDisplayImmediateItems,put=PutDisplayImmediateItems))
    VARIANT_BOOL DisplayImmediateItems;
    __declspec(property(get=GetEnableFieldList,put=PutEnableFieldList))
    VARIANT_BOOL EnableFieldList;
    __declspec(property(get=GetVisualTotals,put=PutVisualTotals))
    VARIANT_BOOL VisualTotals;
    __declspec(property(get=GetShowPageMultipleItemLabel,put=PutShowPageMultipleItemLabel))
    VARIANT_BOOL ShowPageMultipleItemLabel;
    __declspec(property(get=GetVersion))
    enum XlPivotTableVersionList Version;
    __declspec(property(get=GetDisplayEmptyRow,put=PutDisplayEmptyRow))
    VARIANT_BOOL DisplayEmptyRow;
    __declspec(property(get=GetDisplayEmptyColumn,put=PutDisplayEmptyColumn))
    VARIANT_BOOL DisplayEmptyColumn;
    __declspec(property(get=GetShowCellBackgroundFromOLAP,put=PutShowCellBackgroundFromOLAP))
    VARIANT_BOOL ShowCellBackgroundFromOLAP;
    __declspec(property(get=GetPageFieldOrder,put=PutPageFieldOrder))
    long PageFieldOrder;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AddToTable = vtMissing );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetColumnGrand ( );
    void PutColumnGrand (
        VARIANT_BOOL RHS );
    RangePtr GetColumnRange ( );
    _variant_t ShowPages (
        const _variant_t & PageField = vtMissing );
    RangePtr GetDataBodyRange ( );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetDataLabelRange ( );
    _bstr_t Get_Default ( );
    void Put_Default (
        _bstr_t RHS );
    VARIANT_BOOL GetHasAutoFormat ( );
    void PutHasAutoFormat (
        VARIANT_BOOL RHS );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    RangePtr GetPageRange ( );
    RangePtr GetPageRangeCells ( );
    IDispatchPtr PivotFields (
        const _variant_t & Index = vtMissing );
    DATE GetRefreshDate ( );
    _bstr_t GetRefreshName ( );
    VARIANT_BOOL RefreshTable ( );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    VARIANT_BOOL GetRowGrand ( );
    void PutRowGrand (
        VARIANT_BOOL RHS );
    RangePtr GetRowRange ( );
    VARIANT_BOOL GetSaveData ( );
    void PutSaveData (
        VARIANT_BOOL RHS );
    _variant_t GetSourceData ( );
    void PutSourceData (
        const _variant_t & RHS );
    RangePtr GetTableRange1 ( );
    RangePtr GetTableRange2 ( );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t RHS );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    long GetCacheIndex ( );
    void PutCacheIndex (
        long RHS );
    CalculatedFieldsPtr CalculatedFields ( );
    VARIANT_BOOL GetDisplayErrorString ( );
    void PutDisplayErrorString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNullString ( );
    void PutDisplayNullString (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableDrilldown ( );
    void PutEnableDrilldown (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableFieldDialog ( );
    void PutEnableFieldDialog (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableWizard ( );
    void PutEnableWizard (
        VARIANT_BOOL RHS );
    _bstr_t GetErrorString ( );
    void PutErrorString (
        _bstr_t RHS );
    double GetData (
        _bstr_t Name );
    HRESULT ListFormulas ( );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetMergeLabels ( );
    void PutMergeLabels (
        VARIANT_BOOL RHS );
    _bstr_t GetNullString ( );
    void PutNullString (
        _bstr_t RHS );
    PivotCachePtr PivotCache ( );
    PivotFormulasPtr GetPivotFormulas ( );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing );
    VARIANT_BOOL GetSubtotalHiddenPageItems ( );
    void PutSubtotalHiddenPageItems (
        VARIANT_BOOL RHS );
    long GetPageFieldOrder ( );
    void PutPageFieldOrder (
        long RHS );
    _bstr_t GetPageFieldStyle ( );
    void PutPageFieldStyle (
        _bstr_t RHS );
    long GetPageFieldWrapCount ( );
    void PutPageFieldWrapCount (
        long RHS );
    VARIANT_BOOL GetPreserveFormatting ( );
    void PutPreserveFormatting (
        VARIANT_BOOL RHS );
    HRESULT _PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode );
    _bstr_t GetPivotSelection ( );
    void PutPivotSelection (
        _bstr_t RHS );
    enum XlPTSelectionMode GetSelectionMode ( );
    void PutSelectionMode (
        enum XlPTSelectionMode RHS );
    _bstr_t GetTableStyle ( );
    void PutTableStyle (
        _bstr_t RHS );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t RHS );
    HRESULT Update ( );
    _bstr_t GetVacatedStyle ( );
    void PutVacatedStyle (
        _bstr_t RHS );
    HRESULT Format (
        enum XlPivotFormatType Format );
    VARIANT_BOOL GetPrintTitles ( );
    void PutPrintTitles (
        VARIANT_BOOL RHS );
    CubeFieldsPtr GetCubeFields ( );
    _bstr_t GetGrandTotalName ( );
    void PutGrandTotalName (
        _bstr_t RHS );
    VARIANT_BOOL GetSmallGrid ( );
    void PutSmallGrid (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRepeatItemsOnEachPrintedPage ( );
    void PutRepeatItemsOnEachPrintedPage (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTotalsAnnotation ( );
    void PutTotalsAnnotation (
        VARIANT_BOOL RHS );
    HRESULT PivotSelect (
        _bstr_t Name,
        enum XlPTSelectionMode Mode,
        const _variant_t & UseStandardName = vtMissing );
    _bstr_t GetPivotSelectionStandard ( );
    void PutPivotSelectionStandard (
        _bstr_t RHS );
    RangePtr GetPivotData (
        const _variant_t & DataField = vtMissing,
        const _variant_t & Field1 = vtMissing,
        const _variant_t & Item1 = vtMissing,
        const _variant_t & Field2 = vtMissing,
        const _variant_t & Item2 = vtMissing,
        const _variant_t & Field3 = vtMissing,
        const _variant_t & Item3 = vtMissing,
        const _variant_t & Field4 = vtMissing,
        const _variant_t & Item4 = vtMissing,
        const _variant_t & Field5 = vtMissing,
        const _variant_t & Item5 = vtMissing,
        const _variant_t & Field6 = vtMissing,
        const _variant_t & Item6 = vtMissing,
        const _variant_t & Field7 = vtMissing,
        const _variant_t & Item7 = vtMissing,
        const _variant_t & Field8 = vtMissing,
        const _variant_t & Item8 = vtMissing,
        const _variant_t & Field9 = vtMissing,
        const _variant_t & Item9 = vtMissing,
        const _variant_t & Field10 = vtMissing,
        const _variant_t & Item10 = vtMissing,
        const _variant_t & Field11 = vtMissing,
        const _variant_t & Item11 = vtMissing,
        const _variant_t & Field12 = vtMissing,
        const _variant_t & Item12 = vtMissing,
        const _variant_t & Field13 = vtMissing,
        const _variant_t & Item13 = vtMissing,
        const _variant_t & Field14 = vtMissing,
        const _variant_t & Item14 = vtMissing );
    PivotFieldPtr GetDataPivotField ( );
    VARIANT_BOOL GetEnableDataValueEditing ( );
    void PutEnableDataValueEditing (
        VARIANT_BOOL RHS );
    PivotFieldPtr AddDataField (
        IDispatch * Field,
        const _variant_t & Caption = vtMissing,
        const _variant_t & Function = vtMissing );
    _bstr_t GetMDX ( );
    VARIANT_BOOL GetViewCalculatedMembers ( );
    void PutViewCalculatedMembers (
        VARIANT_BOOL RHS );
    CalculatedMembersPtr GetCalculatedMembers ( );
    VARIANT_BOOL GetDisplayImmediateItems ( );
    void PutDisplayImmediateItems (
        VARIANT_BOOL RHS );
    _variant_t Dummy15 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    VARIANT_BOOL GetEnableFieldList ( );
    void PutEnableFieldList (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetVisualTotals ( );
    void PutVisualTotals (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowPageMultipleItemLabel ( );
    void PutShowPageMultipleItemLabel (
        VARIANT_BOOL RHS );
    enum XlPivotTableVersionList GetVersion ( );
    _bstr_t CreateCubeFile (
        _bstr_t File,
        const _variant_t & Measures = vtMissing,
        const _variant_t & Levels = vtMissing,
        const _variant_t & Members = vtMissing,
        const _variant_t & Properties = vtMissing );
    VARIANT_BOOL GetDisplayEmptyRow ( );
    void PutDisplayEmptyRow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayEmptyColumn ( );
    void PutDisplayEmptyColumn (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowCellBackgroundFromOLAP ( );
    void PutShowCellBackgroundFromOLAP (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields,
        /*[in]*/ VARIANT ColumnFields,
        /*[in]*/ VARIANT PageFields,
        /*[in]*/ VARIANT AddToTable,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPages (
        /*[in]*/ VARIANT PageField,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBodyRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataLabelRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_HasAutoFormat (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAutoFormat (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageRangeCells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshDate (
        /*[out,retval]*/ DATE * RHS ) = 0;
      virtual HRESULT __stdcall get_RefreshName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowGrand (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RowGrand (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_SaveData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceData (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceData (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange1 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_TableRange2 (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CacheIndex (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CacheIndex (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculatedFields (
        /*[out,retval]*/ struct CalculatedFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayErrorString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayErrorString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNullString (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNullString (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableDrilldown (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableDrilldown (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableFieldDialog (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableFieldDialog (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableWizard (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableWizard (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ErrorString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ErrorString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListFormulas ( ) = 0;
      virtual HRESULT __stdcall get_ManualUpdate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ManualUpdate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MergeLabels (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeLabels (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NullString (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_NullString (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFormulas (
        /*[out,retval]*/ struct PivotFormulas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SubtotalHiddenPageItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SubtotalHiddenPageItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageFieldWrapCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageFieldWrapCount (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__PivotSelect (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlPTSelectionMode Mode ) = 0;
      virtual HRESULT __stdcall get_PivotSelection (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotSelection (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SelectionMode (
        /*[out,retval]*/ enum XlPTSelectionMode * RHS ) = 0;
      virtual HRESULT __stdcall put_SelectionMode (
        /*[in]*/ enum XlPTSelectionMode RHS ) = 0;
      virtual HRESULT __stdcall get_TableStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TableStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_VacatedStyle (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_VacatedStyle (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Format (
        /*[in]*/ enum XlPivotFormatType Format ) = 0;
      virtual HRESULT __stdcall get_PrintTitles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintTitles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_GrandTotalName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_GrandTotalName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_SmallGrid (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SmallGrid (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RepeatItemsOnEachPrintedPage (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RepeatItemsOnEachPrintedPage (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsAnnotation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TotalsAnnotation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotSelect (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlPTSelectionMode Mode,
        /*[in]*/ VARIANT UseStandardName = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PivotSelectionStandard (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotSelectionStandard (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_GetPivotData (
        /*[in]*/ VARIANT DataField,
        /*[in]*/ VARIANT Field1,
        /*[in]*/ VARIANT Item1,
        /*[in]*/ VARIANT Field2,
        /*[in]*/ VARIANT Item2,
        /*[in]*/ VARIANT Field3,
        /*[in]*/ VARIANT Item3,
        /*[in]*/ VARIANT Field4,
        /*[in]*/ VARIANT Item4,
        /*[in]*/ VARIANT Field5,
        /*[in]*/ VARIANT Item5,
        /*[in]*/ VARIANT Field6,
        /*[in]*/ VARIANT Item6,
        /*[in]*/ VARIANT Field7,
        /*[in]*/ VARIANT Item7,
        /*[in]*/ VARIANT Field8,
        /*[in]*/ VARIANT Item8,
        /*[in]*/ VARIANT Field9,
        /*[in]*/ VARIANT Item9,
        /*[in]*/ VARIANT Field10,
        /*[in]*/ VARIANT Item10,
        /*[in]*/ VARIANT Field11,
        /*[in]*/ VARIANT Item11,
        /*[in]*/ VARIANT Field12,
        /*[in]*/ VARIANT Item12,
        /*[in]*/ VARIANT Field13,
        /*[in]*/ VARIANT Item13,
        /*[in]*/ VARIANT Field14,
        /*[in]*/ VARIANT Item14,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataPivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableDataValueEditing (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableDataValueEditing (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_AddDataField (
        /*[in]*/ IDispatch * Field,
        /*[in]*/ VARIANT Caption,
        /*[in]*/ VARIANT Function,
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_MDX (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ViewCalculatedMembers (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ViewCalculatedMembers (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CalculatedMembers (
        /*[out,retval]*/ struct CalculatedMembers * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayImmediateItems (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayImmediateItems (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy15 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VisualTotals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_VisualTotals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPageMultipleItemLabel (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPageMultipleItemLabel (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ enum XlPivotTableVersionList * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateCubeFile (
        /*[in]*/ BSTR File,
        /*[in]*/ VARIANT Measures,
        /*[in]*/ VARIANT Levels,
        /*[in]*/ VARIANT Members,
        /*[in]*/ VARIANT Properties,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEmptyRow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEmptyRow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayEmptyColumn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayEmptyColumn (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowCellBackgroundFromOLAP (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowCellBackgroundFromOLAP (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002444a-0001-0000-c000-000000000046"))
IPivotLayout : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleFields))
    IDispatchPtr VisibleFields[];
    __declspec(property(get=GetHiddenFields))
    IDispatchPtr HiddenFields[];
    __declspec(property(get=GetRowFields))
    IDispatchPtr RowFields[];
    __declspec(property(get=GetColumnFields))
    IDispatchPtr ColumnFields[];
    __declspec(property(get=GetPageFields))
    IDispatchPtr PageFields[];
    __declspec(property(get=GetDataFields))
    IDispatchPtr DataFields[];
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotFields))
    IDispatchPtr PivotFields[];
    __declspec(property(get=GetCubeFields))
    CubeFieldsPtr CubeFields;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotCache))
    PivotCachePtr PivotCache;
    __declspec(property(get=GetInnerDetail,put=PutInnerDetail))
    _bstr_t InnerDetail;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetColumnFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetDataFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPageFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetRowFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetHiddenFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetVisibleFields (
        const _variant_t & Index = vtMissing );
    IDispatchPtr GetPivotFields (
        const _variant_t & Index = vtMissing );
    CubeFieldsPtr GetCubeFields ( );
    PivotCachePtr GetPivotCache ( );
    PivotTablePtr GetPivotTable ( );
    _bstr_t GetInnerDetail ( );
    void PutInnerDetail (
        _bstr_t RHS );
    HRESULT AddFields (
        const _variant_t & RowFields = vtMissing,
        const _variant_t & ColumnFields = vtMissing,
        const _variant_t & PageFields = vtMissing,
        const _variant_t & AppendField = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PageFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HiddenFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotFields (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CubeFields (
        /*[out,retval]*/ struct CubeFields * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCache (
        /*[out,retval]*/ struct PivotCache * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_InnerDetail (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_InnerDetail (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_AddFields (
        /*[in]*/ VARIANT RowFields = vtMissing,
        /*[in]*/ VARIANT ColumnFields = vtMissing,
        /*[in]*/ VARIANT PageFields = vtMissing,
        /*[in]*/ VARIANT AppendField = vtMissing ) = 0;
};

struct __declspec(uuid("0002084c-0001-0000-c000-000000000046"))
IDisplayUnitLabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetFont))
    FontPtr Font;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAutoScaleFont,put=PutAutoScaleFont))
    _variant_t AutoScaleFont;
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetFill))
    ChartFillFormatPtr Fill;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _variant_t Select ( );
    BorderPtr GetBorder ( );
    _variant_t Delete ( );
    InteriorPtr GetInterior ( );
    ChartFillFormatPtr GetFill ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    _variant_t GetAutoScaleFont ( );
    void PutAutoScaleFont (
        const _variant_t & RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct ChartFillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoScaleFont (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaleFont (
        /*[in]*/ VARIANT RHS ) = 0;
};

struct __declspec(uuid("00024450-0001-0000-c000-000000000046"))
ICellFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetInterior,put=PutRefInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat[];
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetFont,put=PutRefFont))
    FontPtr Font;
    __declspec(property(get=GetBorders,put=PutRefBorders))
    BordersPtr Borders;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    BordersPtr GetBorders ( );
    void PutRefBorders (
        struct Borders * RHS );
    FontPtr GetFont ( );
    void PutRefFont (
        struct Font * RHS );
    InteriorPtr GetInterior ( );
    void PutRefInterior (
        struct Interior * RHS );
    _variant_t GetNumberFormat (
        long lcid = 0 );
    void PutNumberFormat (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Borders (
        /*[in]*/ struct Borders * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ struct Font * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Interior (
        /*[in]*/ struct Interior * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("00024451-0001-0000-c000-000000000046"))
IUsedObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    IDispatchPtr GetItem (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
};

struct __declspec(uuid("00024452-0001-0000-c000-000000000046"))
ICustomProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CustomPropertyPtr _Default[];
    __declspec(property(get=GetItem))
    CustomPropertyPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    CustomPropertyPtr Add (
        _bstr_t Name,
        const _variant_t & Value );
    long GetCount ( );
    CustomPropertyPtr Get_Default (
        const _variant_t & Index );
    CustomPropertyPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CustomProperty * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024453-0001-0000-c000-000000000046"))
ICustomProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _variant_t _Default;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & RHS );
    _variant_t Get_Default ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024454-0001-0000-c000-000000000046"))
ICalculatedMembers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    CalculatedMemberPtr _Default[];
    __declspec(property(get=GetItem))
    CalculatedMemberPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CalculatedMemberPtr GetItem (
        const _variant_t & Index );
    CalculatedMemberPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    CalculatedMemberPtr Add (
        _bstr_t Name,
        _bstr_t Formula,
        const _variant_t & SolveOrder = vtMissing,
        const _variant_t & Type = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Formula,
        /*[in]*/ VARIANT SolveOrder,
        /*[in]*/ VARIANT Type,
        /*[out,retval]*/ struct CalculatedMember * * RHS ) = 0;
};

struct __declspec(uuid("00024455-0001-0000-c000-000000000046"))
ICalculatedMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFormula))
    _bstr_t Formula;
    __declspec(property(get=GetSolveOrder))
    long SolveOrder;
    __declspec(property(get=GetIsValid))
    VARIANT_BOOL IsValid;
    __declspec(property(get=GetType))
    enum XlCalculatedMemberType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetFormula ( );
    _bstr_t GetSourceName ( );
    long GetSolveOrder ( );
    VARIANT_BOOL GetIsValid ( );
    _bstr_t Get_Default ( );
    HRESULT Delete ( );
    enum XlCalculatedMemberType GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_SolveOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_IsValid (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlCalculatedMemberType * RHS ) = 0;
};

struct __declspec(uuid("00024456-0001-0000-c000-000000000046"))
IWatches : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    WatchPtr _Default[];
    __declspec(property(get=GetItem))
    WatchPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    WatchPtr Add (
        const _variant_t & Source );
    long GetCount ( );
    WatchPtr Get_Default (
        const _variant_t & Index );
    WatchPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Source,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Watch * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("00024457-0001-0000-c000-000000000046"))
IWatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSource))
    _variant_t Source;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _variant_t GetSource ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Source (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("00024458-0001-0000-c000-000000000046"))
IPivotCell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetDataField))
    PivotFieldPtr DataField;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetPivotCellType))
    enum XlPivotCellType PivotCellType;
    __declspec(property(get=GetRowItems))
    PivotItemListPtr RowItems;
    __declspec(property(get=GetColumnItems))
    PivotItemListPtr ColumnItems;
    __declspec(property(get=GetCustomSubtotalFunction))
    enum XlConsolidationFunction CustomSubtotalFunction;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDummy18))
    _bstr_t Dummy18;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlPivotCellType GetPivotCellType ( );
    PivotTablePtr GetPivotTable ( );
    PivotFieldPtr GetDataField ( );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotItemListPtr GetRowItems ( );
    PivotItemListPtr GetColumnItems ( );
    RangePtr GetRange ( );
    _bstr_t GetDummy18 ( );
    enum XlConsolidationFunction GetCustomSubtotalFunction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCellType (
        /*[out,retval]*/ enum XlPivotCellType * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowItems (
        /*[out,retval]*/ struct PivotItemList * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnItems (
        /*[out,retval]*/ struct PivotItemList * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Dummy18 (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomSubtotalFunction (
        /*[out,retval]*/ enum XlConsolidationFunction * RHS ) = 0;
};

struct __declspec(uuid("00024459-0001-0000-c000-000000000046"))
IGraphic : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFilename,put=PutFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBrightness,put=PutBrightness))
    float Brightness;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetContrast,put=PutContrast))
    float Contrast;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    float CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    float CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    float CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    float CropTop;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    float GetBrightness ( );
    void PutBrightness (
        float RHS );
    enum Office::MsoPictureColorType GetColorType ( );
    void PutColorType (
        enum Office::MsoPictureColorType RHS );
    float GetContrast ( );
    void PutContrast (
        float RHS );
    float GetCropBottom ( );
    void PutCropBottom (
        float RHS );
    float GetCropLeft ( );
    void PutCropLeft (
        float RHS );
    float GetCropRight ( );
    void PutCropRight (
        float RHS );
    float GetCropTop ( );
    void PutCropTop (
        float RHS );
    _bstr_t GetFilename ( );
    void PutFilename (
        _bstr_t RHS );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Brightness (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Brightness (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ColorType (
        /*[out,retval]*/ enum Office::MsoPictureColorType * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorType (
        /*[in]*/ enum Office::MsoPictureColorType RHS ) = 0;
      virtual HRESULT __stdcall get_Contrast (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Contrast (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Filename (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
};

struct __declspec(uuid("0002445a-0001-0000-c000-000000000046"))
IAutoRecover : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetTime,put=PutTime))
    long Time;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    long GetTime ( );
    void PutTime (
        long RHS );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Time (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Time (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR RHS ) = 0;
};

struct __declspec(uuid("0002445b-0001-0000-c000-000000000046"))
IErrorCheckingOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnlockedFormulaCells,put=PutUnlockedFormulaCells))
    VARIANT_BOOL UnlockedFormulaCells;
    __declspec(property(get=GetEmptyCellReferences,put=PutEmptyCellReferences))
    VARIANT_BOOL EmptyCellReferences;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetListDataValidation,put=PutListDataValidation))
    VARIANT_BOOL ListDataValidation;
    __declspec(property(get=GetBackgroundChecking,put=PutBackgroundChecking))
    VARIANT_BOOL BackgroundChecking;
    __declspec(property(get=GetIndicatorColorIndex,put=PutIndicatorColorIndex))
    enum XlColorIndex IndicatorColorIndex;
    __declspec(property(get=GetEvaluateToError,put=PutEvaluateToError))
    VARIANT_BOOL EvaluateToError;
    __declspec(property(get=GetTextDate,put=PutTextDate))
    VARIANT_BOOL TextDate;
    __declspec(property(get=GetNumberAsText,put=PutNumberAsText))
    VARIANT_BOOL NumberAsText;
    __declspec(property(get=GetInconsistentFormula,put=PutInconsistentFormula))
    VARIANT_BOOL InconsistentFormula;
    __declspec(property(get=GetOmittedCells,put=PutOmittedCells))
    VARIANT_BOOL OmittedCells;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetBackgroundChecking ( );
    void PutBackgroundChecking (
        VARIANT_BOOL RHS );
    enum XlColorIndex GetIndicatorColorIndex ( );
    void PutIndicatorColorIndex (
        enum XlColorIndex RHS );
    VARIANT_BOOL GetEvaluateToError ( );
    void PutEvaluateToError (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetTextDate ( );
    void PutTextDate (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetNumberAsText ( );
    void PutNumberAsText (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetInconsistentFormula ( );
    void PutInconsistentFormula (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetOmittedCells ( );
    void PutOmittedCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUnlockedFormulaCells ( );
    void PutUnlockedFormulaCells (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEmptyCellReferences ( );
    void PutEmptyCellReferences (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListDataValidation ( );
    void PutListDataValidation (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BackgroundChecking (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_BackgroundChecking (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IndicatorColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_IndicatorColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_EvaluateToError (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EvaluateToError (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextDate (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TextDate (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_NumberAsText (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberAsText (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_InconsistentFormula (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InconsistentFormula (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OmittedCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_OmittedCells (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UnlockedFormulaCells (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UnlockedFormulaCells (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EmptyCellReferences (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EmptyCellReferences (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ListDataValidation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ListDataValidation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445c-0001-0000-c000-000000000046"))
IErrors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ErrorPtr _Default[];
    __declspec(property(get=GetItem))
    ErrorPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ErrorPtr GetItem (
        const _variant_t & Index );
    ErrorPtr Get_Default (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Error * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Error * * RHS ) = 0;
};

struct __declspec(uuid("0002445d-0001-0000-c000-000000000046"))
IError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIgnore,put=PutIgnore))
    VARIANT_BOOL Ignore;
    __declspec(property(get=GetValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetValue ( );
    VARIANT_BOOL GetIgnore ( );
    void PutIgnore (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Ignore (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Ignore (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("0002445e-0001-0000-c000-000000000046"))
ISmartTagAction : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetType))
    enum XlSmartTagControlType Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPresentInPane))
    VARIANT_BOOL PresentInPane;
    __declspec(property(get=GetExpandHelp,put=PutExpandHelp))
    VARIANT_BOOL ExpandHelp;
    __declspec(property(get=GetCheckboxState,put=PutCheckboxState))
    VARIANT_BOOL CheckboxState;
    __declspec(property(get=GetTextboxText,put=PutTextboxText))
    _bstr_t TextboxText;
    __declspec(property(get=GetListSelection,put=PutListSelection))
    long ListSelection;
    __declspec(property(get=GetRadioGroupSelection,put=PutRadioGroupSelection))
    long RadioGroupSelection;
    __declspec(property(get=GetActiveXControl))
    IDispatchPtr ActiveXControl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    HRESULT Execute ( );
    _bstr_t Get_Default ( );
    enum XlSmartTagControlType GetType ( );
    VARIANT_BOOL GetPresentInPane ( );
    VARIANT_BOOL GetExpandHelp ( );
    void PutExpandHelp (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetCheckboxState ( );
    void PutCheckboxState (
        VARIANT_BOOL RHS );
    _bstr_t GetTextboxText ( );
    void PutTextboxText (
        _bstr_t RHS );
    long GetListSelection ( );
    void PutListSelection (
        long RHS );
    long GetRadioGroupSelection ( );
    void PutRadioGroupSelection (
        long RHS );
    IDispatchPtr GetActiveXControl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlSmartTagControlType * RHS ) = 0;
      virtual HRESULT __stdcall get_PresentInPane (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ExpandHelp (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExpandHelp (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CheckboxState (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CheckboxState (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TextboxText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TextboxText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ListSelection (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ListSelection (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_RadioGroupSelection (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_RadioGroupSelection (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveXControl (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
};

struct __declspec(uuid("0002445f-0001-0000-c000-000000000046"))
ISmartTagActions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagActionPtr _Default[];
    __declspec(property(get=GetItem))
    SmartTagActionPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagActionPtr Get_Default (
        const _variant_t & Index );
    SmartTagActionPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagAction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagAction * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024460-0001-0000-c000-000000000046"))
ISmartTag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDownloadURL))
    _bstr_t DownloadURL;
    __declspec(property(get=GetXML))
    _bstr_t XML;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetSmartTagActions))
    SmartTagActionsPtr SmartTagActions;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProperties))
    CustomPropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetDownloadURL ( );
    _bstr_t GetName ( );
    _bstr_t Get_Default ( );
    _bstr_t GetXML ( );
    RangePtr GetRange ( );
    HRESULT Delete ( );
    SmartTagActionsPtr GetSmartTagActions ( );
    CustomPropertiesPtr GetProperties ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DownloadURL (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_SmartTagActions (
        /*[out,retval]*/ struct SmartTagActions * * RHS ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct CustomProperties * * RHS ) = 0;
};

struct __declspec(uuid("00024461-0001-0000-c000-000000000046"))
ISmartTags : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    SmartTagPtr Add (
        _bstr_t SmartTagType );
    long GetCount ( );
    SmartTagPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR SmartTagType,
        /*[out,retval]*/ struct SmartTag * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTag * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024462-0001-0000-c000-000000000046"))
ISmartTagRecognizer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetprogID))
    _bstr_t progID;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    _bstr_t GetprogID ( );
    _bstr_t Get_Default ( );
    _bstr_t GetFullName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_progID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024463-0001-0000-c000-000000000046"))
ISmartTagRecognizers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    SmartTagRecognizerPtr _Default[];
    __declspec(property(get=GetRecognize,put=PutRecognize))
    VARIANT_BOOL Recognize;
    __declspec(property(get=GetItem))
    SmartTagRecognizerPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    SmartTagRecognizerPtr GetItem (
        const _variant_t & Index );
    SmartTagRecognizerPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    VARIANT_BOOL GetRecognize ( );
    void PutRecognize (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagRecognizer * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartTagRecognizer * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Recognize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Recognize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024464-0001-0000-c000-000000000046"))
ISmartTagOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplaySmartTags,put=PutDisplaySmartTags))
    enum XlSmartTagDisplayMode DisplaySmartTags;
    __declspec(property(get=GetEmbedSmartTags,put=PutEmbedSmartTags))
    VARIANT_BOOL EmbedSmartTags;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlSmartTagDisplayMode GetDisplaySmartTags ( );
    void PutDisplaySmartTags (
        enum XlSmartTagDisplayMode RHS );
    VARIANT_BOOL GetEmbedSmartTags ( );
    void PutEmbedSmartTags (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplaySmartTags (
        /*[out,retval]*/ enum XlSmartTagDisplayMode * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplaySmartTags (
        /*[in]*/ enum XlSmartTagDisplayMode RHS ) = 0;
      virtual HRESULT __stdcall get_EmbedSmartTags (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EmbedSmartTags (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00024468-0001-0000-c000-000000000046"))
IPivotItemList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    PivotItemPtr _Default[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    PivotItemPtr Item (
        const _variant_t & Index );
    PivotItemPtr Get_Default (
        const _variant_t & Field );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Field,
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("00024469-0001-0000-c000-000000000046"))
ITab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetColorIndex,put=PutColorIndex))
    enum XlColorIndex ColorIndex;
    __declspec(property(get=GetColor,put=PutColor))
    _variant_t Color;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t GetColor ( );
    void PutColor (
        const _variant_t & RHS );
    enum XlColorIndex GetColorIndex ( );
    void PutColorIndex (
        enum XlColorIndex RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_ColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
};

struct __declspec(uuid("00024470-0001-0000-c000-000000000046"))
IListObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListObjectPtr _Default[];
    __declspec(property(get=GetItem))
    ListObjectPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListObjectPtr Add (
        enum XlListObjectSourceType SourceType,
        const _variant_t & Source,
        const _variant_t & LinkSource,
        enum XlYesNoGuess XlListObjectHasHeaders,
        const _variant_t & Destination = vtMissing );
    ListObjectPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListObjectPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ enum XlListObjectSourceType SourceType,
        /*[in]*/ VARIANT Source,
        /*[in]*/ VARIANT LinkSource,
        /*[in]*/ enum XlYesNoGuess XlListObjectHasHeaders,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024471-0001-0000-c000-000000000046"))
IListObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetDataBodyRange))
    RangePtr DataBodyRange;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;
    __declspec(property(get=GetHeaderRowRange))
    RangePtr HeaderRowRange;
    __declspec(property(get=GetInsertRowRange))
    RangePtr InsertRowRange;
    __declspec(property(get=GetListColumns))
    ListColumnsPtr ListColumns;
    __declspec(property(get=GetListRows))
    ListRowsPtr ListRows;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetShowAutoFilter,put=PutShowAutoFilter))
    VARIANT_BOOL ShowAutoFilter;
    __declspec(property(get=GetShowTotals,put=PutShowTotals))
    VARIANT_BOOL ShowTotals;
    __declspec(property(get=GetSourceType))
    enum XlListObjectSourceType SourceType;
    __declspec(property(get=GetTotalsRowRange))
    RangePtr TotalsRowRange;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointURL))
    _bstr_t SharePointURL;
    __declspec(property(get=GetXmlMap))
    XmlMapPtr XmlMap;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Publish (
        const _variant_t & Target,
        VARIANT_BOOL LinkSource );
    HRESULT Refresh ( );
    HRESULT Unlink ( );
    HRESULT Unlist ( );
    HRESULT UpdateChanges (
        enum XlListConflict iConflictType );
    HRESULT Resize (
        struct Range * Range );
    _bstr_t Get_Default ( );
    VARIANT_BOOL GetActive ( );
    RangePtr GetDataBodyRange ( );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    RangePtr GetHeaderRowRange ( );
    RangePtr GetInsertRowRange ( );
    ListColumnsPtr GetListColumns ( );
    ListRowsPtr GetListRows ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange ( );
    VARIANT_BOOL GetShowAutoFilter ( );
    void PutShowAutoFilter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowTotals ( );
    void PutShowTotals (
        VARIANT_BOOL RHS );
    enum XlListObjectSourceType GetSourceType ( );
    RangePtr GetTotalsRowRange ( );
    _bstr_t GetSharePointURL ( );
    XmlMapPtr GetXmlMap ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Publish (
        /*[in]*/ VARIANT Target,
        /*[in]*/ VARIANT_BOOL LinkSource,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_Unlink ( ) = 0;
      virtual HRESULT __stdcall raw_Unlist ( ) = 0;
      virtual HRESULT __stdcall raw_UpdateChanges (
        /*[in]*/ enum XlListConflict iConflictType ) = 0;
      virtual HRESULT __stdcall raw_Resize (
        /*[in]*/ struct Range * Range ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBodyRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HeaderRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_InsertRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ListColumns (
        /*[out,retval]*/ struct ListColumns * * RHS ) = 0;
      virtual HRESULT __stdcall get_ListRows (
        /*[out,retval]*/ struct ListRows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTable (
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowAutoFilter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowAutoFilter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowTotals (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowTotals (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SourceType (
        /*[out,retval]*/ enum XlListObjectSourceType * RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsRowRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharePointURL (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_XmlMap (
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
};

struct __declspec(uuid("00024472-0001-0000-c000-000000000046"))
IListColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListColumnPtr _Default[];
    __declspec(property(get=GetItem))
    ListColumnPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListColumnPtr Add (
        const _variant_t & Position = vtMissing );
    ListColumnPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListColumnPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListColumn * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024473-0001-0000-c000-000000000046"))
IListColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetListDataFormat))
    ListDataFormatPtr ListDataFormat;
    __declspec(property(get=GetTotalsCalculation,put=PutTotalsCalculation))
    enum XlTotalsCalculation TotalsCalculation;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSharePointFormula))
    _bstr_t SharePointFormula;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    _bstr_t Get_Default ( );
    ListDataFormatPtr GetListDataFormat ( );
    long GetIndex ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    RangePtr GetRange ( );
    enum XlTotalsCalculation GetTotalsCalculation ( );
    void PutTotalsCalculation (
        enum XlTotalsCalculation RHS );
    XPathPtr GetXPath ( );
    _bstr_t GetSharePointFormula ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ListDataFormat (
        /*[out,retval]*/ struct ListDataFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_TotalsCalculation (
        /*[out,retval]*/ enum XlTotalsCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_TotalsCalculation (
        /*[in]*/ enum XlTotalsCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_XPath (
        /*[out,retval]*/ struct XPath * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharePointFormula (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024474-0001-0000-c000-000000000046"))
IListRows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    ListRowPtr _Default[];
    __declspec(property(get=GetItem))
    ListRowPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    ListRowPtr Add (
        const _variant_t & Position = vtMissing );
    ListRowPtr Get_Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ListRowPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ListRow * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
};

struct __declspec(uuid("00024475-0001-0000-c000-000000000046"))
IListRow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRange))
    RangePtr Range;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetInvalidData))
    VARIANT_BOOL InvalidData;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    long GetIndex ( );
    VARIANT_BOOL GetInvalidData ( );
    RangePtr GetRange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_InvalidData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
};

struct __declspec(uuid("00024476-0001-0000-c000-000000000046"))
IXmlNamespace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetUri))
    _bstr_t Uri;
    __declspec(property(get=GetPrefix))
    _bstr_t Prefix;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetUri ( );
    _bstr_t GetPrefix ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Uri (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Prefix (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024477-0001-0000-c000-000000000046"))
IXmlNamespaces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlNamespacePtr _Default[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetItem))
    XmlNamespacePtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr Get_Default (
        const _variant_t & Index );
    XmlNamespacePtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    _bstr_t GetValue ( );
    IUnknownPtr Get_NewEnum ( );
    HRESULT InstallManifest (
        _bstr_t Path,
        const _variant_t & InstallForAllUsers = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_InstallManifest (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT InstallForAllUsers = vtMissing ) = 0;
};

struct __declspec(uuid("00024478-0001-0000-c000-000000000046"))
IXmlDataBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSourceUrl))
    _bstr_t SourceUrl;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    enum XlXmlImportResult Refresh ( );
    HRESULT LoadSettings (
        _bstr_t Url );
    HRESULT ClearSettings ( );
    _bstr_t GetSourceUrl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_LoadSettings (
        /*[in]*/ BSTR Url ) = 0;
      virtual HRESULT __stdcall raw_ClearSettings ( ) = 0;
      virtual HRESULT __stdcall get_SourceUrl (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("00024479-0001-0000-c000-000000000046"))
IXmlSchema : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNamespace))
    XmlNamespacePtr Namespace;
    __declspec(property(get=GetXML))
    _bstr_t XML;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlNamespacePtr GetNamespace ( );
    _bstr_t GetXML ( );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Namespace (
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_XML (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
};

struct __declspec(uuid("0002447a-0001-0000-c000-000000000046"))
IXmlSchemas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlSchemaPtr _Default[];
    __declspec(property(get=GetItem))
    XmlSchemaPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlSchemaPtr Get_Default (
        const _variant_t & Index );
    XmlSchemaPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlSchema * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlSchema * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002447b-0001-0000-c000-000000000046"))
IXmlMap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetSaveDataSourceDefinition,put=PutSaveDataSourceDefinition))
    VARIANT_BOOL SaveDataSourceDefinition;
    __declspec(property(get=GetPreserveColumnFilter,put=PutPreserveColumnFilter))
    VARIANT_BOOL PreserveColumnFilter;
    __declspec(property(get=GetPreserveNumberFormatting,put=PutPreserveNumberFormatting))
    VARIANT_BOOL PreserveNumberFormatting;
    __declspec(property(get=GetAppendOnImport,put=PutAppendOnImport))
    VARIANT_BOOL AppendOnImport;
    __declspec(property(get=GetRootElementName))
    _bstr_t RootElementName;
    __declspec(property(get=GetRootElementNamespace))
    XmlNamespacePtr RootElementNamespace;
    __declspec(property(get=GetSchemas))
    XmlSchemasPtr Schemas;
    __declspec(property(get=GetDataBinding))
    XmlDataBindingPtr DataBinding;
    __declspec(property(get=GetAdjustColumnWidth,put=PutAdjustColumnWidth))
    VARIANT_BOOL AdjustColumnWidth;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsExportable))
    VARIANT_BOOL IsExportable;
    __declspec(property(get=GetShowImportExportValidationErrors,put=PutShowImportExportValidationErrors))
    VARIANT_BOOL ShowImportExportValidationErrors;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    VARIANT_BOOL GetIsExportable ( );
    VARIANT_BOOL GetShowImportExportValidationErrors ( );
    void PutShowImportExportValidationErrors (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveDataSourceDefinition ( );
    void PutSaveDataSourceDefinition (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAdjustColumnWidth ( );
    void PutAdjustColumnWidth (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveColumnFilter ( );
    void PutPreserveColumnFilter (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPreserveNumberFormatting ( );
    void PutPreserveNumberFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAppendOnImport ( );
    void PutAppendOnImport (
        VARIANT_BOOL RHS );
    _bstr_t GetRootElementName ( );
    XmlNamespacePtr GetRootElementNamespace ( );
    XmlSchemasPtr GetSchemas ( );
    XmlDataBindingPtr GetDataBinding ( );
    HRESULT Delete ( );
    enum XlXmlImportResult Import (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlImportResult ImportXml (
        _bstr_t XmlData,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult Export (
        _bstr_t Url,
        const _variant_t & Overwrite = vtMissing );
    enum XlXmlExportResult ExportXml (
        BSTR * Data );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_IsExportable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowImportExportValidationErrors (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowImportExportValidationErrors (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveDataSourceDefinition (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveDataSourceDefinition (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AdjustColumnWidth (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AdjustColumnWidth (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveColumnFilter (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveColumnFilter (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PreserveNumberFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PreserveNumberFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AppendOnImport (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AppendOnImport (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RootElementName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_RootElementNamespace (
        /*[out,retval]*/ struct XmlNamespace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Schemas (
        /*[out,retval]*/ struct XmlSchemas * * RHS ) = 0;
      virtual HRESULT __stdcall get_DataBinding (
        /*[out,retval]*/ struct XmlDataBinding * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Import (
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_ImportXml (
        /*[in]*/ BSTR XmlData,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT Overwrite,
        /*[out,retval]*/ enum XlXmlExportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExportXml (
        /*[out]*/ BSTR * Data,
        /*[out,retval]*/ enum XlXmlExportResult * RHS ) = 0;
};

struct __declspec(uuid("0002447c-0001-0000-c000-000000000046"))
IXmlMaps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    XmlMapPtr _Default[];
    __declspec(property(get=GetItem))
    XmlMapPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    XmlMapPtr Add (
        _bstr_t Schema,
        const _variant_t & RootElementName = vtMissing );
    XmlMapPtr Get_Default (
        const _variant_t & Index );
    XmlMapPtr GetItem (
        const _variant_t & Index );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Schema,
        /*[in]*/ VARIANT RootElementName,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("0002447d-0001-0000-c000-000000000046"))
IListDataFormat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    enum XlListDataType _Default;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetChoices))
    _variant_t Choices;
    __declspec(property(get=GetDecimalPlaces))
    long DecimalPlaces;
    __declspec(property(get=GetDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetIsPercent))
    VARIANT_BOOL IsPercent;
    __declspec(property(get=Getlcid))
    long lcid;
    __declspec(property(get=GetMaxCharacters))
    long MaxCharacters;
    __declspec(property(get=GetMaxNumber))
    _variant_t MaxNumber;
    __declspec(property(get=GetMinNumber))
    _variant_t MinNumber;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRequired))
    VARIANT_BOOL Required;
    __declspec(property(get=GetType))
    enum XlListDataType Type;
    __declspec(property(get=GetAllowFillIn))
    VARIANT_BOOL AllowFillIn;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    enum XlListDataType Get_Default ( );
    _variant_t GetChoices ( );
    long GetDecimalPlaces ( );
    _variant_t GetDefaultValue ( );
    VARIANT_BOOL GetIsPercent ( );
    long Getlcid ( );
    long GetMaxCharacters ( );
    _variant_t GetMaxNumber ( );
    _variant_t GetMinNumber ( );
    VARIANT_BOOL GetRequired ( );
    enum XlListDataType GetType ( );
    VARIANT_BOOL GetReadOnly ( );
    VARIANT_BOOL GetAllowFillIn ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ enum XlListDataType * RHS ) = 0;
      virtual HRESULT __stdcall get_Choices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DecimalPlaces (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultValue (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_IsPercent (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_lcid (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxCharacters (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxNumber (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_MinNumber (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Required (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlListDataType * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowFillIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("0002447e-0001-0000-c000-000000000046"))
IXPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetMap))
    XmlMapPtr Map;
    __declspec(property(get=GetRepeating))
    VARIANT_BOOL Repeating;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t Get_Default ( );
    _bstr_t GetValue ( );
    XmlMapPtr GetMap ( );
    HRESULT SetValue (
        struct XmlMap * Map,
        _bstr_t XPath,
        const _variant_t & SelectionNamespace = vtMissing,
        const _variant_t & Repeating = vtMissing );
    HRESULT Clear ( );
    VARIANT_BOOL GetRepeating ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Map (
        /*[out,retval]*/ struct XmlMap * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR XPath,
        /*[in]*/ VARIANT SelectionNamespace = vtMissing,
        /*[in]*/ VARIANT Repeating = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_Repeating (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
};

struct __declspec(uuid("00020821-0000-0000-c000-000000000046"))
Chart;
    // [ default ] interface _Chart
    // [ default, source ] dispinterface ChartEvents

struct __declspec(uuid("00020893-0001-0000-c000-000000000046"))
IWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedSheets))
    SheetsPtr SelectedSheets;
    __declspec(property(get=GetScrollColumn,put=PutScrollColumn))
    long ScrollColumn;
    __declspec(property(get=GetSplitColumn,put=PutSplitColumn))
    long SplitColumn;
    __declspec(property(get=GetSplitHorizontal,put=PutSplitHorizontal))
    double SplitHorizontal;
    __declspec(property(get=GetSplitRow,put=PutSplitRow))
    long SplitRow;
    __declspec(property(get=GetSplitVertical,put=PutSplitVertical))
    double SplitVertical;
    __declspec(property(get=GetSplit,put=PutSplit))
    VARIANT_BOOL Split;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState;
    __declspec(property(get=GetZoom,put=PutZoom))
    _variant_t Zoom;
    __declspec(property(get=GetTabRatio,put=PutTabRatio))
    double TabRatio;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetDisplayHorizontalScrollBar,put=PutDisplayHorizontalScrollBar))
    VARIANT_BOOL DisplayHorizontalScrollBar;
    __declspec(property(get=GetDisplayVerticalScrollBar,put=PutDisplayVerticalScrollBar))
    VARIANT_BOOL DisplayVerticalScrollBar;
    __declspec(property(get=GetDisplayWorkbookTabs,put=PutDisplayWorkbookTabs))
    VARIANT_BOOL DisplayWorkbookTabs;
    __declspec(property(get=GetType))
    enum XlWindowType Type;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRangeSelection))
    RangePtr RangeSelection;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetEnableResize,put=PutEnableResize))
    VARIANT_BOOL EnableResize;
    __declspec(property(get=GetView,put=PutView))
    enum XlWindowView View;
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow;
    __declspec(property(get=GetVisibleRange))
    RangePtr VisibleRange;
    __declspec(property(get=GetWindowNumber))
    long WindowNumber;
    __declspec(property(get=GetDisplayRightToLeft,put=PutDisplayRightToLeft))
    VARIANT_BOOL DisplayRightToLeft;
    __declspec(property(get=GetCaption,put=PutCaption))
    _variant_t Caption;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetUsableHeight))
    double UsableHeight;
    __declspec(property(get=GetUsableWidth))
    double UsableWidth;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActivePane))
    PanePtr ActivePane;
    __declspec(property(get=GetDisplayFormulas,put=PutDisplayFormulas))
    VARIANT_BOOL DisplayFormulas;
    __declspec(property(get=GetDisplayGridlines,put=PutDisplayGridlines))
    VARIANT_BOOL DisplayGridlines;
    __declspec(property(get=GetDisplayHeadings,put=PutDisplayHeadings))
    VARIANT_BOOL DisplayHeadings;
    __declspec(property(get=GetDisplayOutline,put=PutDisplayOutline))
    VARIANT_BOOL DisplayOutline;
    __declspec(property(get=Get_DisplayRightToLeft,put=Put_DisplayRightToLeft))
    VARIANT_BOOL _DisplayRightToLeft;
    __declspec(property(get=GetDisplayZeros,put=PutDisplayZeros))
    VARIANT_BOOL DisplayZeros;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetFreezePanes,put=PutFreezePanes))
    VARIANT_BOOL FreezePanes;
    __declspec(property(get=GetGridlineColor,put=PutGridlineColor))
    long GridlineColor;
    __declspec(property(get=GetGridlineColorIndex,put=PutGridlineColorIndex))
    enum XlColorIndex GridlineColorIndex;
    __declspec(property(get=GetPanes))
    PanesPtr Panes;
    __declspec(property(get=GetScrollRow,put=PutScrollRow))
    long ScrollRow;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t ActivateNext ( );
    _variant_t ActivatePrevious ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    PanePtr GetActivePane ( );
    IDispatchPtr GetActiveSheet ( );
    _variant_t GetCaption ( );
    void PutCaption (
        const _variant_t & RHS );
    VARIANT_BOOL Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    VARIANT_BOOL GetDisplayFormulas ( );
    void PutDisplayFormulas (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayGridlines ( );
    void PutDisplayGridlines (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHeadings ( );
    void PutDisplayHeadings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayHorizontalScrollBar ( );
    void PutDisplayHorizontalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayOutline ( );
    void PutDisplayOutline (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Get_DisplayRightToLeft ( );
    void Put_DisplayRightToLeft (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayVerticalScrollBar ( );
    void PutDisplayVerticalScrollBar (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayWorkbookTabs ( );
    void PutDisplayWorkbookTabs (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayZeros ( );
    void PutDisplayZeros (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableResize ( );
    void PutEnableResize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetFreezePanes ( );
    void PutFreezePanes (
        VARIANT_BOOL RHS );
    long GetGridlineColor ( );
    void PutGridlineColor (
        long RHS );
    enum XlColorIndex GetGridlineColorIndex ( );
    void PutGridlineColorIndex (
        enum XlColorIndex RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    _variant_t LargeScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    WindowPtr NewWindow ( );
    _bstr_t GetOnWindow ( );
    void PutOnWindow (
        _bstr_t RHS );
    PanesPtr GetPanes ( );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    RangePtr GetRangeSelection ( );
    long GetScrollColumn ( );
    void PutScrollColumn (
        long RHS );
    long GetScrollRow ( );
    void PutScrollRow (
        long RHS );
    _variant_t ScrollWorkbookTabs (
        const _variant_t & Sheets = vtMissing,
        const _variant_t & Position = vtMissing );
    SheetsPtr GetSelectedSheets ( );
    IDispatchPtr GetSelection ( );
    _variant_t SmallScroll (
        const _variant_t & Down = vtMissing,
        const _variant_t & Up = vtMissing,
        const _variant_t & ToRight = vtMissing,
        const _variant_t & ToLeft = vtMissing );
    VARIANT_BOOL GetSplit ( );
    void PutSplit (
        VARIANT_BOOL RHS );
    long GetSplitColumn ( );
    void PutSplitColumn (
        long RHS );
    double GetSplitHorizontal ( );
    void PutSplitHorizontal (
        double RHS );
    long GetSplitRow ( );
    void PutSplitRow (
        long RHS );
    double GetSplitVertical ( );
    void PutSplitVertical (
        double RHS );
    double GetTabRatio ( );
    void PutTabRatio (
        double RHS );
    double GetTop ( );
    void PutTop (
        double RHS );
    enum XlWindowType GetType ( );
    double GetUsableHeight ( );
    double GetUsableWidth ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    RangePtr GetVisibleRange ( );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetWindowNumber ( );
    enum XlWindowState GetWindowState ( );
    void PutWindowState (
        enum XlWindowState RHS );
    _variant_t GetZoom ( );
    void PutZoom (
        const _variant_t & RHS );
    enum XlWindowView GetView ( );
    void PutView (
        enum XlWindowView RHS );
    VARIANT_BOOL GetDisplayRightToLeft ( );
    void PutDisplayRightToLeft (
        VARIANT_BOOL RHS );
    long PointsToScreenPixelsX (
        long Points );
    long PointsToScreenPixelsY (
        long Points );
    IDispatchPtr RangeFromPoint (
        long x,
        long y );
    HRESULT ScrollIntoView (
        long Left,
        long Top,
        long Width,
        long Height,
        const _variant_t & Start = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateNext (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivatePrevious (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePane (
        /*[out,retval]*/ struct Pane * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT RouteWorkbook,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayGridlines (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayGridlines (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHeadings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHeadings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayHorizontalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayHorizontalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayOutline (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayOutline (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get__DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put__DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayVerticalScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayVerticalScrollBar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayWorkbookTabs (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayWorkbookTabs (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayZeros (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayZeros (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableResize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableResize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FreezePanes (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FreezePanes (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColor (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColor (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_GridlineColorIndex (
        /*[out,retval]*/ enum XlColorIndex * RHS ) = 0;
      virtual HRESULT __stdcall put_GridlineColorIndex (
        /*[in]*/ enum XlColorIndex RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_LargeScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct Panes * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_RangeSelection (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ScrollRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ScrollRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollWorkbookTabs (
        /*[in]*/ VARIANT Sheets,
        /*[in]*/ VARIANT Position,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SelectedSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SmallScroll (
        /*[in]*/ VARIANT Down,
        /*[in]*/ VARIANT Up,
        /*[in]*/ VARIANT ToRight,
        /*[in]*/ VARIANT ToLeft,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Split (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Split (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SplitColumn (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitColumn (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitHorizontal (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitHorizontal (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_SplitRow (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitRow (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SplitVertical (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_SplitVertical (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TabRatio (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_TabRatio (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlWindowType * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_VisibleRange (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowNumber (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_Zoom (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Zoom (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ enum XlWindowView * RHS ) = 0;
      virtual HRESULT __stdcall put_View (
        /*[in]*/ enum XlWindowView RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRightToLeft (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRightToLeft (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsX (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_PointsToScreenPixelsY (
        /*[in]*/ long Points,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RangeFromPoint (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollIntoView (
        /*[in]*/ long Left,
        /*[in]*/ long Top,
        /*[in]*/ long Width,
        /*[in]*/ long Height,
        /*[in]*/ VARIANT Start = vtMissing ) = 0;
};

struct __declspec(uuid("000208d6-0000-0000-c000-000000000046"))
_Chart : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPageSetup))
    PageSetupPtr PageSetup;
    __declspec(property(get=GetVisible,put=PutVisible))
    enum XlSheetVisibility Visible[];
    __declspec(property(get=GetArea3DGroup))
    ChartGroupPtr Area3DGroup[];
    __declspec(property(get=GetBar3DGroup))
    ChartGroupPtr Bar3DGroup[];
    __declspec(property(get=GetColumn3DGroup))
    ChartGroupPtr Column3DGroup[];
    __declspec(property(get=GetLine3DGroup))
    ChartGroupPtr Line3DGroup[];
    __declspec(property(get=GetPie3DGroup))
    ChartGroupPtr Pie3DGroup[];
    __declspec(property(get=GetSurfaceGroup))
    ChartGroupPtr SurfaceGroup[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetMailEnvelope))
    Office::IMsoEnvelopeVBPtr MailEnvelope;
    __declspec(property(get=GetIndex))
    long Index[];
    __declspec(property(get=GetDepthPercent,put=PutDepthPercent))
    long DepthPercent[];
    __declspec(property(get=GetElevation,put=PutElevation))
    long Elevation[];
    __declspec(property(get=GetGapDepth,put=PutGapDepth))
    long GapDepth[];
    __declspec(property(get=GetTab))
    TabPtr Tab;
    __declspec(property(get=GetHasAxis,put=PutHasAxis))
    _variant_t HasAxis[][][];
    __declspec(property(get=GetHasLegend,put=PutHasLegend))
    VARIANT_BOOL HasLegend[];
    __declspec(property(get=GetHasTitle,put=PutHasTitle))
    VARIANT_BOOL HasTitle[];
    __declspec(property(get=GetHeightPercent,put=PutHeightPercent))
    long HeightPercent[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    long Perspective[];
    __declspec(property(get=GetRightAngleAxes,put=PutRightAngleAxes))
    _variant_t RightAngleAxes[];
    __declspec(property(get=GetProtectionMode))
    VARIANT_BOOL ProtectionMode[];
    __declspec(property(get=GetRotation,put=PutRotation))
    _variant_t Rotation[];
    __declspec(property(get=GetShapes))
    ShapesPtr Shapes;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetPivotLayout))
    PivotLayoutPtr PivotLayout;
    __declspec(property(get=GetHasPivotFields,put=PutHasPivotFields))
    VARIANT_BOOL HasPivotFields;
    __declspec(property(get=GetScripts))
    Office::ScriptsPtr Scripts;
    __declspec(property(get=GetProtectContents))
    VARIANT_BOOL ProtectContents[];
    __declspec(property(get=GetProtectDrawingObjects))
    VARIANT_BOOL ProtectDrawingObjects[];
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetDataTable))
    DataTablePtr DataTable;
    __declspec(property(get=GetHasDataTable,put=PutHasDataTable))
    VARIANT_BOOL HasDataTable;
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetShowWindow,put=PutShowWindow))
    VARIANT_BOOL ShowWindow;
    __declspec(property(get=GetChartType,put=PutChartType))
    enum XlChartType ChartType;
    __declspec(property(get=GetChartTitle))
    ChartTitlePtr ChartTitle[];
    __declspec(property(get=GetCorners))
    CornersPtr Corners[];
    __declspec(property(get=GetFloor))
    FloorPtr Floor[];
    __declspec(property(get=GetLegend))
    LegendPtr Legend[];
    __declspec(property(get=GetPlotArea))
    PlotAreaPtr PlotArea[];
    __declspec(property(get=GetWalls))
    WallsPtr Walls[];
    __declspec(property(get=GetBarShape,put=PutBarShape))
    enum XlBarShape BarShape;
    __declspec(property(get=GetChartArea))
    ChartAreaPtr ChartArea[];
    __declspec(property(get=GetProtectFormatting,put=PutProtectFormatting))
    VARIANT_BOOL ProtectFormatting;
    __declspec(property(get=GetProtectData,put=PutProtectData))
    VARIANT_BOOL ProtectData;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetPlotVisibleOnly,put=PutPlotVisibleOnly))
    VARIANT_BOOL PlotVisibleOnly[];
    __declspec(property(get=GetDisplayBlanksAs,put=PutDisplayBlanksAs))
    enum XlDisplayBlanksAs DisplayBlanksAs[];
    __declspec(property(get=GetSizeWithWindow,put=PutSizeWithWindow))
    VARIANT_BOOL SizeWithWindow[];
    __declspec(property(get=GetPlotBy,put=PutPlotBy))
    enum XlRowCol PlotBy;
    __declspec(property(get=GetProtectGoalSeek,put=PutProtectGoalSeek))
    VARIANT_BOOL ProtectGoalSeek;
    __declspec(property(get=GetProtectSelection,put=PutProtectSelection))
    VARIANT_BOOL ProtectSelection;
    __declspec(property(get=GetWallsAndGridlines2D,put=PutWallsAndGridlines2D))
    VARIANT_BOOL WallsAndGridlines2D[];
    __declspec(property(get=GetAutoScaling,put=PutAutoScaling))
    VARIANT_BOOL AutoScaling[];
    __declspec(property(get=GetType,put=PutType))
    long Type[];
    __declspec(property(get=GetSubType,put=PutSubType))
    long SubType[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Activate (
        long lcid = 0 );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    HRESULT Delete (
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    long GetIndex (
        long lcid = 0 );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    IDispatchPtr GetNext ( );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    PageSetupPtr GetPageSetup ( );
    IDispatchPtr GetPrevious ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetProtectContents (
        long lcid = 0 );
    VARIANT_BOOL GetProtectDrawingObjects (
        long lcid = 0 );
    VARIANT_BOOL GetProtectionMode (
        long lcid = 0 );
    HRESULT _SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    enum XlSheetVisibility GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        enum XlSheetVisibility RHS );
    ShapesPtr GetShapes ( );
    HRESULT _ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        long lcid = 0 );
    IDispatchPtr Arcs (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetArea3DGroup (
        long lcid = 0 );
    IDispatchPtr AreaGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT AutoFormat (
        long Gallery,
        const _variant_t & Format = vtMissing );
    VARIANT_BOOL GetAutoScaling (
        long lcid = 0 );
    void PutAutoScaling (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr Axes (
        const _variant_t & Type,
        enum XlAxisGroup AxisGroup,
        long lcid = 0 );
    HRESULT SetBackgroundPicture (
        _bstr_t Filename );
    ChartGroupPtr GetBar3DGroup (
        long lcid = 0 );
    IDispatchPtr BarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Buttons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartAreaPtr GetChartArea (
        long lcid = 0 );
    IDispatchPtr ChartGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ChartObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartTitlePtr GetChartTitle (
        long lcid = 0 );
    HRESULT ChartWizard (
        const _variant_t & Source = vtMissing,
        const _variant_t & Gallery = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & PlotBy = vtMissing,
        const _variant_t & CategoryLabels = vtMissing,
        const _variant_t & SeriesLabels = vtMissing,
        const _variant_t & HasLegend = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & CategoryTitle = vtMissing,
        const _variant_t & ValueTitle = vtMissing,
        const _variant_t & ExtraTitle = vtMissing,
        long lcid = 0 );
    IDispatchPtr CheckBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetColumn3DGroup (
        long lcid = 0 );
    IDispatchPtr ColumnGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format,
        enum XlPictureAppearance Size,
        long lcid = 0 );
    CornersPtr GetCorners (
        long lcid = 0 );
    HRESULT CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance Size,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing,
        long lcid = 0 );
    DataTablePtr GetDataTable ( );
    long GetDepthPercent (
        long lcid = 0 );
    void PutDepthPercent (
        long lcid,
        long RHS );
    HRESULT Deselect (
        long lcid = 0 );
    enum XlDisplayBlanksAs GetDisplayBlanksAs (
        long lcid = 0 );
    void PutDisplayBlanksAs (
        long lcid,
        enum XlDisplayBlanksAs RHS );
    IDispatchPtr DoughnutGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Drawings (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DrawingObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr DropDowns (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetElevation (
        long lcid = 0 );
    void PutElevation (
        long lcid,
        long RHS );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    FloorPtr GetFloor (
        long lcid = 0 );
    long GetGapDepth (
        long lcid = 0 );
    void PutGapDepth (
        long lcid,
        long RHS );
    IDispatchPtr GroupBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr GroupObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetHasAxis (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    void PutHasAxis (
        const _variant_t & Index1,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    VARIANT_BOOL GetHasDataTable ( );
    void PutHasDataTable (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasLegend (
        long lcid = 0 );
    void PutHasLegend (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasTitle (
        long lcid = 0 );
    void PutHasTitle (
        long lcid,
        VARIANT_BOOL RHS );
    long GetHeightPercent (
        long lcid = 0 );
    void PutHeightPercent (
        long lcid,
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    IDispatchPtr Labels (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    LegendPtr GetLegend (
        long lcid = 0 );
    ChartGroupPtr GetLine3DGroup (
        long lcid = 0 );
    IDispatchPtr LineGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Lines (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr ListBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _ChartPtr Location (
        enum XlChartLocation Where,
        const _variant_t & Name = vtMissing );
    IDispatchPtr OLEObjects (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr OptionButtons (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Ovals (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    HRESULT Paste (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    long GetPerspective (
        long lcid = 0 );
    void PutPerspective (
        long lcid,
        long RHS );
    IDispatchPtr Pictures (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    ChartGroupPtr GetPie3DGroup (
        long lcid = 0 );
    IDispatchPtr PieGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    PlotAreaPtr GetPlotArea (
        long lcid = 0 );
    VARIANT_BOOL GetPlotVisibleOnly (
        long lcid = 0 );
    void PutPlotVisibleOnly (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr RadarGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr Rectangles (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    _variant_t GetRightAngleAxes (
        long lcid = 0 );
    void PutRightAngleAxes (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetRotation (
        long lcid = 0 );
    void PutRotation (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr ScrollBars (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    IDispatchPtr SeriesCollection (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSizeWithWindow (
        long lcid = 0 );
    void PutSizeWithWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowWindow ( );
    void PutShowWindow (
        VARIANT_BOOL RHS );
    IDispatchPtr Spinners (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetSubType (
        long lcid = 0 );
    void PutSubType (
        long lcid,
        long RHS );
    ChartGroupPtr GetSurfaceGroup (
        long lcid = 0 );
    IDispatchPtr TextBoxes (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    long GetType (
        long lcid = 0 );
    void PutType (
        long lcid,
        long RHS );
    enum XlChartType GetChartType ( );
    void PutChartType (
        enum XlChartType RHS );
    HRESULT ApplyCustomType (
        enum XlChartType ChartType,
        const _variant_t & TypeName = vtMissing );
    WallsPtr GetWalls (
        long lcid = 0 );
    VARIANT_BOOL GetWallsAndGridlines2D (
        long lcid = 0 );
    void PutWallsAndGridlines2D (
        long lcid,
        VARIANT_BOOL RHS );
    IDispatchPtr XYGroups (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    enum XlBarShape GetBarShape ( );
    void PutBarShape (
        enum XlBarShape RHS );
    enum XlRowCol GetPlotBy ( );
    void PutPlotBy (
        enum XlRowCol RHS );
    HRESULT CopyChartBuild ( );
    VARIANT_BOOL GetProtectFormatting ( );
    void PutProtectFormatting (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectData ( );
    void PutProtectData (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectGoalSeek ( );
    void PutProtectGoalSeek (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetProtectSelection ( );
    void PutProtectSelection (
        VARIANT_BOOL RHS );
    HRESULT GetChartElement (
        long x,
        long y,
        long * ElementID,
        long * Arg1,
        long * Arg2 );
    HRESULT SetSourceData (
        struct Range * Source,
        const _variant_t & PlotBy = vtMissing );
    VARIANT_BOOL Export (
        _bstr_t Filename,
        const _variant_t & FilterName = vtMissing,
        const _variant_t & Interactive = vtMissing );
    HRESULT Refresh ( );
    PivotLayoutPtr GetPivotLayout ( );
    VARIANT_BOOL GetHasPivotFields ( );
    void PutHasPivotFields (
        VARIANT_BOOL RHS );
    Office::ScriptsPtr GetScripts ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    TabPtr GetTab ( );
    Office::IMsoEnvelopeVBPtr GetMailEnvelope ( );
    HRESULT ApplyDataLabels (
        enum XlDataLabelsType Type,
        const _variant_t & LegendKey = vtMissing,
        const _variant_t & AutoText = vtMissing,
        const _variant_t & HasLeaderLines = vtMissing,
        const _variant_t & ShowSeriesName = vtMissing,
        const _variant_t & ShowCategoryName = vtMissing,
        const _variant_t & ShowValue = vtMissing,
        const _variant_t & ShowPercentage = vtMissing,
        const _variant_t & ShowBubbleSize = vtMissing,
        const _variant_t & Separator = vtMissing,
        long lcid = 0 );
    HRESULT SaveAs (
        _bstr_t Filename,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & DrawingObjects = vtMissing,
        const _variant_t & Contents = vtMissing,
        const _variant_t & Scenarios = vtMissing,
        const _variant_t & UserInterfaceOnly = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PageSetup (
        /*[out,retval]*/ struct PageSetup * * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ProtectContents (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectionMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual void __stdcall _Dummy23 ( ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlSheetVisibility * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlSheetVisibility RHS ) = 0;
      virtual HRESULT __stdcall get_Shapes (
        /*[out,retval]*/ struct Shapes * * RHS ) = 0;
      virtual HRESULT __stdcall raw__ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Arcs (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Area3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AreaGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ long Gallery,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoScaling (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Axes (
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlAxisGroup AxisGroup,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetBackgroundPicture (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Bar3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Buttons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartArea * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ChartTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartTitle * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChartWizard (
        /*[in]*/ VARIANT Source = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing,
        /*[in]*/ VARIANT PlotBy = vtMissing,
        /*[in]*/ VARIANT CategoryLabels = vtMissing,
        /*[in]*/ VARIANT SeriesLabels = vtMissing,
        /*[in]*/ VARIANT HasLegend = vtMissing,
        /*[in]*/ VARIANT Title = vtMissing,
        /*[in]*/ VARIANT CategoryTitle = vtMissing,
        /*[in]*/ VARIANT ValueTitle = vtMissing,
        /*[in]*/ VARIANT ExtraTitle = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_CheckBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary = vtMissing,
        /*[in]*/ VARIANT IgnoreUppercase = vtMissing,
        /*[in]*/ VARIANT AlwaysSuggest = vtMissing,
        /*[in]*/ VARIANT SpellLang = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Column3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Corners (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Corners * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance Size,
        /*[in]*/ VARIANT ContainsPICT = vtMissing,
        /*[in]*/ VARIANT ContainsBIFF = vtMissing,
        /*[in]*/ VARIANT ContainsRTF = vtMissing,
        /*[in]*/ VARIANT ContainsVALU = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DataTable (
        /*[out,retval]*/ struct DataTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DepthPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Deselect (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayBlanksAs * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayBlanksAs (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayBlanksAs RHS ) = 0;
      virtual HRESULT __stdcall raw_DoughnutGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Drawings (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DrawingObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DropDowns (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Elevation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Floor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Floor * * RHS ) = 0;
      virtual HRESULT __stdcall get_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_GapDepth (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GroupObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HasAxis (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2 = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HasDataTable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasDataTable (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasLegend (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasTitle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_HeightPercent (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Labels (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Legend (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Legend * * RHS ) = 0;
      virtual HRESULT __stdcall get_Line3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_LineGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Lines (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Location (
        /*[in]*/ enum XlChartLocation Where,
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OLEObjects (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OptionButtons (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ovals (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Paste (
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Pictures (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Pie3DGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PieGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotArea (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct PlotArea * * RHS ) = 0;
      virtual HRESULT __stdcall get_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotVisibleOnly (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_RadarGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Rectangles (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RightAngleAxes (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ScrollBars (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SeriesCollection (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SizeWithWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Spinners (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_SubType (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SubType (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_SurfaceGroup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct ChartGroup * * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextBoxes (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ChartType (
        /*[out,retval]*/ enum XlChartType * RHS ) = 0;
      virtual HRESULT __stdcall put_ChartType (
        /*[in]*/ enum XlChartType RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyCustomType (
        /*[in]*/ enum XlChartType ChartType,
        /*[in]*/ VARIANT TypeName = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Walls (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Walls * * RHS ) = 0;
      virtual HRESULT __stdcall get_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_WallsAndGridlines2D (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_XYGroups (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BarShape (
        /*[out,retval]*/ enum XlBarShape * RHS ) = 0;
      virtual HRESULT __stdcall put_BarShape (
        /*[in]*/ enum XlBarShape RHS ) = 0;
      virtual HRESULT __stdcall get_PlotBy (
        /*[out,retval]*/ enum XlRowCol * RHS ) = 0;
      virtual HRESULT __stdcall put_PlotBy (
        /*[in]*/ enum XlRowCol RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyChartBuild ( ) = 0;
      virtual HRESULT __stdcall get_ProtectFormatting (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectFormatting (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectGoalSeek (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectGoalSeek (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_GetChartElement (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long * ElementID,
        /*[in]*/ long * Arg1,
        /*[in]*/ long * Arg2 ) = 0;
      virtual HRESULT __stdcall raw_SetSourceData (
        /*[in]*/ struct Range * Source,
        /*[in]*/ VARIANT PlotBy = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Export (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FilterName,
        /*[in]*/ VARIANT Interactive,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_PivotLayout (
        /*[out,retval]*/ struct PivotLayout * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasPivotFields (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasPivotFields (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Scripts (
        /*[out,retval]*/ struct Office::Scripts * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Tab (
        /*[out,retval]*/ struct Tab * * RHS ) = 0;
      virtual HRESULT __stdcall get_MailEnvelope (
        /*[out,retval]*/ struct Office::IMsoEnvelopeVB * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyDataLabels (
        /*[in]*/ enum XlDataLabelsType Type,
        /*[in]*/ VARIANT LegendKey = vtMissing,
        /*[in]*/ VARIANT AutoText = vtMissing,
        /*[in]*/ VARIANT HasLeaderLines = vtMissing,
        /*[in]*/ VARIANT ShowSeriesName = vtMissing,
        /*[in]*/ VARIANT ShowCategoryName = vtMissing,
        /*[in]*/ VARIANT ShowValue = vtMissing,
        /*[in]*/ VARIANT ShowPercentage = vtMissing,
        /*[in]*/ VARIANT ShowBubbleSize = vtMissing,
        /*[in]*/ VARIANT Separator = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DrawingObjects = vtMissing,
        /*[in]*/ VARIANT Contents = vtMissing,
        /*[in]*/ VARIANT Scenarios = vtMissing,
        /*[in]*/ VARIANT UserInterfaceOnly = vtMissing ) = 0;
};

struct __declspec(uuid("000208da-0000-0000-c000-000000000046"))
_Workbook : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_CodeName,put=Put_CodeName))
    _bstr_t _CodeName;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title[];
    __declspec(property(get=GetContainer))
    IDispatchPtr Container;
    __declspec(property(get=GetDate1904,put=PutDate1904))
    VARIANT_BOOL Date1904[];
    __declspec(property(get=GetDisplayDrawingObjects,put=PutDisplayDrawingObjects))
    enum XlDisplayDrawingObjects DisplayDrawingObjects[];
    __declspec(property(get=GetPrecisionAsDisplayed,put=PutPrecisionAsDisplayed))
    VARIANT_BOOL PrecisionAsDisplayed[];
    __declspec(property(get=GetSaveLinkValues,put=PutSaveLinkValues))
    VARIANT_BOOL SaveLinkValues[];
    __declspec(property(get=GetUpdateRemoteReferences,put=PutUpdateRemoteReferences))
    VARIANT_BOOL UpdateRemoteReferences[];
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetReadOnlyRecommended,put=PutReadOnlyRecommended))
    VARIANT_BOOL ReadOnlyRecommended;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetPublishObjects))
    PublishObjectsPtr PublishObjects;
    __declspec(property(get=GetWebOptions))
    WebOptionsPtr WebOptions;
    __declspec(property(get=GetHTMLProject))
    Office::HTMLProjectPtr HTMLProject;
    __declspec(property(get=GetEnvelopeVisible,put=PutEnvelopeVisible))
    VARIANT_BOOL EnvelopeVisible;
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetVBASigned))
    VARIANT_BOOL VBASigned;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetAcceptLabelsInFormulas,put=PutAcceptLabelsInFormulas))
    VARIANT_BOOL AcceptLabelsInFormulas;
    __declspec(property(get=GetAutoUpdateFrequency,put=PutAutoUpdateFrequency))
    long AutoUpdateFrequency;
    __declspec(property(get=GetAutoUpdateSaveChanges,put=PutAutoUpdateSaveChanges))
    VARIANT_BOOL AutoUpdateSaveChanges;
    __declspec(property(get=GetChangeHistoryDuration,put=PutChangeHistoryDuration))
    long ChangeHistoryDuration;
    __declspec(property(get=GetIsAddin,put=PutIsAddin))
    VARIANT_BOOL IsAddin;
    __declspec(property(get=GetPersonalViewListSettings,put=PutPersonalViewListSettings))
    VARIANT_BOOL PersonalViewListSettings;
    __declspec(property(get=GetPersonalViewPrintSettings,put=PutPersonalViewPrintSettings))
    VARIANT_BOOL PersonalViewPrintSettings;
    __declspec(property(get=GetShowPivotTableFieldList,put=PutShowPivotTableFieldList))
    VARIANT_BOOL ShowPivotTableFieldList;
    __declspec(property(get=GetEnableAutoRecover,put=PutEnableAutoRecover))
    VARIANT_BOOL EnableAutoRecover;
    __declspec(property(get=GetCustomViews))
    CustomViewsPtr CustomViews;
    __declspec(property(get=GetTemplateRemoveExtData,put=PutTemplateRemoveExtData))
    VARIANT_BOOL TemplateRemoveExtData;
    __declspec(property(get=GetUpdateLinks,put=PutUpdateLinks))
    enum XlUpdateLinks UpdateLinks;
    __declspec(property(get=GetRemovePersonalInformation,put=PutRemovePersonalInformation))
    VARIANT_BOOL RemovePersonalInformation;
    __declspec(property(get=GetHighlightChangesOnScreen,put=PutHighlightChangesOnScreen))
    VARIANT_BOOL HighlightChangesOnScreen;
    __declspec(property(get=GetKeepChangeHistory,put=PutKeepChangeHistory))
    VARIANT_BOOL KeepChangeHistory;
    __declspec(property(get=GetListChangesOnNewSheet,put=PutListChangesOnNewSheet))
    VARIANT_BOOL ListChangesOnNewSheet;
    __declspec(property(get=GetPasswordEncryptionProvider))
    _bstr_t PasswordEncryptionProvider;
    __declspec(property(get=GetPasswordEncryptionAlgorithm))
    _bstr_t PasswordEncryptionAlgorithm;
    __declspec(property(get=GetPasswordEncryptionKeyLength))
    long PasswordEncryptionKeyLength;
    __declspec(property(get=GetPasswordEncryptionFileProperties))
    VARIANT_BOOL PasswordEncryptionFileProperties;
    __declspec(property(get=GetSmartTagOptions))
    SmartTagOptionsPtr SmartTagOptions;
    __declspec(property(get=GetVBProject))
    VBE6::_VBProjectPtr VBProject;
    __declspec(property(get=GetPermission))
    Office::PermissionPtr Permission;
    __declspec(property(get=GetSharedWorkspace))
    Office::SharedWorkspacePtr SharedWorkspace;
    __declspec(property(get=GetSync))
    Office::SyncPtr Sync;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetXmlNamespaces))
    XmlNamespacesPtr XmlNamespaces;
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetHasPassword))
    VARIANT_BOOL HasPassword[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetXmlMaps))
    XmlMapsPtr XmlMaps;
    __declspec(property(get=GetSmartDocument))
    Office::SmartDocumentPtr SmartDocument;
    __declspec(property(get=GetDocumentLibraryVersions))
    Office::DocumentLibraryVersionsPtr DocumentLibraryVersions;
    __declspec(property(get=GetProtectWindows))
    VARIANT_BOOL ProtectWindows;
    __declspec(property(get=GetReadOnly))
    VARIANT_BOOL ReadOnly[];
    __declspec(property(get=Get_ReadOnlyRecommended))
    VARIANT_BOOL _ReadOnlyRecommended[];
    __declspec(property(get=GetSaved,put=PutSaved))
    VARIANT_BOOL Saved[];
    __declspec(property(get=GetWriteReserved))
    VARIANT_BOOL WriteReserved[];
    __declspec(property(get=GetWriteReservedBy))
    _bstr_t WriteReservedBy[];
    __declspec(property(get=GetStyles))
    StylesPtr Styles;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetColors,put=PutColors))
    _variant_t Colors[][];
    __declspec(property(get=GetCreateBackup))
    VARIANT_BOOL CreateBackup[];
    __declspec(property(get=GetFileFormat))
    enum XlFileFormat FileFormat[];
    __declspec(property(get=GetFullName))
    _bstr_t FullName[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetInactiveListBorderVisible,put=PutInactiveListBorderVisible))
    VARIANT_BOOL InactiveListBorderVisible;
    __declspec(property(get=GetDisplayInkComments,put=PutDisplayInkComments))
    VARIANT_BOOL DisplayInkComments;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetWritePassword,put=PutWritePassword))
    _bstr_t WritePassword;
    __declspec(property(get=GetFullNameURLEncoded))
    _bstr_t FullNameURLEncoded[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRoutingSlip))
    RoutingSlipPtr RoutingSlip;
    __declspec(property(get=GetHasRoutingSlip,put=PutHasRoutingSlip))
    VARIANT_BOOL HasRoutingSlip[];
    __declspec(property(get=GetRouted))
    VARIANT_BOOL Routed[];
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject[];
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author[];
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments[];
    __declspec(property(get=GetMultiUserEditing))
    VARIANT_BOOL MultiUserEditing[];
    __declspec(property(get=GetShowConflictHistory,put=PutShowConflictHistory))
    VARIANT_BOOL ShowConflictHistory[];
    __declspec(property(get=GetRevisionNumber))
    long RevisionNumber[];
    __declspec(property(get=GetUserStatus))
    _variant_t UserStatus[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetConflictResolution,put=PutConflictResolution))
    enum XlSaveConflictResolution ConflictResolution;
    __declspec(property(get=GetBuiltinDocumentProperties))
    IDispatchPtr BuiltinDocumentProperties;
    __declspec(property(get=GetCustomDocumentProperties))
    IDispatchPtr CustomDocumentProperties;
    __declspec(property(get=GetOnSave,put=PutOnSave))
    _bstr_t OnSave[];
    __declspec(property(get=GetCodeName))
    _bstr_t CodeName;
    __declspec(property(get=GetHasMailer,put=PutHasMailer))
    VARIANT_BOOL HasMailer[];
    __declspec(property(get=GetMailer))
    MailerPtr Mailer;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords[];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    SheetsPtr Modules;
    __declspec(property(get=GetIsInplace))
    VARIANT_BOOL IsInplace;
    __declspec(property(get=GetProtectStructure))
    VARIANT_BOOL ProtectStructure;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetAcceptLabelsInFormulas ( );
    void PutAcceptLabelsInFormulas (
        VARIANT_BOOL RHS );
    HRESULT Activate (
        long lcid = 0 );
    _ChartPtr GetActiveChart ( );
    IDispatchPtr GetActiveSheet ( );
    _bstr_t GetAuthor (
        long lcid = 0 );
    void PutAuthor (
        long lcid,
        _bstr_t RHS );
    long GetAutoUpdateFrequency ( );
    void PutAutoUpdateFrequency (
        long RHS );
    VARIANT_BOOL GetAutoUpdateSaveChanges ( );
    void PutAutoUpdateSaveChanges (
        VARIANT_BOOL RHS );
    long GetChangeHistoryDuration ( );
    void PutChangeHistoryDuration (
        long RHS );
    IDispatchPtr GetBuiltinDocumentProperties ( );
    HRESULT ChangeFileAccess (
        enum XlFileAccess Mode,
        const _variant_t & WritePassword = vtMissing,
        const _variant_t & Notify = vtMissing,
        long lcid = 0 );
    HRESULT ChangeLink (
        _bstr_t Name,
        _bstr_t NewName,
        enum XlLinkType Type,
        long lcid = 0 );
    SheetsPtr GetCharts ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        long lcid = 0 );
    _bstr_t GetCodeName ( );
    _bstr_t Get_CodeName ( );
    void Put_CodeName (
        _bstr_t RHS );
    _variant_t GetColors (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    void PutColors (
        const _variant_t & Index,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    Office::_CommandBarsPtr GetCommandBars ( );
    _bstr_t GetComments (
        long lcid = 0 );
    void PutComments (
        long lcid,
        _bstr_t RHS );
    enum XlSaveConflictResolution GetConflictResolution ( );
    void PutConflictResolution (
        enum XlSaveConflictResolution RHS );
    IDispatchPtr GetContainer ( );
    VARIANT_BOOL GetCreateBackup (
        long lcid = 0 );
    IDispatchPtr GetCustomDocumentProperties ( );
    VARIANT_BOOL GetDate1904 (
        long lcid = 0 );
    void PutDate1904 (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DeleteNumberFormat (
        _bstr_t NumberFormat,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    enum XlDisplayDrawingObjects GetDisplayDrawingObjects (
        long lcid = 0 );
    void PutDisplayDrawingObjects (
        long lcid,
        enum XlDisplayDrawingObjects RHS );
    VARIANT_BOOL ExclusiveAccess (
        long lcid = 0 );
    enum XlFileFormat GetFileFormat (
        long lcid = 0 );
    HRESULT ForwardMailer (
        long lcid = 0 );
    _bstr_t GetFullName (
        long lcid = 0 );
    VARIANT_BOOL GetHasMailer (
        long lcid = 0 );
    void PutHasMailer (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetHasPassword (
        long lcid = 0 );
    VARIANT_BOOL GetHasRoutingSlip (
        long lcid = 0 );
    void PutHasRoutingSlip (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetIsAddin ( );
    void PutIsAddin (
        VARIANT_BOOL RHS );
    _bstr_t GetKeywords (
        long lcid = 0 );
    void PutKeywords (
        long lcid,
        _bstr_t RHS );
    _variant_t LinkInfo (
        _bstr_t Name,
        enum XlLinkInfo LinkInfo,
        const _variant_t & Type = vtMissing,
        const _variant_t & EditionRef = vtMissing,
        long lcid = 0 );
    _variant_t LinkSources (
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    MailerPtr GetMailer ( );
    HRESULT MergeWorkbook (
        const _variant_t & Filename );
    SheetsPtr GetModules ( );
    VARIANT_BOOL GetMultiUserEditing (
        long lcid = 0 );
    _bstr_t GetName ( );
    NamesPtr GetNames ( );
    WindowPtr NewWindow (
        long lcid = 0 );
    _bstr_t GetOnSave (
        long lcid = 0 );
    void PutOnSave (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OpenLinks (
        _bstr_t Name,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    VARIANT_BOOL GetPersonalViewListSettings ( );
    void PutPersonalViewListSettings (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPersonalViewPrintSettings ( );
    void PutPersonalViewPrintSettings (
        VARIANT_BOOL RHS );
    PivotCachesPtr PivotCaches ( );
    HRESULT Post (
        const _variant_t & DestName = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPrecisionAsDisplayed (
        long lcid = 0 );
    void PutPrecisionAsDisplayed (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT _Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    HRESULT ProtectSharing (
        const _variant_t & Filename = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & SharingPassword = vtMissing );
    VARIANT_BOOL GetProtectStructure ( );
    VARIANT_BOOL GetProtectWindows ( );
    VARIANT_BOOL GetReadOnly (
        long lcid = 0 );
    VARIANT_BOOL Get_ReadOnlyRecommended (
        long lcid = 0 );
    HRESULT RefreshAll ( );
    HRESULT Reply (
        long lcid = 0 );
    HRESULT ReplyAll (
        long lcid = 0 );
    HRESULT RemoveUser (
        long Index );
    long GetRevisionNumber (
        long lcid = 0 );
    HRESULT Route (
        long lcid = 0 );
    VARIANT_BOOL GetRouted (
        long lcid = 0 );
    RoutingSlipPtr GetRoutingSlip ( );
    HRESULT RunAutoMacros (
        enum XlRunAutoMacro Which,
        long lcid = 0 );
    HRESULT Save (
        long lcid = 0 );
    HRESULT _SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    HRESULT SaveCopyAs (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetSaved (
        long lcid = 0 );
    void PutSaved (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetSaveLinkValues (
        long lcid = 0 );
    void PutSaveLinkValues (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SendMail (
        const _variant_t & Recipients,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing,
        long lcid = 0 );
    HRESULT SendMailer (
        const _variant_t & FileFormat,
        enum XlPriority Priority,
        long lcid = 0 );
    HRESULT SetLinkOnData (
        _bstr_t Name,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    VARIANT_BOOL GetShowConflictHistory (
        long lcid = 0 );
    void PutShowConflictHistory (
        long lcid,
        VARIANT_BOOL RHS );
    StylesPtr GetStyles ( );
    _bstr_t GetSubject (
        long lcid = 0 );
    void PutSubject (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetTitle (
        long lcid = 0 );
    void PutTitle (
        long lcid,
        _bstr_t RHS );
    HRESULT Unprotect (
        const _variant_t & Password = vtMissing,
        long lcid = 0 );
    HRESULT UnprotectSharing (
        const _variant_t & SharingPassword = vtMissing );
    HRESULT UpdateFromFile (
        long lcid = 0 );
    HRESULT UpdateLink (
        const _variant_t & Name = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetUpdateRemoteReferences (
        long lcid = 0 );
    void PutUpdateRemoteReferences (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _variant_t GetUserStatus (
        long lcid = 0 );
    CustomViewsPtr GetCustomViews ( );
    WindowsPtr GetWindows ( );
    SheetsPtr GetWorksheets ( );
    VARIANT_BOOL GetWriteReserved (
        long lcid = 0 );
    _bstr_t GetWriteReservedBy (
        long lcid = 0 );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    VARIANT_BOOL GetTemplateRemoveExtData ( );
    void PutTemplateRemoveExtData (
        VARIANT_BOOL RHS );
    HRESULT HighlightChangesOptions (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    VARIANT_BOOL GetHighlightChangesOnScreen ( );
    void PutHighlightChangesOnScreen (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetKeepChangeHistory ( );
    void PutKeepChangeHistory (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetListChangesOnNewSheet ( );
    void PutListChangesOnNewSheet (
        VARIANT_BOOL RHS );
    HRESULT PurgeChangeHistoryNow (
        long Days,
        const _variant_t & SharingPassword = vtMissing );
    HRESULT AcceptAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT RejectAllChanges (
        const _variant_t & When = vtMissing,
        const _variant_t & Who = vtMissing,
        const _variant_t & Where = vtMissing );
    HRESULT PivotTableWizard (
        const _variant_t & SourceType = vtMissing,
        const _variant_t & SourceData = vtMissing,
        const _variant_t & TableDestination = vtMissing,
        const _variant_t & TableName = vtMissing,
        const _variant_t & RowGrand = vtMissing,
        const _variant_t & ColumnGrand = vtMissing,
        const _variant_t & SaveData = vtMissing,
        const _variant_t & HasAutoFormat = vtMissing,
        const _variant_t & AutoPage = vtMissing,
        const _variant_t & Reserved = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & OptimizeCache = vtMissing,
        const _variant_t & PageFieldOrder = vtMissing,
        const _variant_t & PageFieldWrapCount = vtMissing,
        const _variant_t & ReadData = vtMissing,
        const _variant_t & Connection = vtMissing,
        long lcid = 0 );
    HRESULT ResetColors ( );
    VBE6::_VBProjectPtr GetVBProject ( );
    HRESULT FollowHyperlink (
        _bstr_t Address,
        const _variant_t & SubAddress = vtMissing,
        const _variant_t & NewWindow = vtMissing,
        const _variant_t & AddHistory = vtMissing,
        const _variant_t & ExtraInfo = vtMissing,
        const _variant_t & Method = vtMissing,
        const _variant_t & HeaderInfo = vtMissing );
    HRESULT AddToFavorites ( );
    VARIANT_BOOL GetIsInplace ( );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );
    HRESULT WebPagePreview ( );
    PublishObjectsPtr GetPublishObjects ( );
    WebOptionsPtr GetWebOptions ( );
    HRESULT ReloadAs (
        enum Office::MsoEncoding Encoding );
    Office::HTMLProjectPtr GetHTMLProject ( );
    VARIANT_BOOL GetEnvelopeVisible ( );
    void PutEnvelopeVisible (
        VARIANT_BOOL RHS );
    long GetCalculationVersion ( );
    HRESULT Dummy17 (
        long calcid );
    HRESULT sblt (
        _bstr_t s );
    VARIANT_BOOL GetVBASigned ( );
    VARIANT_BOOL GetShowPivotTableFieldList ( );
    void PutShowPivotTableFieldList (
        VARIANT_BOOL RHS );
    enum XlUpdateLinks GetUpdateLinks ( );
    void PutUpdateLinks (
        enum XlUpdateLinks RHS );
    HRESULT BreakLink (
        _bstr_t Name,
        enum XlLinkType Type );
    HRESULT Dummy16 ( );
    HRESULT SaveAs (
        const _variant_t & Filename,
        const _variant_t & FileFormat,
        const _variant_t & Password,
        const _variant_t & WriteResPassword,
        const _variant_t & ReadOnlyRecommended,
        const _variant_t & CreateBackup,
        enum XlSaveAsAccessMode AccessMode,
        const _variant_t & ConflictResolution = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & TextCodepage = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableAutoRecover ( );
    void PutEnableAutoRecover (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRemovePersonalInformation ( );
    void PutRemovePersonalInformation (
        VARIANT_BOOL RHS );
    _bstr_t GetFullNameURLEncoded (
        long lcid = 0 );
    HRESULT CheckIn (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Comments = vtMissing,
        const _variant_t & MakePublic = vtMissing );
    VARIANT_BOOL CanCheckIn ( );
    HRESULT SendForReview (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ShowMessage = vtMissing,
        const _variant_t & IncludeAttachment = vtMissing );
    HRESULT ReplyWithChanges (
        const _variant_t & ShowMessage = vtMissing );
    HRESULT EndReview ( );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t RHS );
    _bstr_t GetWritePassword ( );
    void PutWritePassword (
        _bstr_t RHS );
    _bstr_t GetPasswordEncryptionProvider ( );
    _bstr_t GetPasswordEncryptionAlgorithm ( );
    long GetPasswordEncryptionKeyLength ( );
    HRESULT SetPasswordEncryptionOptions (
        const _variant_t & PasswordEncryptionProvider = vtMissing,
        const _variant_t & PasswordEncryptionAlgorithm = vtMissing,
        const _variant_t & PasswordEncryptionKeyLength = vtMissing,
        const _variant_t & PasswordEncryptionFileProperties = vtMissing );
    VARIANT_BOOL GetPasswordEncryptionFileProperties ( );
    VARIANT_BOOL GetReadOnlyRecommended ( );
    void PutReadOnlyRecommended (
        VARIANT_BOOL RHS );
    HRESULT Protect (
        const _variant_t & Password = vtMissing,
        const _variant_t & Structure = vtMissing,
        const _variant_t & Windows = vtMissing );
    SmartTagOptionsPtr GetSmartTagOptions ( );
    HRESULT RecheckSmartTags ( );
    Office::PermissionPtr GetPermission ( );
    Office::SharedWorkspacePtr GetSharedWorkspace ( );
    Office::SyncPtr GetSync ( );
    HRESULT SendFaxOverInternet (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ShowMessage = vtMissing );
    XmlNamespacesPtr GetXmlNamespaces ( );
    XmlMapsPtr GetXmlMaps ( );
    enum XlXmlImportResult XmlImport (
        _bstr_t Url,
        struct XmlMap * * ImportMap,
        const _variant_t & Overwrite = vtMissing,
        const _variant_t & Destination = vtMissing );
    Office::SmartDocumentPtr GetSmartDocument ( );
    Office::DocumentLibraryVersionsPtr GetDocumentLibraryVersions ( );
    VARIANT_BOOL GetInactiveListBorderVisible ( );
    void PutInactiveListBorderVisible (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInkComments ( );
    void PutDisplayInkComments (
        VARIANT_BOOL RHS );
    enum XlXmlImportResult XmlImportXml (
        _bstr_t Data,
        struct XmlMap * * ImportMap,
        const _variant_t & Overwrite = vtMissing,
        const _variant_t & Destination = vtMissing );
    HRESULT SaveAsXMLData (
        _bstr_t Filename,
        struct XmlMap * Map );
    HRESULT ToggleFormsDesign ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_AcceptLabelsInFormulas (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AcceptLabelsInFormulas (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateFrequency (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateFrequency (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_AutoUpdateSaveChanges (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoUpdateSaveChanges (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ChangeHistoryDuration (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ChangeHistoryDuration (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_BuiltinDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ChangeFileAccess (
        /*[in]*/ enum XlFileAccess Mode,
        /*[in]*/ VARIANT WritePassword = vtMissing,
        /*[in]*/ VARIANT Notify = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ChangeLink (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR NewName,
        /*[in]*/ enum XlLinkType Type,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get__CodeName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put__CodeName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Colors (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ConflictResolution (
        /*[out,retval]*/ enum XlSaveConflictResolution * RHS ) = 0;
      virtual HRESULT __stdcall put_ConflictResolution (
        /*[in]*/ enum XlSaveConflictResolution RHS ) = 0;
      virtual HRESULT __stdcall get_Container (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_CreateBackup (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomDocumentProperties (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Date1904 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteNumberFormat (
        /*[in]*/ BSTR NumberFormat,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDisplayDrawingObjects * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayDrawingObjects (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDisplayDrawingObjects RHS ) = 0;
      virtual HRESULT __stdcall raw_ExclusiveAccess (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFormat (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall raw_ForwardMailer (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasMailer (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_HasPassword (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HasRoutingSlip (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_IsAddin (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IsAddin (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkInfo (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlLinkInfo LinkInfo,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT EditionRef,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_LinkSources (
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Mailer (
        /*[out,retval]*/ struct Mailer * * RHS ) = 0;
      virtual HRESULT __stdcall raw_MergeWorkbook (
        /*[in]*/ VARIANT Filename ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_MultiUserEditing (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenLinks (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT ReadOnly = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewListSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewListSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PersonalViewPrintSettings (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PersonalViewPrintSettings (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PivotCaches (
        /*[out,retval]*/ struct PivotCaches * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Post (
        /*[in]*/ VARIANT DestName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrecisionAsDisplayed (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT Structure = vtMissing,
        /*[in]*/ VARIANT Windows = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ProtectSharing (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT WriteResPassword = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ProtectStructure (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectWindows (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get__ReadOnlyRecommended (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_RefreshAll ( ) = 0;
      virtual HRESULT __stdcall raw_Reply (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ReplyAll (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_RevisionNumber (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Route (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Routed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_RoutingSlip (
        /*[out,retval]*/ struct RoutingSlip * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RunAutoMacros (
        /*[in]*/ enum XlRunAutoMacro Which,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__SaveAs (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT ReadOnlyRecommended,
        /*[in]*/ VARIANT CreateBackup,
        /*[in]*/ enum XlSaveAsAccessMode AccessMode,
        /*[in]*/ VARIANT ConflictResolution = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Saved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Saved (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_SaveLinkValues (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SendMail (
        /*[in]*/ VARIANT Recipients,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ReturnReceipt = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SendMailer (
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ enum XlPriority Priority,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SetLinkOnData (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowConflictHistory (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Styles (
        /*[out,retval]*/ struct Styles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_Unprotect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UnprotectSharing (
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UpdateFromFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_UpdateLink (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Type = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateRemoteReferences (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserStatus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CustomViews (
        /*[out,retval]*/ struct CustomViews * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReserved (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WriteReservedBy (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_TemplateRemoveExtData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TemplateRemoveExtData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_HighlightChangesOptions (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall get_HighlightChangesOnScreen (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_HighlightChangesOnScreen (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_KeepChangeHistory (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_KeepChangeHistory (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ListChangesOnNewSheet (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ListChangesOnNewSheet (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_PurgeChangeHistoryNow (
        /*[in]*/ long Days,
        /*[in]*/ VARIANT SharingPassword = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AcceptAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RejectAllChanges (
        /*[in]*/ VARIANT When = vtMissing,
        /*[in]*/ VARIANT Who = vtMissing,
        /*[in]*/ VARIANT Where = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PivotTableWizard (
        /*[in]*/ VARIANT SourceType = vtMissing,
        /*[in]*/ VARIANT SourceData = vtMissing,
        /*[in]*/ VARIANT TableDestination = vtMissing,
        /*[in]*/ VARIANT TableName = vtMissing,
        /*[in]*/ VARIANT RowGrand = vtMissing,
        /*[in]*/ VARIANT ColumnGrand = vtMissing,
        /*[in]*/ VARIANT SaveData = vtMissing,
        /*[in]*/ VARIANT HasAutoFormat = vtMissing,
        /*[in]*/ VARIANT AutoPage = vtMissing,
        /*[in]*/ VARIANT Reserved = vtMissing,
        /*[in]*/ VARIANT BackgroundQuery = vtMissing,
        /*[in]*/ VARIANT OptimizeCache = vtMissing,
        /*[in]*/ VARIANT PageFieldOrder = vtMissing,
        /*[in]*/ VARIANT PageFieldWrapCount = vtMissing,
        /*[in]*/ VARIANT ReadData = vtMissing,
        /*[in]*/ VARIANT Connection = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetColors ( ) = 0;
      virtual HRESULT __stdcall get_VBProject (
        /*[out,retval]*/ struct VBE6::_VBProject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FollowHyperlink (
        /*[in]*/ BSTR Address,
        /*[in]*/ VARIANT SubAddress = vtMissing,
        /*[in]*/ VARIANT NewWindow = vtMissing,
        /*[in]*/ VARIANT AddHistory = vtMissing,
        /*[in]*/ VARIANT ExtraInfo = vtMissing,
        /*[in]*/ VARIANT Method = vtMissing,
        /*[in]*/ VARIANT HeaderInfo = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AddToFavorites ( ) = 0;
      virtual HRESULT __stdcall get_IsInplace (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_WebPagePreview ( ) = 0;
      virtual HRESULT __stdcall get_PublishObjects (
        /*[out,retval]*/ struct PublishObjects * * RHS ) = 0;
      virtual HRESULT __stdcall get_WebOptions (
        /*[out,retval]*/ struct WebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ReloadAs (
        /*[in]*/ enum Office::MsoEncoding Encoding ) = 0;
      virtual HRESULT __stdcall get_HTMLProject (
        /*[out,retval]*/ struct Office::HTMLProject * * RHS ) = 0;
      virtual HRESULT __stdcall get_EnvelopeVisible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnvelopeVisible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy17 (
        /*[in]*/ long calcid ) = 0;
      virtual HRESULT __stdcall raw_sblt (
        /*[in]*/ BSTR s ) = 0;
      virtual HRESULT __stdcall get_VBASigned (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowPivotTableFieldList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowPivotTableFieldList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UpdateLinks (
        /*[out,retval]*/ enum XlUpdateLinks * RHS ) = 0;
      virtual HRESULT __stdcall put_UpdateLinks (
        /*[in]*/ enum XlUpdateLinks RHS ) = 0;
      virtual HRESULT __stdcall raw_BreakLink (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum XlLinkType Type ) = 0;
      virtual HRESULT __stdcall raw_Dummy16 ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT FileFormat,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT ReadOnlyRecommended,
        /*[in]*/ VARIANT CreateBackup,
        /*[in]*/ enum XlSaveAsAccessMode AccessMode,
        /*[in]*/ VARIANT ConflictResolution = vtMissing,
        /*[in]*/ VARIANT AddToMru = vtMissing,
        /*[in]*/ VARIANT TextCodepage = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EnableAutoRecover (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoRecover (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RemovePersonalInformation (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RemovePersonalInformation (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FullNameURLEncoded (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckIn (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Comments = vtMissing,
        /*[in]*/ VARIANT MakePublic = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CanCheckIn (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendForReview (
        /*[in]*/ VARIANT Recipients = vtMissing,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ShowMessage = vtMissing,
        /*[in]*/ VARIANT IncludeAttachment = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ReplyWithChanges (
        /*[in]*/ VARIANT ShowMessage = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_EndReview ( ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_WritePassword (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_WritePassword (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionProvider (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionAlgorithm (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionKeyLength (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetPasswordEncryptionOptions (
        /*[in]*/ VARIANT PasswordEncryptionProvider = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionAlgorithm = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionKeyLength = vtMissing,
        /*[in]*/ VARIANT PasswordEncryptionFileProperties = vtMissing ) = 0;
      virtual HRESULT __stdcall get_PasswordEncryptionFileProperties (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadOnlyRecommended (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadOnlyRecommended (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Protect (
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT Structure = vtMissing,
        /*[in]*/ VARIANT Windows = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SmartTagOptions (
        /*[out,retval]*/ struct SmartTagOptions * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RecheckSmartTags ( ) = 0;
      virtual HRESULT __stdcall get_Permission (
        /*[out,retval]*/ struct Office::Permission * * RHS ) = 0;
      virtual HRESULT __stdcall get_SharedWorkspace (
        /*[out,retval]*/ struct Office::SharedWorkspace * * RHS ) = 0;
      virtual HRESULT __stdcall get_Sync (
        /*[out,retval]*/ struct Office::Sync * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendFaxOverInternet (
        /*[in]*/ VARIANT Recipients = vtMissing,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ShowMessage = vtMissing ) = 0;
      virtual HRESULT __stdcall get_XmlNamespaces (
        /*[out,retval]*/ struct XmlNamespaces * * RHS ) = 0;
      virtual HRESULT __stdcall get_XmlMaps (
        /*[out,retval]*/ struct XmlMaps * * RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlImport (
        /*[in]*/ BSTR Url,
        /*[out]*/ struct XmlMap * * ImportMap,
        /*[in]*/ VARIANT Overwrite,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartDocument (
        /*[out,retval]*/ struct Office::SmartDocument * * RHS ) = 0;
      virtual HRESULT __stdcall get_DocumentLibraryVersions (
        /*[out,retval]*/ struct Office::DocumentLibraryVersions * * RHS ) = 0;
      virtual HRESULT __stdcall get_InactiveListBorderVisible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_InactiveListBorderVisible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInkComments (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInkComments (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_XmlImportXml (
        /*[in]*/ BSTR Data,
        /*[out]*/ struct XmlMap * * ImportMap,
        /*[in]*/ VARIANT Overwrite,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ enum XlXmlImportResult * RHS ) = 0;
      virtual HRESULT __stdcall raw_SaveAsXMLData (
        /*[in]*/ BSTR Filename,
        /*[in]*/ struct XmlMap * Map ) = 0;
      virtual HRESULT __stdcall raw_ToggleFormsDesign ( ) = 0;
};

struct __declspec(uuid("0002086d-0001-0000-c000-000000000046"))
ICharts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    IDispatchPtr _Default[];
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetHPageBreaks))
    HPageBreaksPtr HPageBreaks;
    __declspec(property(get=GetVPageBreaks))
    VPageBreaksPtr VPageBreaks;
    __declspec(property(get=GetVisible,put=PutVisible))
    _variant_t Visible[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _ChartPtr Add (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        const _variant_t & Count = vtMissing );
    HRESULT Copy (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    long GetCount ( );
    HRESULT Delete (
        long lcid = 0 );
    IDispatchPtr GetItem (
        const _variant_t & Index );
    HRESULT Move (
        const _variant_t & Before = vtMissing,
        const _variant_t & After = vtMissing,
        long lcid = 0 );
    IUnknownPtr Get_NewEnum ( );
    HRESULT _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        long lcid = 0 );
    HRESULT PrintPreview (
        const _variant_t & EnableChanges = vtMissing,
        long lcid = 0 );
    HRESULT Select (
        const _variant_t & Replace = vtMissing,
        long lcid = 0 );
    HPageBreaksPtr GetHPageBreaks ( );
    VPageBreaksPtr GetVPageBreaks ( );
    _variant_t GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        const _variant_t & RHS );
    IDispatchPtr Get_Default (
        const _variant_t & Index );
    HRESULT PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing,
        long lcid = 0 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT Count,
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual void __stdcall _Dummy7 ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ VARIANT Before = vtMissing,
        /*[in]*/ VARIANT After = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_HPageBreaks (
        /*[out,retval]*/ struct HPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_VPageBreaks (
        /*[out,retval]*/ struct VPageBreaks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From = vtMissing,
        /*[in]*/ VARIANT To = vtMissing,
        /*[in]*/ VARIANT Copies = vtMissing,
        /*[in]*/ VARIANT Preview = vtMissing,
        /*[in]*/ VARIANT ActivePrinter = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing,
        /*[in]*/ VARIANT PrToFileName = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
};

struct __declspec(uuid("000208cf-0001-0000-c000-000000000046"))
IChartObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetRoundedCorners,put=PutRoundedCorners))
    VARIANT_BOOL RoundedCorners;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetChart))
    _ChartPtr Chart;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetProtectChartObject,put=PutProtectChartObject))
    VARIANT_BOOL ProtectChartObject;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;
    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    RangePtr GetBottomRightCell ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    long GetIndex ( );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    RangePtr GetTopLeftCell ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    _variant_t Activate ( );
    _ChartPtr GetChart ( );
    VARIANT_BOOL GetProtectChartObject ( );
    void PutProtectChartObject (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetRoundedCorners ( );
    void PutRoundedCorners (
        VARIANT_BOOL RHS );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Chart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProtectChartObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ProtectChartObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_RoundedCorners (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RoundedCorners (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
};

struct __declspec(uuid("00020820-0000-0000-c000-000000000046"))
Worksheet;
    // [ default ] interface _Worksheet
    // [ default, source ] dispinterface DocEvents

struct __declspec(uuid("00020846-0001-0000-c000-000000000046"))
IRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default,put=Put_Default))
    _variant_t _Default[][][];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPivotItem))
    PivotItemPtr PivotItem;
    __declspec(property(get=GetListHeaderRows))
    long ListHeaderRows;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[][];
    __declspec(property(get=GetCharacters))
    CharactersPtr Characters[][];
    __declspec(property(get=GetItem,put=PutItem))
    _variant_t Item[][][];
    __declspec(property(get=GetComment))
    CommentPtr Comment;
    __declspec(property(get=GetAddIndent,put=PutAddIndent))
    _variant_t AddIndent;
    __declspec(property(get=GetSoundNote))
    SoundNotePtr SoundNote;
    __declspec(property(get=GetPhonetics))
    PhoneticsPtr Phonetics;
    __declspec(property(get=GetID,put=PutID))
    _bstr_t ID;
    __declspec(property(get=GetListObject))
    ListObjectPtr ListObject;
    __declspec(property(get=GetXPath))
    XPathPtr XPath;
    __declspec(property(get=GetNumberFormat,put=PutNumberFormat))
    _variant_t NumberFormat;
    __declspec(property(get=GetFormulaLabel,put=PutFormulaLabel))
    enum XlFormulaLabel FormulaLabel;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetWorksheet))
    _WorksheetPtr Worksheet;
    __declspec(property(get=GetMergeArea))
    RangePtr MergeArea;
    __declspec(property(get=GetQueryTable))
    _QueryTablePtr QueryTable;
    __declspec(property(get=GetIndentLevel,put=PutIndentLevel))
    _variant_t IndentLevel;
    __declspec(property(get=GetEnd))
    RangePtr End[];
    __declspec(property(get=GetCurrentArray))
    RangePtr CurrentArray;
    __declspec(property(get=GetNext))
    RangePtr Next;
    __declspec(property(get=GetPrevious))
    RangePtr Previous;
    __declspec(property(get=GetPrefixCharacter))
    _variant_t PrefixCharacter;
    __declspec(property(get=GetMergeCells,put=PutMergeCells))
    _variant_t MergeCells;
    __declspec(property(get=GetShrinkToFit,put=PutShrinkToFit))
    _variant_t ShrinkToFit;
    __declspec(property(get=GetNumberFormatLocal,put=PutNumberFormatLocal))
    _variant_t NumberFormatLocal;
    __declspec(property(get=GetValidation))
    ValidationPtr Validation;
    __declspec(property(get=GetValue2,put=PutValue2))
    _variant_t Value2[];
    __declspec(property(get=GetPhonetic))
    PhoneticPtr Phonetic;
    __declspec(property(get=GetFormatConditions))
    FormatConditionsPtr FormatConditions;
    __declspec(property(get=GetHyperlinks))
    HyperlinksPtr Hyperlinks;
    __declspec(property(get=GetReadingOrder,put=PutReadingOrder))
    long ReadingOrder;
    __declspec(property(get=GetAddress))
    _bstr_t Address[][][][][][];
    __declspec(property(get=GetPivotCell))
    PivotCellPtr PivotCell;
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetErrors))
    ErrorsPtr Errors;
    __declspec(property(get=GetColumn))
    long Column;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetColumnWidth,put=PutColumnWidth))
    _variant_t ColumnWidth;
    __declspec(property(get=GetCurrentRegion))
    RangePtr CurrentRegion;
    __declspec(property(get=GetSmartTags))
    SmartTagsPtr SmartTags;
    __declspec(property(get=GetAllowEdit))
    VARIANT_BOOL AllowEdit;
    __declspec(property(get=GetEntireColumn))
    RangePtr EntireColumn;
    __declspec(property(get=GetEntireRow))
    RangePtr EntireRow;
    __declspec(property(get=GetLocationInTable))
    enum XlLocationInTable LocationInTable;
    __declspec(property(get=GetDependents))
    RangePtr Dependents;
    __declspec(property(get=GetPrecedents))
    RangePtr Precedents;
    __declspec(property(get=GetDirectDependents))
    RangePtr DirectDependents;
    __declspec(property(get=GetDirectPrecedents))
    RangePtr DirectPrecedents;
    __declspec(property(get=GetOffset))
    RangePtr Offset[][];
    __declspec(property(get=GetPageBreak,put=PutPageBreak))
    long PageBreak;
    __declspec(property(get=GetResize))
    RangePtr Resize[][];
    __declspec(property(get=GetRow))
    long Row;
    __declspec(property(get=GetName,put=PutName))
    _variant_t Name;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetStyle,put=PutStyle))
    _variant_t Style;
    __declspec(property(get=GetFormula,put=PutFormula))
    _variant_t Formula[];
    __declspec(property(get=GetFormulaHidden,put=PutFormulaHidden))
    _variant_t FormulaHidden;
    __declspec(property(get=GetFormulaLocal,put=PutFormulaLocal))
    _variant_t FormulaLocal;
    __declspec(property(get=GetFormulaR1C1,put=PutFormulaR1C1))
    _variant_t FormulaR1C1[];
    __declspec(property(get=GetFormulaR1C1Local,put=PutFormulaR1C1Local))
    _variant_t FormulaR1C1Local;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetHasArray))
    _variant_t HasArray;
    __declspec(property(get=GetHasFormula))
    _variant_t HasFormula;
    __declspec(property(get=GetHidden,put=PutHidden))
    _variant_t Hidden;
    __declspec(property(get=GetLocked,put=PutLocked))
    _variant_t Locked;
    __declspec(property(get=GetHeight))
    _variant_t Height;
    __declspec(property(get=GetAreas))
    AreasPtr Areas;
    __declspec(property(get=GetOutlineLevel,put=PutOutlineLevel))
    _variant_t OutlineLevel;
    __declspec(property(get=GetTop))
    _variant_t Top;
    __declspec(property(get=GetLeft))
    _variant_t Left;
    __declspec(property(get=GetRowHeight,put=PutRowHeight))
    _variant_t RowHeight;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetPivotTable))
    PivotTablePtr PivotTable;
    __declspec(property(get=GetSummary))
    _variant_t Summary;
    __declspec(property(get=GetUseStandardHeight,put=PutUseStandardHeight))
    _variant_t UseStandardHeight;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    _variant_t Orientation;
    __declspec(property(get=GetUseStandardWidth,put=PutUseStandardWidth))
    _variant_t UseStandardWidth;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    _variant_t HorizontalAlignment;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    _variant_t VerticalAlignment;
    __declspec(property(get=GetText))
    _variant_t Text;
    __declspec(property(get=GetPivotField))
    PivotFieldPtr PivotField;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetShowDetail,put=PutShowDetail))
    _variant_t ShowDetail;
    __declspec(property(get=GetFormulaArray,put=PutFormulaArray))
    _variant_t FormulaArray;
    __declspec(property(get=GetAddressLocal))
    _bstr_t AddressLocal[][][][][];
    __declspec(property(get=GetWidth))
    _variant_t Width;
    __declspec(property(get=GetWrapText,put=PutWrapText))
    _variant_t WrapText;
    __declspec(property(get=GetFont))
    FontPtr Font;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t Activate ( );
    _variant_t GetAddIndent ( );
    void PutAddIndent (
        const _variant_t & RHS );
    _bstr_t GetAddress (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    _bstr_t GetAddressLocal (
        const _variant_t & RowAbsolute,
        const _variant_t & ColumnAbsolute,
        enum XlReferenceStyle ReferenceStyle,
        const _variant_t & External = vtMissing,
        const _variant_t & RelativeTo = vtMissing );
    _variant_t AdvancedFilter (
        enum XlFilterAction Action,
        const _variant_t & CriteriaRange = vtMissing,
        const _variant_t & CopyToRange = vtMissing,
        const _variant_t & Unique = vtMissing );
    _variant_t ApplyNames (
        const _variant_t & Names,
        const _variant_t & IgnoreRelativeAbsolute,
        const _variant_t & UseRowColumnNames,
        const _variant_t & OmitColumn,
        const _variant_t & OmitRow,
        enum XlApplyNamesOrder Order,
        const _variant_t & AppendLast = vtMissing );
    _variant_t ApplyOutlineStyles ( );
    AreasPtr GetAreas ( );
    _bstr_t AutoComplete (
        _bstr_t String );
    _variant_t AutoFill (
        struct Range * Destination,
        enum XlAutoFillType Type );
    _variant_t AutoFilter (
        const _variant_t & Field,
        const _variant_t & Criteria1,
        enum XlAutoFilterOperator Operator,
        const _variant_t & Criteria2 = vtMissing,
        const _variant_t & VisibleDropDown = vtMissing );
    _variant_t AutoFit ( );
    _variant_t AutoFormat (
        enum XlRangeAutoFormat Format,
        const _variant_t & Number = vtMissing,
        const _variant_t & Font = vtMissing,
        const _variant_t & Alignment = vtMissing,
        const _variant_t & Border = vtMissing,
        const _variant_t & Pattern = vtMissing,
        const _variant_t & Width = vtMissing );
    _variant_t AutoOutline ( );
    _variant_t BorderAround (
        const _variant_t & LineStyle,
        enum XlBorderWeight Weight,
        enum XlColorIndex ColorIndex,
        const _variant_t & Color = vtMissing );
    BordersPtr GetBorders ( );
    _variant_t Calculate ( );
    RangePtr GetCells ( );
    CharactersPtr GetCharacters (
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t CheckSpelling (
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        const _variant_t & AlwaysSuggest = vtMissing,
        const _variant_t & SpellLang = vtMissing );
    _variant_t Clear ( );
    _variant_t ClearContents ( );
    _variant_t ClearFormats ( );
    _variant_t ClearNotes ( );
    _variant_t ClearOutline ( );
    long GetColumn ( );
    RangePtr ColumnDifferences (
        const _variant_t & Comparison );
    RangePtr GetColumns ( );
    _variant_t GetColumnWidth ( );
    void PutColumnWidth (
        const _variant_t & RHS );
    _variant_t Consolidate (
        const _variant_t & Sources = vtMissing,
        const _variant_t & Function = vtMissing,
        const _variant_t & TopRow = vtMissing,
        const _variant_t & LeftColumn = vtMissing,
        const _variant_t & CreateLinks = vtMissing );
    _variant_t Copy (
        const _variant_t & Destination = vtMissing );
    long CopyFromRecordset (
        IUnknown * Data,
        const _variant_t & MaxRows = vtMissing,
        const _variant_t & MaxColumns = vtMissing );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    long GetCount ( );
    _variant_t CreateNames (
        const _variant_t & Top = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Bottom = vtMissing,
        const _variant_t & Right = vtMissing );
    _variant_t CreatePublisher (
        const _variant_t & Edition,
        enum XlPictureAppearance Appearance,
        const _variant_t & ContainsPICT = vtMissing,
        const _variant_t & ContainsBIFF = vtMissing,
        const _variant_t & ContainsRTF = vtMissing,
        const _variant_t & ContainsVALU = vtMissing );
    RangePtr GetCurrentArray ( );
    RangePtr GetCurrentRegion ( );
    _variant_t Cut (
        const _variant_t & Destination = vtMissing );
    _variant_t DataSeries (
        const _variant_t & Rowcol,
        enum XlDataSeriesType Type,
        enum XlDataSeriesDate Date,
        const _variant_t & Step = vtMissing,
        const _variant_t & Stop = vtMissing,
        const _variant_t & Trend = vtMissing );
    _variant_t Get_Default (
        const _variant_t & RowIndex = vtMissing,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void Put_Default (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Delete (
        const _variant_t & Shift = vtMissing );
    RangePtr GetDependents ( );
    _variant_t DialogBoxEx ( );
    RangePtr GetDirectDependents ( );
    RangePtr GetDirectPrecedents ( );
    _variant_t EditionOptions (
        enum XlEditionType Type,
        enum XlEditionOptionsOption Option,
        const _variant_t & Name,
        const _variant_t & Reference,
        enum XlPictureAppearance Appearance,
        enum XlPictureAppearance ChartSize,
        const _variant_t & Format = vtMissing );
    RangePtr GetEnd (
        enum XlDirection Direction );
    RangePtr GetEntireColumn ( );
    RangePtr GetEntireRow ( );
    _variant_t FillDown ( );
    _variant_t FillLeft ( );
    _variant_t FillRight ( );
    _variant_t FillUp ( );
    RangePtr Find (
        const _variant_t & What,
        const _variant_t & After,
        const _variant_t & LookIn,
        const _variant_t & LookAt,
        const _variant_t & SearchOrder,
        enum XlSearchDirection SearchDirection,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing );
    RangePtr FindNext (
        const _variant_t & After = vtMissing );
    RangePtr FindPrevious (
        const _variant_t & After = vtMissing );
    FontPtr GetFont ( );
    _variant_t GetFormula (
        long lcid = 0 );
    void PutFormula (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaArray ( );
    void PutFormulaArray (
        const _variant_t & RHS );
    enum XlFormulaLabel GetFormulaLabel ( );
    void PutFormulaLabel (
        enum XlFormulaLabel RHS );
    _variant_t GetFormulaHidden ( );
    void PutFormulaHidden (
        const _variant_t & RHS );
    _variant_t GetFormulaLocal ( );
    void PutFormulaLocal (
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1 (
        long lcid = 0 );
    void PutFormulaR1C1 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetFormulaR1C1Local ( );
    void PutFormulaR1C1Local (
        const _variant_t & RHS );
    _variant_t FunctionWizard ( );
    VARIANT_BOOL GoalSeek (
        const _variant_t & Goal,
        struct Range * ChangingCell );
    _variant_t Group (
        const _variant_t & Start = vtMissing,
        const _variant_t & End = vtMissing,
        const _variant_t & By = vtMissing,
        const _variant_t & Periods = vtMissing );
    _variant_t GetHasArray ( );
    _variant_t GetHasFormula ( );
    _variant_t GetHeight ( );
    _variant_t GetHidden ( );
    void PutHidden (
        const _variant_t & RHS );
    _variant_t GetHorizontalAlignment ( );
    void PutHorizontalAlignment (
        const _variant_t & RHS );
    _variant_t GetIndentLevel ( );
    void PutIndentLevel (
        const _variant_t & RHS );
    HRESULT InsertIndent (
        long InsertAmount );
    _variant_t Insert (
        const _variant_t & Shift = vtMissing,
        const _variant_t & CopyOrigin = vtMissing );
    InteriorPtr GetInterior ( );
    _variant_t GetItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex = vtMissing,
        long lcid = 0 );
    void PutItem (
        const _variant_t & RowIndex,
        const _variant_t & ColumnIndex,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t Justify ( );
    _variant_t GetLeft ( );
    long GetListHeaderRows ( );
    _variant_t ListNames ( );
    enum XlLocationInTable GetLocationInTable ( );
    _variant_t GetLocked ( );
    void PutLocked (
        const _variant_t & RHS );
    HRESULT Merge (
        const _variant_t & Across = vtMissing );
    HRESULT UnMerge ( );
    RangePtr GetMergeArea ( );
    _variant_t GetMergeCells ( );
    void PutMergeCells (
        const _variant_t & RHS );
    _variant_t GetName ( );
    void PutName (
        const _variant_t & RHS );
    _variant_t NavigateArrow (
        const _variant_t & TowardPrecedent = vtMissing,
        const _variant_t & ArrowNumber = vtMissing,
        const _variant_t & LinkNumber = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    RangePtr GetNext ( );
    _bstr_t NoteText (
        const _variant_t & Text = vtMissing,
        const _variant_t & Start = vtMissing,
        const _variant_t & Length = vtMissing );
    _variant_t GetNumberFormat ( );
    void PutNumberFormat (
        const _variant_t & RHS );
    _variant_t GetNumberFormatLocal ( );
    void PutNumberFormatLocal (
        const _variant_t & RHS );
    RangePtr GetOffset (
        const _variant_t & RowOffset = vtMissing,
        const _variant_t & ColumnOffset = vtMissing );
    _variant_t GetOrientation ( );
    void PutOrientation (
        const _variant_t & RHS );
    _variant_t GetOutlineLevel ( );
    void PutOutlineLevel (
        const _variant_t & RHS );
    long GetPageBreak ( );
    void PutPageBreak (
        long RHS );
    _variant_t Parse (
        const _variant_t & ParseLine = vtMissing,
        const _variant_t & Destination = vtMissing );
    _variant_t _PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    PivotFieldPtr GetPivotField ( );
    PivotItemPtr GetPivotItem ( );
    PivotTablePtr GetPivotTable ( );
    RangePtr GetPrecedents ( );
    _variant_t GetPrefixCharacter ( );
    RangePtr GetPrevious ( );
    _variant_t _PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing );
    _variant_t PrintPreview (
        const _variant_t & EnableChanges = vtMissing );
    _QueryTablePtr GetQueryTable ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    _variant_t RemoveSubtotal ( );
    VARIANT_BOOL Replace (
        const _variant_t & What,
        const _variant_t & Replacement,
        const _variant_t & LookAt = vtMissing,
        const _variant_t & SearchOrder = vtMissing,
        const _variant_t & MatchCase = vtMissing,
        const _variant_t & MatchByte = vtMissing,
        const _variant_t & SearchFormat = vtMissing,
        const _variant_t & ReplaceFormat = vtMissing );
    RangePtr GetResize (
        const _variant_t & RowSize = vtMissing,
        const _variant_t & ColumnSize = vtMissing );
    long GetRow ( );
    RangePtr RowDifferences (
        const _variant_t & Comparison );
    _variant_t GetRowHeight ( );
    void PutRowHeight (
        const _variant_t & RHS );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t Select ( );
    _variant_t Show ( );
    _variant_t ShowDependents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShowDetail ( );
    void PutShowDetail (
        const _variant_t & RHS );
    _variant_t ShowErrors ( );
    _variant_t ShowPrecedents (
        const _variant_t & Remove = vtMissing );
    _variant_t GetShrinkToFit ( );
    void PutShrinkToFit (
        const _variant_t & RHS );
    _variant_t Sort (
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Key2,
        const _variant_t & Type,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortMethod SortMethod,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    _variant_t SortSpecial (
        enum XlSortMethod SortMethod,
        const _variant_t & Key1,
        enum XlSortOrder Order1,
        const _variant_t & Type,
        const _variant_t & Key2,
        enum XlSortOrder Order2,
        const _variant_t & Key3,
        enum XlSortOrder Order3,
        enum XlYesNoGuess Header,
        const _variant_t & OrderCustom,
        const _variant_t & MatchCase,
        enum XlSortOrientation Orientation,
        enum XlSortDataOption DataOption1,
        enum XlSortDataOption DataOption2,
        enum XlSortDataOption DataOption3 );
    SoundNotePtr GetSoundNote ( );
    RangePtr SpecialCells (
        enum XlCellType Type,
        const _variant_t & Value = vtMissing );
    _variant_t GetStyle ( );
    void PutStyle (
        const _variant_t & RHS );
    _variant_t SubscribeTo (
        _bstr_t Edition,
        enum XlSubscribeToFormat Format );
    _variant_t Subtotal (
        long GroupBy,
        enum XlConsolidationFunction Function,
        const _variant_t & TotalList,
        const _variant_t & Replace,
        const _variant_t & PageBreaks,
        enum XlSummaryRow SummaryBelowData );
    _variant_t GetSummary ( );
    _variant_t Table (
        const _variant_t & RowInput = vtMissing,
        const _variant_t & ColumnInput = vtMissing );
    _variant_t GetText ( );
    _variant_t TextToColumns (
        const _variant_t & Destination,
        enum XlTextParsingType DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing );
    _variant_t GetTop ( );
    _variant_t Ungroup ( );
    _variant_t GetUseStandardHeight ( );
    void PutUseStandardHeight (
        const _variant_t & RHS );
    _variant_t GetUseStandardWidth ( );
    void PutUseStandardWidth (
        const _variant_t & RHS );
    ValidationPtr GetValidation ( );
    _variant_t GetValue (
        const _variant_t & RangeValueDataType = vtMissing,
        long lcid = 0 );
    void PutValue (
        const _variant_t & RangeValueDataType,
        long lcid = 0,
        const _variant_t & RHS = vtMissing );
    _variant_t GetValue2 (
        long lcid = 0 );
    void PutValue2 (
        long lcid,
        const _variant_t & RHS );
    _variant_t GetVerticalAlignment ( );
    void PutVerticalAlignment (
        const _variant_t & RHS );
    _variant_t GetWidth ( );
    _WorksheetPtr GetWorksheet ( );
    _variant_t GetWrapText ( );
    void PutWrapText (
        const _variant_t & RHS );
    CommentPtr AddComment (
        const _variant_t & Text = vtMissing );
    CommentPtr GetComment ( );
    HRESULT ClearComments ( );
    PhoneticPtr GetPhonetic ( );
    FormatConditionsPtr GetFormatConditions ( );
    long GetReadingOrder ( );
    void PutReadingOrder (
        long RHS );
    HyperlinksPtr GetHyperlinks ( );
    PhoneticsPtr GetPhonetics ( );
    HRESULT SetPhonetic ( );
    _bstr_t GetID ( );
    void PutID (
        _bstr_t RHS );
    _variant_t PrintOut (
        const _variant_t & From = vtMissing,
        const _variant_t & To = vtMissing,
        const _variant_t & Copies = vtMissing,
        const _variant_t & Preview = vtMissing,
        const _variant_t & ActivePrinter = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & Collate = vtMissing,
        const _variant_t & PrToFileName = vtMissing );
    PivotCellPtr GetPivotCell ( );
    HRESULT Dirty ( );
    ErrorsPtr GetErrors ( );
    SmartTagsPtr GetSmartTags ( );
    HRESULT Speak (
        const _variant_t & SpeakDirection = vtMissing,
        const _variant_t & SpeakFormulas = vtMissing );
    _variant_t PasteSpecial (
        enum XlPasteType Paste,
        enum XlPasteSpecialOperation Operation,
        const _variant_t & SkipBlanks = vtMissing,
        const _variant_t & Transpose = vtMissing );
    VARIANT_BOOL GetAllowEdit ( );
    ListObjectPtr GetListObject ( );
    XPathPtr GetXPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Activate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIndent (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_AddIndent (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Address (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AddressLocal (
        /*[in]*/ VARIANT RowAbsolute,
        /*[in]*/ VARIANT ColumnAbsolute,
        /*[in]*/ enum XlReferenceStyle ReferenceStyle,
        /*[in]*/ VARIANT External,
        /*[in]*/ VARIANT RelativeTo,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AdvancedFilter (
        /*[in]*/ enum XlFilterAction Action,
        /*[in]*/ VARIANT CriteriaRange,
        /*[in]*/ VARIANT CopyToRange,
        /*[in]*/ VARIANT Unique,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyNames (
        /*[in]*/ VARIANT Names,
        /*[in]*/ VARIANT IgnoreRelativeAbsolute,
        /*[in]*/ VARIANT UseRowColumnNames,
        /*[in]*/ VARIANT OmitColumn,
        /*[in]*/ VARIANT OmitRow,
        /*[in]*/ enum XlApplyNamesOrder Order,
        /*[in]*/ VARIANT AppendLast,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ApplyOutlineStyles (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Areas (
        /*[out,retval]*/ struct Areas * * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoComplete (
        /*[in]*/ BSTR String,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFill (
        /*[in]*/ struct Range * Destination,
        /*[in]*/ enum XlAutoFillType Type,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFilter (
        /*[in]*/ VARIANT Field,
        /*[in]*/ VARIANT Criteria1,
        /*[in]*/ enum XlAutoFilterOperator Operator,
        /*[in]*/ VARIANT Criteria2,
        /*[in]*/ VARIANT VisibleDropDown,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoFormat (
        /*[in]*/ enum XlRangeAutoFormat Format,
        /*[in]*/ VARIANT Number,
        /*[in]*/ VARIANT Font,
        /*[in]*/ VARIANT Alignment,
        /*[in]*/ VARIANT Border,
        /*[in]*/ VARIANT Pattern,
        /*[in]*/ VARIANT Width,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_AutoOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_BorderAround (
        /*[in]*/ VARIANT LineStyle,
        /*[in]*/ enum XlBorderWeight Weight,
        /*[in]*/ enum XlColorIndex ColorIndex,
        /*[in]*/ VARIANT Color,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ struct Characters * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in]*/ VARIANT AlwaysSuggest,
        /*[in]*/ VARIANT SpellLang,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Clear (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearContents (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearFormats (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearNotes (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearOutline (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Column (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ColumnDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ColumnWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ColumnWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Consolidate (
        /*[in]*/ VARIANT Sources,
        /*[in]*/ VARIANT Function,
        /*[in]*/ VARIANT TopRow,
        /*[in]*/ VARIANT LeftColumn,
        /*[in]*/ VARIANT CreateLinks,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyFromRecordset (
        /*[in]*/ IUnknown * Data,
        /*[in]*/ VARIANT MaxRows,
        /*[in]*/ VARIANT MaxColumns,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreateNames (
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Bottom,
        /*[in]*/ VARIANT Right,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CreatePublisher (
        /*[in]*/ VARIANT Edition,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ VARIANT ContainsPICT,
        /*[in]*/ VARIANT ContainsBIFF,
        /*[in]*/ VARIANT ContainsRTF,
        /*[in]*/ VARIANT ContainsVALU,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentArray (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CurrentRegion (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DataSeries (
        /*[in]*/ VARIANT Rowcol,
        /*[in]*/ enum XlDataSeriesType Type,
        /*[in]*/ enum XlDataSeriesDate Date,
        /*[in]*/ VARIANT Step,
        /*[in]*/ VARIANT Stop,
        /*[in]*/ VARIANT Trend,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put__Default (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex = vtMissing,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Shift,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Dependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_DialogBoxEx (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectDependents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_DirectPrecedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_EditionOptions (
        /*[in]*/ enum XlEditionType Type,
        /*[in]*/ enum XlEditionOptionsOption Option,
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Reference,
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlPictureAppearance ChartSize,
        /*[in]*/ VARIANT Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_End (
        /*[in]*/ enum XlDirection Direction,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireColumn (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_EntireRow (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillDown (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillLeft (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillRight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_FillUp (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Find (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT After,
        /*[in]*/ VARIANT LookIn,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ enum XlSearchDirection SearchDirection,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[in]*/ VARIANT SearchFormat,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindNext (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_FindPrevious (
        /*[in]*/ VARIANT After,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ struct Font * * RHS ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaArray (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLabel (
        /*[out,retval]*/ enum XlFormulaLabel * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLabel (
        /*[in]*/ enum XlFormulaLabel RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaHidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaHidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_FormulaR1C1Local (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_FormulaR1C1Local (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_FunctionWizard (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GoalSeek (
        /*[in]*/ VARIANT Goal,
        /*[in]*/ struct Range * ChangingCell,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT End,
        /*[in]*/ VARIANT By,
        /*[in]*/ VARIANT Periods,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasArray (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_HasFormula (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_IndentLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_IndentLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_InsertIndent (
        /*[in]*/ long InsertAmount ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Shift,
        /*[in]*/ VARIANT CopyOrigin,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Item (
        /*[in]*/ VARIANT RowIndex,
        /*[in]*/ VARIANT ColumnIndex,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Justify (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ListHeaderRows (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_ListNames (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_LocationInTable (
        /*[out,retval]*/ enum XlLocationInTable * RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Merge (
        /*[in]*/ VARIANT Across = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UnMerge ( ) = 0;
      virtual HRESULT __stdcall get_MergeArea (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MergeCells (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_MergeCells (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_NavigateArrow (
        /*[in]*/ VARIANT TowardPrecedent,
        /*[in]*/ VARIANT ArrowNumber,
        /*[in]*/ VARIANT LinkNumber,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_NoteText (
        /*[in]*/ VARIANT Text,
        /*[in]*/ VARIANT Start,
        /*[in]*/ VARIANT Length,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormat (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormat (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_NumberFormatLocal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_NumberFormatLocal (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[in]*/ VARIANT RowOffset,
        /*[in]*/ VARIANT ColumnOffset,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_OutlineLevel (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_OutlineLevel (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PageBreak (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_PageBreak (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Parse (
        /*[in]*/ VARIANT ParseLine,
        /*[in]*/ VARIANT Destination,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__PasteSpecial (
        /*[in]*/ enum XlPasteType Paste,
        /*[in]*/ enum XlPasteSpecialOperation Operation,
        /*[in]*/ VARIANT SkipBlanks,
        /*[in]*/ VARIANT Transpose,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotField (
        /*[out,retval]*/ struct PivotField * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotItem (
        /*[out,retval]*/ struct PivotItem * * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTable (
        /*[out,retval]*/ struct PivotTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Precedents (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_PrefixCharacter (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw__PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintPreview (
        /*[in]*/ VARIANT EnableChanges,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_QueryTable (
        /*[out,retval]*/ struct _QueryTable * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubtotal (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Replace (
        /*[in]*/ VARIANT What,
        /*[in]*/ VARIANT Replacement,
        /*[in]*/ VARIANT LookAt,
        /*[in]*/ VARIANT SearchOrder,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ VARIANT MatchByte,
        /*[in]*/ VARIANT SearchFormat,
        /*[in]*/ VARIANT ReplaceFormat,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Resize (
        /*[in]*/ VARIANT RowSize,
        /*[in]*/ VARIANT ColumnSize,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Row (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_RowDifferences (
        /*[in]*/ VARIANT Comparison,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_RowHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_RowHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowDependents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowDetail (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowDetail (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowErrors (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ShowPrecedents (
        /*[in]*/ VARIANT Remove,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_ShrinkToFit (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_ShrinkToFit (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_Sort (
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ VARIANT Type,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[in]*/ enum XlSortDataOption DataOption1,
        /*[in]*/ enum XlSortDataOption DataOption2,
        /*[in]*/ enum XlSortDataOption DataOption3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SortSpecial (
        /*[in]*/ enum XlSortMethod SortMethod,
        /*[in]*/ VARIANT Key1,
        /*[in]*/ enum XlSortOrder Order1,
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Key2,
        /*[in]*/ enum XlSortOrder Order2,
        /*[in]*/ VARIANT Key3,
        /*[in]*/ enum XlSortOrder Order3,
        /*[in]*/ enum XlYesNoGuess Header,
        /*[in]*/ VARIANT OrderCustom,
        /*[in]*/ VARIANT MatchCase,
        /*[in]*/ enum XlSortOrientation Orientation,
        /*[in]*/ enum XlSortDataOption DataOption1,
        /*[in]*/ enum XlSortDataOption DataOption2,
        /*[in]*/ enum XlSortDataOption DataOption3,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_SoundNote (
        /*[out,retval]*/ struct SoundNote * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SpecialCells (
        /*[in]*/ enum XlCellType Type,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_SubscribeTo (
        /*[in]*/ BSTR Edition,
        /*[in]*/ enum XlSubscribeToFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Subtotal (
        /*[in]*/ long GroupBy,
        /*[in]*/ enum XlConsolidationFunction Function,
        /*[in]*/ VARIANT TotalList,
        /*[in]*/ VARIANT Replace,
        /*[in]*/ VARIANT PageBreaks,
        /*[in]*/ enum XlSummaryRow SummaryBelowData,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Summary (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Table (
        /*[in]*/ VARIANT RowInput,
        /*[in]*/ VARIANT ColumnInput,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_TextToColumns (
        /*[in]*/ VARIANT Destination,
        /*[in]*/ enum XlTextParsingType DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter,
        /*[in]*/ VARIANT Tab,
        /*[in]*/ VARIANT Semicolon,
        /*[in]*/ VARIANT Comma,
        /*[in]*/ VARIANT Space,
        /*[in]*/ VARIANT Other,
        /*[in]*/ VARIANT OtherChar,
        /*[in]*/ VARIANT FieldInfo,
        /*[in]*/ VARIANT DecimalSeparator,
        /*[in]*/ VARIANT ThousandsSeparator,
        /*[in]*/ VARIANT TrailingMinusNumbers,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardHeight (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardHeight (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_UseStandardWidth (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_UseStandardWidth (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Validation (
        /*[out,retval]*/ struct Validation * * RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[in]*/ VARIANT RangeValueDataType,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT RangeValueDataType,
        /*[in,lcid]*/ long lcid = 0,
        /*[in]*/ VARIANT RHS = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Value2 (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheet (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_WrapText (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_WrapText (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall raw_AddComment (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ struct Comment * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ClearComments ( ) = 0;
      virtual HRESULT __stdcall get_Phonetic (
        /*[out,retval]*/ struct Phonetic * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormatConditions (
        /*[out,retval]*/ struct FormatConditions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ReadingOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ReadingOrder (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlinks (
        /*[out,retval]*/ struct Hyperlinks * * RHS ) = 0;
      virtual HRESULT __stdcall get_Phonetics (
        /*[out,retval]*/ struct Phonetics * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SetPhonetic ( ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ID (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT From,
        /*[in]*/ VARIANT To,
        /*[in]*/ VARIANT Copies,
        /*[in]*/ VARIANT Preview,
        /*[in]*/ VARIANT ActivePrinter,
        /*[in]*/ VARIANT PrintToFile,
        /*[in]*/ VARIANT Collate,
        /*[in]*/ VARIANT PrToFileName,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotCell (
        /*[out,retval]*/ struct PivotCell * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dirty ( ) = 0;
      virtual HRESULT __stdcall get_Errors (
        /*[out,retval]*/ struct Errors * * RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTags (
        /*[out,retval]*/ struct SmartTags * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Speak (
        /*[in]*/ VARIANT SpeakDirection = vtMissing,
        /*[in]*/ VARIANT SpeakFormulas = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_PasteSpecial (
        /*[in]*/ enum XlPasteType Paste,
        /*[in]*/ enum XlPasteSpecialOperation Operation,
        /*[in]*/ VARIANT SkipBlanks,
        /*[in]*/ VARIANT Transpose,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_AllowEdit (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ListObject (
        /*[out,retval]*/ struct ListObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_XPath (
        /*[out,retval]*/ struct XPath * * RHS ) = 0;
};

struct __declspec(uuid("00024402-0001-0000-c000-000000000046"))
IVPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00024401-0001-0000-c000-000000000046"))
IHPageBreak : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum XlPageBreak Type;
    __declspec(property(get=GetExtent))
    enum XlPageBreakExtent Extent;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _WorksheetPtr Parent;
    __declspec(property(get=GetLocation,put=PutRefLocation))
    RangePtr Location;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _WorksheetPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT DragOff (
        enum XlDirection Direction,
        long RegionIndex );
    enum XlPageBreak GetType ( );
    void PutType (
        enum XlPageBreak RHS );
    enum XlPageBreakExtent GetExtent ( );
    RangePtr GetLocation ( );
    void PutRefLocation (
        struct Range * RHS );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Worksheet * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_DragOff (
        /*[in]*/ enum XlDirection Direction,
        /*[in]*/ long RegionIndex ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum XlPageBreak * RHS ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum XlPageBreak RHS ) = 0;
      virtual HRESULT __stdcall get_Extent (
        /*[out,retval]*/ enum XlPageBreakExtent * RHS ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall putref_Location (
        /*[in]*/ struct Range * RHS ) = 0;
};

struct __declspec(uuid("00020812-0000-0000-c000-000000000046"))
Global;
    // [ default ] interface _Global

struct __declspec(uuid("00020819-0000-0000-c000-000000000046"))
Workbook;
    // [ default ] interface _Workbook
    // [ default, source ] dispinterface WorkbookEvents

struct __declspec(uuid("00024413-0001-0000-c000-000000000046"))
IAppEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NewWorkbook (
        struct _Workbook * Wb );
    HRESULT SheetSelectionChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT SheetBeforeDoubleClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetBeforeRightClick (
        IDispatch * Sh,
        struct Range * Target,
        VARIANT_BOOL * Cancel );
    HRESULT SheetActivate (
        IDispatch * Sh );
    HRESULT SheetDeactivate (
        IDispatch * Sh );
    HRESULT SheetCalculate (
        IDispatch * Sh );
    HRESULT SheetChange (
        IDispatch * Sh,
        struct Range * Target );
    HRESULT WorkbookOpen (
        struct _Workbook * Wb );
    HRESULT WorkbookActivate (
        struct _Workbook * Wb );
    HRESULT WorkbookDeactivate (
        struct _Workbook * Wb );
    HRESULT WorkbookBeforeClose (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforeSave (
        struct _Workbook * Wb,
        VARIANT_BOOL SaveAsUI,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookBeforePrint (
        struct _Workbook * Wb,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookNewSheet (
        struct _Workbook * Wb,
        IDispatch * Sh );
    HRESULT WorkbookAddinInstall (
        struct _Workbook * Wb );
    HRESULT WorkbookAddinUninstall (
        struct _Workbook * Wb );
    HRESULT WindowResize (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowActivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT WindowDeactivate (
        struct _Workbook * Wb,
        struct Window * Wn );
    HRESULT SheetFollowHyperlink (
        IDispatch * Sh,
        struct Hyperlink * Target );
    HRESULT SheetPivotTableUpdate (
        IDispatch * Sh,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableCloseConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookPivotTableOpenConnection (
        struct _Workbook * Wb,
        struct PivotTable * Target );
    HRESULT WorkbookSync (
        struct _Workbook * Wb,
        enum Office::MsoSyncEventType SyncEventType );
    HRESULT WorkbookBeforeXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL IsRefresh,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlImport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        VARIANT_BOOL IsRefresh,
        enum XlXmlImportResult Result );
    HRESULT WorkbookBeforeXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        VARIANT_BOOL * Cancel );
    HRESULT WorkbookAfterXmlExport (
        struct _Workbook * Wb,
        struct XmlMap * Map,
        _bstr_t Url,
        enum XlXmlExportResult Result );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NewWorkbook (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_SheetSelectionChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeDoubleClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetBeforeRightClick (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_SheetActivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetDeactivate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetCalculate (
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_SheetChange (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Range * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookOpen (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookActivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookDeactivate (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeClose (
        /*[in]*/ struct _Workbook * Wb,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeSave (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ VARIANT_BOOL SaveAsUI,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforePrint (
        /*[in]*/ struct _Workbook * Wb,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookNewSheet (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ IDispatch * Sh ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinInstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAddinUninstall (
        /*[in]*/ struct _Workbook * Wb ) = 0;
      virtual HRESULT __stdcall raw_WindowResize (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowActivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_WindowDeactivate (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct Window * Wn ) = 0;
      virtual HRESULT __stdcall raw_SheetFollowHyperlink (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct Hyperlink * Target ) = 0;
      virtual HRESULT __stdcall raw_SheetPivotTableUpdate (
        /*[in]*/ IDispatch * Sh,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookPivotTableCloseConnection (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookPivotTableOpenConnection (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct PivotTable * Target ) = 0;
      virtual HRESULT __stdcall raw_WorkbookSync (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ enum Office::MsoSyncEventType SyncEventType ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeXmlImport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAfterXmlImport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ VARIANT_BOOL IsRefresh,
        /*[in]*/ enum XlXmlImportResult Result ) = 0;
      virtual HRESULT __stdcall raw_WorkbookBeforeXmlExport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in,out]*/ VARIANT_BOOL * Cancel ) = 0;
      virtual HRESULT __stdcall raw_WorkbookAfterXmlExport (
        /*[in]*/ struct _Workbook * Wb,
        /*[in]*/ struct XmlMap * Map,
        /*[in]*/ BSTR Url,
        /*[in]*/ enum XlXmlExportResult Result ) = 0;
};

struct __declspec(uuid("00024407-0001-0000-c000-000000000046"))
IRecentFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetName ( );
    _bstr_t GetPath ( );
    long GetIndex ( );
    _WorkbookPtr Open ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("000208db-0000-0000-c000-000000000046"))
Workbooks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _WorkbookPtr _Default[];
    __declspec(property(get=GetItem))
    _WorkbookPtr Item[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _WorkbookPtr Add (
        const _variant_t & Template = vtMissing,
        long lcid = 0 );
    HRESULT Close (
        long lcid = 0 );
    long GetCount ( );
    _WorkbookPtr GetItem (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    _WorkbookPtr _Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        long lcid = 0 );
    HRESULT __OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Get_Default (
        const _variant_t & Index );
    HRESULT _OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        long lcid = 0 );
    _WorkbookPtr Open (
        _bstr_t Filename,
        const _variant_t & UpdateLinks = vtMissing,
        const _variant_t & ReadOnly = vtMissing,
        const _variant_t & Format = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & WriteResPassword = vtMissing,
        const _variant_t & IgnoreReadOnlyRecommended = vtMissing,
        const _variant_t & Origin = vtMissing,
        const _variant_t & Delimiter = vtMissing,
        const _variant_t & Editable = vtMissing,
        const _variant_t & Notify = vtMissing,
        const _variant_t & Converter = vtMissing,
        const _variant_t & AddToMru = vtMissing,
        const _variant_t & Local = vtMissing,
        const _variant_t & CorruptLoad = vtMissing,
        long lcid = 0 );
    HRESULT OpenText (
        _bstr_t Filename,
        const _variant_t & Origin,
        const _variant_t & StartRow,
        const _variant_t & DataType,
        enum XlTextQualifier TextQualifier,
        const _variant_t & ConsecutiveDelimiter = vtMissing,
        const _variant_t & Tab = vtMissing,
        const _variant_t & Semicolon = vtMissing,
        const _variant_t & Comma = vtMissing,
        const _variant_t & Space = vtMissing,
        const _variant_t & Other = vtMissing,
        const _variant_t & OtherChar = vtMissing,
        const _variant_t & FieldInfo = vtMissing,
        const _variant_t & TextVisualLayout = vtMissing,
        const _variant_t & DecimalSeparator = vtMissing,
        const _variant_t & ThousandsSeparator = vtMissing,
        const _variant_t & TrailingMinusNumbers = vtMissing,
        const _variant_t & Local = vtMissing,
        long lcid = 0 );
    _WorkbookPtr OpenDatabase (
        _bstr_t Filename,
        const _variant_t & CommandText = vtMissing,
        const _variant_t & CommandType = vtMissing,
        const _variant_t & BackgroundQuery = vtMissing,
        const _variant_t & ImportDataAs = vtMissing );
    HRESULT CheckOut (
        _bstr_t Filename );
    VARIANT_BOOL CanCheckOut (
        _bstr_t Filename );
    _WorkbookPtr _OpenXML (
        _bstr_t Filename,
        const _variant_t & Stylesheets = vtMissing );
    _WorkbookPtr OpenXML (
        _bstr_t Filename,
        const _variant_t & Stylesheets = vtMissing,
        const _variant_t & LoadOption = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Template,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT UpdateLinks,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Format,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT IgnoreReadOnlyRecommended,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT Delimiter,
        /*[in]*/ VARIANT Editable,
        /*[in]*/ VARIANT Notify,
        /*[in]*/ VARIANT Converter,
        /*[in]*/ VARIANT AddToMru,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw___OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw__OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT DecimalSeparator = vtMissing,
        /*[in]*/ VARIANT ThousandsSeparator = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT UpdateLinks,
        /*[in]*/ VARIANT ReadOnly,
        /*[in]*/ VARIANT Format,
        /*[in]*/ VARIANT Password,
        /*[in]*/ VARIANT WriteResPassword,
        /*[in]*/ VARIANT IgnoreReadOnlyRecommended,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT Delimiter,
        /*[in]*/ VARIANT Editable,
        /*[in]*/ VARIANT Notify,
        /*[in]*/ VARIANT Converter,
        /*[in]*/ VARIANT AddToMru,
        /*[in]*/ VARIANT Local,
        /*[in]*/ VARIANT CorruptLoad,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenText (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Origin,
        /*[in]*/ VARIANT StartRow,
        /*[in]*/ VARIANT DataType,
        /*[in]*/ enum XlTextQualifier TextQualifier,
        /*[in]*/ VARIANT ConsecutiveDelimiter = vtMissing,
        /*[in]*/ VARIANT Tab = vtMissing,
        /*[in]*/ VARIANT Semicolon = vtMissing,
        /*[in]*/ VARIANT Comma = vtMissing,
        /*[in]*/ VARIANT Space = vtMissing,
        /*[in]*/ VARIANT Other = vtMissing,
        /*[in]*/ VARIANT OtherChar = vtMissing,
        /*[in]*/ VARIANT FieldInfo = vtMissing,
        /*[in]*/ VARIANT TextVisualLayout = vtMissing,
        /*[in]*/ VARIANT DecimalSeparator = vtMissing,
        /*[in]*/ VARIANT ThousandsSeparator = vtMissing,
        /*[in]*/ VARIANT TrailingMinusNumbers = vtMissing,
        /*[in]*/ VARIANT Local = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OpenDatabase (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT CommandText,
        /*[in]*/ VARIANT CommandType,
        /*[in]*/ VARIANT BackgroundQuery,
        /*[in]*/ VARIANT ImportDataAs,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckOut (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_CanCheckOut (
        /*[in]*/ BSTR Filename,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw__OpenXML (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Stylesheets,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall raw_OpenXML (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Stylesheets,
        /*[in]*/ VARIANT LoadOption,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
};

struct __declspec(uuid("000208d5-0000-0000-c000-000000000046"))
_Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Get_Default))
    _bstr_t _Default;
    __declspec(property(get=GetIgnoreRemoteRequests,put=PutIgnoreRemoteRequests))
    VARIANT_BOOL IgnoreRemoteRequests[];
    __declspec(property(get=GetUILanguage,put=PutUILanguage))
    long UILanguage[];
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive[];
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetInternational))
    _variant_t International[][];
    __declspec(property(get=GetIteration,put=PutIteration))
    VARIANT_BOOL Iteration[];
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetColorButtons,put=PutColorButtons))
    VARIANT_BOOL ColorButtons;
    __declspec(property(get=GetLibraryPath))
    _bstr_t LibraryPath[];
    __declspec(property(get=GetMathCoprocessorAvailable))
    VARIANT_BOOL MathCoprocessorAvailable[];
    __declspec(property(get=GetOnSheetDeactivate,put=PutOnSheetDeactivate))
    _bstr_t OnSheetDeactivate[];
    __declspec(property(get=GetMaxChange,put=PutMaxChange))
    double MaxChange[];
    __declspec(property(get=GetMaxIterations,put=PutMaxIterations))
    long MaxIterations[];
    __declspec(property(get=GetMemoryFree))
    long MemoryFree[];
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;
    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetMemoryTotal))
    long MemoryTotal[];
    __declspec(property(get=GetPathSeparator))
    _bstr_t PathSeparator[];
    __declspec(property(get=GetPreviousSelections))
    _variant_t PreviousSelections[][];
    __declspec(property(get=GetRecordRelative))
    VARIANT_BOOL RecordRelative[];
    __declspec(property(get=GetReferenceStyle,put=PutReferenceStyle))
    enum XlReferenceStyle ReferenceStyle[];
    __declspec(property(get=GetTemplatesPath))
    _bstr_t TemplatesPath[];
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating[];
    __declspec(property(get=GetMemoryUsed))
    long MemoryUsed[];
    __declspec(property(get=GetEnableCancelKey,put=PutEnableCancelKey))
    enum XlEnableCancelKey EnableCancelKey[];
    __declspec(property(get=GetStartupPath))
    _bstr_t StartupPath[];
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _variant_t StatusBar[];
    __declspec(property(get=GetShowToolTips,put=PutShowToolTips))
    VARIANT_BOOL ShowToolTips;
    __declspec(property(get=GetMouseAvailable))
    VARIANT_BOOL MouseAvailable[];
    __declspec(property(get=GetMoveAfterReturn,put=PutMoveAfterReturn))
    VARIANT_BOOL MoveAfterReturn[];
    __declspec(property(get=GetNetworkTemplatesPath))
    _bstr_t NetworkTemplatesPath[];
    __declspec(property(get=GetOperatingSystem))
    _bstr_t OperatingSystem[];
    __declspec(property(get=GetOrganizationName))
    _bstr_t OrganizationName[];
    __declspec(property(get=GetUsableHeight))
    double UsableHeight[];
    __declspec(property(get=GetUsableWidth))
    double UsableWidth[];
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName[];
    __declspec(property(get=GetVersion))
    _bstr_t Version[];
    __declspec(property(get=GetWindowsForPens))
    VARIANT_BOOL WindowsForPens[];
    __declspec(property(get=GetWindowState,put=PutWindowState))
    enum XlWindowState WindowState[];
    __declspec(property(get=GetExtendList,put=PutExtendList))
    VARIANT_BOOL ExtendList;
    __declspec(property(get=GetOLEDBErrors))
    OLEDBErrorsPtr OLEDBErrors;
    __declspec(property(get=GetCOMAddIns))
    Office::COMAddInsPtr COMAddIns;
    __declspec(property(get=GetDefaultWebOptions))
    DefaultWebOptionsPtr DefaultWebOptions;
    __declspec(property(get=GetProductCode))
    _bstr_t ProductCode;
    __declspec(property(get=GetUserLibraryPath))
    _bstr_t UserLibraryPath;
    __declspec(property(get=GetAutoPercentEntry,put=PutAutoPercentEntry))
    VARIANT_BOOL AutoPercentEntry;
    __declspec(property(get=GetLanguageSettings))
    Office::LanguageSettingsPtr LanguageSettings;
    __declspec(property(get=GetDummy101))
    IDispatchPtr Dummy101;
    __declspec(property(get=GetAnswerWizard))
    Office::AnswerWizardPtr AnswerWizard;
    __declspec(property(get=GetCalculationVersion))
    long CalculationVersion;
    __declspec(property(get=GetShowWindowsInTaskbar,put=PutShowWindowsInTaskbar))
    VARIANT_BOOL ShowWindowsInTaskbar;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetDialogs))
    DialogsPtr Dialogs;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetDecimalSeparator,put=PutDecimalSeparator))
    _bstr_t DecimalSeparator;
    __declspec(property(get=GetThousandsSeparator,put=PutThousandsSeparator))
    _bstr_t ThousandsSeparator;
    __declspec(property(get=GetRegisteredFunctions))
    _variant_t RegisteredFunctions[][][];
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetCustomListCount))
    long CustomListCount[];
    __declspec(property(get=GetMoveAfterReturnDirection,put=PutMoveAfterReturnDirection))
    enum XlDirection MoveAfterReturnDirection[];
    __declspec(property(get=GetAutoCorrect))
    AutoCorrectPtr AutoCorrect;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetCursor,put=PutCursor))
    enum XlMousePointer Cursor[];
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEnableAutoComplete,put=PutEnableAutoComplete))
    VARIANT_BOOL EnableAutoComplete;
    __declspec(property(get=GetEnableAnimations,put=PutEnableAnimations))
    VARIANT_BOOL EnableAnimations[];
    __declspec(property(get=GetDisplayDocumentActionTaskPane,put=PutDisplayDocumentActionTaskPane))
    VARIANT_BOOL DisplayDocumentActionTaskPane;
    __declspec(property(get=GetArbitraryXMLSupportAvailable))
    VARIANT_BOOL ArbitraryXMLSupportAvailable;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width[];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height[];
    __declspec(property(get=GetTop,put=PutTop))
    double Top[];
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left[];
    __declspec(property(get=GetDisplayCommentIndicator,put=PutDisplayCommentIndicator))
    enum XlCommentDisplayMode DisplayCommentIndicator;
    __declspec(property(get=GetEnableSound,put=PutEnableSound))
    VARIANT_BOOL EnableSound;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetFileSearch))
    Office::FileSearchPtr FileSearch;
    __declspec(property(get=GetFileFind))
    Office::IFindPtr FileFind;
    __declspec(property(get=GetRecentFiles))
    RecentFilesPtr RecentFiles;
    __declspec(property(get=GetODBCErrors))
    ODBCErrorsPtr ODBCErrors;
    __declspec(property(get=GetODBCTimeout,put=PutODBCTimeout))
    long ODBCTimeout;
    __declspec(property(get=GetPivotTableSelection,put=PutPivotTableSelection))
    VARIANT_BOOL PivotTableSelection;
    __declspec(property(get=GetRollZoom,put=PutRollZoom))
    VARIANT_BOOL RollZoom;
    __declspec(property(get=GetShowChartTipNames,put=PutShowChartTipNames))
    VARIANT_BOOL ShowChartTipNames;
    __declspec(property(get=GetShowChartTipValues,put=PutShowChartTipValues))
    VARIANT_BOOL ShowChartTipValues;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDefaultSaveFormat,put=PutDefaultSaveFormat))
    enum XlFileFormat DefaultSaveFormat;
    __declspec(property(get=GetUserControl,put=PutUserControl))
    VARIANT_BOOL UserControl;
    __declspec(property(get=GetVBE))
    VBE6::VBEPtr VBE;
    __declspec(property(get=GetEnableEvents,put=PutEnableEvents))
    VARIANT_BOOL EnableEvents;
    __declspec(property(get=GetDisplayInfoWindow,put=PutDisplayInfoWindow))
    VARIANT_BOOL DisplayInfoWindow;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetReady))
    VARIANT_BOOL Ready;
    __declspec(property(get=GetNewWorkbook))
    Office::NewFilePtr NewWorkbook;
    __declspec(property(get=GetFindFormat,put=PutRefFindFormat))
    CellFormatPtr FindFormat;
    __declspec(property(get=GetReplaceFormat,put=PutRefReplaceFormat))
    CellFormatPtr ReplaceFormat;
    __declspec(property(get=GetUsedObjects))
    UsedObjectsPtr UsedObjects;
    __declspec(property(get=GetCalculationState))
    enum XlCalculationState CalculationState;
    __declspec(property(get=GetCalculationInterruptKey,put=PutCalculationInterruptKey))
    enum XlCalculationInterruptKey CalculationInterruptKey;
    __declspec(property(get=GetWatches))
    WatchesPtr Watches;
    __declspec(property(get=GetDisplayFunctionToolTips,put=PutDisplayFunctionToolTips))
    VARIANT_BOOL DisplayFunctionToolTips;
    __declspec(property(get=GetFileDialog))
    Office::FileDialogPtr FileDialog[];
    __declspec(property(get=GetDisplayPasteOptions,put=PutDisplayPasteOptions))
    VARIANT_BOOL DisplayPasteOptions;
    __declspec(property(get=GetDisplayInsertOptions,put=PutDisplayInsertOptions))
    VARIANT_BOOL DisplayInsertOptions;
    __declspec(property(get=GetGenerateGetPivotData,put=PutGenerateGetPivotData))
    VARIANT_BOOL GenerateGetPivotData;
    __declspec(property(get=GetAutoRecover))
    AutoRecoverPtr AutoRecover;
    __declspec(property(get=GetHwnd))
    long Hwnd;
    __declspec(property(get=GetHinstance))
    long Hinstance;
    __declspec(property(get=GetErrorCheckingOptions))
    ErrorCheckingOptionsPtr ErrorCheckingOptions;
    __declspec(property(get=GetAutoFormatAsYouTypeReplaceHyperlinks,put=PutAutoFormatAsYouTypeReplaceHyperlinks))
    VARIANT_BOOL AutoFormatAsYouTypeReplaceHyperlinks;
    __declspec(property(get=GetSmartTagRecognizers))
    SmartTagRecognizersPtr SmartTagRecognizers;
    __declspec(property(get=GetSpellingOptions))
    SpellingOptionsPtr SpellingOptions;
    __declspec(property(get=GetSpeech))
    SpeechPtr Speech;
    __declspec(property(get=GetMapPaperSize,put=PutMapPaperSize))
    VARIANT_BOOL MapPaperSize;
    __declspec(property(get=GetShowStartupDialog,put=PutShowStartupDialog))
    VARIANT_BOOL ShowStartupDialog;
    __declspec(property(get=GetUseSystemSeparators,put=PutUseSystemSeparators))
    VARIANT_BOOL UseSystemSeparators;
    __declspec(property(get=GetThisCell))
    RangePtr ThisCell;
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetRTD))
    RTDPtr RTD;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible[];
    __declspec(property(get=GetStandardFont,put=PutStandardFont))
    _bstr_t StandardFont[];
    __declspec(property(get=GetStandardFontSize,put=PutStandardFontSize))
    double StandardFontSize[];
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDisplayExcel4Menus,put=PutDisplayExcel4Menus))
    VARIANT_BOOL DisplayExcel4Menus[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetEditDirectlyInCell,put=PutEditDirectlyInCell))
    VARIANT_BOOL EditDirectlyInCell[];
    __declspec(property(get=GetAlertBeforeOverwriting,put=PutAlertBeforeOverwriting))
    VARIANT_BOOL AlertBeforeOverwriting[];
    __declspec(property(get=GetFileConverters))
    _variant_t FileConverters[][][];
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDefaultSheetDirection,put=PutDefaultSheetDirection))
    long DefaultSheetDirection[];
    __declspec(property(get=GetMailSession))
    _variant_t MailSession[];
    __declspec(property(get=GetCursorMovement,put=PutCursorMovement))
    long CursorMovement[];
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetControlCharacters,put=PutControlCharacters))
    VARIANT_BOOL ControlCharacters[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetMailSystem))
    enum XlMailSystem MailSystem[];
    __declspec(property(get=GetOnWindow,put=PutOnWindow))
    _bstr_t OnWindow[];
    __declspec(property(get=GetOnCalculate,put=PutOnCalculate))
    _bstr_t OnCalculate[];
    __declspec(property(get=GetOnEntry,put=PutOnEntry))
    _bstr_t OnEntry[];
    __declspec(property(get=GetOnDoubleClick,put=PutOnDoubleClick))
    _bstr_t OnDoubleClick[];
    __declspec(property(get=GetOnData,put=PutOnData))
    _bstr_t OnData[];
    __declspec(property(get=GetCopyObjectsWithCells,put=PutCopyObjectsWithCells))
    VARIANT_BOOL CopyObjectsWithCells[];
    __declspec(property(get=GetAskToUpdateLinks,put=PutAskToUpdateLinks))
    VARIANT_BOOL AskToUpdateLinks[];
    __declspec(property(get=GetSheetsInNewWorkbook,put=PutSheetsInNewWorkbook))
    long SheetsInNewWorkbook[];
    __declspec(property(get=GetPath))
    _bstr_t Path[];
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetTransitionMenuKey,put=PutTransitionMenuKey))
    _bstr_t TransitionMenuKey[];
    __declspec(property(get=GetTransitionMenuKeyAction,put=PutTransitionMenuKeyAction))
    long TransitionMenuKeyAction[];
    __declspec(property(get=GetTransitionNavigKeys,put=PutTransitionNavigKeys))
    VARIANT_BOOL TransitionNavigKeys[];
    __declspec(property(get=GetAltStartupPath,put=PutAltStartupPath))
    _bstr_t AltStartupPath[];
    __declspec(property(get=GetBuild))
    long Build[];
    __declspec(property(get=GetCalculateBeforeSave,put=PutCalculateBeforeSave))
    VARIANT_BOOL CalculateBeforeSave[];
    __declspec(property(get=GetCalculation,put=PutCalculation))
    enum XlCalculation Calculation[];
    __declspec(property(get=GetCaller))
    _variant_t Caller[][];
    __declspec(property(get=GetCanPlaySounds))
    VARIANT_BOOL CanPlaySounds[];
    __declspec(property(get=GetCanRecordSounds))
    VARIANT_BOOL CanRecordSounds[];
    __declspec(property(get=GetCellDragAndDrop,put=PutCellDragAndDrop))
    VARIANT_BOOL CellDragAndDrop[];
    __declspec(property(get=GetClipboardFormats))
    _variant_t ClipboardFormats[][];
    __declspec(property(get=GetDisplayClipboardWindow,put=PutDisplayClipboardWindow))
    VARIANT_BOOL DisplayClipboardWindow[];
    __declspec(property(get=GetCommandUnderlines,put=PutCommandUnderlines))
    enum XlCommandUnderlines CommandUnderlines[];
    __declspec(property(get=GetConstrainNumeric,put=PutConstrainNumeric))
    VARIANT_BOOL ConstrainNumeric[];
    __declspec(property(get=GetOnSheetActivate,put=PutOnSheetActivate))
    _bstr_t OnSheetActivate[];
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath[];
    __declspec(property(get=GetCutCopyMode,put=PutCutCopyMode))
    enum XlCutCopyMode CutCopyMode[];
    __declspec(property(get=GetDataEntryMode,put=PutDataEntryMode))
    long DataEntryMode[];
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts[];
    __declspec(property(get=GetDisplayFormulaBar,put=PutDisplayFormulaBar))
    VARIANT_BOOL DisplayFormulaBar[];
    __declspec(property(get=GetDisplayNoteIndicator,put=PutDisplayNoteIndicator))
    VARIANT_BOOL DisplayNoteIndicator;
    __declspec(property(get=GetDisplayScrollBars,put=PutDisplayScrollBars))
    VARIANT_BOOL DisplayScrollBars[];
    __declspec(property(get=GetDisplayStatusBar,put=PutDisplayStatusBar))
    VARIANT_BOOL DisplayStatusBar[];
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen[];
    __declspec(property(get=GetPromptForSummaryInfo,put=PutPromptForSummaryInfo))
    VARIANT_BOOL PromptForSummaryInfo[];
    __declspec(property(get=GetFixedDecimal,put=PutFixedDecimal))
    VARIANT_BOOL FixedDecimal[];
    __declspec(property(get=GetEnableTipWizard,put=PutEnableTipWizard))
    VARIANT_BOOL EnableTipWizard[];
    __declspec(property(get=GetFixedDecimalPlaces,put=PutFixedDecimalPlaces))
    long FixedDecimalPlaces[];

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );
    HRESULT ActivateMicrosoftApp (
        enum XlMSApplication Index,
        long lcid = 0 );
    HRESULT AddChartAutoFormat (
        const _variant_t & Chart,
        _bstr_t Name,
        const _variant_t & Description = vtMissing,
        long lcid = 0 );
    HRESULT AddCustomList (
        const _variant_t & ListArray,
        const _variant_t & ByRow = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetAlertBeforeOverwriting (
        long lcid = 0 );
    void PutAlertBeforeOverwriting (
        long lcid,
        VARIANT_BOOL RHS );
    _bstr_t GetAltStartupPath (
        long lcid = 0 );
    void PutAltStartupPath (
        long lcid,
        _bstr_t RHS );
    VARIANT_BOOL GetAskToUpdateLinks (
        long lcid = 0 );
    void PutAskToUpdateLinks (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAnimations (
        long lcid = 0 );
    void PutEnableAnimations (
        long lcid,
        VARIANT_BOOL RHS );
    AutoCorrectPtr GetAutoCorrect ( );
    long GetBuild (
        long lcid = 0 );
    VARIANT_BOOL GetCalculateBeforeSave (
        long lcid = 0 );
    void PutCalculateBeforeSave (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlCalculation GetCalculation (
        long lcid = 0 );
    void PutCalculation (
        long lcid,
        enum XlCalculation RHS );
    _variant_t GetCaller (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCanPlaySounds (
        long lcid = 0 );
    VARIANT_BOOL GetCanRecordSounds (
        long lcid = 0 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t RHS );
    VARIANT_BOOL GetCellDragAndDrop (
        long lcid = 0 );
    void PutCellDragAndDrop (
        long lcid,
        VARIANT_BOOL RHS );
    double CentimetersToPoints (
        double Centimeters,
        long lcid = 0 );
    VARIANT_BOOL CheckSpelling (
        _bstr_t Word,
        const _variant_t & CustomDictionary = vtMissing,
        const _variant_t & IgnoreUppercase = vtMissing,
        long lcid = 0 );
    _variant_t GetClipboardFormats (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetDisplayClipboardWindow (
        long lcid = 0 );
    void PutDisplayClipboardWindow (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetColorButtons ( );
    void PutColorButtons (
        VARIANT_BOOL RHS );
    enum XlCommandUnderlines GetCommandUnderlines (
        long lcid = 0 );
    void PutCommandUnderlines (
        long lcid,
        enum XlCommandUnderlines RHS );
    VARIANT_BOOL GetConstrainNumeric (
        long lcid = 0 );
    void PutConstrainNumeric (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t ConvertFormula (
        const _variant_t & Formula,
        enum XlReferenceStyle FromReferenceStyle,
        const _variant_t & ToReferenceStyle = vtMissing,
        const _variant_t & ToAbsolute = vtMissing,
        const _variant_t & RelativeTo = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetCopyObjectsWithCells (
        long lcid = 0 );
    void PutCopyObjectsWithCells (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlMousePointer GetCursor (
        long lcid = 0 );
    void PutCursor (
        long lcid,
        enum XlMousePointer RHS );
    long GetCustomListCount (
        long lcid = 0 );
    enum XlCutCopyMode GetCutCopyMode (
        long lcid = 0 );
    void PutCutCopyMode (
        long lcid,
        enum XlCutCopyMode RHS );
    long GetDataEntryMode (
        long lcid = 0 );
    void PutDataEntryMode (
        long lcid,
        long RHS );
    _variant_t Dummy1 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    _variant_t Dummy2 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing );
    _variant_t Dummy3 ( );
    _variant_t Dummy4 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing );
    _variant_t Dummy5 (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing );
    _variant_t Dummy6 ( );
    _variant_t Dummy7 ( );
    _variant_t Dummy8 (
        const _variant_t & Arg1 = vtMissing );
    _variant_t Dummy9 ( );
    VARIANT_BOOL Dummy10 (
        const _variant_t & arg = vtMissing );
    HRESULT Dummy11 ( );
    _bstr_t Get_Default ( );
    _bstr_t GetDefaultFilePath (
        long lcid = 0 );
    void PutDefaultFilePath (
        long lcid,
        _bstr_t RHS );
    HRESULT DeleteChartAutoFormat (
        _bstr_t Name,
        long lcid = 0 );
    HRESULT DeleteCustomList (
        long ListNum,
        long lcid = 0 );
    DialogsPtr GetDialogs ( );
    VARIANT_BOOL GetDisplayAlerts (
        long lcid = 0 );
    void PutDisplayAlerts (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFormulaBar (
        long lcid = 0 );
    void PutDisplayFormulaBar (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayFullScreen (
        long lcid = 0 );
    void PutDisplayFullScreen (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayNoteIndicator ( );
    void PutDisplayNoteIndicator (
        VARIANT_BOOL RHS );
    enum XlCommentDisplayMode GetDisplayCommentIndicator ( );
    void PutDisplayCommentIndicator (
        enum XlCommentDisplayMode RHS );
    VARIANT_BOOL GetDisplayExcel4Menus (
        long lcid = 0 );
    void PutDisplayExcel4Menus (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayScrollBars (
        long lcid = 0 );
    void PutDisplayScrollBars (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayStatusBar (
        long lcid = 0 );
    void PutDisplayStatusBar (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT DoubleClick (
        long lcid = 0 );
    VARIANT_BOOL GetEditDirectlyInCell (
        long lcid = 0 );
    void PutEditDirectlyInCell (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableAutoComplete ( );
    void PutEnableAutoComplete (
        VARIANT_BOOL RHS );
    enum XlEnableCancelKey GetEnableCancelKey (
        long lcid = 0 );
    void PutEnableCancelKey (
        long lcid,
        enum XlEnableCancelKey RHS );
    VARIANT_BOOL GetEnableSound ( );
    void PutEnableSound (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetEnableTipWizard (
        long lcid = 0 );
    void PutEnableTipWizard (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetFileConverters (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    Office::FileSearchPtr GetFileSearch ( );
    Office::IFindPtr GetFileFind ( );
    HRESULT _FindFile (
        long lcid = 0 );
    VARIANT_BOOL GetFixedDecimal (
        long lcid = 0 );
    void PutFixedDecimal (
        long lcid,
        VARIANT_BOOL RHS );
    long GetFixedDecimalPlaces (
        long lcid = 0 );
    void PutFixedDecimalPlaces (
        long lcid,
        long RHS );
    _variant_t GetCustomListContents (
        long ListNum,
        long lcid = 0 );
    long GetCustomListNum (
        const _variant_t & ListArray,
        long lcid = 0 );
    _variant_t GetOpenFilename (
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        const _variant_t & MultiSelect = vtMissing,
        long lcid = 0 );
    _variant_t GetSaveAsFilename (
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & ButtonText = vtMissing,
        long lcid = 0 );
    HRESULT Goto (
        const _variant_t & Reference = vtMissing,
        const _variant_t & Scroll = vtMissing,
        long lcid = 0 );
    double GetHeight (
        long lcid = 0 );
    void PutHeight (
        long lcid,
        double RHS );
    HRESULT Help (
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIgnoreRemoteRequests (
        long lcid = 0 );
    void PutIgnoreRemoteRequests (
        long lcid,
        VARIANT_BOOL RHS );
    double InchesToPoints (
        double Inches,
        long lcid = 0 );
    _variant_t InputBox (
        _bstr_t Prompt,
        const _variant_t & Title = vtMissing,
        const _variant_t & Default = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & Type = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetInteractive (
        long lcid = 0 );
    void PutInteractive (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t GetInternational (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetIteration (
        long lcid = 0 );
    void PutIteration (
        long lcid,
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL RHS );
    double GetLeft (
        long lcid = 0 );
    void PutLeft (
        long lcid,
        double RHS );
    _bstr_t GetLibraryPath (
        long lcid = 0 );
    HRESULT MacroOptions (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Description = vtMissing,
        const _variant_t & HasMenu = vtMissing,
        const _variant_t & MenuText = vtMissing,
        const _variant_t & HasShortcutKey = vtMissing,
        const _variant_t & ShortcutKey = vtMissing,
        const _variant_t & Category = vtMissing,
        const _variant_t & StatusBar = vtMissing,
        const _variant_t & HelpContextID = vtMissing,
        const _variant_t & HelpFile = vtMissing,
        long lcid = 0 );
    HRESULT MailLogoff (
        long lcid = 0 );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing,
        long lcid = 0 );
    _variant_t GetMailSession (
        long lcid = 0 );
    enum XlMailSystem GetMailSystem (
        long lcid = 0 );
    VARIANT_BOOL GetMathCoprocessorAvailable (
        long lcid = 0 );
    double GetMaxChange (
        long lcid = 0 );
    void PutMaxChange (
        long lcid,
        double RHS );
    long GetMaxIterations (
        long lcid = 0 );
    void PutMaxIterations (
        long lcid,
        long RHS );
    long GetMemoryFree (
        long lcid = 0 );
    long GetMemoryTotal (
        long lcid = 0 );
    long GetMemoryUsed (
        long lcid = 0 );
    VARIANT_BOOL GetMouseAvailable (
        long lcid = 0 );
    VARIANT_BOOL GetMoveAfterReturn (
        long lcid = 0 );
    void PutMoveAfterReturn (
        long lcid,
        VARIANT_BOOL RHS );
    enum XlDirection GetMoveAfterReturnDirection (
        long lcid = 0 );
    void PutMoveAfterReturnDirection (
        long lcid,
        enum XlDirection RHS );
    RecentFilesPtr GetRecentFiles ( );
    _bstr_t GetName ( );
    _WorkbookPtr NextLetter (
        long lcid = 0 );
    _bstr_t GetNetworkTemplatesPath (
        long lcid = 0 );
    ODBCErrorsPtr GetODBCErrors ( );
    long GetODBCTimeout ( );
    void PutODBCTimeout (
        long RHS );
    _bstr_t GetOnCalculate (
        long lcid = 0 );
    void PutOnCalculate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnData (
        long lcid = 0 );
    void PutOnData (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnDoubleClick (
        long lcid = 0 );
    void PutOnDoubleClick (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnEntry (
        long lcid = 0 );
    void PutOnEntry (
        long lcid,
        _bstr_t RHS );
    HRESULT OnKey (
        _bstr_t Key,
        const _variant_t & Procedure = vtMissing,
        long lcid = 0 );
    HRESULT OnRepeat (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnSheetActivate (
        long lcid = 0 );
    void PutOnSheetActivate (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOnSheetDeactivate (
        long lcid = 0 );
    void PutOnSheetDeactivate (
        long lcid,
        _bstr_t RHS );
    HRESULT OnTime (
        const _variant_t & EarliestTime,
        _bstr_t Procedure,
        const _variant_t & LatestTime = vtMissing,
        const _variant_t & Schedule = vtMissing,
        long lcid = 0 );
    HRESULT OnUndo (
        _bstr_t Text,
        _bstr_t Procedure,
        long lcid = 0 );
    _bstr_t GetOnWindow (
        long lcid = 0 );
    void PutOnWindow (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetOperatingSystem (
        long lcid = 0 );
    _bstr_t GetOrganizationName (
        long lcid = 0 );
    _bstr_t GetPath (
        long lcid = 0 );
    _bstr_t GetPathSeparator (
        long lcid = 0 );
    _variant_t GetPreviousSelections (
        const _variant_t & Index = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetPivotTableSelection ( );
    void PutPivotTableSelection (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetPromptForSummaryInfo (
        long lcid = 0 );
    void PutPromptForSummaryInfo (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Quit ( );
    HRESULT RecordMacro (
        const _variant_t & BasicCode = vtMissing,
        const _variant_t & XlmCode = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetRecordRelative (
        long lcid = 0 );
    enum XlReferenceStyle GetReferenceStyle (
        long lcid = 0 );
    void PutReferenceStyle (
        long lcid,
        enum XlReferenceStyle RHS );
    _variant_t GetRegisteredFunctions (
        const _variant_t & Index1 = vtMissing,
        const _variant_t & Index2 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL RegisterXLL (
        _bstr_t Filename,
        long lcid = 0 );
    HRESULT Repeat (
        long lcid = 0 );
    HRESULT ResetTipWizard (
        long lcid = 0 );
    VARIANT_BOOL GetRollZoom ( );
    void PutRollZoom (
        VARIANT_BOOL RHS );
    HRESULT Save (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    HRESULT SaveWorkspace (
        const _variant_t & Filename = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetScreenUpdating (
        long lcid = 0 );
    void PutScreenUpdating (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT SetDefaultChart (
        const _variant_t & FormatName = vtMissing,
        const _variant_t & Gallery = vtMissing );
    long GetSheetsInNewWorkbook (
        long lcid = 0 );
    void PutSheetsInNewWorkbook (
        long lcid,
        long RHS );
    VARIANT_BOOL GetShowChartTipNames ( );
    void PutShowChartTipNames (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowChartTipValues ( );
    void PutShowChartTipValues (
        VARIANT_BOOL RHS );
    _bstr_t GetStandardFont (
        long lcid = 0 );
    void PutStandardFont (
        long lcid,
        _bstr_t RHS );
    double GetStandardFontSize (
        long lcid = 0 );
    void PutStandardFontSize (
        long lcid,
        double RHS );
    _bstr_t GetStartupPath (
        long lcid = 0 );
    _variant_t GetStatusBar (
        long lcid = 0 );
    void PutStatusBar (
        long lcid,
        const _variant_t & RHS );
    _bstr_t GetTemplatesPath (
        long lcid = 0 );
    VARIANT_BOOL GetShowToolTips ( );
    void PutShowToolTips (
        VARIANT_BOOL RHS );
    double GetTop (
        long lcid = 0 );
    void PutTop (
        long lcid,
        double RHS );
    enum XlFileFormat GetDefaultSaveFormat ( );
    void PutDefaultSaveFormat (
        enum XlFileFormat RHS );
    _bstr_t GetTransitionMenuKey (
        long lcid = 0 );
    void PutTransitionMenuKey (
        long lcid,
        _bstr_t RHS );
    long GetTransitionMenuKeyAction (
        long lcid = 0 );
    void PutTransitionMenuKeyAction (
        long lcid,
        long RHS );
    VARIANT_BOOL GetTransitionNavigKeys (
        long lcid = 0 );
    void PutTransitionNavigKeys (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Undo (
        long lcid = 0 );
    double GetUsableHeight (
        long lcid = 0 );
    double GetUsableWidth (
        long lcid = 0 );
    VARIANT_BOOL GetUserControl ( );
    void PutUserControl (
        VARIANT_BOOL RHS );
    _bstr_t GetUserName (
        long lcid = 0 );
    void PutUserName (
        long lcid,
        _bstr_t RHS );
    _bstr_t GetValue ( );
    VBE6::VBEPtr GetVBE ( );
    _bstr_t GetVersion (
        long lcid = 0 );
    VARIANT_BOOL GetVisible (
        long lcid = 0 );
    void PutVisible (
        long lcid,
        VARIANT_BOOL RHS );
    HRESULT Volatile (
        const _variant_t & Volatile = vtMissing,
        long lcid = 0 );
    HRESULT _Wait (
        const _variant_t & Time,
        long lcid = 0 );
    double GetWidth (
        long lcid = 0 );
    void PutWidth (
        long lcid,
        double RHS );
    VARIANT_BOOL GetWindowsForPens (
        long lcid = 0 );
    enum XlWindowState GetWindowState (
        long lcid = 0 );
    void PutWindowState (
        long lcid,
        enum XlWindowState RHS );
    long GetUILanguage (
        long lcid = 0 );
    void PutUILanguage (
        long lcid,
        long RHS );
    long GetDefaultSheetDirection (
        long lcid = 0 );
    void PutDefaultSheetDirection (
        long lcid,
        long RHS );
    long GetCursorMovement (
        long lcid = 0 );
    void PutCursorMovement (
        long lcid,
        long RHS );
    VARIANT_BOOL GetControlCharacters (
        long lcid = 0 );
    void PutControlCharacters (
        long lcid,
        VARIANT_BOOL RHS );
    _variant_t _WSFunction (
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    VARIANT_BOOL GetEnableEvents ( );
    void PutEnableEvents (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInfoWindow ( );
    void PutDisplayInfoWindow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL Wait (
        const _variant_t & Time,
        long lcid = 0 );
    VARIANT_BOOL GetExtendList ( );
    void PutExtendList (
        VARIANT_BOOL RHS );
    OLEDBErrorsPtr GetOLEDBErrors ( );
    _bstr_t GetPhonetic (
        const _variant_t & Text = vtMissing );
    Office::COMAddInsPtr GetCOMAddIns ( );
    DefaultWebOptionsPtr GetDefaultWebOptions ( );
    _bstr_t GetProductCode ( );
    _bstr_t GetUserLibraryPath ( );
    VARIANT_BOOL GetAutoPercentEntry ( );
    void PutAutoPercentEntry (
        VARIANT_BOOL RHS );
    Office::LanguageSettingsPtr GetLanguageSettings ( );
    IDispatchPtr GetDummy101 ( );
    HRESULT Dummy12 (
        struct PivotTable * p1,
        struct PivotTable * p2 );
    Office::AnswerWizardPtr GetAnswerWizard ( );
    HRESULT CalculateFull ( );
    VARIANT_BOOL FindFile (
        long lcid = 0 );
    long GetCalculationVersion ( );
    VARIANT_BOOL GetShowWindowsInTaskbar ( );
    void PutShowWindowsInTaskbar (
        VARIANT_BOOL RHS );
    enum Office::MsoFeatureInstall GetFeatureInstall ( );
    void PutFeatureInstall (
        enum Office::MsoFeatureInstall RHS );
    VARIANT_BOOL GetReady ( );
    _variant_t Dummy13 (
        const _variant_t & Arg1,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    CellFormatPtr GetFindFormat ( );
    void PutRefFindFormat (
        struct CellFormat * RHS );
    CellFormatPtr GetReplaceFormat ( );
    void PutRefReplaceFormat (
        struct CellFormat * RHS );
    UsedObjectsPtr GetUsedObjects ( );
    enum XlCalculationState GetCalculationState ( );
    enum XlCalculationInterruptKey GetCalculationInterruptKey ( );
    void PutCalculationInterruptKey (
        enum XlCalculationInterruptKey RHS );
    WatchesPtr GetWatches ( );
    VARIANT_BOOL GetDisplayFunctionToolTips ( );
    void PutDisplayFunctionToolTips (
        VARIANT_BOOL RHS );
    enum Office::MsoAutomationSecurity GetAutomationSecurity ( );
    void PutAutomationSecurity (
        enum Office::MsoAutomationSecurity RHS );
    Office::FileDialogPtr GetFileDialog (
        enum Office::MsoFileDialogType fileDialogType );
    HRESULT Dummy14 ( );
    HRESULT CalculateFullRebuild ( );
    VARIANT_BOOL GetDisplayPasteOptions ( );
    void PutDisplayPasteOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetDisplayInsertOptions ( );
    void PutDisplayInsertOptions (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetGenerateGetPivotData ( );
    void PutGenerateGetPivotData (
        VARIANT_BOOL RHS );
    AutoRecoverPtr GetAutoRecover ( );
    long GetHwnd ( );
    long GetHinstance ( );
    HRESULT CheckAbort (
        const _variant_t & KeepAbort = vtMissing );
    ErrorCheckingOptionsPtr GetErrorCheckingOptions ( );
    VARIANT_BOOL GetAutoFormatAsYouTypeReplaceHyperlinks ( );
    void PutAutoFormatAsYouTypeReplaceHyperlinks (
        VARIANT_BOOL RHS );
    SmartTagRecognizersPtr GetSmartTagRecognizers ( );
    Office::NewFilePtr GetNewWorkbook ( );
    SpellingOptionsPtr GetSpellingOptions ( );
    SpeechPtr GetSpeech ( );
    VARIANT_BOOL GetMapPaperSize ( );
    void PutMapPaperSize (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetShowStartupDialog ( );
    void PutShowStartupDialog (
        VARIANT_BOOL RHS );
    _bstr_t GetDecimalSeparator ( );
    void PutDecimalSeparator (
        _bstr_t RHS );
    _bstr_t GetThousandsSeparator ( );
    void PutThousandsSeparator (
        _bstr_t RHS );
    VARIANT_BOOL GetUseSystemSeparators ( );
    void PutUseSystemSeparators (
        VARIANT_BOOL RHS );
    RangePtr GetThisCell ( );
    RTDPtr GetRTD ( );
    VARIANT_BOOL GetDisplayDocumentActionTaskPane ( );
    void PutDisplayDocumentActionTaskPane (
        VARIANT_BOOL RHS );
    HRESULT DisplayXMLSourcePane (
        const _variant_t & XmlMap = vtMissing );
    VARIANT_BOOL GetArbitraryXMLSupportAvailable ( );
    _variant_t Support (
        IDispatch * Object,
        long ID,
        const _variant_t & arg = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ActivateMicrosoftApp (
        /*[in]*/ enum XlMSApplication Index,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddChartAutoFormat (
        /*[in]*/ VARIANT Chart,
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_AddCustomList (
        /*[in]*/ VARIANT ListArray,
        /*[in]*/ VARIANT ByRow = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AlertBeforeOverwriting (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AltStartupPath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AskToUpdateLinks (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAnimations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoCorrect (
        /*[out,retval]*/ struct AutoCorrect * * RHS ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CalculateBeforeSave (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCalculation * RHS ) = 0;
      virtual HRESULT __stdcall put_Calculation (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCalculation RHS ) = 0;
      virtual HRESULT __stdcall get_Caller (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CanPlaySounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CanRecordSounds (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CellDragAndDrop (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_CentimetersToPoints (
        /*[in]*/ double Centimeters,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckSpelling (
        /*[in]*/ BSTR Word,
        /*[in]*/ VARIANT CustomDictionary,
        /*[in]*/ VARIANT IgnoreUppercase,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ClipboardFormats (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayClipboardWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ColorButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ColorButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCommandUnderlines * RHS ) = 0;
      virtual HRESULT __stdcall put_CommandUnderlines (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCommandUnderlines RHS ) = 0;
      virtual HRESULT __stdcall get_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ConstrainNumeric (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_ConvertFormula (
        /*[in]*/ VARIANT Formula,
        /*[in]*/ enum XlReferenceStyle FromReferenceStyle,
        /*[in]*/ VARIANT ToReferenceStyle,
        /*[in]*/ VARIANT ToAbsolute,
        /*[in]*/ VARIANT RelativeTo,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_CopyObjectsWithCells (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMousePointer * RHS ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlMousePointer RHS ) = 0;
      virtual HRESULT __stdcall get_CustomListCount (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlCutCopyMode * RHS ) = 0;
      virtual HRESULT __stdcall put_CutCopyMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlCutCopyMode RHS ) = 0;
      virtual HRESULT __stdcall get_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DataEntryMode (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy1 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy2 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy3 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy4 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy5 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy6 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy7 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy8 (
        /*[in]*/ VARIANT Arg1,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy9 (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy10 (
        /*[in]*/ VARIANT arg,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy11 ( ) = 0;
      virtual HRESULT __stdcall get__Default (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultFilePath (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_DeleteChartAutoFormat (
        /*[in]*/ BSTR Name,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DeleteCustomList (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Dialogs (
        /*[out,retval]*/ struct Dialogs * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFormulaBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFullScreen (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayNoteIndicator (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayNoteIndicator (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayCommentIndicator (
        /*[out,retval]*/ enum XlCommentDisplayMode * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayCommentIndicator (
        /*[in]*/ enum XlCommentDisplayMode RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayExcel4Menus (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayRecentFiles (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayRecentFiles (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayScrollBars (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayStatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DoubleClick (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EditDirectlyInCell (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableAutoComplete (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableAutoComplete (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlEnableCancelKey * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableCancelKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlEnableCancelKey RHS ) = 0;
      virtual HRESULT __stdcall get_EnableSound (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableSound (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableTipWizard (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FileConverters (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FileSearch (
        /*[out,retval]*/ struct Office::FileSearch * * RHS ) = 0;
      virtual HRESULT __stdcall get_FileFind (
        /*[out,retval]*/ struct Office::IFind * * RHS ) = 0;
      virtual HRESULT __stdcall raw__FindFile (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimal (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_FixedDecimalPlaces (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListContents (
        /*[in]*/ long ListNum,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetCustomListNum (
        /*[in]*/ VARIANT ListArray,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetOpenFilename (
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in]*/ VARIANT MultiSelect,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetSaveAsFilename (
        /*[in]*/ VARIANT InitialFilename,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT ButtonText,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Goto (
        /*[in]*/ VARIANT Reference = vtMissing,
        /*[in]*/ VARIANT Scroll = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_IgnoreRemoteRequests (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_InchesToPoints (
        /*[in]*/ double Inches,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall raw_InputBox (
        /*[in]*/ BSTR Prompt,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT Default,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT HelpFile,
        /*[in]*/ VARIANT HelpContextID,
        /*[in]*/ VARIANT Type,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Interactive (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_International (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Iteration (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_LibraryPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_MacroOptions (
        /*[in]*/ VARIANT Macro = vtMissing,
        /*[in]*/ VARIANT Description = vtMissing,
        /*[in]*/ VARIANT HasMenu = vtMissing,
        /*[in]*/ VARIANT MenuText = vtMissing,
        /*[in]*/ VARIANT HasShortcutKey = vtMissing,
        /*[in]*/ VARIANT ShortcutKey = vtMissing,
        /*[in]*/ VARIANT Category = vtMissing,
        /*[in]*/ VARIANT StatusBar = vtMissing,
        /*[in]*/ VARIANT HelpContextID = vtMissing,
        /*[in]*/ VARIANT HelpFile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogoff (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_MailLogon (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DownloadNewMail = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_MailSession (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_MailSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlMailSystem * RHS ) = 0;
      virtual HRESULT __stdcall get_MathCoprocessorAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxChange (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_MaxIterations (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryFree (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryTotal (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MemoryUsed (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_MouseAvailable (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturn (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlDirection * RHS ) = 0;
      virtual HRESULT __stdcall put_MoveAfterReturnDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlDirection RHS ) = 0;
      virtual HRESULT __stdcall get_RecentFiles (
        /*[out,retval]*/ struct RecentFiles * * RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall raw_NextLetter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_NetworkTemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCErrors (
        /*[out,retval]*/ struct ODBCErrors * * RHS ) = 0;
      virtual HRESULT __stdcall get_ODBCTimeout (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_ODBCTimeout (
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnCalculate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnData (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnData (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnDoubleClick (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnEntry (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnKey (
        /*[in]*/ BSTR Key,
        /*[in]*/ VARIANT Procedure = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnRepeat (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetActivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnSheetDeactivate (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall raw_OnTime (
        /*[in]*/ VARIANT EarliestTime,
        /*[in]*/ BSTR Procedure,
        /*[in]*/ VARIANT LatestTime = vtMissing,
        /*[in]*/ VARIANT Schedule = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_OnUndo (
        /*[in]*/ BSTR Text,
        /*[in]*/ BSTR Procedure,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnWindow (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_OperatingSystem (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_OrganizationName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PathSeparator (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_PreviousSelections (
        /*[in]*/ VARIANT Index,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_PivotTableSelection (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PivotTableSelection (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PromptForSummaryInfo (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall raw_RecordMacro (
        /*[in]*/ VARIANT BasicCode = vtMissing,
        /*[in]*/ VARIANT XlmCode = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RecordRelative (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlReferenceStyle * RHS ) = 0;
      virtual HRESULT __stdcall put_ReferenceStyle (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlReferenceStyle RHS ) = 0;
      virtual HRESULT __stdcall get_RegisteredFunctions (
        /*[in]*/ VARIANT Index1,
        /*[in]*/ VARIANT Index2,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_RegisterXLL (
        /*[in]*/ BSTR Filename,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Repeat (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_ResetTipWizard (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_RollZoom (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_RollZoom (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_SaveWorkspace (
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ScreenUpdating (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultChart (
        /*[in]*/ VARIANT FormatName = vtMissing,
        /*[in]*/ VARIANT Gallery = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_SheetsInNewWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipNames (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipNames (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowChartTipValues (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowChartTipValues (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFont (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_StandardFontSize (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_StartupPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_TemplatesPath (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowToolTips (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowToolTips (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSaveFormat (
        /*[out,retval]*/ enum XlFileFormat * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSaveFormat (
        /*[in]*/ enum XlFileFormat RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKey (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionMenuKeyAction (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_TransitionNavigKeys (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Undo (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall get_UserControl (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UserControl (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_VBE (
        /*[out,retval]*/ struct VBE6::VBE * * RHS ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Volatile (
        /*[in]*/ VARIANT Volatile = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw__Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_WindowsForPens (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ enum XlWindowState * RHS ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ enum XlWindowState RHS ) = 0;
      virtual HRESULT __stdcall get_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_UILanguage (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_DefaultSheetDirection (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall put_CursorMovement (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ long RHS ) = 0;
      virtual HRESULT __stdcall get_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ControlCharacters (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw__WSFunction (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_EnableEvents (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_EnableEvents (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInfoWindow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInfoWindow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Wait (
        /*[in]*/ VARIANT Time,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_ExtendList (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ExtendList (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_OLEDBErrors (
        /*[out,retval]*/ struct OLEDBErrors * * RHS ) = 0;
      virtual HRESULT __stdcall raw_GetPhonetic (
        /*[in]*/ VARIANT Text,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_COMAddIns (
        /*[out,retval]*/ struct Office::COMAddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_DefaultWebOptions (
        /*[out,retval]*/ struct DefaultWebOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_ProductCode (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_UserLibraryPath (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoPercentEntry (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoPercentEntry (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_LanguageSettings (
        /*[out,retval]*/ struct Office::LanguageSettings * * RHS ) = 0;
      virtual HRESULT __stdcall get_Dummy101 (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy12 (
        /*[in]*/ struct PivotTable * p1,
        /*[in]*/ struct PivotTable * p2 ) = 0;
      virtual HRESULT __stdcall get_AnswerWizard (
        /*[out,retval]*/ struct Office::AnswerWizard * * RHS ) = 0;
      virtual HRESULT __stdcall raw_CalculateFull ( ) = 0;
      virtual HRESULT __stdcall raw_FindFile (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationVersion (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShowWindowsInTaskbar (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowWindowsInTaskbar (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_FeatureInstall (
        /*[out,retval]*/ enum Office::MsoFeatureInstall * RHS ) = 0;
      virtual HRESULT __stdcall put_FeatureInstall (
        /*[in]*/ enum Office::MsoFeatureInstall RHS ) = 0;
      virtual HRESULT __stdcall get_Ready (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy13 (
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_FindFormat (
        /*[out,retval]*/ struct CellFormat * * RHS ) = 0;
      virtual HRESULT __stdcall putref_FindFormat (
        /*[in]*/ struct CellFormat * RHS ) = 0;
      virtual HRESULT __stdcall get_ReplaceFormat (
        /*[out,retval]*/ struct CellFormat * * RHS ) = 0;
      virtual HRESULT __stdcall putref_ReplaceFormat (
        /*[in]*/ struct CellFormat * RHS ) = 0;
      virtual HRESULT __stdcall get_UsedObjects (
        /*[out,retval]*/ struct UsedObjects * * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationState (
        /*[out,retval]*/ enum XlCalculationState * RHS ) = 0;
      virtual HRESULT __stdcall get_CalculationInterruptKey (
        /*[out,retval]*/ enum XlCalculationInterruptKey * RHS ) = 0;
      virtual HRESULT __stdcall put_CalculationInterruptKey (
        /*[in]*/ enum XlCalculationInterruptKey RHS ) = 0;
      virtual HRESULT __stdcall get_Watches (
        /*[out,retval]*/ struct Watches * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayFunctionToolTips (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayFunctionToolTips (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutomationSecurity (
        /*[out,retval]*/ enum Office::MsoAutomationSecurity * RHS ) = 0;
      virtual HRESULT __stdcall put_AutomationSecurity (
        /*[in]*/ enum Office::MsoAutomationSecurity RHS ) = 0;
      virtual HRESULT __stdcall get_FileDialog (
        /*[in]*/ enum Office::MsoFileDialogType fileDialogType,
        /*[out,retval]*/ struct Office::FileDialog * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Dummy14 ( ) = 0;
      virtual HRESULT __stdcall raw_CalculateFullRebuild ( ) = 0;
      virtual HRESULT __stdcall get_DisplayPasteOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayPasteOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayInsertOptions (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayInsertOptions (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_GenerateGetPivotData (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_GenerateGetPivotData (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_AutoRecover (
        /*[out,retval]*/ struct AutoRecover * * RHS ) = 0;
      virtual HRESULT __stdcall get_Hwnd (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Hinstance (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CheckAbort (
        /*[in]*/ VARIANT KeepAbort = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ErrorCheckingOptions (
        /*[out,retval]*/ struct ErrorCheckingOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFormatAsYouTypeReplaceHyperlinks (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFormatAsYouTypeReplaceHyperlinks (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_SmartTagRecognizers (
        /*[out,retval]*/ struct SmartTagRecognizers * * RHS ) = 0;
      virtual HRESULT __stdcall get_NewWorkbook (
        /*[out,retval]*/ struct Office::NewFile * * RHS ) = 0;
      virtual HRESULT __stdcall get_SpellingOptions (
        /*[out,retval]*/ struct SpellingOptions * * RHS ) = 0;
      virtual HRESULT __stdcall get_Speech (
        /*[out,retval]*/ struct Speech * * RHS ) = 0;
      virtual HRESULT __stdcall get_MapPaperSize (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_MapPaperSize (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ShowStartupDialog (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_ShowStartupDialog (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_DecimalSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_DecimalSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ThousandsSeparator (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ThousandsSeparator (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_UseSystemSeparators (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_UseSystemSeparators (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_ThisCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_RTD (
        /*[out,retval]*/ struct RTD * * RHS ) = 0;
      virtual HRESULT __stdcall get_DisplayDocumentActionTaskPane (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_DisplayDocumentActionTaskPane (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_DisplayXMLSourcePane (
        /*[in]*/ VARIANT XmlMap = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ArbitraryXMLSupportAvailable (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall raw_Support (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ long ID,
        /*[in]*/ VARIANT arg,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
};

struct __declspec(uuid("000208d9-0000-0000-c000-000000000046"))
_Global : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBars))
    Office::_CommandBarsPtr CommandBars;
    __declspec(property(get=GetColumns))
    RangePtr Columns;
    __declspec(property(get=GetThisWorkbook))
    _WorkbookPtr ThisWorkbook[];
    __declspec(property(get=GetActiveChart))
    _ChartPtr ActiveChart;
    __declspec(property(get=GetCharts))
    SheetsPtr Charts;
    __declspec(property(get=GetSheets))
    SheetsPtr Sheets;
    __declspec(property(get=GetActiveCell))
    RangePtr ActiveCell;
    __declspec(property(get=GetActivePrinter,put=PutActivePrinter))
    _bstr_t ActivePrinter[];
    __declspec(property(get=GetActiveWorkbook))
    _WorkbookPtr ActiveWorkbook;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetActiveSheet))
    IDispatchPtr ActiveSheet;
    __declspec(property(get=GetToolbars))
    ToolbarsPtr Toolbars;
    __declspec(property(get=GetWorksheetFunction))
    WorksheetFunctionPtr WorksheetFunction;
    __declspec(property(get=GetWorksheets))
    SheetsPtr Worksheets;
    __declspec(property(get=GetRange))
    RangePtr Range[][];
    __declspec(property(get=GetRows))
    RangePtr Rows;
    __declspec(property(get=GetNames))
    NamesPtr Names;
    __declspec(property(get=GetSelection))
    IDispatchPtr Selection[];
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    _ApplicationPtr Parent;
    __declspec(property(get=GetDDEAppReturnCode))
    long DDEAppReturnCode[];
    __declspec(property(get=GetWorkbooks))
    WorkbooksPtr Workbooks;
    __declspec(property(get=GetActiveDialog))
    DialogSheetPtr ActiveDialog;
    __declspec(property(get=GetActiveMenuBar))
    MenuBarPtr ActiveMenuBar;
    __declspec(property(get=GetActiveWindow))
    WindowPtr ActiveWindow;
    __declspec(property(get=GetExcel4MacroSheets))
    SheetsPtr Excel4MacroSheets;
    __declspec(property(get=GetExcel4IntlMacroSheets))
    SheetsPtr Excel4IntlMacroSheets;
    __declspec(property(get=GetModules))
    ModulesPtr Modules;
    __declspec(property(get=GetDialogSheets))
    SheetsPtr DialogSheets;
    __declspec(property(get=GetMenuBars))
    MenuBarsPtr MenuBars;
    __declspec(property(get=GetShortcutMenus))
    MenuPtr ShortcutMenus[];
    __declspec(property(get=GetCells))
    RangePtr Cells;
    __declspec(property(get=GetAssistant))
    Office::AssistantPtr Assistant;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    _ApplicationPtr GetParent ( );
    RangePtr GetActiveCell ( );
    _ChartPtr GetActiveChart ( );
    DialogSheetPtr GetActiveDialog ( );
    MenuBarPtr GetActiveMenuBar ( );
    _bstr_t GetActivePrinter (
        long lcid = 0 );
    void PutActivePrinter (
        long lcid,
        _bstr_t RHS );
    IDispatchPtr GetActiveSheet ( );
    WindowPtr GetActiveWindow ( );
    _WorkbookPtr GetActiveWorkbook ( );
    AddInsPtr GetAddIns ( );
    Office::AssistantPtr GetAssistant ( );
    HRESULT Calculate (
        long lcid = 0 );
    RangePtr GetCells ( );
    SheetsPtr GetCharts ( );
    RangePtr GetColumns ( );
    Office::_CommandBarsPtr GetCommandBars ( );
    long GetDDEAppReturnCode (
        long lcid = 0 );
    HRESULT DDEExecute (
        long Channel,
        _bstr_t String,
        long lcid = 0 );
    long DDEInitiate (
        _bstr_t App,
        _bstr_t Topic,
        long lcid = 0 );
    HRESULT DDEPoke (
        long Channel,
        const _variant_t & Item,
        const _variant_t & Data,
        long lcid = 0 );
    _variant_t DDERequest (
        long Channel,
        _bstr_t Item,
        long lcid = 0 );
    HRESULT DDETerminate (
        long Channel,
        long lcid = 0 );
    SheetsPtr GetDialogSheets ( );
    _variant_t Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t _Evaluate (
        const _variant_t & Name,
        long lcid = 0 );
    _variant_t ExecuteExcel4Macro (
        _bstr_t String,
        long lcid = 0 );
    RangePtr Intersect (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    MenuBarsPtr GetMenuBars ( );
    ModulesPtr GetModules ( );
    NamesPtr GetNames ( );
    RangePtr GetRange (
        const _variant_t & Cell1,
        const _variant_t & Cell2 = vtMissing );
    RangePtr GetRows ( );
    _variant_t Run (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing );
    _variant_t _Run2 (
        const _variant_t & Macro = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    IDispatchPtr GetSelection (
        long lcid = 0 );
    HRESULT SendKeys (
        const _variant_t & Keys,
        const _variant_t & Wait = vtMissing,
        long lcid = 0 );
    SheetsPtr GetSheets ( );
    MenuPtr GetShortcutMenus (
        long Index );
    _WorkbookPtr GetThisWorkbook (
        long lcid = 0 );
    ToolbarsPtr GetToolbars ( );
    RangePtr Union (
        struct Range * Arg1,
        struct Range * Arg2,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing,
        const _variant_t & Arg5 = vtMissing,
        const _variant_t & Arg6 = vtMissing,
        const _variant_t & Arg7 = vtMissing,
        const _variant_t & Arg8 = vtMissing,
        const _variant_t & Arg9 = vtMissing,
        const _variant_t & Arg10 = vtMissing,
        const _variant_t & Arg11 = vtMissing,
        const _variant_t & Arg12 = vtMissing,
        const _variant_t & Arg13 = vtMissing,
        const _variant_t & Arg14 = vtMissing,
        const _variant_t & Arg15 = vtMissing,
        const _variant_t & Arg16 = vtMissing,
        const _variant_t & Arg17 = vtMissing,
        const _variant_t & Arg18 = vtMissing,
        const _variant_t & Arg19 = vtMissing,
        const _variant_t & Arg20 = vtMissing,
        const _variant_t & Arg21 = vtMissing,
        const _variant_t & Arg22 = vtMissing,
        const _variant_t & Arg23 = vtMissing,
        const _variant_t & Arg24 = vtMissing,
        const _variant_t & Arg25 = vtMissing,
        const _variant_t & Arg26 = vtMissing,
        const _variant_t & Arg27 = vtMissing,
        const _variant_t & Arg28 = vtMissing,
        const _variant_t & Arg29 = vtMissing,
        const _variant_t & Arg30 = vtMissing,
        long lcid = 0 );
    WindowsPtr GetWindows ( );
    WorkbooksPtr GetWorkbooks ( );
    WorksheetFunctionPtr GetWorksheetFunction ( );
    SheetsPtr GetWorksheets ( );
    SheetsPtr GetExcel4IntlMacroSheets ( );
    SheetsPtr GetExcel4MacroSheets ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveChart (
        /*[out,retval]*/ struct _Chart * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveDialog (
        /*[out,retval]*/ struct DialogSheet * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct MenuBar * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_ActivePrinter (
        /*[in,lcid]*/ long lcid,
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveSheet (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ struct Window * * RHS ) = 0;
      virtual HRESULT __stdcall get_ActiveWorkbook (
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * RHS ) = 0;
      virtual HRESULT __stdcall get_Assistant (
        /*[out,retval]*/ struct Office::Assistant * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Calculate (
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Cells (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Charts (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct Office::_CommandBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_DDEAppReturnCode (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEExecute (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDEInitiate (
        /*[in]*/ BSTR App,
        /*[in]*/ BSTR Topic,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDEPoke (
        /*[in]*/ long Channel,
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT Data,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall raw_DDERequest (
        /*[in]*/ long Channel,
        /*[in]*/ BSTR Item,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_DDETerminate (
        /*[in]*/ long Channel,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_DialogSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Evaluate (
        /*[in]*/ VARIANT Name,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_ExecuteExcel4Macro (
        /*[in]*/ BSTR String,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Intersect (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_MenuBars (
        /*[out,retval]*/ struct MenuBars * * RHS ) = 0;
      virtual HRESULT __stdcall get_Modules (
        /*[out,retval]*/ struct Modules * * RHS ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ struct Names * * RHS ) = 0;
      virtual HRESULT __stdcall get_Range (
        /*[in]*/ VARIANT Cell1,
        /*[in]*/ VARIANT Cell2,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rows (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw__Run2 (
        /*[in]*/ VARIANT Macro,
        /*[in]*/ VARIANT Arg1,
        /*[in]*/ VARIANT Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Selection (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendKeys (
        /*[in]*/ VARIANT Keys,
        /*[in]*/ VARIANT Wait = vtMissing,
        /*[in,lcid]*/ long lcid = 0 ) = 0;
      virtual HRESULT __stdcall get_Sheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenus (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Menu * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThisWorkbook (
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct _Workbook * * RHS ) = 0;
      virtual HRESULT __stdcall get_Toolbars (
        /*[out,retval]*/ struct Toolbars * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct Range * Arg1,
        /*[in]*/ struct Range * Arg2,
        /*[in]*/ VARIANT Arg3,
        /*[in]*/ VARIANT Arg4,
        /*[in]*/ VARIANT Arg5,
        /*[in]*/ VARIANT Arg6,
        /*[in]*/ VARIANT Arg7,
        /*[in]*/ VARIANT Arg8,
        /*[in]*/ VARIANT Arg9,
        /*[in]*/ VARIANT Arg10,
        /*[in]*/ VARIANT Arg11,
        /*[in]*/ VARIANT Arg12,
        /*[in]*/ VARIANT Arg13,
        /*[in]*/ VARIANT Arg14,
        /*[in]*/ VARIANT Arg15,
        /*[in]*/ VARIANT Arg16,
        /*[in]*/ VARIANT Arg17,
        /*[in]*/ VARIANT Arg18,
        /*[in]*/ VARIANT Arg19,
        /*[in]*/ VARIANT Arg20,
        /*[in]*/ VARIANT Arg21,
        /*[in]*/ VARIANT Arg22,
        /*[in]*/ VARIANT Arg23,
        /*[in]*/ VARIANT Arg24,
        /*[in]*/ VARIANT Arg25,
        /*[in]*/ VARIANT Arg26,
        /*[in]*/ VARIANT Arg27,
        /*[in]*/ VARIANT Arg28,
        /*[in]*/ VARIANT Arg29,
        /*[in]*/ VARIANT Arg30,
        /*[in,lcid]*/ long lcid,
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * RHS ) = 0;
      virtual HRESULT __stdcall get_Workbooks (
        /*[out,retval]*/ struct Workbooks * * RHS ) = 0;
      virtual HRESULT __stdcall get_WorksheetFunction (
        /*[out,retval]*/ struct WorksheetFunction * * RHS ) = 0;
      virtual HRESULT __stdcall get_Worksheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4IntlMacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
      virtual HRESULT __stdcall get_Excel4MacroSheets (
        /*[out,retval]*/ struct Sheets * * RHS ) = 0;
};

struct __declspec(uuid("00020818-0000-0000-c000-000000000046"))
OLEObject;
    // [ default ] dispinterface _OLEObject
    // [ default, source ] dispinterface OLEObjectEvents

struct __declspec(uuid("000208a3-0001-0000-c000-000000000046"))
IOLEObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorder))
    BorderPtr Border;
    __declspec(property(get=GetInterior))
    InteriorPtr Interior;
    __declspec(property(get=GetAutoLoad,put=PutAutoLoad))
    VARIANT_BOOL AutoLoad;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    _variant_t Placement;
    __declspec(property(get=GetPrintObject,put=PutPrintObject))
    VARIANT_BOOL PrintObject;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetSourceName,put=PutSourceName))
    _bstr_t SourceName;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetShapeRange))
    ShapeRangePtr ShapeRange;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTop,put=PutTop))
    double Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    double Left;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    _variant_t BringToFront ( );
    _variant_t Copy ( );
    _variant_t CopyPicture (
        enum XlPictureAppearance Appearance,
        enum XlCopyPictureFormat Format );
    _variant_t Cut ( );
    _variant_t Delete ( );
    IDispatchPtr Duplicate ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL RHS );
    double GetHeight ( );
    void PutHeight (
        double RHS );
    double GetLeft ( );
    void PutLeft (
        double RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    _variant_t GetPlacement ( );
    void PutPlacement (
        const _variant_t & RHS );
    VARIANT_BOOL GetPrintObject ( );
    void PutPrintObject (
        VARIANT_BOOL RHS );
    _variant_t Select (
        const _variant_t & Replace = vtMissing );
    _variant_t SendToBack ( );
    double GetTop ( );
    void PutTop (
        double RHS );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL RHS );
    double GetWidth ( );
    void PutWidth (
        double RHS );
    long GetZOrder ( );
    ShapeRangePtr GetShapeRange ( );
    BorderPtr GetBorder ( );
    InteriorPtr GetInterior ( );
    VARIANT_BOOL GetShadow ( );
    void PutShadow (
        VARIANT_BOOL RHS );
    VARIANT_BOOL GetAutoLoad ( );
    void PutAutoLoad (
        VARIANT_BOOL RHS );
    _bstr_t GetSourceName ( );
    void PutSourceName (
        _bstr_t RHS );
    _OLEObjectPtr Add (
        const _variant_t & ClassType = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & Link = vtMissing,
        const _variant_t & DisplayAsIcon = vtMissing,
        const _variant_t & IconFileName = vtMissing,
        const _variant_t & IconIndex = vtMissing,
        const _variant_t & IconLabel = vtMissing,
        const _variant_t & Left = vtMissing,
        const _variant_t & Top = vtMissing,
        const _variant_t & Width = vtMissing,
        const _variant_t & Height = vtMissing );
    long GetCount ( );
    GroupObjectPtr Group ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr _NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual void __stdcall _Dummy3 ( ) = 0;
      virtual HRESULT __stdcall raw_BringToFront (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ enum XlPictureAppearance Appearance,
        /*[in]*/ enum XlCopyPictureFormat Format,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Cut (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy12 ( ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy15 ( ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ VARIANT RHS ) = 0;
      virtual HRESULT __stdcall get_PrintObject (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_PrintObject (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace,
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall raw_SendToBack (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ double RHS ) = 0;
      virtual void __stdcall _Dummy22 ( ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_ShapeRange (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall get_Border (
        /*[out,retval]*/ struct Border * * RHS ) = 0;
      virtual HRESULT __stdcall get_Interior (
        /*[out,retval]*/ struct Interior * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy30 ( ) = 0;
      virtual HRESULT __stdcall get_AutoLoad (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLoad (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual void __stdcall _Dummy32 ( ) = 0;
      virtual void __stdcall _Dummy33 ( ) = 0;
      virtual void __stdcall _Dummy34 ( ) = 0;
      virtual HRESULT __stdcall get_SourceName (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_SourceName (
        /*[in]*/ BSTR RHS ) = 0;
      virtual void __stdcall _Dummy36 ( ) = 0;
      virtual void __stdcall _Dummy37 ( ) = 0;
      virtual void __stdcall _Dummy38 ( ) = 0;
      virtual void __stdcall _Dummy39 ( ) = 0;
      virtual void __stdcall _Dummy40 ( ) = 0;
      virtual void __stdcall _Dummy41 ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT ClassType,
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT Link,
        /*[in]*/ VARIANT DisplayAsIcon,
        /*[in]*/ VARIANT IconFileName,
        /*[in]*/ VARIANT IconIndex,
        /*[in]*/ VARIANT IconLabel,
        /*[in]*/ VARIANT Left,
        /*[in]*/ VARIANT Top,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[out,retval]*/ struct _OLEObject * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct GroupObject * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
};

struct __declspec(uuid("000c036e-0000-0000-c000-000000000046"))
DiagramNodes : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppdn ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcDiagramNodes ) = 0;
};

struct __declspec(uuid("0002446f-0001-0000-c000-000000000046"))
IDiagram : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNodes))
    DiagramNodesPtr Nodes;
    __declspec(property(get=GetType))
    enum Office::MsoDiagramType Type;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    DiagramNodesPtr GetNodes ( );
    enum Office::MsoDiagramType GetType ( );
    enum Office::MsoTriState GetAutoLayout ( );
    void PutAutoLayout (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetReverse ( );
    void PutReverse (
        enum Office::MsoTriState RHS );
    enum Office::MsoTriState GetAutoFormat ( );
    void PutAutoFormat (
        enum Office::MsoTriState RHS );
    HRESULT Convert (
        enum Office::MsoDiagramType Type );
    HRESULT FitText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct DiagramNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoDiagramType * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoLayout (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoLayout (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Reverse (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Reverse (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_AutoFormat (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoFormat (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall raw_Convert (
        /*[in]*/ enum Office::MsoDiagramType Type ) = 0;
      virtual HRESULT __stdcall raw_FitText ( ) = 0;
};

struct __declspec(uuid("000c036f-0000-0000-c000-000000000046"))
DiagramNodeChildren : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetFirstChild))
    DiagramNodePtr FirstChild;
    __declspec(property(get=GetLastChild))
    DiagramNodePtr LastChild;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    DiagramNodePtr Item (
        const _variant_t & Index );
    DiagramNodePtr AddNode (
        const _variant_t & Index,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT SelectAll ( );
    IDispatchPtr GetParent ( );
    int GetCount ( );
    DiagramNodePtr GetFirstChild ( );
    DiagramNodePtr GetLastChild ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppunkEnum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DiagramNode * * ppNode ) = 0;
      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ VARIANT Index,
        /*[in]*/ enum Office::MsoDiagramNodeType nodeType,
        /*[out,retval]*/ struct DiagramNode * * ppNewNode ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pcDiagramNodes ) = 0;
      virtual HRESULT __stdcall get_FirstChild (
        /*[out,retval]*/ struct DiagramNode * * pFirst ) = 0;
      virtual HRESULT __stdcall get_LastChild (
        /*[out,retval]*/ struct DiagramNode * * pLast ) = 0;
};

struct __declspec(uuid("000c0370-0000-0000-c000-000000000046"))
DiagramNode : Office::_IMsoDispObj
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetChildren))
    DiagramNodeChildrenPtr Children;
    __declspec(property(get=GetShape))
    ShapePtr Shape;
    __declspec(property(get=GetRoot))
    DiagramNodePtr Root;
    __declspec(property(get=GetDiagram))
    Office::IMsoDiagramPtr Diagram;
    __declspec(property(get=GetTextShape))
    ShapePtr TextShape;

    //
    // Wrapper methods for error-handling
    //

    DiagramNodePtr AddNode (
        enum Office::MsoRelativeNodePosition pos,
        enum Office::MsoDiagramNodeType nodeType );
    HRESULT Delete ( );
    HRESULT MoveNode (
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT ReplaceNode (
        struct DiagramNode * pTargetNode );
    HRESULT SwapNode (
        struct DiagramNode * pTargetNode,
        VARIANT_BOOL swapChildren );
    DiagramNodePtr CloneNode (
        VARIANT_BOOL copyChildren,
        struct DiagramNode * pTargetNode,
        enum Office::MsoRelativeNodePosition pos );
    HRESULT TransferChildren (
        struct DiagramNode * pReceivingNode );
    DiagramNodePtr NextNode ( );
    DiagramNodePtr PrevNode ( );
    IDispatchPtr GetParent ( );
    DiagramNodeChildrenPtr GetChildren ( );
    ShapePtr GetShape ( );
    DiagramNodePtr GetRoot ( );
    Office::IMsoDiagramPtr GetDiagram ( );
    enum Office::MsoOrgChartLayoutType GetLayout ( );
    void PutLayout (
        enum Office::MsoOrgChartLayoutType pdgmType );
    ShapePtr GetTextShape ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddNode (
        /*[in]*/ enum Office::MsoRelativeNodePosition pos,
        /*[in]*/ enum Office::MsoDiagramNodeType nodeType,
        /*[out,retval]*/ struct DiagramNode * * NewNode ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_MoveNode (
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition pos ) = 0;
      virtual HRESULT __stdcall raw_ReplaceNode (
        /*[in]*/ struct DiagramNode * pTargetNode ) = 0;
      virtual HRESULT __stdcall raw_SwapNode (
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ VARIANT_BOOL swapChildren ) = 0;
      virtual HRESULT __stdcall raw_CloneNode (
        /*[in]*/ VARIANT_BOOL copyChildren,
        /*[in]*/ struct DiagramNode * pTargetNode,
        /*[in]*/ enum Office::MsoRelativeNodePosition pos,
        /*[out,retval]*/ struct DiagramNode * * ppNode ) = 0;
      virtual HRESULT __stdcall raw_TransferChildren (
        /*[in]*/ struct DiagramNode * pReceivingNode ) = 0;
      virtual HRESULT __stdcall raw_NextNode (
        /*[out,retval]*/ struct DiagramNode * * ppNextNode ) = 0;
      virtual HRESULT __stdcall raw_PrevNode (
        /*[out,retval]*/ struct DiagramNode * * ppPrevNode ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall get_Children (
        /*[out,retval]*/ struct DiagramNodeChildren * * ppChildren ) = 0;
      virtual HRESULT __stdcall get_Shape (
        /*[out,retval]*/ struct Shape * * ppShape ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct DiagramNode * * ppRoot ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Office::IMsoDiagram * * ppDiagram ) = 0;
      virtual HRESULT __stdcall get_Layout (
        /*[out,retval]*/ enum Office::MsoOrgChartLayoutType * pdgmType ) = 0;
      virtual HRESULT __stdcall put_Layout (
        /*[in]*/ enum Office::MsoOrgChartLayoutType pdgmType ) = 0;
      virtual HRESULT __stdcall get_TextShape (
        /*[out,retval]*/ struct Shape * * Shape ) = 0;
};

struct __declspec(uuid("00024439-0001-0000-c000-000000000046"))
IShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=GetScript))
    Office::ScriptPtr Script;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetLocked,put=PutLocked))
    VARIANT_BOOL Locked;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetBottomRightCell))
    RangePtr BottomRightCell;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum XlPlacement Placement;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetTopLeftCell))
    RangePtr TopLeftCell;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetHyperlink))
    HyperlinkPtr Hyperlink;
    __declspec(property(get=GetDrawingObject))
    IDispatchPtr DrawingObject;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetControlFormat))
    ControlFormatPtr ControlFormat;
    __declspec(property(get=GetLinkFormat))
    LinkFormatPtr LinkFormat;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetOLEFormat))
    OLEFormatPtr OLEFormat;
    __declspec(property(get=GetFormControlType))
    enum XlFormControl FormControlType;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;
    __declspec(property(get=GetID))
    long ID;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    HRESULT Apply ( );
    HRESULT Delete ( );
    ShapePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    HyperlinkPtr GetHyperlink ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    IDispatchPtr GetDrawingObject ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t RHS );
    VARIANT_BOOL GetLocked ( );
    void PutLocked (
        VARIANT_BOOL RHS );
    RangePtr GetTopLeftCell ( );
    RangePtr GetBottomRightCell ( );
    enum XlPlacement GetPlacement ( );
    void PutPlacement (
        enum XlPlacement RHS );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT CopyPicture (
        const _variant_t & Appearance = vtMissing,
        const _variant_t & Format = vtMissing );
    ControlFormatPtr GetControlFormat ( );
    LinkFormatPtr GetLinkFormat ( );
    OLEFormatPtr GetOLEFormat ( );
    enum XlFormControl GetFormControlType ( );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    Office::ScriptPtr GetScript ( );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Hyperlink (
        /*[out,retval]*/ struct Hyperlink * * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_DrawingObject (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * RHS ) = 0;
      virtual HRESULT __stdcall put_Locked (
        /*[in]*/ VARIANT_BOOL RHS ) = 0;
      virtual HRESULT __stdcall get_TopLeftCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_BottomRightCell (
        /*[out,retval]*/ struct Range * * RHS ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum XlPlacement * RHS ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum XlPlacement RHS ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_CopyPicture (
        /*[in]*/ VARIANT Appearance = vtMissing,
        /*[in]*/ VARIANT Format = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ControlFormat (
        /*[out,retval]*/ struct ControlFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LinkFormat (
        /*[out,retval]*/ struct LinkFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_OLEFormat (
        /*[out,retval]*/ struct OLEFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_FormControlType (
        /*[out,retval]*/ enum XlFormControl * RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Script (
        /*[out,retval]*/ struct Office::Script * * RHS ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct Office::CanvasShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
};

struct __declspec(uuid("0002443b-0001-0000-c000-000000000046"))
IShapeRange : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAlternativeText,put=PutAlternativeText))
    _bstr_t AlternativeText;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetShadow))
    ShadowFormatPtr Shadow;
    __declspec(property(get=GetFill))
    FillFormatPtr Fill;
    __declspec(property(get=GetType))
    enum Office::MsoShapeType Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDiagramNode))
    DiagramNodePtr DiagramNode;
    __declspec(property(get=GetHasDiagramNode))
    enum Office::MsoTriState HasDiagramNode;
    __declspec(property(get=GetDiagram))
    DiagramPtr Diagram;
    __declspec(property(get=GetHasDiagram))
    enum Office::MsoTriState HasDiagram;
    __declspec(property(get=GetChild))
    enum Office::MsoTriState Child;
    __declspec(property(get=GetParentGroup))
    ShapePtr ParentGroup;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetWidth,put=PutWidth))
    float Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    float Height;
    __declspec(property(get=GetCanvasItems))
    Office::CanvasShapesPtr CanvasItems;
    __declspec(property(get=GetTop,put=PutTop))
    float Top;
    __declspec(property(get=GetLeft,put=PutLeft))
    float Left;
    __declspec(property(get=GetVertices))
    _variant_t Vertices;
    __declspec(property(get=GetAdjustments))
    AdjustmentsPtr Adjustments;
    __declspec(property(get=GetTextFrame))
    TextFramePtr TextFrame;
    __declspec(property(get=GetCallout))
    CalloutFormatPtr Callout;
    __declspec(property(get=GetConnectionSiteCount))
    long ConnectionSiteCount;
    __declspec(property(get=GetConnector))
    enum Office::MsoTriState Connector;
    __declspec(property(get=GetConnectorFormat))
    ConnectorFormatPtr ConnectorFormat;
    __declspec(property(get=GetGroupItems))
    GroupShapesPtr GroupItems;
    __declspec(property(get=GetHorizontalFlip))
    enum Office::MsoTriState HorizontalFlip;
    __declspec(property(get=GetNodes))
    ShapeNodesPtr Nodes;
    __declspec(property(get=GetTextEffect))
    TextEffectFormatPtr TextEffect;
    __declspec(property(get=GetThreeD))
    ThreeDFormatPtr ThreeD;
    __declspec(property(get=GetVerticalFlip))
    enum Office::MsoTriState VerticalFlip;
    __declspec(property(get=GetZOrderPosition))
    long ZOrderPosition;
    __declspec(property(get=GetApplication))
    _ApplicationPtr Application;
    __declspec(property(get=GetCreator))
    enum XlCreator Creator;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRotation,put=PutRotation))
    float Rotation;
    __declspec(property(get=GetPictureFormat))
    PictureFormatPtr PictureFormat;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetLine))
    LineFormatPtr Line;

    //
    // Wrapper methods for error-handling
    //

    _ApplicationPtr GetApplication ( );
    enum XlCreator GetCreator ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ShapePtr Item (
        const _variant_t & Index );
    ShapePtr _Default (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Align (
        enum Office::MsoAlignCmd AlignCmd,
        enum Office::MsoTriState RelativeTo );
    HRESULT Apply ( );
    HRESULT Delete ( );
    HRESULT Distribute (
        enum Office::MsoDistributeCmd DistributeCmd,
        enum Office::MsoTriState RelativeTo );
    ShapeRangePtr Duplicate ( );
    HRESULT Flip (
        enum Office::MsoFlipCmd FlipCmd );
    HRESULT IncrementLeft (
        float Increment );
    HRESULT IncrementRotation (
        float Increment );
    HRESULT IncrementTop (
        float Increment );
    ShapePtr Group ( );
    HRESULT PickUp ( );
    HRESULT RerouteConnections ( );
    ShapePtr Regroup ( );
    HRESULT ScaleHeight (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT ScaleWidth (
        float Factor,
        enum Office::MsoTriState RelativeToOriginalSize,
        const _variant_t & Scale = vtMissing );
    HRESULT Select (
        const _variant_t & Replace = vtMissing );
    HRESULT SetShapesDefaultProperties ( );
    ShapeRangePtr Ungroup ( );
    HRESULT ZOrder (
        enum Office::MsoZOrderCmd ZOrderCmd );
    AdjustmentsPtr GetAdjustments ( );
    TextFramePtr GetTextFrame ( );
    enum Office::MsoAutoShapeType GetAutoShapeType ( );
    void PutAutoShapeType (
        enum Office::MsoAutoShapeType RHS );
    CalloutFormatPtr GetCallout ( );
    long GetConnectionSiteCount ( );
    enum Office::MsoTriState GetConnector ( );
    ConnectorFormatPtr GetConnectorFormat ( );
    FillFormatPtr GetFill ( );
    GroupShapesPtr GetGroupItems ( );
    float GetHeight ( );
    void PutHeight (
        float RHS );
    enum Office::MsoTriState GetHorizontalFlip ( );
    float GetLeft ( );
    void PutLeft (
        float RHS );
    LineFormatPtr GetLine ( );
    enum Office::MsoTriState GetLockAspectRatio ( );
    void PutLockAspectRatio (
        enum Office::MsoTriState RHS );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t RHS );
    ShapeNodesPtr GetNodes ( );
    float GetRotation ( );
    void PutRotation (
        float RHS );
    PictureFormatPtr GetPictureFormat ( );
    ShadowFormatPtr GetShadow ( );
    TextEffectFormatPtr GetTextEffect ( );
    ThreeDFormatPtr GetThreeD ( );
    float GetTop ( );
    void PutTop (
        float RHS );
    enum Office::MsoShapeType GetType ( );
    enum Office::MsoTriState GetVerticalFlip ( );
    _variant_t GetVertices ( );
    enum Office::MsoTriState GetVisible ( );
    void PutVisible (
        enum Office::MsoTriState RHS );
    float GetWidth ( );
    void PutWidth (
        float RHS );
    long GetZOrderPosition ( );
    enum Office::MsoBlackWhiteMode GetBlackWhiteMode ( );
    void PutBlackWhiteMode (
        enum Office::MsoBlackWhiteMode RHS );
    _bstr_t GetAlternativeText ( );
    void PutAlternativeText (
        _bstr_t RHS );
    DiagramNodePtr GetDiagramNode ( );
    enum Office::MsoTriState GetHasDiagramNode ( );
    DiagramPtr GetDiagram ( );
    enum Office::MsoTriState GetHasDiagram ( );
    enum Office::MsoTriState GetChild ( );
    ShapePtr GetParentGroup ( );
    Office::CanvasShapesPtr GetCanvasItems ( );
    long GetID ( );
    HRESULT CanvasCropLeft (
        float Increment );
    HRESULT CanvasCropTop (
        float Increment );
    HRESULT CanvasCropRight (
        float Increment );
    HRESULT CanvasCropBottom (
        float Increment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct _Application * * RHS ) = 0;
      virtual HRESULT __stdcall get_Creator (
        /*[out,retval]*/ enum XlCreator * RHS ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * RHS ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw__Default (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum Office::MsoAlignCmd AlignCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Distribute (
        /*[in]*/ enum Office::MsoDistributeCmd DistributeCmd,
        /*[in]*/ enum Office::MsoTriState RelativeTo ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_Flip (
        /*[in]*/ enum Office::MsoFlipCmd FlipCmd ) = 0;
      virtual HRESULT __stdcall raw_IncrementLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementRotation (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_IncrementTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_Group (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_PickUp ( ) = 0;
      virtual HRESULT __stdcall raw_RerouteConnections ( ) = 0;
      virtual HRESULT __stdcall raw_Regroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ScaleHeight (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ScaleWidth (
        /*[in]*/ float Factor,
        /*[in]*/ enum Office::MsoTriState RelativeToOriginalSize,
        /*[in]*/ VARIANT Scale = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ VARIANT Replace = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetShapesDefaultProperties ( ) = 0;
      virtual HRESULT __stdcall raw_Ungroup (
        /*[out,retval]*/ struct ShapeRange * * RHS ) = 0;
      virtual HRESULT __stdcall raw_ZOrder (
        /*[in]*/ enum Office::MsoZOrderCmd ZOrderCmd ) = 0;
      virtual HRESULT __stdcall get_Adjustments (
        /*[out,retval]*/ struct Adjustments * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextFrame (
        /*[out,retval]*/ struct TextFrame * * RHS ) = 0;
      virtual HRESULT __stdcall get_AutoShapeType (
        /*[out,retval]*/ enum Office::MsoAutoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall put_AutoShapeType (
        /*[in]*/ enum Office::MsoAutoShapeType RHS ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ struct CalloutFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectionSiteCount (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_Connector (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ConnectorFormat (
        /*[out,retval]*/ struct ConnectorFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ struct FillFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_GroupItems (
        /*[out,retval]*/ struct GroupShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_HorizontalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Line (
        /*[out,retval]*/ struct LineFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_Nodes (
        /*[out,retval]*/ struct ShapeNodes * * RHS ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_PictureFormat (
        /*[out,retval]*/ struct PictureFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ struct ShadowFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_TextEffect (
        /*[out,retval]*/ struct TextEffectFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_ThreeD (
        /*[out,retval]*/ struct ThreeDFormat * * RHS ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum Office::MsoShapeType * RHS ) = 0;
      virtual HRESULT __stdcall get_VerticalFlip (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ VARIANT * RHS ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ enum Office::MsoTriState RHS ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ float * RHS ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ float RHS ) = 0;
      virtual HRESULT __stdcall get_ZOrderPosition (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall get_BlackWhiteMode (
        /*[out,retval]*/ enum Office::MsoBlackWhiteMode * RHS ) = 0;
      virtual HRESULT __stdcall put_BlackWhiteMode (
        /*[in]*/ enum Office::MsoBlackWhiteMode RHS ) = 0;
      virtual HRESULT __stdcall get_AlternativeText (
        /*[out,retval]*/ BSTR * RHS ) = 0;
      virtual HRESULT __stdcall put_AlternativeText (
        /*[in]*/ BSTR RHS ) = 0;
      virtual HRESULT __stdcall get_DiagramNode (
        /*[out,retval]*/ struct DiagramNode * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagramNode (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Diagram (
        /*[out,retval]*/ struct Diagram * * RHS ) = 0;
      virtual HRESULT __stdcall get_HasDiagram (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_Child (
        /*[out,retval]*/ enum Office::MsoTriState * RHS ) = 0;
      virtual HRESULT __stdcall get_ParentGroup (
        /*[out,retval]*/ struct Shape * * RHS ) = 0;
      virtual HRESULT __stdcall get_CanvasItems (
        /*[out,retval]*/ struct Office::CanvasShapes * * RHS ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * RHS ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropLeft (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropTop (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropRight (
        /*[in]*/ float Increment ) = 0;
      virtual HRESULT __stdcall raw_CanvasCropBottom (
        /*[in]*/ float Increment ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_MSExcel =
    {0x00020813,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Adjustments =
    {0x000c0310,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CalloutFormat =
    {0x000c0311,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ColorFormat =
    {0x000c0312,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_LineFormat =
    {0x000c0317,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShapeNode =
    {0x000c0318,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShapeNodes =
    {0x000c0319,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_PictureFormat =
    {0x000c031a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ShadowFormat =
    {0x000c031b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_TextEffectFormat =
    {0x000c031f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ThreeDFormat =
    {0x000c0321,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_FillFormat =
    {0x000c0314,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRTDUpdateEvent =
    {0xa43788c1,0xd91b,0x11d3,{0x8f,0x39,0x00,0xc0,0x4f,0x36,0x51,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IRtdServer =
    {0xec0e6191,0xdb51,0x11d3,{0x8f,0x3e,0x00,0xc0,0x4f,0x36,0x51,0xb8}};
extern "C" const GUID __declspec(selectany) IID_IChartEvents =
    {0x0002440f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOLEObjectEvents =
    {0x00024410,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRefreshEvents =
    {0x0002441b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISpellingOptions =
    {0x00024465,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISpeech =
    {0x00024466,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IUserAccess =
    {0x0002446d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRTD =
    {0x0002446e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Font =
    {0x0002084d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Window =
    {0x00020893,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Windows =
    {0x00020892,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AppEvents =
    {0x00024413,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_WorksheetFunction =
    {0x00020845,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Range =
    {0x00020846,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartEvents =
    {0x0002440f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_VPageBreak =
    {0x00024402,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_HPageBreak =
    {0x00024401,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_HPageBreaks =
    {0x00024404,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_VPageBreaks =
    {0x00024405,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_RecentFile =
    {0x00024407,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_RecentFiles =
    {0x00024406,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DocEvents =
    {0x00024411,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Style =
    {0x00020852,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Styles =
    {0x00020853,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Borders =
    {0x00020855,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AddIn =
    {0x00020857,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AddIns =
    {0x00020858,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Toolbar =
    {0x0002085c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Toolbars =
    {0x0002085d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ToolbarButton =
    {0x0002085e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ToolbarButtons =
    {0x0002085f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Areas =
    {0x00020860,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_WorkbookEvents =
    {0x00024412,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_MenuBars =
    {0x00020863,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_MenuBar =
    {0x00020864,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Menus =
    {0x00020865,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Menu =
    {0x00020866,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_MenuItems =
    {0x00020867,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_MenuItem =
    {0x00020868,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Charts =
    {0x0002086d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DrawingObjects =
    {0x0002086f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotCache =
    {0x0002441c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotCaches =
    {0x0002441d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotFormula =
    {0x0002441e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotFormulas =
    {0x0002441f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotTable =
    {0x00020872,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotTables =
    {0x00020873,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotField =
    {0x00020874,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotFields =
    {0x00020875,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CalculatedFields =
    {0x00024420,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotItem =
    {0x00020876,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotItems =
    {0x00020877,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CalculatedItems =
    {0x00024421,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Characters =
    {0x00020878,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Dialogs =
    {0x00020879,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Dialog =
    {0x0002087a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SoundNote =
    {0x0002087b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Button =
    {0x0002087d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Buttons =
    {0x0002087e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CheckBox =
    {0x0002087f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CheckBoxes =
    {0x00020880,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OptionButton =
    {0x00020881,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OptionButtons =
    {0x00020882,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_EditBox =
    {0x00020883,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_EditBoxes =
    {0x00020884,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ScrollBar =
    {0x00020885,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ScrollBars =
    {0x00020886,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListBox =
    {0x00020887,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListBoxes =
    {0x00020888,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_GroupBox =
    {0x00020889,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_GroupBoxes =
    {0x0002088a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DropDown =
    {0x0002088b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DropDowns =
    {0x0002088c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Spinner =
    {0x0002088d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Spinners =
    {0x0002088e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DialogFrame =
    {0x0002088f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Label =
    {0x00020890,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Labels =
    {0x00020891,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Panes =
    {0x00020894,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Pane =
    {0x00020895,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Scenarios =
    {0x00020896,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Scenario =
    {0x00020897,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_GroupObject =
    {0x00020898,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_GroupObjects =
    {0x00020899,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Line =
    {0x0002089a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Lines =
    {0x0002089b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Rectangle =
    {0x0002089c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Rectangles =
    {0x0002089d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Oval =
    {0x0002089e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Ovals =
    {0x0002089f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Arc =
    {0x000208a0,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Arcs =
    {0x000208a1,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OLEObjectEvents =
    {0x00024410,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID__OLEObject =
    {0x000208a2,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OLEObjects =
    {0x000208a3,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_TextBox =
    {0x000208a4,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_TextBoxes =
    {0x000208a5,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Picture =
    {0x000208a6,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Pictures =
    {0x000208a7,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Drawing =
    {0x000208a8,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Drawings =
    {0x000208a9,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_RoutingSlip =
    {0x000208aa,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Outline =
    {0x000208ab,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Module =
    {0x000208ad,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Modules =
    {0x000208ae,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DialogSheet =
    {0x000208af,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DialogSheets =
    {0x000208b0,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Worksheets =
    {0x000208b1,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PageSetup =
    {0x000208b4,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Names =
    {0x000208b8,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Name =
    {0x000208b9,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartObject =
    {0x000208cf,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartObjects =
    {0x000208d0,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Mailer =
    {0x000208d1,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CustomViews =
    {0x00024422,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CustomView =
    {0x00024423,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_FormatConditions =
    {0x00024424,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_FormatCondition =
    {0x00024425,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Comments =
    {0x00024426,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Comment =
    {0x00024427,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_RefreshEvents =
    {0x0002441b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID__QueryTable =
    {0x00024428,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_QueryTables =
    {0x00024429,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Parameter =
    {0x0002442a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Parameters =
    {0x0002442b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ODBCError =
    {0x0002442c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ODBCErrors =
    {0x0002442d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Validation =
    {0x0002442f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Hyperlinks =
    {0x00024430,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Hyperlink =
    {0x00024431,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDocEvents =
    {0x00024411,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AutoFilter =
    {0x00024432,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Filters =
    {0x00024433,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Filter =
    {0x00024434,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AutoCorrect =
    {0x000208d4,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Border =
    {0x00020854,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Interior =
    {0x00020870,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartFillFormat =
    {0x00024435,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartColorFormat =
    {0x00024436,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Axis =
    {0x00020848,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartTitle =
    {0x00020849,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AxisTitle =
    {0x0002084a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartGroup =
    {0x00020859,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartGroups =
    {0x0002085a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Axes =
    {0x0002085b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Points =
    {0x00020869,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Point =
    {0x0002086a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Series =
    {0x0002086b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SeriesCollection =
    {0x0002086c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DataLabel =
    {0x000208b2,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DataLabels =
    {0x000208b3,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_LegendEntry =
    {0x000208ba,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_LegendEntries =
    {0x000208bb,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_LegendKey =
    {0x000208bc,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Trendlines =
    {0x000208bd,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Trendline =
    {0x000208be,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Corners =
    {0x000208c0,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SeriesLines =
    {0x000208c1,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_HiLoLines =
    {0x000208c2,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Gridlines =
    {0x000208c3,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DropLines =
    {0x000208c4,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_LeaderLines =
    {0x00024437,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_UpBars =
    {0x000208c5,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DownBars =
    {0x000208c6,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Floor =
    {0x000208c7,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Walls =
    {0x000208c8,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_TickLabels =
    {0x000208c9,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PlotArea =
    {0x000208cb,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ChartArea =
    {0x000208cc,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Legend =
    {0x000208cd,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ErrorBars =
    {0x000208ce,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DataTable =
    {0x00020843,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Phonetic =
    {0x00024438,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Shape =
    {0x00024439,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Shapes =
    {0x0002443a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ShapeRange =
    {0x0002443b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_GroupShapes =
    {0x0002443c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_TextFrame =
    {0x0002443d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ConnectorFormat =
    {0x0002443e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_FreeformBuilder =
    {0x0002443f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ControlFormat =
    {0x00024440,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OLEFormat =
    {0x00024441,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_LinkFormat =
    {0x00024442,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PublishObjects =
    {0x00024443,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OLEDBError =
    {0x00024445,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_OLEDBErrors =
    {0x00024446,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Phonetics =
    {0x00024447,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotLayout =
    {0x0002444a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_DisplayUnitLabel =
    {0x0002084c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CellFormat =
    {0x00024450,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_UsedObjects =
    {0x00024451,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CustomProperties =
    {0x00024452,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CustomProperty =
    {0x00024453,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CalculatedMembers =
    {0x00024454,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_CalculatedMember =
    {0x00024455,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Watches =
    {0x00024456,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Watch =
    {0x00024457,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotCell =
    {0x00024458,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Graphic =
    {0x00024459,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AutoRecover =
    {0x0002445a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ErrorCheckingOptions =
    {0x0002445b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Errors =
    {0x0002445c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Error =
    {0x0002445d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTagAction =
    {0x0002445e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTagActions =
    {0x0002445f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTag =
    {0x00024460,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTags =
    {0x00024461,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTagRecognizer =
    {0x00024462,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTagRecognizers =
    {0x00024463,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SmartTagOptions =
    {0x00024464,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_SpellingOptions =
    {0x00024465,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Speech =
    {0x00024466,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Protection =
    {0x00024467,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_PivotItemList =
    {0x00024468,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Tab =
    {0x00024469,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AllowEditRanges =
    {0x0002446a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IProtection =
    {0x00024467,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_AllowEditRange =
    {0x0002446b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAllowEditRanges =
    {0x0002446a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_UserAccessList =
    {0x0002446c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAllowEditRange =
    {0x0002446b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_UserAccess =
    {0x0002446d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IUserAccessList =
    {0x0002446c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_RTD =
    {0x0002446e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_Diagram =
    {0x0002446f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListObjects =
    {0x00024470,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListObject =
    {0x00024471,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListColumns =
    {0x00024472,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListColumn =
    {0x00024473,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListRows =
    {0x00024474,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListRow =
    {0x00024475,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlNamespace =
    {0x00024476,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlNamespaces =
    {0x00024477,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlDataBinding =
    {0x00024478,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlSchema =
    {0x00024479,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlSchemas =
    {0x0002447a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlMap =
    {0x0002447b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWorkbookEvents =
    {0x00024412,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XmlMaps =
    {0x0002447c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_ListDataFormat =
    {0x0002447d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) DIID_XPath =
    {0x0002447e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDummy =
    {0x0002442e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICanvasShapes =
    {0x0002444f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_QueryTable =
    {0x59191da1,0xea47,0x11ce,{0xa5,0x1f,0x00,0xaa,0x00,0x61,0x50,0x7f}};
extern "C" const GUID __declspec(selectany) CLSID_Application =
    {0x00024500,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWindows =
    {0x00020892,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWorksheetFunction =
    {0x00020845,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Sheets =
    {0x000208d7,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IHPageBreaks =
    {0x00024404,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IVPageBreaks =
    {0x00024405,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRecentFiles =
    {0x00024406,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__Worksheet =
    {0x000208d8,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IStyle =
    {0x00020852,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IStyles =
    {0x00020853,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IBorders =
    {0x00020855,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAddIn =
    {0x00020857,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAddIns =
    {0x00020858,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IToolbar =
    {0x0002085c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IToolbars =
    {0x0002085d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IToolbarButton =
    {0x0002085e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IToolbarButtons =
    {0x0002085f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAreas =
    {0x00020860,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenuBars =
    {0x00020863,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenuBar =
    {0x00020864,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenus =
    {0x00020865,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenu =
    {0x00020866,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenuItems =
    {0x00020867,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMenuItem =
    {0x00020868,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDrawingObjects =
    {0x0002086f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotCache =
    {0x0002441c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotCaches =
    {0x0002441d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotFormula =
    {0x0002441e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotFormulas =
    {0x0002441f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotTables =
    {0x00020873,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotFields =
    {0x00020875,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICalculatedFields =
    {0x00024420,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotItem =
    {0x00020876,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotItems =
    {0x00020877,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICalculatedItems =
    {0x00024421,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICharacters =
    {0x00020878,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDialogs =
    {0x00020879,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDialog =
    {0x0002087a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISoundNote =
    {0x0002087b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IButton =
    {0x0002087d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IButtons =
    {0x0002087e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICheckBox =
    {0x0002087f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICheckBoxes =
    {0x00020880,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOptionButton =
    {0x00020881,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOptionButtons =
    {0x00020882,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IEditBox =
    {0x00020883,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IEditBoxes =
    {0x00020884,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IScrollBar =
    {0x00020885,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IScrollBars =
    {0x00020886,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListBox =
    {0x00020887,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListBoxes =
    {0x00020888,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGroupBox =
    {0x00020889,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGroupBoxes =
    {0x0002088a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDropDown =
    {0x0002088b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDropDowns =
    {0x0002088c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISpinner =
    {0x0002088d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISpinners =
    {0x0002088e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDialogFrame =
    {0x0002088f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILabel =
    {0x00020890,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILabels =
    {0x00020891,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPanes =
    {0x00020894,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPane =
    {0x00020895,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IScenarios =
    {0x00020896,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IScenario =
    {0x00020897,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGroupObject =
    {0x00020898,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGroupObjects =
    {0x00020899,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILine =
    {0x0002089a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILines =
    {0x0002089b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRectangle =
    {0x0002089c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRectangles =
    {0x0002089d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOval =
    {0x0002089e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOvals =
    {0x0002089f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IArc =
    {0x000208a0,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IArcs =
    {0x000208a1,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__IOLEObject =
    {0x000208a2,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITextBox =
    {0x000208a4,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITextBoxes =
    {0x000208a5,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPictures =
    {0x000208a7,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDrawing =
    {0x000208a8,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDrawings =
    {0x000208a9,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRoutingSlip =
    {0x000208aa,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOutline =
    {0x000208ab,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IModule =
    {0x000208ad,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IModules =
    {0x000208ae,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDialogSheet =
    {0x000208af,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDialogSheets =
    {0x000208b0,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWorksheets =
    {0x000208b1,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPageSetup =
    {0x000208b4,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_INames =
    {0x000208b8,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IName =
    {0x000208b9,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartObjects =
    {0x000208d0,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IMailer =
    {0x000208d1,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICustomViews =
    {0x00024422,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICustomView =
    {0x00024423,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFormatConditions =
    {0x00024424,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFormatCondition =
    {0x00024425,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IComments =
    {0x00024426,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IComment =
    {0x00024427,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__IQueryTable =
    {0x00024428,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IQueryTables =
    {0x00024429,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IParameter =
    {0x0002442a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IParameters =
    {0x0002442b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IODBCError =
    {0x0002442c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IODBCErrors =
    {0x0002442d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IValidation =
    {0x0002442f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IHyperlinks =
    {0x00024430,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IHyperlink =
    {0x00024431,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAutoFilter =
    {0x00024432,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFilters =
    {0x00024433,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFilter =
    {0x00024434,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAutoCorrect =
    {0x000208d4,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IBorder =
    {0x00020854,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IInterior =
    {0x00020870,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartFillFormat =
    {0x00024435,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartColorFormat =
    {0x00024436,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAxis =
    {0x00020848,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartTitle =
    {0x00020849,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAxisTitle =
    {0x0002084a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartGroup =
    {0x00020859,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartGroups =
    {0x0002085a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAxes =
    {0x0002085b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPoints =
    {0x00020869,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPoint =
    {0x0002086a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISeries =
    {0x0002086b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISeriesCollection =
    {0x0002086c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDataLabel =
    {0x000208b2,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDataLabels =
    {0x000208b3,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILegendEntry =
    {0x000208ba,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILegendEntries =
    {0x000208bb,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILegendKey =
    {0x000208bc,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITrendlines =
    {0x000208bd,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITrendline =
    {0x000208be,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICorners =
    {0x000208c0,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISeriesLines =
    {0x000208c1,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IHiLoLines =
    {0x000208c2,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGridlines =
    {0x000208c3,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDropLines =
    {0x000208c4,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILeaderLines =
    {0x00024437,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IUpBars =
    {0x000208c5,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDownBars =
    {0x000208c6,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFloor =
    {0x000208c7,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWalls =
    {0x000208c8,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITickLabels =
    {0x000208c9,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPlotArea =
    {0x000208cb,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartArea =
    {0x000208cc,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILegend =
    {0x000208cd,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IErrorBars =
    {0x000208ce,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDataTable =
    {0x00020843,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPhonetic =
    {0x00024438,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IShapes =
    {0x0002443a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGroupShapes =
    {0x0002443c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITextFrame =
    {0x0002443d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IConnectorFormat =
    {0x0002443e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IFreeformBuilder =
    {0x0002443f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IControlFormat =
    {0x00024440,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOLEFormat =
    {0x00024441,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ILinkFormat =
    {0x00024442,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_PublishObject =
    {0x00024444,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPublishObjects =
    {0x00024443,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOLEDBError =
    {0x00024445,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOLEDBErrors =
    {0x00024446,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPhonetics =
    {0x00024447,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DefaultWebOptions =
    {0x00024448,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_WebOptions =
    {0x00024449,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_TreeviewControl =
    {0x0002444b,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CubeField =
    {0x0002444c,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotField =
    {0x00020874,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_CubeFields =
    {0x0002444d,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotTable =
    {0x00020872,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotLayout =
    {0x0002444a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDisplayUnitLabel =
    {0x0002084c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICellFormat =
    {0x00024450,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IUsedObjects =
    {0x00024451,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICustomProperties =
    {0x00024452,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICustomProperty =
    {0x00024453,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICalculatedMembers =
    {0x00024454,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICalculatedMember =
    {0x00024455,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWatches =
    {0x00024456,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWatch =
    {0x00024457,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotCell =
    {0x00024458,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IGraphic =
    {0x00024459,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAutoRecover =
    {0x0002445a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IErrorCheckingOptions =
    {0x0002445b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IErrors =
    {0x0002445c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IError =
    {0x0002445d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTagAction =
    {0x0002445e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTagActions =
    {0x0002445f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTag =
    {0x00024460,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTags =
    {0x00024461,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTagRecognizer =
    {0x00024462,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTagRecognizers =
    {0x00024463,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ISmartTagOptions =
    {0x00024464,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IPivotItemList =
    {0x00024468,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ITab =
    {0x00024469,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListObjects =
    {0x00024470,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListObject =
    {0x00024471,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListColumns =
    {0x00024472,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListColumn =
    {0x00024473,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListRows =
    {0x00024474,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListRow =
    {0x00024475,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlNamespace =
    {0x00024476,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlNamespaces =
    {0x00024477,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlDataBinding =
    {0x00024478,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlSchema =
    {0x00024479,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlSchemas =
    {0x0002447a,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlMap =
    {0x0002447b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXmlMaps =
    {0x0002447c,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IListDataFormat =
    {0x0002447d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IXPath =
    {0x0002447e,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_Chart =
    {0x00020821,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IWindow =
    {0x00020893,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__Chart =
    {0x000208d6,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__Workbook =
    {0x000208da,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_ICharts =
    {0x0002086d,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IChartObject =
    {0x000208cf,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_Worksheet =
    {0x00020820,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRange =
    {0x00020846,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IVPageBreak =
    {0x00024402,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IHPageBreak =
    {0x00024401,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_Global =
    {0x00020812,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_Workbook =
    {0x00020819,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IAppEvents =
    {0x00024413,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IRecentFile =
    {0x00024407,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_Workbooks =
    {0x000208db,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__Application =
    {0x000208d5,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID__Global =
    {0x000208d9,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) CLSID_OLEObject =
    {0x00020818,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IOLEObjects =
    {0x000208a3,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNodes =
    {0x000c036e,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IDiagram =
    {0x0002446f,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNodeChildren =
    {0x000c036f,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_DiagramNode =
    {0x000c0370,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IShape =
    {0x00024439,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};
extern "C" const GUID __declspec(selectany) IID_IShapeRange =
    {0x0002443b,0x0001,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};

//
// Function implementation mapping
//

#pragma start_map_region("f:\lzx_lsb\zhftool\debug\EXCEL.tli")
__declspec(implementation_key(1)) IDispatchPtr Adjustments::GetParent ( );
__declspec(implementation_key(2)) int Adjustments::GetCount ( );
__declspec(implementation_key(3)) float Adjustments::GetItem ( int Index );
__declspec(implementation_key(4)) void Adjustments::PutItem ( int Index, float Val );
__declspec(implementation_key(5)) IDispatchPtr CalloutFormat::GetParent ( );
__declspec(implementation_key(6)) HRESULT CalloutFormat::AutomaticLength ( );
__declspec(implementation_key(7)) HRESULT CalloutFormat::CustomDrop ( float Drop );
__declspec(implementation_key(8)) HRESULT CalloutFormat::CustomLength ( float Length );
__declspec(implementation_key(9)) HRESULT CalloutFormat::PresetDrop ( enum Office::MsoCalloutDropType DropType );
__declspec(implementation_key(10)) enum Office::MsoTriState CalloutFormat::GetAccent ( );
__declspec(implementation_key(11)) void CalloutFormat::PutAccent ( enum Office::MsoTriState Accent );
__declspec(implementation_key(12)) enum Office::MsoCalloutAngleType CalloutFormat::GetAngle ( );
__declspec(implementation_key(13)) void CalloutFormat::PutAngle ( enum Office::MsoCalloutAngleType Angle );
__declspec(implementation_key(14)) enum Office::MsoTriState CalloutFormat::GetAutoAttach ( );
__declspec(implementation_key(15)) void CalloutFormat::PutAutoAttach ( enum Office::MsoTriState AutoAttach );
__declspec(implementation_key(16)) enum Office::MsoTriState CalloutFormat::GetAutoLength ( );
__declspec(implementation_key(17)) enum Office::MsoTriState CalloutFormat::GetBorder ( );
__declspec(implementation_key(18)) void CalloutFormat::PutBorder ( enum Office::MsoTriState Border );
__declspec(implementation_key(19)) float CalloutFormat::GetDrop ( );
__declspec(implementation_key(20)) enum Office::MsoCalloutDropType CalloutFormat::GetDropType ( );
__declspec(implementation_key(21)) float CalloutFormat::GetGap ( );
__declspec(implementation_key(22)) void CalloutFormat::PutGap ( float Gap );
__declspec(implementation_key(23)) float CalloutFormat::GetLength ( );
__declspec(implementation_key(24)) enum Office::MsoCalloutType CalloutFormat::GetType ( );
__declspec(implementation_key(25)) void CalloutFormat::PutType ( enum Office::MsoCalloutType Type );
__declspec(implementation_key(26)) IDispatchPtr ColorFormat::GetParent ( );
__declspec(implementation_key(27)) Office::MsoRGBType ColorFormat::GetRGBEx ( );
__declspec(implementation_key(28)) void ColorFormat::PutRGBEx ( Office::MsoRGBType RGBEx );
__declspec(implementation_key(29)) int ColorFormat::GetSchemeColor ( );
__declspec(implementation_key(30)) void ColorFormat::PutSchemeColor ( int SchemeColor );
__declspec(implementation_key(31)) enum Office::MsoColorType ColorFormat::GetType ( );
__declspec(implementation_key(32)) float ColorFormat::GetTintAndShade ( );
__declspec(implementation_key(33)) void ColorFormat::PutTintAndShade ( float pValue );
__declspec(implementation_key(34)) IDispatchPtr LineFormat::GetParent ( );
__declspec(implementation_key(35)) ColorFormatPtr LineFormat::GetBackColor ( );
__declspec(implementation_key(36)) void LineFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(37)) enum Office::MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( );
__declspec(implementation_key(38)) void LineFormat::PutBeginArrowheadLength ( enum Office::MsoArrowheadLength BeginArrowheadLength );
__declspec(implementation_key(39)) enum Office::MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( );
__declspec(implementation_key(40)) void LineFormat::PutBeginArrowheadStyle ( enum Office::MsoArrowheadStyle BeginArrowheadStyle );
__declspec(implementation_key(41)) enum Office::MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( );
__declspec(implementation_key(42)) void LineFormat::PutBeginArrowheadWidth ( enum Office::MsoArrowheadWidth BeginArrowheadWidth );
__declspec(implementation_key(43)) enum Office::MsoLineDashStyle LineFormat::GetDashStyle ( );
__declspec(implementation_key(44)) void LineFormat::PutDashStyle ( enum Office::MsoLineDashStyle DashStyle );
__declspec(implementation_key(45)) enum Office::MsoArrowheadLength LineFormat::GetEndArrowheadLength ( );
__declspec(implementation_key(46)) void LineFormat::PutEndArrowheadLength ( enum Office::MsoArrowheadLength EndArrowheadLength );
__declspec(implementation_key(47)) enum Office::MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( );
__declspec(implementation_key(48)) void LineFormat::PutEndArrowheadStyle ( enum Office::MsoArrowheadStyle EndArrowheadStyle );
__declspec(implementation_key(49)) enum Office::MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( );
__declspec(implementation_key(50)) void LineFormat::PutEndArrowheadWidth ( enum Office::MsoArrowheadWidth EndArrowheadWidth );
__declspec(implementation_key(51)) ColorFormatPtr LineFormat::GetForeColor ( );
__declspec(implementation_key(52)) void LineFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(53)) enum Office::MsoPatternType LineFormat::GetPattern ( );
__declspec(implementation_key(54)) void LineFormat::PutPattern ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(55)) enum Office::MsoLineStyle LineFormat::GetStyle ( );
__declspec(implementation_key(56)) void LineFormat::PutStyle ( enum Office::MsoLineStyle Style );
__declspec(implementation_key(57)) float LineFormat::GetTransparency ( );
__declspec(implementation_key(58)) void LineFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(59)) enum Office::MsoTriState LineFormat::GetVisible ( );
__declspec(implementation_key(60)) void LineFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(61)) float LineFormat::GetWeight ( );
__declspec(implementation_key(62)) void LineFormat::PutWeight ( float Weight );
__declspec(implementation_key(63)) IDispatchPtr ShapeNode::GetParent ( );
__declspec(implementation_key(64)) enum Office::MsoEditingType ShapeNode::GetEditingType ( );
__declspec(implementation_key(65)) _variant_t ShapeNode::GetPoints ( );
__declspec(implementation_key(66)) enum Office::MsoSegmentType ShapeNode::GetSegmentType ( );
__declspec(implementation_key(67)) IDispatchPtr ShapeNodes::GetParent ( );
__declspec(implementation_key(68)) int ShapeNodes::GetCount ( );
__declspec(implementation_key(69)) ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(70)) IUnknownPtr ShapeNodes::Get_NewEnum ( );
__declspec(implementation_key(71)) HRESULT ShapeNodes::Delete ( int Index );
__declspec(implementation_key(72)) HRESULT ShapeNodes::Insert ( int Index, enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 );
__declspec(implementation_key(73)) HRESULT ShapeNodes::SetEditingType ( int Index, enum Office::MsoEditingType EditingType );
__declspec(implementation_key(74)) HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 );
__declspec(implementation_key(75)) HRESULT ShapeNodes::SetSegmentType ( int Index, enum Office::MsoSegmentType SegmentType );
__declspec(implementation_key(76)) IDispatchPtr PictureFormat::GetParent ( );
__declspec(implementation_key(77)) HRESULT PictureFormat::IncrementBrightness ( float Increment );
__declspec(implementation_key(78)) HRESULT PictureFormat::IncrementContrast ( float Increment );
__declspec(implementation_key(79)) float PictureFormat::GetBrightness ( );
__declspec(implementation_key(80)) void PictureFormat::PutBrightness ( float Brightness );
__declspec(implementation_key(81)) enum Office::MsoPictureColorType PictureFormat::GetColorType ( );
__declspec(implementation_key(82)) void PictureFormat::PutColorType ( enum Office::MsoPictureColorType ColorType );
__declspec(implementation_key(83)) float PictureFormat::GetContrast ( );
__declspec(implementation_key(84)) void PictureFormat::PutContrast ( float Contrast );
__declspec(implementation_key(85)) float PictureFormat::GetCropBottom ( );
__declspec(implementation_key(86)) void PictureFormat::PutCropBottom ( float CropBottom );
__declspec(implementation_key(87)) float PictureFormat::GetCropLeft ( );
__declspec(implementation_key(88)) void PictureFormat::PutCropLeft ( float CropLeft );
__declspec(implementation_key(89)) float PictureFormat::GetCropRight ( );
__declspec(implementation_key(90)) void PictureFormat::PutCropRight ( float CropRight );
__declspec(implementation_key(91)) float PictureFormat::GetCropTop ( );
__declspec(implementation_key(92)) void PictureFormat::PutCropTop ( float CropTop );
__declspec(implementation_key(93)) Office::MsoRGBType PictureFormat::GetTransparencyColor ( );
__declspec(implementation_key(94)) void PictureFormat::PutTransparencyColor ( Office::MsoRGBType TransparencyColor );
__declspec(implementation_key(95)) enum Office::MsoTriState PictureFormat::GetTransparentBackground ( );
__declspec(implementation_key(96)) void PictureFormat::PutTransparentBackground ( enum Office::MsoTriState TransparentBackground );
__declspec(implementation_key(97)) IDispatchPtr ShadowFormat::GetParent ( );
__declspec(implementation_key(98)) HRESULT ShadowFormat::IncrementOffsetX ( float Increment );
__declspec(implementation_key(99)) HRESULT ShadowFormat::IncrementOffsetY ( float Increment );
__declspec(implementation_key(100)) ColorFormatPtr ShadowFormat::GetForeColor ( );
__declspec(implementation_key(101)) void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(102)) enum Office::MsoTriState ShadowFormat::GetObscured ( );
__declspec(implementation_key(103)) void ShadowFormat::PutObscured ( enum Office::MsoTriState Obscured );
__declspec(implementation_key(104)) float ShadowFormat::GetOffsetX ( );
__declspec(implementation_key(105)) void ShadowFormat::PutOffsetX ( float OffsetX );
__declspec(implementation_key(106)) float ShadowFormat::GetOffsetY ( );
__declspec(implementation_key(107)) void ShadowFormat::PutOffsetY ( float OffsetY );
__declspec(implementation_key(108)) float ShadowFormat::GetTransparency ( );
__declspec(implementation_key(109)) void ShadowFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(110)) enum Office::MsoShadowType ShadowFormat::GetType ( );
__declspec(implementation_key(111)) void ShadowFormat::PutType ( enum Office::MsoShadowType Type );
__declspec(implementation_key(112)) enum Office::MsoTriState ShadowFormat::GetVisible ( );
__declspec(implementation_key(113)) void ShadowFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(114)) IDispatchPtr TextEffectFormat::GetParent ( );
__declspec(implementation_key(115)) HRESULT TextEffectFormat::ToggleVerticalText ( );
__declspec(implementation_key(116)) enum Office::MsoTextEffectAlignment TextEffectFormat::GetAlignment ( );
__declspec(implementation_key(117)) void TextEffectFormat::PutAlignment ( enum Office::MsoTextEffectAlignment Alignment );
__declspec(implementation_key(118)) enum Office::MsoTriState TextEffectFormat::GetFontBold ( );
__declspec(implementation_key(119)) void TextEffectFormat::PutFontBold ( enum Office::MsoTriState FontBold );
__declspec(implementation_key(120)) enum Office::MsoTriState TextEffectFormat::GetFontItalic ( );
__declspec(implementation_key(121)) void TextEffectFormat::PutFontItalic ( enum Office::MsoTriState FontItalic );
__declspec(implementation_key(122)) _bstr_t TextEffectFormat::GetFontName ( );
__declspec(implementation_key(123)) void TextEffectFormat::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(124)) float TextEffectFormat::GetFontSize ( );
__declspec(implementation_key(125)) void TextEffectFormat::PutFontSize ( float FontSize );
__declspec(implementation_key(126)) enum Office::MsoTriState TextEffectFormat::GetKernedPairs ( );
__declspec(implementation_key(127)) void TextEffectFormat::PutKernedPairs ( enum Office::MsoTriState KernedPairs );
__declspec(implementation_key(128)) enum Office::MsoTriState TextEffectFormat::GetNormalizedHeight ( );
__declspec(implementation_key(129)) void TextEffectFormat::PutNormalizedHeight ( enum Office::MsoTriState NormalizedHeight );
__declspec(implementation_key(130)) enum Office::MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( );
__declspec(implementation_key(131)) void TextEffectFormat::PutPresetShape ( enum Office::MsoPresetTextEffectShape PresetShape );
__declspec(implementation_key(132)) enum Office::MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( );
__declspec(implementation_key(133)) void TextEffectFormat::PutPresetTextEffect ( enum Office::MsoPresetTextEffect Preset );
__declspec(implementation_key(134)) enum Office::MsoTriState TextEffectFormat::GetRotatedChars ( );
__declspec(implementation_key(135)) void TextEffectFormat::PutRotatedChars ( enum Office::MsoTriState RotatedChars );
__declspec(implementation_key(136)) _bstr_t TextEffectFormat::GetText ( );
__declspec(implementation_key(137)) void TextEffectFormat::PutText ( _bstr_t Text );
__declspec(implementation_key(138)) float TextEffectFormat::GetTracking ( );
__declspec(implementation_key(139)) void TextEffectFormat::PutTracking ( float Tracking );
__declspec(implementation_key(140)) IDispatchPtr ThreeDFormat::GetParent ( );
__declspec(implementation_key(141)) HRESULT ThreeDFormat::IncrementRotationX ( float Increment );
__declspec(implementation_key(142)) HRESULT ThreeDFormat::IncrementRotationY ( float Increment );
__declspec(implementation_key(143)) HRESULT ThreeDFormat::ResetRotation ( );
__declspec(implementation_key(144)) HRESULT ThreeDFormat::SetThreeDFormat ( enum Office::MsoPresetThreeDFormat PresetThreeDFormat );
__declspec(implementation_key(145)) HRESULT ThreeDFormat::SetExtrusionDirection ( enum Office::MsoPresetExtrusionDirection PresetExtrusionDirection );
__declspec(implementation_key(146)) float ThreeDFormat::GetDepth ( );
__declspec(implementation_key(147)) void ThreeDFormat::PutDepth ( float Depth );
__declspec(implementation_key(148)) ColorFormatPtr ThreeDFormat::GetExtrusionColor ( );
__declspec(implementation_key(149)) enum Office::MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( );
__declspec(implementation_key(150)) void ThreeDFormat::PutExtrusionColorType ( enum Office::MsoExtrusionColorType ExtrusionColorType );
__declspec(implementation_key(151)) enum Office::MsoTriState ThreeDFormat::GetPerspective ( );
__declspec(implementation_key(152)) void ThreeDFormat::PutPerspective ( enum Office::MsoTriState Perspective );
__declspec(implementation_key(153)) enum Office::MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( );
__declspec(implementation_key(154)) enum Office::MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( );
__declspec(implementation_key(155)) void ThreeDFormat::PutPresetLightingDirection ( enum Office::MsoPresetLightingDirection PresetLightingDirection );
__declspec(implementation_key(156)) enum Office::MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( );
__declspec(implementation_key(157)) void ThreeDFormat::PutPresetLightingSoftness ( enum Office::MsoPresetLightingSoftness PresetLightingSoftness );
__declspec(implementation_key(158)) enum Office::MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( );
__declspec(implementation_key(159)) void ThreeDFormat::PutPresetMaterial ( enum Office::MsoPresetMaterial PresetMaterial );
__declspec(implementation_key(160)) enum Office::MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( );
__declspec(implementation_key(161)) float ThreeDFormat::GetRotationX ( );
__declspec(implementation_key(162)) void ThreeDFormat::PutRotationX ( float RotationX );
__declspec(implementation_key(163)) float ThreeDFormat::GetRotationY ( );
__declspec(implementation_key(164)) void ThreeDFormat::PutRotationY ( float RotationY );
__declspec(implementation_key(165)) enum Office::MsoTriState ThreeDFormat::GetVisible ( );
__declspec(implementation_key(166)) void ThreeDFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(167)) IDispatchPtr FillFormat::GetParent ( );
__declspec(implementation_key(168)) HRESULT FillFormat::Background ( );
__declspec(implementation_key(169)) HRESULT FillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, int Variant, float Degree );
__declspec(implementation_key(170)) HRESULT FillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(171)) HRESULT FillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, int Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(172)) HRESULT FillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(173)) HRESULT FillFormat::Solid ( );
__declspec(implementation_key(174)) HRESULT FillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, int Variant );
__declspec(implementation_key(175)) HRESULT FillFormat::UserPicture ( _bstr_t PictureFile );
__declspec(implementation_key(176)) HRESULT FillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(177)) ColorFormatPtr FillFormat::GetBackColor ( );
__declspec(implementation_key(178)) void FillFormat::PutBackColor ( struct ColorFormat * BackColor );
__declspec(implementation_key(179)) ColorFormatPtr FillFormat::GetForeColor ( );
__declspec(implementation_key(180)) void FillFormat::PutForeColor ( struct ColorFormat * ForeColor );
__declspec(implementation_key(181)) enum Office::MsoGradientColorType FillFormat::GetGradientColorType ( );
__declspec(implementation_key(182)) float FillFormat::GetGradientDegree ( );
__declspec(implementation_key(183)) enum Office::MsoGradientStyle FillFormat::GetGradientStyle ( );
__declspec(implementation_key(184)) int FillFormat::GetGradientVariant ( );
__declspec(implementation_key(185)) enum Office::MsoPatternType FillFormat::GetPattern ( );
__declspec(implementation_key(186)) enum Office::MsoPresetGradientType FillFormat::GetPresetGradientType ( );
__declspec(implementation_key(187)) enum Office::MsoPresetTexture FillFormat::GetPresetTexture ( );
__declspec(implementation_key(188)) _bstr_t FillFormat::GetTextureName ( );
__declspec(implementation_key(189)) enum Office::MsoTextureType FillFormat::GetTextureType ( );
__declspec(implementation_key(190)) float FillFormat::GetTransparency ( );
__declspec(implementation_key(191)) void FillFormat::PutTransparency ( float Transparency );
__declspec(implementation_key(192)) enum Office::MsoFillType FillFormat::GetType ( );
__declspec(implementation_key(193)) enum Office::MsoTriState FillFormat::GetVisible ( );
__declspec(implementation_key(194)) void FillFormat::PutVisible ( enum Office::MsoTriState Visible );
__declspec(implementation_key(195)) HRESULT IRTDUpdateEvent::UpdateNotify ( );
__declspec(implementation_key(196)) long IRTDUpdateEvent::GetHeartbeatInterval ( );
__declspec(implementation_key(197)) void IRTDUpdateEvent::PutHeartbeatInterval ( long plRetVal );
__declspec(implementation_key(198)) HRESULT IRTDUpdateEvent::Disconnect ( );
__declspec(implementation_key(199)) long IRtdServer::ServerStart ( struct IRTDUpdateEvent * CallbackObject );
__declspec(implementation_key(200)) _variant_t IRtdServer::ConnectData ( long TopicID, SAFEARRAY * * Strings, VARIANT_BOOL * GetNewValues );
__declspec(implementation_key(201)) SAFEARRAY * IRtdServer::RefreshData ( long * TopicCount );
__declspec(implementation_key(202)) HRESULT IRtdServer::DisconnectData ( long TopicID );
__declspec(implementation_key(203)) long IRtdServer::Heartbeat ( );
__declspec(implementation_key(204)) HRESULT IRtdServer::ServerTerminate ( );
__declspec(implementation_key(205)) HRESULT IChartEvents::Activate ( );
__declspec(implementation_key(206)) HRESULT IChartEvents::Deactivate ( );
__declspec(implementation_key(207)) HRESULT IChartEvents::Resize ( );
__declspec(implementation_key(208)) HRESULT IChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(209)) HRESULT IChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(210)) HRESULT IChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(211)) HRESULT IChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(212)) HRESULT IChartEvents::DragPlot ( );
__declspec(implementation_key(213)) HRESULT IChartEvents::DragOver ( );
__declspec(implementation_key(214)) HRESULT IChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(215)) HRESULT IChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(216)) HRESULT IChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(217)) HRESULT IChartEvents::Calculate ( );
__declspec(implementation_key(218)) HRESULT IOLEObjectEvents::GotFocus ( );
__declspec(implementation_key(219)) HRESULT IOLEObjectEvents::LostFocus ( );
__declspec(implementation_key(220)) HRESULT IRefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(221)) HRESULT IRefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(222)) long ISpellingOptions::GetDictLang ( );
__declspec(implementation_key(223)) void ISpellingOptions::PutDictLang ( long RHS );
__declspec(implementation_key(224)) _bstr_t ISpellingOptions::GetUserDict ( );
__declspec(implementation_key(225)) void ISpellingOptions::PutUserDict ( _bstr_t RHS );
__declspec(implementation_key(226)) VARIANT_BOOL ISpellingOptions::GetIgnoreCaps ( );
__declspec(implementation_key(227)) void ISpellingOptions::PutIgnoreCaps ( VARIANT_BOOL RHS );
__declspec(implementation_key(228)) VARIANT_BOOL ISpellingOptions::GetSuggestMainOnly ( );
__declspec(implementation_key(229)) void ISpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL RHS );
__declspec(implementation_key(230)) VARIANT_BOOL ISpellingOptions::GetIgnoreMixedDigits ( );
__declspec(implementation_key(231)) void ISpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL RHS );
__declspec(implementation_key(232)) VARIANT_BOOL ISpellingOptions::GetIgnoreFileNames ( );
__declspec(implementation_key(233)) void ISpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(234)) VARIANT_BOOL ISpellingOptions::GetGermanPostReform ( );
__declspec(implementation_key(235)) void ISpellingOptions::PutGermanPostReform ( VARIANT_BOOL RHS );
__declspec(implementation_key(236)) VARIANT_BOOL ISpellingOptions::GetKoreanCombineAux ( );
__declspec(implementation_key(237)) void ISpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL RHS );
__declspec(implementation_key(238)) VARIANT_BOOL ISpellingOptions::GetKoreanUseAutoChangeList ( );
__declspec(implementation_key(239)) void ISpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL RHS );
__declspec(implementation_key(240)) VARIANT_BOOL ISpellingOptions::GetKoreanProcessCompound ( );
__declspec(implementation_key(241)) void ISpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL RHS );
__declspec(implementation_key(242)) enum XlHebrewModes ISpellingOptions::GetHebrewModes ( );
__declspec(implementation_key(243)) void ISpellingOptions::PutHebrewModes ( enum XlHebrewModes RHS );
__declspec(implementation_key(244)) enum XlArabicModes ISpellingOptions::GetArabicModes ( );
__declspec(implementation_key(245)) void ISpellingOptions::PutArabicModes ( enum XlArabicModes RHS );
__declspec(implementation_key(246)) HRESULT ISpeech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge );
__declspec(implementation_key(247)) enum XlSpeakDirection ISpeech::GetDirection ( );
__declspec(implementation_key(248)) void ISpeech::PutDirection ( enum XlSpeakDirection RHS );
__declspec(implementation_key(249)) VARIANT_BOOL ISpeech::GetSpeakCellOnEnter ( );
__declspec(implementation_key(250)) void ISpeech::PutSpeakCellOnEnter ( VARIANT_BOOL RHS );
__declspec(implementation_key(251)) _bstr_t IUserAccess::GetName ( );
__declspec(implementation_key(252)) VARIANT_BOOL IUserAccess::GetAllowEdit ( );
__declspec(implementation_key(253)) void IUserAccess::PutAllowEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(254)) HRESULT IUserAccess::Delete ( );
__declspec(implementation_key(255)) long IRTD::GetThrottleInterval ( );
__declspec(implementation_key(256)) void IRTD::PutThrottleInterval ( long RHS );
__declspec(implementation_key(257)) HRESULT IRTD::RefreshData ( );
__declspec(implementation_key(258)) HRESULT IRTD::RestartServers ( );
__declspec(implementation_key(259)) _ApplicationPtr Font::GetApplication ( );
__declspec(implementation_key(260)) enum XlCreator Font::GetCreator ( );
__declspec(implementation_key(261)) IDispatchPtr Font::GetParent ( );
__declspec(implementation_key(262)) _variant_t Font::GetBackground ( );
__declspec(implementation_key(263)) void Font::PutBackground ( const _variant_t & _arg1 );
__declspec(implementation_key(264)) _variant_t Font::GetBold ( );
__declspec(implementation_key(265)) void Font::PutBold ( const _variant_t & _arg1 );
__declspec(implementation_key(266)) _variant_t Font::GetColor ( );
__declspec(implementation_key(267)) void Font::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(268)) _variant_t Font::GetColorIndex ( );
__declspec(implementation_key(269)) void Font::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(270)) _variant_t Font::GetFontStyle ( );
__declspec(implementation_key(271)) void Font::PutFontStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(272)) _variant_t Font::GetItalic ( );
__declspec(implementation_key(273)) void Font::PutItalic ( const _variant_t & _arg1 );
__declspec(implementation_key(274)) _variant_t Font::GetName ( );
__declspec(implementation_key(275)) void Font::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(276)) _variant_t Font::GetOutlineFont ( );
__declspec(implementation_key(277)) void Font::PutOutlineFont ( const _variant_t & _arg1 );
__declspec(implementation_key(278)) _variant_t Font::GetShadow ( );
__declspec(implementation_key(279)) void Font::PutShadow ( const _variant_t & _arg1 );
__declspec(implementation_key(280)) _variant_t Font::GetSize ( );
__declspec(implementation_key(281)) void Font::PutSize ( const _variant_t & _arg1 );
__declspec(implementation_key(282)) _variant_t Font::GetStrikethrough ( );
__declspec(implementation_key(283)) void Font::PutStrikethrough ( const _variant_t & _arg1 );
__declspec(implementation_key(284)) _variant_t Font::GetSubscript ( );
__declspec(implementation_key(285)) void Font::PutSubscript ( const _variant_t & _arg1 );
__declspec(implementation_key(286)) _variant_t Font::GetSuperscript ( );
__declspec(implementation_key(287)) void Font::PutSuperscript ( const _variant_t & _arg1 );
__declspec(implementation_key(288)) _variant_t Font::GetUnderline ( );
__declspec(implementation_key(289)) void Font::PutUnderline ( const _variant_t & _arg1 );
__declspec(implementation_key(290)) _ApplicationPtr Window::GetApplication ( );
__declspec(implementation_key(291)) enum XlCreator Window::GetCreator ( );
__declspec(implementation_key(292)) IDispatchPtr Window::GetParent ( );
__declspec(implementation_key(293)) _variant_t Window::Activate ( );
__declspec(implementation_key(294)) _variant_t Window::ActivateNext ( );
__declspec(implementation_key(295)) _variant_t Window::ActivatePrevious ( );
__declspec(implementation_key(296)) RangePtr Window::GetActiveCell ( );
__declspec(implementation_key(297)) _ChartPtr Window::GetActiveChart ( );
__declspec(implementation_key(298)) PanePtr Window::GetActivePane ( );
__declspec(implementation_key(299)) IDispatchPtr Window::GetActiveSheet ( );
__declspec(implementation_key(300)) _variant_t Window::GetCaption ( );
__declspec(implementation_key(301)) void Window::PutCaption ( const _variant_t & _arg1 );
__declspec(implementation_key(302)) VARIANT_BOOL Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(303)) VARIANT_BOOL Window::GetDisplayFormulas ( );
__declspec(implementation_key(304)) void Window::PutDisplayFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(305)) VARIANT_BOOL Window::GetDisplayGridlines ( );
__declspec(implementation_key(306)) void Window::PutDisplayGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(307)) VARIANT_BOOL Window::GetDisplayHeadings ( );
__declspec(implementation_key(308)) void Window::PutDisplayHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(309)) VARIANT_BOOL Window::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(310)) void Window::PutDisplayHorizontalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(311)) VARIANT_BOOL Window::GetDisplayOutline ( );
__declspec(implementation_key(312)) void Window::PutDisplayOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(313)) VARIANT_BOOL Window::Get_DisplayRightToLeft ( );
__declspec(implementation_key(314)) void Window::Put_DisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(315)) VARIANT_BOOL Window::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(316)) void Window::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(317)) VARIANT_BOOL Window::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(318)) void Window::PutDisplayWorkbookTabs ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(319)) VARIANT_BOOL Window::GetDisplayZeros ( );
__declspec(implementation_key(320)) void Window::PutDisplayZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(321)) VARIANT_BOOL Window::GetEnableResize ( );
__declspec(implementation_key(322)) void Window::PutEnableResize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(323)) VARIANT_BOOL Window::GetFreezePanes ( );
__declspec(implementation_key(324)) void Window::PutFreezePanes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(325)) long Window::GetGridlineColor ( );
__declspec(implementation_key(326)) void Window::PutGridlineColor ( long _arg1 );
__declspec(implementation_key(327)) enum XlColorIndex Window::GetGridlineColorIndex ( );
__declspec(implementation_key(328)) void Window::PutGridlineColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(329)) double Window::GetHeight ( );
__declspec(implementation_key(330)) void Window::PutHeight ( double _arg1 );
__declspec(implementation_key(331)) long Window::GetIndex ( );
__declspec(implementation_key(332)) _variant_t Window::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(333)) double Window::GetLeft ( );
__declspec(implementation_key(334)) void Window::PutLeft ( double _arg1 );
__declspec(implementation_key(335)) WindowPtr Window::NewWindow ( );
__declspec(implementation_key(336)) _bstr_t Window::GetOnWindow ( );
__declspec(implementation_key(337)) void Window::PutOnWindow ( _bstr_t _arg1 );
__declspec(implementation_key(338)) PanesPtr Window::GetPanes ( );
__declspec(implementation_key(339)) _variant_t Window::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(340)) _variant_t Window::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(341)) RangePtr Window::GetRangeSelection ( );
__declspec(implementation_key(342)) long Window::GetScrollColumn ( );
__declspec(implementation_key(343)) void Window::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(344)) long Window::GetScrollRow ( );
__declspec(implementation_key(345)) void Window::PutScrollRow ( long _arg1 );
__declspec(implementation_key(346)) _variant_t Window::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(347)) SheetsPtr Window::GetSelectedSheets ( );
__declspec(implementation_key(348)) IDispatchPtr Window::GetSelection ( );
__declspec(implementation_key(349)) _variant_t Window::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(350)) VARIANT_BOOL Window::GetSplit ( );
__declspec(implementation_key(351)) void Window::PutSplit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(352)) long Window::GetSplitColumn ( );
__declspec(implementation_key(353)) void Window::PutSplitColumn ( long _arg1 );
__declspec(implementation_key(354)) double Window::GetSplitHorizontal ( );
__declspec(implementation_key(355)) void Window::PutSplitHorizontal ( double _arg1 );
__declspec(implementation_key(356)) long Window::GetSplitRow ( );
__declspec(implementation_key(357)) void Window::PutSplitRow ( long _arg1 );
__declspec(implementation_key(358)) double Window::GetSplitVertical ( );
__declspec(implementation_key(359)) void Window::PutSplitVertical ( double _arg1 );
__declspec(implementation_key(360)) double Window::GetTabRatio ( );
__declspec(implementation_key(361)) void Window::PutTabRatio ( double _arg1 );
__declspec(implementation_key(362)) double Window::GetTop ( );
__declspec(implementation_key(363)) void Window::PutTop ( double _arg1 );
__declspec(implementation_key(364)) enum XlWindowType Window::GetType ( );
__declspec(implementation_key(365)) double Window::GetUsableHeight ( );
__declspec(implementation_key(366)) double Window::GetUsableWidth ( );
__declspec(implementation_key(367)) VARIANT_BOOL Window::GetVisible ( );
__declspec(implementation_key(368)) void Window::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(369)) RangePtr Window::GetVisibleRange ( );
__declspec(implementation_key(370)) double Window::GetWidth ( );
__declspec(implementation_key(371)) void Window::PutWidth ( double _arg1 );
__declspec(implementation_key(372)) long Window::GetWindowNumber ( );
__declspec(implementation_key(373)) enum XlWindowState Window::GetWindowState ( );
__declspec(implementation_key(374)) void Window::PutWindowState ( enum XlWindowState _arg1 );
__declspec(implementation_key(375)) _variant_t Window::GetZoom ( );
__declspec(implementation_key(376)) void Window::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(377)) enum XlWindowView Window::GetView ( );
__declspec(implementation_key(378)) void Window::PutView ( enum XlWindowView _arg1 );
__declspec(implementation_key(379)) VARIANT_BOOL Window::GetDisplayRightToLeft ( );
__declspec(implementation_key(380)) void Window::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(381)) long Window::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(382)) long Window::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(383)) IDispatchPtr Window::RangeFromPoint ( long x, long y );
__declspec(implementation_key(384)) HRESULT Window::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(385)) _ApplicationPtr Windows::GetApplication ( );
__declspec(implementation_key(386)) enum XlCreator Windows::GetCreator ( );
__declspec(implementation_key(387)) IDispatchPtr Windows::GetParent ( );
__declspec(implementation_key(388)) _variant_t Windows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(389)) long Windows::GetCount ( );
__declspec(implementation_key(390)) WindowPtr Windows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(391)) IUnknownPtr Windows::Get_NewEnum ( );
__declspec(implementation_key(392)) WindowPtr Windows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(393)) VARIANT_BOOL Windows::CompareSideBySideWith ( const _variant_t & WindowName );
__declspec(implementation_key(394)) VARIANT_BOOL Windows::BreakSideBySide ( );
__declspec(implementation_key(395)) VARIANT_BOOL Windows::GetSyncScrollingSideBySide ( );
__declspec(implementation_key(396)) void Windows::PutSyncScrollingSideBySide ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(397)) HRESULT Windows::ResetPositionsSideBySide ( );
__declspec(implementation_key(398)) HRESULT AppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(399)) HRESULT AppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(400)) HRESULT AppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(401)) HRESULT AppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(402)) HRESULT AppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(403)) HRESULT AppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(404)) HRESULT AppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(405)) HRESULT AppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(406)) HRESULT AppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(407)) HRESULT AppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(408)) HRESULT AppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(409)) HRESULT AppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(410)) HRESULT AppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(411)) HRESULT AppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(412)) HRESULT AppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(413)) HRESULT AppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(414)) HRESULT AppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(415)) HRESULT AppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(416)) HRESULT AppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(417)) HRESULT AppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(418)) HRESULT AppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(419)) HRESULT AppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(420)) HRESULT AppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(421)) HRESULT AppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(422)) HRESULT AppEvents::WorkbookSync ( struct _Workbook * Wb, enum Office::MsoSyncEventType SyncEventType );
__declspec(implementation_key(423)) HRESULT AppEvents::WorkbookBeforeXmlImport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL IsRefresh, VARIANT_BOOL * Cancel );
__declspec(implementation_key(424)) HRESULT AppEvents::WorkbookAfterXmlImport ( struct _Workbook * Wb, struct XmlMap * Map, VARIANT_BOOL IsRefresh, enum XlXmlImportResult Result );
__declspec(implementation_key(425)) HRESULT AppEvents::WorkbookBeforeXmlExport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL * Cancel );
__declspec(implementation_key(426)) HRESULT AppEvents::WorkbookAfterXmlExport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, enum XlXmlExportResult Result );
__declspec(implementation_key(427)) _ApplicationPtr WorksheetFunction::GetApplication ( );
__declspec(implementation_key(428)) enum XlCreator WorksheetFunction::GetCreator ( );
__declspec(implementation_key(429)) IDispatchPtr WorksheetFunction::GetParent ( );
__declspec(implementation_key(430)) _variant_t WorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(431)) double WorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(432)) VARIANT_BOOL WorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(433)) VARIANT_BOOL WorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(434)) double WorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(435)) double WorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(436)) double WorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(437)) double WorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(438)) double WorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(439)) double WorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(440)) _bstr_t WorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(441)) _bstr_t WorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(442)) double WorksheetFunction::Pi ( );
__declspec(implementation_key(443)) double WorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(444)) double WorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(445)) double WorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(446)) _variant_t WorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(447)) _variant_t WorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(448)) _bstr_t WorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(449)) VARIANT_BOOL WorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(450)) VARIANT_BOOL WorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(451)) double WorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(452)) double WorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(453)) double WorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(454)) double WorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(455)) double WorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(456)) double WorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(457)) double WorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(458)) double WorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(459)) _bstr_t WorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(460)) _variant_t WorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(461)) _variant_t WorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(462)) _variant_t WorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(463)) _variant_t WorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(464)) double WorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(465)) double WorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(466)) double WorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(467)) double WorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(468)) double WorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(469)) double WorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(470)) double WorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(471)) double WorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(472)) double WorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(473)) double WorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(474)) _variant_t WorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(475)) double WorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(476)) double WorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(477)) double WorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(478)) _variant_t WorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(479)) _variant_t WorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(480)) _variant_t WorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(481)) double WorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(482)) _bstr_t WorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(483)) _bstr_t WorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(484)) _bstr_t WorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(485)) _bstr_t WorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(486)) double WorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(487)) VARIANT_BOOL WorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(488)) VARIANT_BOOL WorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(489)) VARIANT_BOOL WorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(490)) double WorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(491)) double WorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(492)) double WorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(493)) _bstr_t WorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(494)) double WorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(495)) _variant_t WorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(496)) _variant_t WorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(497)) double WorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(498)) double WorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(499)) double WorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(500)) double WorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(501)) double WorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(502)) double WorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(503)) VARIANT_BOOL WorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(504)) double WorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(505)) double WorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(506)) double WorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(507)) double WorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(508)) VARIANT_BOOL WorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(509)) double WorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(510)) _bstr_t WorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(511)) double WorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(512)) double WorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(513)) _bstr_t WorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(514)) double WorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(515)) double WorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(516)) double WorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(517)) double WorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(518)) double WorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(519)) double WorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(520)) double WorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(521)) double WorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(522)) double WorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(523)) double WorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(524)) double WorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(525)) double WorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(526)) double WorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(527)) _variant_t WorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(528)) double WorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(529)) _variant_t WorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(530)) double WorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(531)) double WorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(532)) double WorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(533)) double WorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(534)) double WorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(535)) double WorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(536)) double WorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(537)) double WorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(538)) double WorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(539)) double WorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(540)) double WorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(541)) double WorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(542)) double WorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(543)) double WorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(544)) double WorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(545)) double WorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(546)) double WorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(547)) double WorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(548)) double WorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(549)) double WorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(550)) double WorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(551)) double WorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(552)) double WorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(553)) double WorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(554)) double WorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(555)) double WorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(556)) double WorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(557)) double WorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(558)) double WorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(559)) double WorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(560)) double WorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(561)) double WorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(562)) double WorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(563)) double WorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(564)) double WorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(565)) double WorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(566)) double WorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(567)) double WorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(568)) double WorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(569)) double WorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(570)) double WorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(571)) double WorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(572)) double WorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(573)) double WorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(574)) double WorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(575)) double WorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(576)) double WorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(577)) double WorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(578)) double WorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(579)) double WorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(580)) double WorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(581)) double WorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(582)) double WorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(583)) double WorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(584)) double WorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(585)) double WorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(586)) double WorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(587)) double WorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(588)) double WorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(589)) double WorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(590)) double WorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(591)) double WorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(592)) double WorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(593)) double WorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(594)) double WorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(595)) double WorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(596)) double WorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(597)) double WorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(598)) double WorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(599)) double WorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(600)) double WorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(601)) double WorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(602)) _bstr_t WorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(603)) _bstr_t WorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(604)) _bstr_t WorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(605)) _bstr_t WorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(606)) _bstr_t WorksheetFunction::BahtText ( double Arg1 );
__declspec(implementation_key(607)) _bstr_t WorksheetFunction::ThaiDayOfWeek ( double Arg1 );
__declspec(implementation_key(608)) _bstr_t WorksheetFunction::ThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(609)) _bstr_t WorksheetFunction::ThaiMonthOfYear ( double Arg1 );
__declspec(implementation_key(610)) _bstr_t WorksheetFunction::ThaiNumSound ( double Arg1 );
__declspec(implementation_key(611)) _bstr_t WorksheetFunction::ThaiNumString ( double Arg1 );
__declspec(implementation_key(612)) double WorksheetFunction::ThaiStringLength ( _bstr_t Arg1 );
__declspec(implementation_key(613)) VARIANT_BOOL WorksheetFunction::IsThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(614)) double WorksheetFunction::RoundBahtDown ( double Arg1 );
__declspec(implementation_key(615)) double WorksheetFunction::RoundBahtUp ( double Arg1 );
__declspec(implementation_key(616)) double WorksheetFunction::ThaiYear ( double Arg1 );
__declspec(implementation_key(617)) _variant_t WorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 );
__declspec(implementation_key(618)) _ApplicationPtr Range::GetApplication ( );
__declspec(implementation_key(619)) enum XlCreator Range::GetCreator ( );
__declspec(implementation_key(620)) IDispatchPtr Range::GetParent ( );
__declspec(implementation_key(621)) _variant_t Range::Activate ( );
__declspec(implementation_key(622)) _variant_t Range::GetAddIndent ( );
__declspec(implementation_key(623)) void Range::PutAddIndent ( const _variant_t & _arg1 );
__declspec(implementation_key(624)) _bstr_t Range::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(625)) _bstr_t Range::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(626)) _variant_t Range::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(627)) _variant_t Range::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(628)) _variant_t Range::ApplyOutlineStyles ( );
__declspec(implementation_key(629)) AreasPtr Range::GetAreas ( );
__declspec(implementation_key(630)) _bstr_t Range::AutoComplete ( _bstr_t String );
__declspec(implementation_key(631)) _variant_t Range::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(632)) _variant_t Range::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(633)) _variant_t Range::AutoFit ( );
__declspec(implementation_key(634)) _variant_t Range::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(635)) _variant_t Range::AutoOutline ( );
__declspec(implementation_key(636)) _variant_t Range::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(637)) BordersPtr Range::GetBorders ( );
__declspec(implementation_key(638)) _variant_t Range::Calculate ( );
__declspec(implementation_key(639)) RangePtr Range::GetCells ( );
__declspec(implementation_key(640)) CharactersPtr Range::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(641)) _variant_t Range::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(642)) _variant_t Range::Clear ( );
__declspec(implementation_key(643)) _variant_t Range::ClearContents ( );
__declspec(implementation_key(644)) _variant_t Range::ClearFormats ( );
__declspec(implementation_key(645)) _variant_t Range::ClearNotes ( );
__declspec(implementation_key(646)) _variant_t Range::ClearOutline ( );
__declspec(implementation_key(647)) long Range::GetColumn ( );
__declspec(implementation_key(648)) RangePtr Range::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(649)) RangePtr Range::GetColumns ( );
__declspec(implementation_key(650)) _variant_t Range::GetColumnWidth ( );
__declspec(implementation_key(651)) void Range::PutColumnWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(652)) _variant_t Range::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(653)) _variant_t Range::Copy ( const _variant_t & Destination );
__declspec(implementation_key(654)) long Range::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(655)) _variant_t Range::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(656)) long Range::GetCount ( );
__declspec(implementation_key(657)) _variant_t Range::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(658)) _variant_t Range::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(659)) RangePtr Range::GetCurrentArray ( );
__declspec(implementation_key(660)) RangePtr Range::GetCurrentRegion ( );
__declspec(implementation_key(661)) _variant_t Range::Cut ( const _variant_t & Destination );
__declspec(implementation_key(662)) _variant_t Range::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(663)) _variant_t Range::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(664)) void Range::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(665)) _variant_t Range::Delete ( const _variant_t & Shift );
__declspec(implementation_key(666)) RangePtr Range::GetDependents ( );
__declspec(implementation_key(667)) _variant_t Range::DialogBoxEx ( );
__declspec(implementation_key(668)) RangePtr Range::GetDirectDependents ( );
__declspec(implementation_key(669)) RangePtr Range::GetDirectPrecedents ( );
__declspec(implementation_key(670)) _variant_t Range::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(671)) RangePtr Range::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(672)) RangePtr Range::GetEntireColumn ( );
__declspec(implementation_key(673)) RangePtr Range::GetEntireRow ( );
__declspec(implementation_key(674)) _variant_t Range::FillDown ( );
__declspec(implementation_key(675)) _variant_t Range::FillLeft ( );
__declspec(implementation_key(676)) _variant_t Range::FillRight ( );
__declspec(implementation_key(677)) _variant_t Range::FillUp ( );
__declspec(implementation_key(678)) RangePtr Range::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat );
__declspec(implementation_key(679)) RangePtr Range::FindNext ( const _variant_t & After );
__declspec(implementation_key(680)) RangePtr Range::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(681)) FontPtr Range::GetFont ( );
__declspec(implementation_key(682)) _variant_t Range::GetFormula ( );
__declspec(implementation_key(683)) void Range::PutFormula ( const _variant_t & _arg1 );
__declspec(implementation_key(684)) _variant_t Range::GetFormulaArray ( );
__declspec(implementation_key(685)) void Range::PutFormulaArray ( const _variant_t & _arg1 );
__declspec(implementation_key(686)) enum XlFormulaLabel Range::GetFormulaLabel ( );
__declspec(implementation_key(687)) void Range::PutFormulaLabel ( enum XlFormulaLabel _arg1 );
__declspec(implementation_key(688)) _variant_t Range::GetFormulaHidden ( );
__declspec(implementation_key(689)) void Range::PutFormulaHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(690)) _variant_t Range::GetFormulaLocal ( );
__declspec(implementation_key(691)) void Range::PutFormulaLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(692)) _variant_t Range::GetFormulaR1C1 ( );
__declspec(implementation_key(693)) void Range::PutFormulaR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(694)) _variant_t Range::GetFormulaR1C1Local ( );
__declspec(implementation_key(695)) void Range::PutFormulaR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(696)) _variant_t Range::FunctionWizard ( );
__declspec(implementation_key(697)) VARIANT_BOOL Range::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(698)) _variant_t Range::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(699)) _variant_t Range::GetHasArray ( );
__declspec(implementation_key(700)) _variant_t Range::GetHasFormula ( );
__declspec(implementation_key(701)) _variant_t Range::GetHeight ( );
__declspec(implementation_key(702)) _variant_t Range::GetHidden ( );
__declspec(implementation_key(703)) void Range::PutHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(704)) _variant_t Range::GetHorizontalAlignment ( );
__declspec(implementation_key(705)) void Range::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(706)) _variant_t Range::GetIndentLevel ( );
__declspec(implementation_key(707)) void Range::PutIndentLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(708)) HRESULT Range::InsertIndent ( long InsertAmount );
__declspec(implementation_key(709)) _variant_t Range::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin );
__declspec(implementation_key(710)) InteriorPtr Range::GetInterior ( );
__declspec(implementation_key(711)) _variant_t Range::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex );
__declspec(implementation_key(712)) void Range::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, const _variant_t & _arg3 );
__declspec(implementation_key(713)) _variant_t Range::Justify ( );
__declspec(implementation_key(714)) _variant_t Range::GetLeft ( );
__declspec(implementation_key(715)) long Range::GetListHeaderRows ( );
__declspec(implementation_key(716)) _variant_t Range::ListNames ( );
__declspec(implementation_key(717)) enum XlLocationInTable Range::GetLocationInTable ( );
__declspec(implementation_key(718)) _variant_t Range::GetLocked ( );
__declspec(implementation_key(719)) void Range::PutLocked ( const _variant_t & _arg1 );
__declspec(implementation_key(720)) HRESULT Range::Merge ( const _variant_t & Across );
__declspec(implementation_key(721)) HRESULT Range::UnMerge ( );
__declspec(implementation_key(722)) RangePtr Range::GetMergeArea ( );
__declspec(implementation_key(723)) _variant_t Range::GetMergeCells ( );
__declspec(implementation_key(724)) void Range::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(725)) _variant_t Range::GetName ( );
__declspec(implementation_key(726)) void Range::PutName ( const _variant_t & _arg1 );
__declspec(implementation_key(727)) _variant_t Range::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(728)) IUnknownPtr Range::Get_NewEnum ( );
__declspec(implementation_key(729)) RangePtr Range::GetNext ( );
__declspec(implementation_key(730)) _bstr_t Range::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(731)) _variant_t Range::GetNumberFormat ( );
__declspec(implementation_key(732)) void Range::PutNumberFormat ( const _variant_t & _arg1 );
__declspec(implementation_key(733)) _variant_t Range::GetNumberFormatLocal ( );
__declspec(implementation_key(734)) void Range::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(735)) RangePtr Range::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(736)) _variant_t Range::GetOrientation ( );
__declspec(implementation_key(737)) void Range::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(738)) _variant_t Range::GetOutlineLevel ( );
__declspec(implementation_key(739)) void Range::PutOutlineLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(740)) long Range::GetPageBreak ( );
__declspec(implementation_key(741)) void Range::PutPageBreak ( long _arg1 );
__declspec(implementation_key(742)) _variant_t Range::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(743)) _variant_t Range::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(744)) PivotFieldPtr Range::GetPivotField ( );
__declspec(implementation_key(745)) PivotItemPtr Range::GetPivotItem ( );
__declspec(implementation_key(746)) PivotTablePtr Range::GetPivotTable ( );
__declspec(implementation_key(747)) RangePtr Range::GetPrecedents ( );
__declspec(implementation_key(748)) _variant_t Range::GetPrefixCharacter ( );
__declspec(implementation_key(749)) RangePtr Range::GetPrevious ( );
__declspec(implementation_key(750)) _variant_t Range::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(751)) _variant_t Range::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(752)) _QueryTablePtr Range::GetQueryTable ( );
__declspec(implementation_key(753)) RangePtr Range::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(754)) _variant_t Range::RemoveSubtotal ( );
__declspec(implementation_key(755)) VARIANT_BOOL Range::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat );
__declspec(implementation_key(756)) RangePtr Range::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(757)) long Range::GetRow ( );
__declspec(implementation_key(758)) RangePtr Range::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(759)) _variant_t Range::GetRowHeight ( );
__declspec(implementation_key(760)) void Range::PutRowHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(761)) RangePtr Range::GetRows ( );
__declspec(implementation_key(762)) _variant_t Range::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(763)) _variant_t Range::Select ( );
__declspec(implementation_key(764)) _variant_t Range::Show ( );
__declspec(implementation_key(765)) _variant_t Range::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(766)) _variant_t Range::GetShowDetail ( );
__declspec(implementation_key(767)) void Range::PutShowDetail ( const _variant_t & _arg1 );
__declspec(implementation_key(768)) _variant_t Range::ShowErrors ( );
__declspec(implementation_key(769)) _variant_t Range::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(770)) _variant_t Range::GetShrinkToFit ( );
__declspec(implementation_key(771)) void Range::PutShrinkToFit ( const _variant_t & _arg1 );
__declspec(implementation_key(772)) _variant_t Range::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(773)) _variant_t Range::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(774)) SoundNotePtr Range::GetSoundNote ( );
__declspec(implementation_key(775)) RangePtr Range::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(776)) _variant_t Range::GetStyle ( );
__declspec(implementation_key(777)) void Range::PutStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(778)) _variant_t Range::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(779)) _variant_t Range::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(780)) _variant_t Range::GetSummary ( );
__declspec(implementation_key(781)) _variant_t Range::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(782)) _variant_t Range::GetText ( );
__declspec(implementation_key(783)) _variant_t Range::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers );
__declspec(implementation_key(784)) _variant_t Range::GetTop ( );
__declspec(implementation_key(785)) _variant_t Range::Ungroup ( );
__declspec(implementation_key(786)) _variant_t Range::GetUseStandardHeight ( );
__declspec(implementation_key(787)) void Range::PutUseStandardHeight ( const _variant_t & _arg1 );
__declspec(implementation_key(788)) _variant_t Range::GetUseStandardWidth ( );
__declspec(implementation_key(789)) void Range::PutUseStandardWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(790)) ValidationPtr Range::GetValidation ( );
__declspec(implementation_key(791)) _variant_t Range::GetValue ( const _variant_t & RangeValueDataType );
__declspec(implementation_key(792)) void Range::PutValue ( const _variant_t & RangeValueDataType, const _variant_t & _arg2 );
__declspec(implementation_key(793)) _variant_t Range::GetValue2 ( );
__declspec(implementation_key(794)) void Range::PutValue2 ( const _variant_t & _arg1 );
__declspec(implementation_key(795)) _variant_t Range::GetVerticalAlignment ( );
__declspec(implementation_key(796)) void Range::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(797)) _variant_t Range::GetWidth ( );
__declspec(implementation_key(798)) _WorksheetPtr Range::GetWorksheet ( );
__declspec(implementation_key(799)) _variant_t Range::GetWrapText ( );
__declspec(implementation_key(800)) void Range::PutWrapText ( const _variant_t & _arg1 );
__declspec(implementation_key(801)) CommentPtr Range::AddComment ( const _variant_t & Text );
__declspec(implementation_key(802)) CommentPtr Range::GetComment ( );
__declspec(implementation_key(803)) HRESULT Range::ClearComments ( );
__declspec(implementation_key(804)) PhoneticPtr Range::GetPhonetic ( );
__declspec(implementation_key(805)) FormatConditionsPtr Range::GetFormatConditions ( );
__declspec(implementation_key(806)) long Range::GetReadingOrder ( );
__declspec(implementation_key(807)) void Range::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(808)) HyperlinksPtr Range::GetHyperlinks ( );
__declspec(implementation_key(809)) PhoneticsPtr Range::GetPhonetics ( );
__declspec(implementation_key(810)) HRESULT Range::SetPhonetic ( );
__declspec(implementation_key(811)) _bstr_t Range::GetID ( );
__declspec(implementation_key(812)) void Range::PutID ( _bstr_t _arg1 );
__declspec(implementation_key(813)) _variant_t Range::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(814)) PivotCellPtr Range::GetPivotCell ( );
__declspec(implementation_key(815)) HRESULT Range::Dirty ( );
__declspec(implementation_key(816)) ErrorsPtr Range::GetErrors ( );
__declspec(implementation_key(817)) SmartTagsPtr Range::GetSmartTags ( );
__declspec(implementation_key(818)) HRESULT Range::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas );
__declspec(implementation_key(819)) _variant_t Range::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(820)) VARIANT_BOOL Range::GetAllowEdit ( );
__declspec(implementation_key(821)) ListObjectPtr Range::GetListObject ( );
__declspec(implementation_key(822)) XPathPtr Range::GetXPath ( );
__declspec(implementation_key(823)) HRESULT ChartEvents::Activate ( );
__declspec(implementation_key(824)) HRESULT ChartEvents::Deactivate ( );
__declspec(implementation_key(825)) HRESULT ChartEvents::Resize ( );
__declspec(implementation_key(826)) HRESULT ChartEvents::MouseDown ( long Button, long Shift, long x, long y );
__declspec(implementation_key(827)) HRESULT ChartEvents::MouseUp ( long Button, long Shift, long x, long y );
__declspec(implementation_key(828)) HRESULT ChartEvents::MouseMove ( long Button, long Shift, long x, long y );
__declspec(implementation_key(829)) HRESULT ChartEvents::BeforeRightClick ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(830)) HRESULT ChartEvents::DragPlot ( );
__declspec(implementation_key(831)) HRESULT ChartEvents::DragOver ( );
__declspec(implementation_key(832)) HRESULT ChartEvents::BeforeDoubleClick ( long ElementID, long Arg1, long Arg2, VARIANT_BOOL * Cancel );
__declspec(implementation_key(833)) HRESULT ChartEvents::Select ( long ElementID, long Arg1, long Arg2 );
__declspec(implementation_key(834)) HRESULT ChartEvents::SeriesChange ( long SeriesIndex, long PointIndex );
__declspec(implementation_key(835)) HRESULT ChartEvents::Calculate ( );
__declspec(implementation_key(836)) _ApplicationPtr VPageBreak::GetApplication ( );
__declspec(implementation_key(837)) enum XlCreator VPageBreak::GetCreator ( );
__declspec(implementation_key(838)) _WorksheetPtr VPageBreak::GetParent ( );
__declspec(implementation_key(839)) HRESULT VPageBreak::Delete ( );
__declspec(implementation_key(840)) HRESULT VPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(841)) enum XlPageBreak VPageBreak::GetType ( );
__declspec(implementation_key(842)) void VPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(843)) enum XlPageBreakExtent VPageBreak::GetExtent ( );
__declspec(implementation_key(844)) RangePtr VPageBreak::GetLocation ( );
__declspec(implementation_key(845)) void VPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(846)) _ApplicationPtr HPageBreak::GetApplication ( );
__declspec(implementation_key(847)) enum XlCreator HPageBreak::GetCreator ( );
__declspec(implementation_key(848)) _WorksheetPtr HPageBreak::GetParent ( );
__declspec(implementation_key(849)) HRESULT HPageBreak::Delete ( );
__declspec(implementation_key(850)) HRESULT HPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(851)) enum XlPageBreak HPageBreak::GetType ( );
__declspec(implementation_key(852)) void HPageBreak::PutType ( enum XlPageBreak _arg1 );
__declspec(implementation_key(853)) enum XlPageBreakExtent HPageBreak::GetExtent ( );
__declspec(implementation_key(854)) RangePtr HPageBreak::GetLocation ( );
__declspec(implementation_key(855)) void HPageBreak::PutRefLocation ( struct Range * _arg1 );
__declspec(implementation_key(856)) _ApplicationPtr HPageBreaks::GetApplication ( );
__declspec(implementation_key(857)) enum XlCreator HPageBreaks::GetCreator ( );
__declspec(implementation_key(858)) IDispatchPtr HPageBreaks::GetParent ( );
__declspec(implementation_key(859)) long HPageBreaks::GetCount ( );
__declspec(implementation_key(860)) HPageBreakPtr HPageBreaks::GetItem ( long Index );
__declspec(implementation_key(861)) HPageBreakPtr HPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(862)) IUnknownPtr HPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(863)) HPageBreakPtr HPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(864)) _ApplicationPtr VPageBreaks::GetApplication ( );
__declspec(implementation_key(865)) enum XlCreator VPageBreaks::GetCreator ( );
__declspec(implementation_key(866)) IDispatchPtr VPageBreaks::GetParent ( );
__declspec(implementation_key(867)) long VPageBreaks::GetCount ( );
__declspec(implementation_key(868)) VPageBreakPtr VPageBreaks::GetItem ( long Index );
__declspec(implementation_key(869)) VPageBreakPtr VPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(870)) IUnknownPtr VPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(871)) VPageBreakPtr VPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(872)) _ApplicationPtr RecentFile::GetApplication ( );
__declspec(implementation_key(873)) enum XlCreator RecentFile::GetCreator ( );
__declspec(implementation_key(874)) IDispatchPtr RecentFile::GetParent ( );
__declspec(implementation_key(875)) _bstr_t RecentFile::GetName ( );
__declspec(implementation_key(876)) _bstr_t RecentFile::GetPath ( );
__declspec(implementation_key(877)) long RecentFile::GetIndex ( );
__declspec(implementation_key(878)) _WorkbookPtr RecentFile::Open ( );
__declspec(implementation_key(879)) HRESULT RecentFile::Delete ( );
__declspec(implementation_key(880)) _ApplicationPtr RecentFiles::GetApplication ( );
__declspec(implementation_key(881)) enum XlCreator RecentFiles::GetCreator ( );
__declspec(implementation_key(882)) IDispatchPtr RecentFiles::GetParent ( );
__declspec(implementation_key(883)) long RecentFiles::GetMaximum ( );
__declspec(implementation_key(884)) void RecentFiles::PutMaximum ( long _arg1 );
__declspec(implementation_key(885)) long RecentFiles::GetCount ( );
__declspec(implementation_key(886)) RecentFilePtr RecentFiles::GetItem ( long Index );
__declspec(implementation_key(887)) RecentFilePtr RecentFiles::Get_Default ( long Index );
__declspec(implementation_key(888)) RecentFilePtr RecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(889)) IUnknownPtr RecentFiles::Get_NewEnum ( );
__declspec(implementation_key(890)) HRESULT DocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(891)) HRESULT DocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(892)) HRESULT DocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(893)) HRESULT DocEvents::Activate ( );
__declspec(implementation_key(894)) HRESULT DocEvents::Deactivate ( );
__declspec(implementation_key(895)) HRESULT DocEvents::Calculate ( );
__declspec(implementation_key(896)) HRESULT DocEvents::Change ( struct Range * Target );
__declspec(implementation_key(897)) HRESULT DocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(898)) HRESULT DocEvents::PivotTableUpdate ( struct PivotTable * Target );
__declspec(implementation_key(899)) _ApplicationPtr Style::GetApplication ( );
__declspec(implementation_key(900)) enum XlCreator Style::GetCreator ( );
__declspec(implementation_key(901)) IDispatchPtr Style::GetParent ( );
__declspec(implementation_key(902)) VARIANT_BOOL Style::GetAddIndent ( );
__declspec(implementation_key(903)) void Style::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(904)) VARIANT_BOOL Style::GetBuiltIn ( );
__declspec(implementation_key(905)) BordersPtr Style::GetBorders ( );
__declspec(implementation_key(906)) _variant_t Style::Delete ( );
__declspec(implementation_key(907)) FontPtr Style::GetFont ( );
__declspec(implementation_key(908)) VARIANT_BOOL Style::GetFormulaHidden ( );
__declspec(implementation_key(909)) void Style::PutFormulaHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(910)) enum XlHAlign Style::GetHorizontalAlignment ( );
__declspec(implementation_key(911)) void Style::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(912)) VARIANT_BOOL Style::GetIncludeAlignment ( );
__declspec(implementation_key(913)) void Style::PutIncludeAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(914)) VARIANT_BOOL Style::GetIncludeBorder ( );
__declspec(implementation_key(915)) void Style::PutIncludeBorder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(916)) VARIANT_BOOL Style::GetIncludeFont ( );
__declspec(implementation_key(917)) void Style::PutIncludeFont ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(918)) VARIANT_BOOL Style::GetIncludeNumber ( );
__declspec(implementation_key(919)) void Style::PutIncludeNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(920)) VARIANT_BOOL Style::GetIncludePatterns ( );
__declspec(implementation_key(921)) void Style::PutIncludePatterns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(922)) VARIANT_BOOL Style::GetIncludeProtection ( );
__declspec(implementation_key(923)) void Style::PutIncludeProtection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(924)) long Style::GetIndentLevel ( );
__declspec(implementation_key(925)) void Style::PutIndentLevel ( long _arg1 );
__declspec(implementation_key(926)) InteriorPtr Style::GetInterior ( );
__declspec(implementation_key(927)) VARIANT_BOOL Style::GetLocked ( );
__declspec(implementation_key(928)) void Style::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(929)) _variant_t Style::GetMergeCells ( );
__declspec(implementation_key(930)) void Style::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(931)) _bstr_t Style::GetName ( );
__declspec(implementation_key(932)) _bstr_t Style::GetNameLocal ( );
__declspec(implementation_key(933)) _bstr_t Style::GetNumberFormat ( );
__declspec(implementation_key(934)) void Style::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(935)) _bstr_t Style::GetNumberFormatLocal ( );
__declspec(implementation_key(936)) void Style::PutNumberFormatLocal ( _bstr_t _arg1 );
__declspec(implementation_key(937)) enum XlOrientation Style::GetOrientation ( );
__declspec(implementation_key(938)) void Style::PutOrientation ( enum XlOrientation _arg1 );
__declspec(implementation_key(939)) VARIANT_BOOL Style::GetShrinkToFit ( );
__declspec(implementation_key(940)) void Style::PutShrinkToFit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(941)) _bstr_t Style::GetValue ( );
__declspec(implementation_key(942)) enum XlVAlign Style::GetVerticalAlignment ( );
__declspec(implementation_key(943)) void Style::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(944)) VARIANT_BOOL Style::GetWrapText ( );
__declspec(implementation_key(945)) void Style::PutWrapText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(946)) _bstr_t Style::Get_Default ( );
__declspec(implementation_key(947)) long Style::GetReadingOrder ( );
__declspec(implementation_key(948)) void Style::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(949)) _ApplicationPtr Styles::GetApplication ( );
__declspec(implementation_key(950)) enum XlCreator Styles::GetCreator ( );
__declspec(implementation_key(951)) IDispatchPtr Styles::GetParent ( );
__declspec(implementation_key(952)) StylePtr Styles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(953)) long Styles::GetCount ( );
__declspec(implementation_key(954)) StylePtr Styles::GetItem ( const _variant_t & Index );
__declspec(implementation_key(955)) _variant_t Styles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(956)) IUnknownPtr Styles::Get_NewEnum ( );
__declspec(implementation_key(957)) StylePtr Styles::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(958)) _ApplicationPtr Borders::GetApplication ( );
__declspec(implementation_key(959)) enum XlCreator Borders::GetCreator ( );
__declspec(implementation_key(960)) IDispatchPtr Borders::GetParent ( );
__declspec(implementation_key(961)) _variant_t Borders::GetColor ( );
__declspec(implementation_key(962)) void Borders::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(963)) _variant_t Borders::GetColorIndex ( );
__declspec(implementation_key(964)) void Borders::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(965)) long Borders::GetCount ( );
__declspec(implementation_key(966)) BorderPtr Borders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(967)) _variant_t Borders::GetLineStyle ( );
__declspec(implementation_key(968)) void Borders::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(969)) IUnknownPtr Borders::Get_NewEnum ( );
__declspec(implementation_key(970)) _variant_t Borders::GetValue ( );
__declspec(implementation_key(971)) void Borders::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(972)) _variant_t Borders::GetWeight ( );
__declspec(implementation_key(973)) void Borders::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(974)) BorderPtr Borders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(975)) _ApplicationPtr AddIn::GetApplication ( );
__declspec(implementation_key(976)) enum XlCreator AddIn::GetCreator ( );
__declspec(implementation_key(977)) IDispatchPtr AddIn::GetParent ( );
__declspec(implementation_key(978)) _bstr_t AddIn::GetAuthor ( );
__declspec(implementation_key(979)) _bstr_t AddIn::GetComments ( );
__declspec(implementation_key(980)) _bstr_t AddIn::GetFullName ( );
__declspec(implementation_key(981)) VARIANT_BOOL AddIn::GetInstalled ( );
__declspec(implementation_key(982)) void AddIn::PutInstalled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(983)) _bstr_t AddIn::GetKeywords ( );
__declspec(implementation_key(984)) _bstr_t AddIn::GetName ( );
__declspec(implementation_key(985)) _bstr_t AddIn::GetPath ( );
__declspec(implementation_key(986)) _bstr_t AddIn::GetSubject ( );
__declspec(implementation_key(987)) _bstr_t AddIn::GetTitle ( );
__declspec(implementation_key(988)) _bstr_t AddIn::GetprogID ( );
__declspec(implementation_key(989)) _bstr_t AddIn::GetCLSID ( );
__declspec(implementation_key(990)) _ApplicationPtr AddIns::GetApplication ( );
__declspec(implementation_key(991)) enum XlCreator AddIns::GetCreator ( );
__declspec(implementation_key(992)) IDispatchPtr AddIns::GetParent ( );
__declspec(implementation_key(993)) AddInPtr AddIns::Add ( _bstr_t Filename, const _variant_t & CopyFile );
__declspec(implementation_key(994)) long AddIns::GetCount ( );
__declspec(implementation_key(995)) AddInPtr AddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(996)) IUnknownPtr AddIns::Get_NewEnum ( );
__declspec(implementation_key(997)) AddInPtr AddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(998)) _ApplicationPtr Toolbar::GetApplication ( );
__declspec(implementation_key(999)) enum XlCreator Toolbar::GetCreator ( );
__declspec(implementation_key(1000)) IDispatchPtr Toolbar::GetParent ( );
__declspec(implementation_key(1001)) VARIANT_BOOL Toolbar::GetBuiltIn ( );
__declspec(implementation_key(1002)) HRESULT Toolbar::Delete ( );
__declspec(implementation_key(1003)) long Toolbar::GetHeight ( );
__declspec(implementation_key(1004)) void Toolbar::PutHeight ( long _arg1 );
__declspec(implementation_key(1005)) long Toolbar::GetLeft ( );
__declspec(implementation_key(1006)) void Toolbar::PutLeft ( long _arg1 );
__declspec(implementation_key(1007)) _bstr_t Toolbar::GetName ( );
__declspec(implementation_key(1008)) long Toolbar::GetPosition ( );
__declspec(implementation_key(1009)) void Toolbar::PutPosition ( long _arg1 );
__declspec(implementation_key(1010)) enum XlToolbarProtection Toolbar::GetProtection ( );
__declspec(implementation_key(1011)) void Toolbar::PutProtection ( enum XlToolbarProtection _arg1 );
__declspec(implementation_key(1012)) HRESULT Toolbar::Reset ( );
__declspec(implementation_key(1013)) ToolbarButtonsPtr Toolbar::GetToolbarButtons ( );
__declspec(implementation_key(1014)) long Toolbar::GetTop ( );
__declspec(implementation_key(1015)) void Toolbar::PutTop ( long _arg1 );
__declspec(implementation_key(1016)) VARIANT_BOOL Toolbar::GetVisible ( );
__declspec(implementation_key(1017)) void Toolbar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1018)) long Toolbar::GetWidth ( );
__declspec(implementation_key(1019)) void Toolbar::PutWidth ( long _arg1 );
__declspec(implementation_key(1020)) _ApplicationPtr Toolbars::GetApplication ( );
__declspec(implementation_key(1021)) enum XlCreator Toolbars::GetCreator ( );
__declspec(implementation_key(1022)) IDispatchPtr Toolbars::GetParent ( );
__declspec(implementation_key(1023)) ToolbarPtr Toolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(1024)) long Toolbars::GetCount ( );
__declspec(implementation_key(1025)) ToolbarPtr Toolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1026)) ToolbarPtr Toolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1027)) IUnknownPtr Toolbars::Get_NewEnum ( );
__declspec(implementation_key(1028)) _ApplicationPtr ToolbarButton::GetApplication ( );
__declspec(implementation_key(1029)) enum XlCreator ToolbarButton::GetCreator ( );
__declspec(implementation_key(1030)) IDispatchPtr ToolbarButton::GetParent ( );
__declspec(implementation_key(1031)) VARIANT_BOOL ToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(1032)) VARIANT_BOOL ToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(1033)) void ToolbarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1034)) HRESULT ToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(1035)) HRESULT ToolbarButton::CopyFace ( );
__declspec(implementation_key(1036)) HRESULT ToolbarButton::Delete ( );
__declspec(implementation_key(1037)) HRESULT ToolbarButton::Edit ( );
__declspec(implementation_key(1038)) VARIANT_BOOL ToolbarButton::GetEnabled ( );
__declspec(implementation_key(1039)) void ToolbarButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1040)) long ToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(1041)) void ToolbarButton::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(1042)) _bstr_t ToolbarButton::GetHelpFile ( );
__declspec(implementation_key(1043)) void ToolbarButton::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(1044)) long ToolbarButton::GetID ( );
__declspec(implementation_key(1045)) VARIANT_BOOL ToolbarButton::GetIsGap ( );
__declspec(implementation_key(1046)) HRESULT ToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(1047)) _bstr_t ToolbarButton::GetName ( );
__declspec(implementation_key(1048)) void ToolbarButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1049)) _bstr_t ToolbarButton::GetOnAction ( );
__declspec(implementation_key(1050)) void ToolbarButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1051)) HRESULT ToolbarButton::PasteFace ( );
__declspec(implementation_key(1052)) VARIANT_BOOL ToolbarButton::GetPushed ( );
__declspec(implementation_key(1053)) void ToolbarButton::PutPushed ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1054)) HRESULT ToolbarButton::Reset ( );
__declspec(implementation_key(1055)) _bstr_t ToolbarButton::GetStatusBar ( );
__declspec(implementation_key(1056)) void ToolbarButton::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(1057)) long ToolbarButton::GetWidth ( );
__declspec(implementation_key(1058)) void ToolbarButton::PutWidth ( long _arg1 );
__declspec(implementation_key(1059)) _ApplicationPtr ToolbarButtons::GetApplication ( );
__declspec(implementation_key(1060)) enum XlCreator ToolbarButtons::GetCreator ( );
__declspec(implementation_key(1061)) IDispatchPtr ToolbarButtons::GetParent ( );
__declspec(implementation_key(1062)) ToolbarButtonPtr ToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(1063)) long ToolbarButtons::GetCount ( );
__declspec(implementation_key(1064)) ToolbarButtonPtr ToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(1065)) IUnknownPtr ToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(1066)) ToolbarButtonPtr ToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(1067)) _ApplicationPtr Areas::GetApplication ( );
__declspec(implementation_key(1068)) enum XlCreator Areas::GetCreator ( );
__declspec(implementation_key(1069)) IDispatchPtr Areas::GetParent ( );
__declspec(implementation_key(1070)) long Areas::GetCount ( );
__declspec(implementation_key(1071)) RangePtr Areas::GetItem ( long Index );
__declspec(implementation_key(1072)) IUnknownPtr Areas::Get_NewEnum ( );
__declspec(implementation_key(1073)) RangePtr Areas::Get_Default ( long Index );
__declspec(implementation_key(1074)) HRESULT WorkbookEvents::Open ( );
__declspec(implementation_key(1075)) HRESULT WorkbookEvents::Activate ( );
__declspec(implementation_key(1076)) HRESULT WorkbookEvents::Deactivate ( );
__declspec(implementation_key(1077)) HRESULT WorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1078)) HRESULT WorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1079)) HRESULT WorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(1080)) HRESULT WorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(1081)) HRESULT WorkbookEvents::AddinInstall ( );
__declspec(implementation_key(1082)) HRESULT WorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(1083)) HRESULT WorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(1084)) HRESULT WorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(1085)) HRESULT WorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(1086)) HRESULT WorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1087)) HRESULT WorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1088)) HRESULT WorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1089)) HRESULT WorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(1090)) HRESULT WorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(1091)) HRESULT WorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(1092)) HRESULT WorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(1093)) HRESULT WorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(1094)) HRESULT WorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(1095)) HRESULT WorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target );
__declspec(implementation_key(1096)) HRESULT WorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target );
__declspec(implementation_key(1097)) HRESULT WorkbookEvents::Sync ( enum Office::MsoSyncEventType SyncEventType );
__declspec(implementation_key(1098)) HRESULT WorkbookEvents::BeforeXmlImport ( struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL IsRefresh, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1099)) HRESULT WorkbookEvents::AfterXmlImport ( struct XmlMap * Map, VARIANT_BOOL IsRefresh, enum XlXmlImportResult Result );
__declspec(implementation_key(1100)) HRESULT WorkbookEvents::BeforeXmlExport ( struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL * Cancel );
__declspec(implementation_key(1101)) HRESULT WorkbookEvents::AfterXmlExport ( struct XmlMap * Map, _bstr_t Url, enum XlXmlExportResult Result );
__declspec(implementation_key(1102)) _ApplicationPtr MenuBars::GetApplication ( );
__declspec(implementation_key(1103)) enum XlCreator MenuBars::GetCreator ( );
__declspec(implementation_key(1104)) IDispatchPtr MenuBars::GetParent ( );
__declspec(implementation_key(1105)) MenuBarPtr MenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(1106)) long MenuBars::GetCount ( );
__declspec(implementation_key(1107)) MenuBarPtr MenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1108)) MenuBarPtr MenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1109)) IUnknownPtr MenuBars::Get_NewEnum ( );
__declspec(implementation_key(1110)) _ApplicationPtr MenuBar::GetApplication ( );
__declspec(implementation_key(1111)) enum XlCreator MenuBar::GetCreator ( );
__declspec(implementation_key(1112)) IDispatchPtr MenuBar::GetParent ( );
__declspec(implementation_key(1113)) HRESULT MenuBar::Activate ( );
__declspec(implementation_key(1114)) VARIANT_BOOL MenuBar::GetBuiltIn ( );
__declspec(implementation_key(1115)) _bstr_t MenuBar::GetCaption ( );
__declspec(implementation_key(1116)) void MenuBar::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1117)) HRESULT MenuBar::Delete ( );
__declspec(implementation_key(1118)) long MenuBar::GetIndex ( );
__declspec(implementation_key(1119)) MenusPtr MenuBar::GetMenus ( );
__declspec(implementation_key(1120)) HRESULT MenuBar::Reset ( );
__declspec(implementation_key(1121)) _ApplicationPtr Menus::GetApplication ( );
__declspec(implementation_key(1122)) enum XlCreator Menus::GetCreator ( );
__declspec(implementation_key(1123)) IDispatchPtr Menus::GetParent ( );
__declspec(implementation_key(1124)) MenuPtr Menus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(1125)) long Menus::GetCount ( );
__declspec(implementation_key(1126)) MenuPtr Menus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1127)) MenuPtr Menus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1128)) IUnknownPtr Menus::Get_NewEnum ( );
__declspec(implementation_key(1129)) _ApplicationPtr Menu::GetApplication ( );
__declspec(implementation_key(1130)) enum XlCreator Menu::GetCreator ( );
__declspec(implementation_key(1131)) IDispatchPtr Menu::GetParent ( );
__declspec(implementation_key(1132)) _bstr_t Menu::GetCaption ( );
__declspec(implementation_key(1133)) void Menu::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1134)) HRESULT Menu::Delete ( );
__declspec(implementation_key(1135)) VARIANT_BOOL Menu::GetEnabled ( );
__declspec(implementation_key(1136)) void Menu::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1137)) long Menu::GetIndex ( );
__declspec(implementation_key(1138)) MenuItemsPtr Menu::GetMenuItems ( );
__declspec(implementation_key(1139)) _ApplicationPtr MenuItems::GetApplication ( );
__declspec(implementation_key(1140)) enum XlCreator MenuItems::GetCreator ( );
__declspec(implementation_key(1141)) IDispatchPtr MenuItems::GetParent ( );
__declspec(implementation_key(1142)) MenuItemPtr MenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(1143)) MenuPtr MenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(1144)) long MenuItems::GetCount ( );
__declspec(implementation_key(1145)) IDispatchPtr MenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1146)) IDispatchPtr MenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1147)) IUnknownPtr MenuItems::Get_NewEnum ( );
__declspec(implementation_key(1148)) _ApplicationPtr MenuItem::GetApplication ( );
__declspec(implementation_key(1149)) enum XlCreator MenuItem::GetCreator ( );
__declspec(implementation_key(1150)) IDispatchPtr MenuItem::GetParent ( );
__declspec(implementation_key(1151)) _bstr_t MenuItem::GetCaption ( );
__declspec(implementation_key(1152)) void MenuItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1153)) VARIANT_BOOL MenuItem::GetChecked ( );
__declspec(implementation_key(1154)) void MenuItem::PutChecked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1155)) HRESULT MenuItem::Delete ( );
__declspec(implementation_key(1156)) VARIANT_BOOL MenuItem::GetEnabled ( );
__declspec(implementation_key(1157)) void MenuItem::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1158)) long MenuItem::GetHelpContextID ( );
__declspec(implementation_key(1159)) void MenuItem::PutHelpContextID ( long _arg1 );
__declspec(implementation_key(1160)) _bstr_t MenuItem::GetHelpFile ( );
__declspec(implementation_key(1161)) void MenuItem::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(1162)) long MenuItem::GetIndex ( );
__declspec(implementation_key(1163)) _bstr_t MenuItem::GetOnAction ( );
__declspec(implementation_key(1164)) void MenuItem::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1165)) _bstr_t MenuItem::GetStatusBar ( );
__declspec(implementation_key(1166)) void MenuItem::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(1167)) _ApplicationPtr Charts::GetApplication ( );
__declspec(implementation_key(1168)) enum XlCreator Charts::GetCreator ( );
__declspec(implementation_key(1169)) IDispatchPtr Charts::GetParent ( );
__declspec(implementation_key(1170)) _ChartPtr Charts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(1171)) HRESULT Charts::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(1172)) long Charts::GetCount ( );
__declspec(implementation_key(1173)) HRESULT Charts::Delete ( );
__declspec(implementation_key(1174)) IDispatchPtr Charts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(1175)) HRESULT Charts::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(1176)) IUnknownPtr Charts::Get_NewEnum ( );
__declspec(implementation_key(1177)) HRESULT Charts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(1178)) HRESULT Charts::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(1179)) HRESULT Charts::Select ( const _variant_t & Replace );
__declspec(implementation_key(1180)) HPageBreaksPtr Charts::GetHPageBreaks ( );
__declspec(implementation_key(1181)) VPageBreaksPtr Charts::GetVPageBreaks ( );
__declspec(implementation_key(1182)) _variant_t Charts::GetVisible ( );
__declspec(implementation_key(1183)) void Charts::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(1184)) IDispatchPtr Charts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1185)) HRESULT Charts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(1186)) _ApplicationPtr DrawingObjects::GetApplication ( );
__declspec(implementation_key(1187)) enum XlCreator DrawingObjects::GetCreator ( );
__declspec(implementation_key(1188)) IDispatchPtr DrawingObjects::GetParent ( );
__declspec(implementation_key(1189)) _variant_t DrawingObjects::BringToFront ( );
__declspec(implementation_key(1190)) _variant_t DrawingObjects::Copy ( );
__declspec(implementation_key(1191)) _variant_t DrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1192)) _variant_t DrawingObjects::Cut ( );
__declspec(implementation_key(1193)) _variant_t DrawingObjects::Delete ( );
__declspec(implementation_key(1194)) IDispatchPtr DrawingObjects::Duplicate ( );
__declspec(implementation_key(1195)) VARIANT_BOOL DrawingObjects::GetEnabled ( );
__declspec(implementation_key(1196)) void DrawingObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1197)) double DrawingObjects::GetHeight ( );
__declspec(implementation_key(1198)) void DrawingObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(1199)) double DrawingObjects::GetLeft ( );
__declspec(implementation_key(1200)) void DrawingObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(1201)) VARIANT_BOOL DrawingObjects::GetLocked ( );
__declspec(implementation_key(1202)) void DrawingObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1203)) _bstr_t DrawingObjects::GetOnAction ( );
__declspec(implementation_key(1204)) void DrawingObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1205)) _variant_t DrawingObjects::GetPlacement ( );
__declspec(implementation_key(1206)) void DrawingObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1207)) VARIANT_BOOL DrawingObjects::GetPrintObject ( );
__declspec(implementation_key(1208)) void DrawingObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1209)) _variant_t DrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(1210)) _variant_t DrawingObjects::SendToBack ( );
__declspec(implementation_key(1211)) double DrawingObjects::GetTop ( );
__declspec(implementation_key(1212)) void DrawingObjects::PutTop ( double _arg1 );
__declspec(implementation_key(1213)) VARIANT_BOOL DrawingObjects::GetVisible ( );
__declspec(implementation_key(1214)) void DrawingObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1215)) double DrawingObjects::GetWidth ( );
__declspec(implementation_key(1216)) void DrawingObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(1217)) long DrawingObjects::GetZOrder ( );
__declspec(implementation_key(1218)) ShapeRangePtr DrawingObjects::GetShapeRange ( );
__declspec(implementation_key(1219)) _variant_t DrawingObjects::GetAccelerator ( );
__declspec(implementation_key(1220)) void DrawingObjects::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1221)) VARIANT_BOOL DrawingObjects::GetAddIndent ( );
__declspec(implementation_key(1222)) void DrawingObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1223)) _variant_t DrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(1224)) _variant_t DrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(1225)) void DrawingObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(1226)) _variant_t DrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(1227)) void DrawingObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(1228)) _variant_t DrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(1229)) void DrawingObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(1230)) VARIANT_BOOL DrawingObjects::GetAutoSize ( );
__declspec(implementation_key(1231)) void DrawingObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1232)) BorderPtr DrawingObjects::GetBorder ( );
__declspec(implementation_key(1233)) VARIANT_BOOL DrawingObjects::GetCancelButton ( );
__declspec(implementation_key(1234)) void DrawingObjects::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1235)) _bstr_t DrawingObjects::GetCaption ( );
__declspec(implementation_key(1236)) void DrawingObjects::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1237)) CharactersPtr DrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1238)) _variant_t DrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1239)) long DrawingObjects::Get_Default ( );
__declspec(implementation_key(1240)) void DrawingObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(1241)) VARIANT_BOOL DrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(1242)) void DrawingObjects::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1243)) VARIANT_BOOL DrawingObjects::GetDismissButton ( );
__declspec(implementation_key(1244)) void DrawingObjects::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1245)) VARIANT_BOOL DrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(1246)) void DrawingObjects::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1247)) VARIANT_BOOL DrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(1248)) void DrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1249)) long DrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(1250)) void DrawingObjects::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(1251)) FontPtr DrawingObjects::GetFont ( );
__declspec(implementation_key(1252)) VARIANT_BOOL DrawingObjects::GetHelpButton ( );
__declspec(implementation_key(1253)) void DrawingObjects::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1254)) _variant_t DrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(1255)) void DrawingObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1256)) long DrawingObjects::GetInputType ( );
__declspec(implementation_key(1257)) void DrawingObjects::PutInputType ( long _arg1 );
__declspec(implementation_key(1258)) InteriorPtr DrawingObjects::GetInterior ( );
__declspec(implementation_key(1259)) long DrawingObjects::GetLargeChange ( );
__declspec(implementation_key(1260)) void DrawingObjects::PutLargeChange ( long _arg1 );
__declspec(implementation_key(1261)) _bstr_t DrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(1262)) void DrawingObjects::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1263)) _variant_t DrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(1264)) _bstr_t DrawingObjects::GetListFillRange ( );
__declspec(implementation_key(1265)) void DrawingObjects::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(1266)) long DrawingObjects::GetListIndex ( );
__declspec(implementation_key(1267)) void DrawingObjects::PutListIndex ( long _arg1 );
__declspec(implementation_key(1268)) VARIANT_BOOL DrawingObjects::GetLockedText ( );
__declspec(implementation_key(1269)) void DrawingObjects::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1270)) long DrawingObjects::GetMax ( );
__declspec(implementation_key(1271)) void DrawingObjects::PutMax ( long _arg1 );
__declspec(implementation_key(1272)) long DrawingObjects::GetMin ( );
__declspec(implementation_key(1273)) void DrawingObjects::PutMin ( long _arg1 );
__declspec(implementation_key(1274)) VARIANT_BOOL DrawingObjects::GetMultiLine ( );
__declspec(implementation_key(1275)) void DrawingObjects::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1276)) VARIANT_BOOL DrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(1277)) void DrawingObjects::PutMultiSelect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1278)) _variant_t DrawingObjects::GetOrientation ( );
__declspec(implementation_key(1279)) void DrawingObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1280)) _variant_t DrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(1281)) void DrawingObjects::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1282)) _variant_t DrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(1283)) _variant_t DrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(1284)) _variant_t DrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(1285)) VARIANT_BOOL DrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(1286)) void DrawingObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1287)) _variant_t DrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(1288)) VARIANT_BOOL DrawingObjects::GetShadow ( );
__declspec(implementation_key(1289)) void DrawingObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1290)) long DrawingObjects::GetSmallChange ( );
__declspec(implementation_key(1291)) void DrawingObjects::PutSmallChange ( long _arg1 );
__declspec(implementation_key(1292)) _bstr_t DrawingObjects::GetText ( );
__declspec(implementation_key(1293)) void DrawingObjects::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1294)) IDispatchPtr DrawingObjects::Ungroup ( );
__declspec(implementation_key(1295)) long DrawingObjects::GetValue ( );
__declspec(implementation_key(1296)) void DrawingObjects::PutValue ( long _arg1 );
__declspec(implementation_key(1297)) _variant_t DrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(1298)) void DrawingObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1299)) _variant_t DrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(1300)) long DrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(1301)) void DrawingObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1302)) long DrawingObjects::GetCount ( );
__declspec(implementation_key(1303)) IDispatchPtr DrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(1304)) GroupObjectPtr DrawingObjects::Group ( );
__declspec(implementation_key(1305)) _variant_t DrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(1306)) IUnknownPtr DrawingObjects::_NewEnum ( );
__declspec(implementation_key(1307)) _ApplicationPtr PivotCache::GetApplication ( );
__declspec(implementation_key(1308)) enum XlCreator PivotCache::GetCreator ( );
__declspec(implementation_key(1309)) IDispatchPtr PivotCache::GetParent ( );
__declspec(implementation_key(1310)) VARIANT_BOOL PivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(1311)) void PivotCache::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1312)) _variant_t PivotCache::GetConnection ( );
__declspec(implementation_key(1313)) void PivotCache::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(1314)) VARIANT_BOOL PivotCache::GetEnableRefresh ( );
__declspec(implementation_key(1315)) void PivotCache::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1316)) long PivotCache::GetIndex ( );
__declspec(implementation_key(1317)) long PivotCache::GetMemoryUsed ( );
__declspec(implementation_key(1318)) VARIANT_BOOL PivotCache::GetOptimizeCache ( );
__declspec(implementation_key(1319)) void PivotCache::PutOptimizeCache ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1320)) long PivotCache::GetRecordCount ( );
__declspec(implementation_key(1321)) HRESULT PivotCache::Refresh ( );
__declspec(implementation_key(1322)) DATE PivotCache::GetRefreshDate ( );
__declspec(implementation_key(1323)) _bstr_t PivotCache::GetRefreshName ( );
__declspec(implementation_key(1324)) VARIANT_BOOL PivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(1325)) void PivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1326)) _variant_t PivotCache::GetSql ( );
__declspec(implementation_key(1327)) void PivotCache::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(1328)) VARIANT_BOOL PivotCache::GetSavePassword ( );
__declspec(implementation_key(1329)) void PivotCache::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1330)) _variant_t PivotCache::GetSourceData ( );
__declspec(implementation_key(1331)) void PivotCache::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(1332)) _variant_t PivotCache::GetCommandText ( );
__declspec(implementation_key(1333)) void PivotCache::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(1334)) enum XlCmdType PivotCache::GetCommandType ( );
__declspec(implementation_key(1335)) void PivotCache::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(1336)) enum XlQueryType PivotCache::GetQueryType ( );
__declspec(implementation_key(1337)) VARIANT_BOOL PivotCache::GetMaintainConnection ( );
__declspec(implementation_key(1338)) void PivotCache::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1339)) long PivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(1340)) void PivotCache::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(1341)) IDispatchPtr PivotCache::GetRecordset ( );
__declspec(implementation_key(1342)) void PivotCache::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(1343)) HRESULT PivotCache::ResetTimer ( );
__declspec(implementation_key(1344)) _variant_t PivotCache::GetLocalConnection ( );
__declspec(implementation_key(1345)) void PivotCache::PutLocalConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(1346)) PivotTablePtr PivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(1347)) VARIANT_BOOL PivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(1348)) void PivotCache::PutUseLocalConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1349)) IDispatchPtr PivotCache::GetADOConnection ( );
__declspec(implementation_key(1350)) VARIANT_BOOL PivotCache::GetIsConnected ( );
__declspec(implementation_key(1351)) HRESULT PivotCache::MakeConnection ( );
__declspec(implementation_key(1352)) VARIANT_BOOL PivotCache::GetOLAP ( );
__declspec(implementation_key(1353)) enum XlPivotTableSourceType PivotCache::GetSourceType ( );
__declspec(implementation_key(1354)) enum XlPivotTableMissingItems PivotCache::GetMissingItemsLimit ( );
__declspec(implementation_key(1355)) void PivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems _arg1 );
__declspec(implementation_key(1356)) _bstr_t PivotCache::GetSourceConnectionFile ( );
__declspec(implementation_key(1357)) void PivotCache::PutSourceConnectionFile ( _bstr_t _arg1 );
__declspec(implementation_key(1358)) _bstr_t PivotCache::GetSourceDataFile ( );
__declspec(implementation_key(1359)) enum XlRobustConnect PivotCache::GetRobustConnect ( );
__declspec(implementation_key(1360)) void PivotCache::PutRobustConnect ( enum XlRobustConnect _arg1 );
__declspec(implementation_key(1361)) HRESULT PivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(1362)) _ApplicationPtr PivotCaches::GetApplication ( );
__declspec(implementation_key(1363)) enum XlCreator PivotCaches::GetCreator ( );
__declspec(implementation_key(1364)) IDispatchPtr PivotCaches::GetParent ( );
__declspec(implementation_key(1365)) long PivotCaches::GetCount ( );
__declspec(implementation_key(1366)) PivotCachePtr PivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(1367)) PivotCachePtr PivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1368)) IUnknownPtr PivotCaches::_NewEnum ( );
__declspec(implementation_key(1369)) PivotCachePtr PivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(1370)) _ApplicationPtr PivotFormula::GetApplication ( );
__declspec(implementation_key(1371)) enum XlCreator PivotFormula::GetCreator ( );
__declspec(implementation_key(1372)) IDispatchPtr PivotFormula::GetParent ( );
__declspec(implementation_key(1373)) HRESULT PivotFormula::Delete ( );
__declspec(implementation_key(1374)) _bstr_t PivotFormula::Get_Default ( );
__declspec(implementation_key(1375)) void PivotFormula::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1376)) _bstr_t PivotFormula::GetFormula ( );
__declspec(implementation_key(1377)) void PivotFormula::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1378)) _bstr_t PivotFormula::GetValue ( );
__declspec(implementation_key(1379)) void PivotFormula::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1380)) long PivotFormula::GetIndex ( );
__declspec(implementation_key(1381)) void PivotFormula::PutIndex ( long _arg1 );
__declspec(implementation_key(1382)) _bstr_t PivotFormula::GetStandardFormula ( );
__declspec(implementation_key(1383)) void PivotFormula::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1384)) _ApplicationPtr PivotFormulas::GetApplication ( );
__declspec(implementation_key(1385)) enum XlCreator PivotFormulas::GetCreator ( );
__declspec(implementation_key(1386)) IDispatchPtr PivotFormulas::GetParent ( );
__declspec(implementation_key(1387)) long PivotFormulas::GetCount ( );
__declspec(implementation_key(1388)) PivotFormulaPtr PivotFormulas::_Add ( _bstr_t Formula );
__declspec(implementation_key(1389)) PivotFormulaPtr PivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(1390)) PivotFormulaPtr PivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(1391)) IUnknownPtr PivotFormulas::_NewEnum ( );
__declspec(implementation_key(1392)) PivotFormulaPtr PivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(1393)) _ApplicationPtr PivotTable::GetApplication ( );
__declspec(implementation_key(1394)) enum XlCreator PivotTable::GetCreator ( );
__declspec(implementation_key(1395)) IDispatchPtr PivotTable::GetParent ( );
__declspec(implementation_key(1396)) _variant_t PivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(1397)) IDispatchPtr PivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(1398)) VARIANT_BOOL PivotTable::GetColumnGrand ( );
__declspec(implementation_key(1399)) void PivotTable::PutColumnGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1400)) RangePtr PivotTable::GetColumnRange ( );
__declspec(implementation_key(1401)) _variant_t PivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(1402)) RangePtr PivotTable::GetDataBodyRange ( );
__declspec(implementation_key(1403)) IDispatchPtr PivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(1404)) RangePtr PivotTable::GetDataLabelRange ( );
__declspec(implementation_key(1405)) _bstr_t PivotTable::Get_Default ( );
__declspec(implementation_key(1406)) void PivotTable::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1407)) VARIANT_BOOL PivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(1408)) void PivotTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1409)) IDispatchPtr PivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(1410)) _bstr_t PivotTable::GetInnerDetail ( );
__declspec(implementation_key(1411)) void PivotTable::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(1412)) _bstr_t PivotTable::GetName ( );
__declspec(implementation_key(1413)) void PivotTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1414)) IDispatchPtr PivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(1415)) RangePtr PivotTable::GetPageRange ( );
__declspec(implementation_key(1416)) RangePtr PivotTable::GetPageRangeCells ( );
__declspec(implementation_key(1417)) IDispatchPtr PivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(1418)) DATE PivotTable::GetRefreshDate ( );
__declspec(implementation_key(1419)) _bstr_t PivotTable::GetRefreshName ( );
__declspec(implementation_key(1420)) VARIANT_BOOL PivotTable::RefreshTable ( );
__declspec(implementation_key(1421)) IDispatchPtr PivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(1422)) VARIANT_BOOL PivotTable::GetRowGrand ( );
__declspec(implementation_key(1423)) void PivotTable::PutRowGrand ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1424)) RangePtr PivotTable::GetRowRange ( );
__declspec(implementation_key(1425)) VARIANT_BOOL PivotTable::GetSaveData ( );
__declspec(implementation_key(1426)) void PivotTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1427)) _variant_t PivotTable::GetSourceData ( );
__declspec(implementation_key(1428)) void PivotTable::PutSourceData ( const _variant_t & _arg1 );
__declspec(implementation_key(1429)) RangePtr PivotTable::GetTableRange1 ( );
__declspec(implementation_key(1430)) RangePtr PivotTable::GetTableRange2 ( );
__declspec(implementation_key(1431)) _bstr_t PivotTable::GetValue ( );
__declspec(implementation_key(1432)) void PivotTable::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1433)) IDispatchPtr PivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(1434)) long PivotTable::GetCacheIndex ( );
__declspec(implementation_key(1435)) void PivotTable::PutCacheIndex ( long _arg1 );
__declspec(implementation_key(1436)) CalculatedFieldsPtr PivotTable::CalculatedFields ( );
__declspec(implementation_key(1437)) VARIANT_BOOL PivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(1438)) void PivotTable::PutDisplayErrorString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1439)) VARIANT_BOOL PivotTable::GetDisplayNullString ( );
__declspec(implementation_key(1440)) void PivotTable::PutDisplayNullString ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1441)) VARIANT_BOOL PivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(1442)) void PivotTable::PutEnableDrilldown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1443)) VARIANT_BOOL PivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(1444)) void PivotTable::PutEnableFieldDialog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1445)) VARIANT_BOOL PivotTable::GetEnableWizard ( );
__declspec(implementation_key(1446)) void PivotTable::PutEnableWizard ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1447)) _bstr_t PivotTable::GetErrorString ( );
__declspec(implementation_key(1448)) void PivotTable::PutErrorString ( _bstr_t _arg1 );
__declspec(implementation_key(1449)) double PivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(1450)) HRESULT PivotTable::ListFormulas ( );
__declspec(implementation_key(1451)) VARIANT_BOOL PivotTable::GetManualUpdate ( );
__declspec(implementation_key(1452)) void PivotTable::PutManualUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1453)) VARIANT_BOOL PivotTable::GetMergeLabels ( );
__declspec(implementation_key(1454)) void PivotTable::PutMergeLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1455)) _bstr_t PivotTable::GetNullString ( );
__declspec(implementation_key(1456)) void PivotTable::PutNullString ( _bstr_t _arg1 );
__declspec(implementation_key(1457)) PivotCachePtr PivotTable::PivotCache ( );
__declspec(implementation_key(1458)) PivotFormulasPtr PivotTable::GetPivotFormulas ( );
__declspec(implementation_key(1459)) HRESULT PivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(1460)) VARIANT_BOOL PivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(1461)) void PivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1462)) long PivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(1463)) void PivotTable::PutPageFieldOrder ( long _arg1 );
__declspec(implementation_key(1464)) _bstr_t PivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(1465)) void PivotTable::PutPageFieldStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1466)) long PivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(1467)) void PivotTable::PutPageFieldWrapCount ( long _arg1 );
__declspec(implementation_key(1468)) VARIANT_BOOL PivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(1469)) void PivotTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1470)) HRESULT PivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(1471)) _bstr_t PivotTable::GetPivotSelection ( );
__declspec(implementation_key(1472)) void PivotTable::PutPivotSelection ( _bstr_t _arg1 );
__declspec(implementation_key(1473)) enum XlPTSelectionMode PivotTable::GetSelectionMode ( );
__declspec(implementation_key(1474)) void PivotTable::PutSelectionMode ( enum XlPTSelectionMode _arg1 );
__declspec(implementation_key(1475)) _bstr_t PivotTable::GetTableStyle ( );
__declspec(implementation_key(1476)) void PivotTable::PutTableStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1477)) _bstr_t PivotTable::GetTag ( );
__declspec(implementation_key(1478)) void PivotTable::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(1479)) HRESULT PivotTable::Update ( );
__declspec(implementation_key(1480)) _bstr_t PivotTable::GetVacatedStyle ( );
__declspec(implementation_key(1481)) void PivotTable::PutVacatedStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1482)) HRESULT PivotTable::Format ( enum XlPivotFormatType Format );
__declspec(implementation_key(1483)) VARIANT_BOOL PivotTable::GetPrintTitles ( );
__declspec(implementation_key(1484)) void PivotTable::PutPrintTitles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1485)) CubeFieldsPtr PivotTable::GetCubeFields ( );
__declspec(implementation_key(1486)) _bstr_t PivotTable::GetGrandTotalName ( );
__declspec(implementation_key(1487)) void PivotTable::PutGrandTotalName ( _bstr_t _arg1 );
__declspec(implementation_key(1488)) VARIANT_BOOL PivotTable::GetSmallGrid ( );
__declspec(implementation_key(1489)) void PivotTable::PutSmallGrid ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1490)) VARIANT_BOOL PivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(1491)) void PivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1492)) VARIANT_BOOL PivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(1493)) void PivotTable::PutTotalsAnnotation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1494)) HRESULT PivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName );
__declspec(implementation_key(1495)) _bstr_t PivotTable::GetPivotSelectionStandard ( );
__declspec(implementation_key(1496)) void PivotTable::PutPivotSelectionStandard ( _bstr_t _arg1 );
__declspec(implementation_key(1497)) RangePtr PivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 );
__declspec(implementation_key(1498)) PivotFieldPtr PivotTable::GetDataPivotField ( );
__declspec(implementation_key(1499)) VARIANT_BOOL PivotTable::GetEnableDataValueEditing ( );
__declspec(implementation_key(1500)) void PivotTable::PutEnableDataValueEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1501)) PivotFieldPtr PivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function );
__declspec(implementation_key(1502)) _bstr_t PivotTable::GetMDX ( );
__declspec(implementation_key(1503)) VARIANT_BOOL PivotTable::GetViewCalculatedMembers ( );
__declspec(implementation_key(1504)) void PivotTable::PutViewCalculatedMembers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1505)) CalculatedMembersPtr PivotTable::GetCalculatedMembers ( );
__declspec(implementation_key(1506)) VARIANT_BOOL PivotTable::GetDisplayImmediateItems ( );
__declspec(implementation_key(1507)) void PivotTable::PutDisplayImmediateItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1508)) _variant_t PivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(1509)) VARIANT_BOOL PivotTable::GetEnableFieldList ( );
__declspec(implementation_key(1510)) void PivotTable::PutEnableFieldList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1511)) VARIANT_BOOL PivotTable::GetVisualTotals ( );
__declspec(implementation_key(1512)) void PivotTable::PutVisualTotals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1513)) VARIANT_BOOL PivotTable::GetShowPageMultipleItemLabel ( );
__declspec(implementation_key(1514)) void PivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1515)) enum XlPivotTableVersionList PivotTable::GetVersion ( );
__declspec(implementation_key(1516)) _bstr_t PivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties );
__declspec(implementation_key(1517)) VARIANT_BOOL PivotTable::GetDisplayEmptyRow ( );
__declspec(implementation_key(1518)) void PivotTable::PutDisplayEmptyRow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1519)) VARIANT_BOOL PivotTable::GetDisplayEmptyColumn ( );
__declspec(implementation_key(1520)) void PivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1521)) VARIANT_BOOL PivotTable::GetShowCellBackgroundFromOLAP ( );
__declspec(implementation_key(1522)) void PivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1523)) _ApplicationPtr PivotTables::GetApplication ( );
__declspec(implementation_key(1524)) enum XlCreator PivotTables::GetCreator ( );
__declspec(implementation_key(1525)) IDispatchPtr PivotTables::GetParent ( );
__declspec(implementation_key(1526)) long PivotTables::GetCount ( );
__declspec(implementation_key(1527)) PivotTablePtr PivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(1528)) IUnknownPtr PivotTables::_NewEnum ( );
__declspec(implementation_key(1529)) PivotTablePtr PivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(1530)) _ApplicationPtr PivotField::GetApplication ( );
__declspec(implementation_key(1531)) enum XlCreator PivotField::GetCreator ( );
__declspec(implementation_key(1532)) IDispatchPtr PivotField::GetParent ( );
__declspec(implementation_key(1533)) enum XlPivotFieldCalculation PivotField::GetCalculation ( );
__declspec(implementation_key(1534)) void PivotField::PutCalculation ( enum XlPivotFieldCalculation _arg1 );
__declspec(implementation_key(1535)) PivotFieldPtr PivotField::GetChildField ( );
__declspec(implementation_key(1536)) _variant_t PivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(1537)) _variant_t PivotField::GetCurrentPage ( );
__declspec(implementation_key(1538)) void PivotField::PutCurrentPage ( const _variant_t & _arg1 );
__declspec(implementation_key(1539)) RangePtr PivotField::GetDataRange ( );
__declspec(implementation_key(1540)) enum XlPivotFieldDataType PivotField::GetDataType ( );
__declspec(implementation_key(1541)) _bstr_t PivotField::Get_Default ( );
__declspec(implementation_key(1542)) void PivotField::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1543)) enum XlConsolidationFunction PivotField::GetFunction ( );
__declspec(implementation_key(1544)) void PivotField::PutFunction ( enum XlConsolidationFunction _arg1 );
__declspec(implementation_key(1545)) _variant_t PivotField::GetGroupLevel ( );
__declspec(implementation_key(1546)) _variant_t PivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(1547)) RangePtr PivotField::GetLabelRange ( );
__declspec(implementation_key(1548)) _bstr_t PivotField::GetName ( );
__declspec(implementation_key(1549)) void PivotField::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1550)) _bstr_t PivotField::GetNumberFormat ( );
__declspec(implementation_key(1551)) void PivotField::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(1552)) enum XlPivotFieldOrientation PivotField::GetOrientation ( );
__declspec(implementation_key(1553)) void PivotField::PutOrientation ( enum XlPivotFieldOrientation _arg1 );
__declspec(implementation_key(1554)) VARIANT_BOOL PivotField::GetShowAllItems ( );
__declspec(implementation_key(1555)) void PivotField::PutShowAllItems ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1556)) PivotFieldPtr PivotField::GetParentField ( );
__declspec(implementation_key(1557)) _variant_t PivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(1558)) _variant_t PivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(1559)) _variant_t PivotField::GetPosition ( );
__declspec(implementation_key(1560)) void PivotField::PutPosition ( const _variant_t & _arg1 );
__declspec(implementation_key(1561)) _bstr_t PivotField::GetSourceName ( );
__declspec(implementation_key(1562)) _variant_t PivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(1563)) void PivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(1564)) _variant_t PivotField::GetBaseField ( );
__declspec(implementation_key(1565)) void PivotField::PutBaseField ( const _variant_t & _arg1 );
__declspec(implementation_key(1566)) _variant_t PivotField::GetBaseItem ( );
__declspec(implementation_key(1567)) void PivotField::PutBaseItem ( const _variant_t & _arg1 );
__declspec(implementation_key(1568)) _variant_t PivotField::GetTotalLevels ( );
__declspec(implementation_key(1569)) _bstr_t PivotField::GetValue ( );
__declspec(implementation_key(1570)) void PivotField::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1571)) _variant_t PivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(1572)) CalculatedItemsPtr PivotField::CalculatedItems ( );
__declspec(implementation_key(1573)) HRESULT PivotField::Delete ( );
__declspec(implementation_key(1574)) VARIANT_BOOL PivotField::GetDragToColumn ( );
__declspec(implementation_key(1575)) void PivotField::PutDragToColumn ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1576)) VARIANT_BOOL PivotField::GetDragToHide ( );
__declspec(implementation_key(1577)) void PivotField::PutDragToHide ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1578)) VARIANT_BOOL PivotField::GetDragToPage ( );
__declspec(implementation_key(1579)) void PivotField::PutDragToPage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1580)) VARIANT_BOOL PivotField::GetDragToRow ( );
__declspec(implementation_key(1581)) void PivotField::PutDragToRow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1582)) VARIANT_BOOL PivotField::GetDragToData ( );
__declspec(implementation_key(1583)) void PivotField::PutDragToData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1584)) _bstr_t PivotField::GetFormula ( );
__declspec(implementation_key(1585)) void PivotField::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1586)) VARIANT_BOOL PivotField::GetIsCalculated ( );
__declspec(implementation_key(1587)) long PivotField::GetMemoryUsed ( );
__declspec(implementation_key(1588)) VARIANT_BOOL PivotField::GetServerBased ( );
__declspec(implementation_key(1589)) void PivotField::PutServerBased ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1590)) HRESULT PivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(1591)) HRESULT PivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(1592)) long PivotField::GetAutoSortOrder ( );
__declspec(implementation_key(1593)) _bstr_t PivotField::GetAutoSortField ( );
__declspec(implementation_key(1594)) long PivotField::GetAutoShowType ( );
__declspec(implementation_key(1595)) long PivotField::GetAutoShowRange ( );
__declspec(implementation_key(1596)) long PivotField::GetAutoShowCount ( );
__declspec(implementation_key(1597)) _bstr_t PivotField::GetAutoShowField ( );
__declspec(implementation_key(1598)) VARIANT_BOOL PivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(1599)) void PivotField::PutLayoutBlankLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1600)) enum XlSubtototalLocationType PivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(1601)) void PivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType _arg1 );
__declspec(implementation_key(1602)) VARIANT_BOOL PivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(1603)) void PivotField::PutLayoutPageBreak ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1604)) enum XlLayoutFormType PivotField::GetLayoutForm ( );
__declspec(implementation_key(1605)) void PivotField::PutLayoutForm ( enum XlLayoutFormType _arg1 );
__declspec(implementation_key(1606)) _bstr_t PivotField::GetSubtotalName ( );
__declspec(implementation_key(1607)) void PivotField::PutSubtotalName ( _bstr_t _arg1 );
__declspec(implementation_key(1608)) _bstr_t PivotField::GetCaption ( );
__declspec(implementation_key(1609)) void PivotField::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1610)) VARIANT_BOOL PivotField::GetDrilledDown ( );
__declspec(implementation_key(1611)) void PivotField::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1612)) CubeFieldPtr PivotField::GetCubeField ( );
__declspec(implementation_key(1613)) _bstr_t PivotField::GetCurrentPageName ( );
__declspec(implementation_key(1614)) void PivotField::PutCurrentPageName ( _bstr_t _arg1 );
__declspec(implementation_key(1615)) _bstr_t PivotField::GetStandardFormula ( );
__declspec(implementation_key(1616)) void PivotField::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1617)) _variant_t PivotField::GetHiddenItemsList ( );
__declspec(implementation_key(1618)) void PivotField::PutHiddenItemsList ( const _variant_t & _arg1 );
__declspec(implementation_key(1619)) VARIANT_BOOL PivotField::GetDatabaseSort ( );
__declspec(implementation_key(1620)) void PivotField::PutDatabaseSort ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1621)) VARIANT_BOOL PivotField::GetIsMemberProperty ( );
__declspec(implementation_key(1622)) PivotFieldPtr PivotField::GetPropertyParentField ( );
__declspec(implementation_key(1623)) long PivotField::GetPropertyOrder ( );
__declspec(implementation_key(1624)) void PivotField::PutPropertyOrder ( long _arg1 );
__declspec(implementation_key(1625)) VARIANT_BOOL PivotField::GetEnableItemSelection ( );
__declspec(implementation_key(1626)) void PivotField::PutEnableItemSelection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1627)) _variant_t PivotField::GetCurrentPageList ( );
__declspec(implementation_key(1628)) void PivotField::PutCurrentPageList ( const _variant_t & _arg1 );
__declspec(implementation_key(1629)) HRESULT PivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList );
__declspec(implementation_key(1630)) _ApplicationPtr PivotFields::GetApplication ( );
__declspec(implementation_key(1631)) enum XlCreator PivotFields::GetCreator ( );
__declspec(implementation_key(1632)) PivotTablePtr PivotFields::GetParent ( );
__declspec(implementation_key(1633)) long PivotFields::GetCount ( );
__declspec(implementation_key(1634)) IDispatchPtr PivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(1635)) IUnknownPtr PivotFields::_NewEnum ( );
__declspec(implementation_key(1636)) _ApplicationPtr CalculatedFields::GetApplication ( );
__declspec(implementation_key(1637)) enum XlCreator CalculatedFields::GetCreator ( );
__declspec(implementation_key(1638)) IDispatchPtr CalculatedFields::GetParent ( );
__declspec(implementation_key(1639)) long CalculatedFields::GetCount ( );
__declspec(implementation_key(1640)) PivotFieldPtr CalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(1641)) PivotFieldPtr CalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(1642)) PivotFieldPtr CalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(1643)) IUnknownPtr CalculatedFields::_NewEnum ( );
__declspec(implementation_key(1644)) PivotFieldPtr CalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(1645)) _ApplicationPtr PivotItem::GetApplication ( );
__declspec(implementation_key(1646)) enum XlCreator PivotItem::GetCreator ( );
__declspec(implementation_key(1647)) PivotFieldPtr PivotItem::GetParent ( );
__declspec(implementation_key(1648)) _variant_t PivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(1649)) RangePtr PivotItem::GetDataRange ( );
__declspec(implementation_key(1650)) _bstr_t PivotItem::Get_Default ( );
__declspec(implementation_key(1651)) void PivotItem::Put_Default ( _bstr_t _arg1 );
__declspec(implementation_key(1652)) RangePtr PivotItem::GetLabelRange ( );
__declspec(implementation_key(1653)) _bstr_t PivotItem::GetName ( );
__declspec(implementation_key(1654)) void PivotItem::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1655)) PivotItemPtr PivotItem::GetParentItem ( );
__declspec(implementation_key(1656)) VARIANT_BOOL PivotItem::GetParentShowDetail ( );
__declspec(implementation_key(1657)) long PivotItem::GetPosition ( );
__declspec(implementation_key(1658)) void PivotItem::PutPosition ( long _arg1 );
__declspec(implementation_key(1659)) VARIANT_BOOL PivotItem::GetShowDetail ( );
__declspec(implementation_key(1660)) void PivotItem::PutShowDetail ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1661)) _variant_t PivotItem::GetSourceName ( );
__declspec(implementation_key(1662)) _bstr_t PivotItem::GetValue ( );
__declspec(implementation_key(1663)) void PivotItem::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(1664)) VARIANT_BOOL PivotItem::GetVisible ( );
__declspec(implementation_key(1665)) void PivotItem::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1666)) HRESULT PivotItem::Delete ( );
__declspec(implementation_key(1667)) VARIANT_BOOL PivotItem::GetIsCalculated ( );
__declspec(implementation_key(1668)) long PivotItem::GetRecordCount ( );
__declspec(implementation_key(1669)) _bstr_t PivotItem::GetFormula ( );
__declspec(implementation_key(1670)) void PivotItem::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1671)) _bstr_t PivotItem::GetCaption ( );
__declspec(implementation_key(1672)) void PivotItem::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1673)) VARIANT_BOOL PivotItem::GetDrilledDown ( );
__declspec(implementation_key(1674)) void PivotItem::PutDrilledDown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1675)) _bstr_t PivotItem::GetStandardFormula ( );
__declspec(implementation_key(1676)) void PivotItem::PutStandardFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1677)) _bstr_t PivotItem::GetSourceNameStandard ( );
__declspec(implementation_key(1678)) _ApplicationPtr PivotItems::GetApplication ( );
__declspec(implementation_key(1679)) enum XlCreator PivotItems::GetCreator ( );
__declspec(implementation_key(1680)) PivotFieldPtr PivotItems::GetParent ( );
__declspec(implementation_key(1681)) HRESULT PivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(1682)) long PivotItems::GetCount ( );
__declspec(implementation_key(1683)) IDispatchPtr PivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(1684)) IUnknownPtr PivotItems::_NewEnum ( );
__declspec(implementation_key(1685)) _ApplicationPtr CalculatedItems::GetApplication ( );
__declspec(implementation_key(1686)) enum XlCreator CalculatedItems::GetCreator ( );
__declspec(implementation_key(1687)) IDispatchPtr CalculatedItems::GetParent ( );
__declspec(implementation_key(1688)) long CalculatedItems::GetCount ( );
__declspec(implementation_key(1689)) PivotItemPtr CalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(1690)) PivotItemPtr CalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(1691)) PivotItemPtr CalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(1692)) IUnknownPtr CalculatedItems::_NewEnum ( );
__declspec(implementation_key(1693)) PivotItemPtr CalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(1694)) _ApplicationPtr Characters::GetApplication ( );
__declspec(implementation_key(1695)) enum XlCreator Characters::GetCreator ( );
__declspec(implementation_key(1696)) IDispatchPtr Characters::GetParent ( );
__declspec(implementation_key(1697)) _bstr_t Characters::GetCaption ( );
__declspec(implementation_key(1698)) void Characters::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1699)) long Characters::GetCount ( );
__declspec(implementation_key(1700)) _variant_t Characters::Delete ( );
__declspec(implementation_key(1701)) FontPtr Characters::GetFont ( );
__declspec(implementation_key(1702)) _variant_t Characters::Insert ( _bstr_t String );
__declspec(implementation_key(1703)) _bstr_t Characters::GetText ( );
__declspec(implementation_key(1704)) void Characters::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1705)) _bstr_t Characters::GetPhoneticCharacters ( );
__declspec(implementation_key(1706)) void Characters::PutPhoneticCharacters ( _bstr_t _arg1 );
__declspec(implementation_key(1707)) _ApplicationPtr Dialogs::GetApplication ( );
__declspec(implementation_key(1708)) enum XlCreator Dialogs::GetCreator ( );
__declspec(implementation_key(1709)) IDispatchPtr Dialogs::GetParent ( );
__declspec(implementation_key(1710)) long Dialogs::GetCount ( );
__declspec(implementation_key(1711)) DialogPtr Dialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(1712)) DialogPtr Dialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(1713)) IUnknownPtr Dialogs::Get_NewEnum ( );
__declspec(implementation_key(1714)) _ApplicationPtr Dialog::GetApplication ( );
__declspec(implementation_key(1715)) enum XlCreator Dialog::GetCreator ( );
__declspec(implementation_key(1716)) IDispatchPtr Dialog::GetParent ( );
__declspec(implementation_key(1717)) VARIANT_BOOL Dialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(1718)) _ApplicationPtr SoundNote::GetApplication ( );
__declspec(implementation_key(1719)) enum XlCreator SoundNote::GetCreator ( );
__declspec(implementation_key(1720)) IDispatchPtr SoundNote::GetParent ( );
__declspec(implementation_key(1721)) _variant_t SoundNote::Delete ( );
__declspec(implementation_key(1722)) _variant_t SoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(1723)) _variant_t SoundNote::Play ( );
__declspec(implementation_key(1724)) _variant_t SoundNote::Record ( );
__declspec(implementation_key(1725)) _ApplicationPtr Button::GetApplication ( );
__declspec(implementation_key(1726)) enum XlCreator Button::GetCreator ( );
__declspec(implementation_key(1727)) IDispatchPtr Button::GetParent ( );
__declspec(implementation_key(1728)) RangePtr Button::GetBottomRightCell ( );
__declspec(implementation_key(1729)) _variant_t Button::BringToFront ( );
__declspec(implementation_key(1730)) _variant_t Button::Copy ( );
__declspec(implementation_key(1731)) _variant_t Button::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1732)) _variant_t Button::Cut ( );
__declspec(implementation_key(1733)) _variant_t Button::Delete ( );
__declspec(implementation_key(1734)) IDispatchPtr Button::Duplicate ( );
__declspec(implementation_key(1735)) VARIANT_BOOL Button::GetEnabled ( );
__declspec(implementation_key(1736)) void Button::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1737)) double Button::GetHeight ( );
__declspec(implementation_key(1738)) void Button::PutHeight ( double _arg1 );
__declspec(implementation_key(1739)) long Button::GetIndex ( );
__declspec(implementation_key(1740)) double Button::GetLeft ( );
__declspec(implementation_key(1741)) void Button::PutLeft ( double _arg1 );
__declspec(implementation_key(1742)) VARIANT_BOOL Button::GetLocked ( );
__declspec(implementation_key(1743)) void Button::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1744)) _bstr_t Button::GetName ( );
__declspec(implementation_key(1745)) void Button::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1746)) _bstr_t Button::GetOnAction ( );
__declspec(implementation_key(1747)) void Button::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1748)) _variant_t Button::GetPlacement ( );
__declspec(implementation_key(1749)) void Button::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1750)) VARIANT_BOOL Button::GetPrintObject ( );
__declspec(implementation_key(1751)) void Button::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1752)) _variant_t Button::Select ( const _variant_t & Replace );
__declspec(implementation_key(1753)) _variant_t Button::SendToBack ( );
__declspec(implementation_key(1754)) double Button::GetTop ( );
__declspec(implementation_key(1755)) void Button::PutTop ( double _arg1 );
__declspec(implementation_key(1756)) RangePtr Button::GetTopLeftCell ( );
__declspec(implementation_key(1757)) VARIANT_BOOL Button::GetVisible ( );
__declspec(implementation_key(1758)) void Button::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1759)) double Button::GetWidth ( );
__declspec(implementation_key(1760)) void Button::PutWidth ( double _arg1 );
__declspec(implementation_key(1761)) long Button::GetZOrder ( );
__declspec(implementation_key(1762)) ShapeRangePtr Button::GetShapeRange ( );
__declspec(implementation_key(1763)) VARIANT_BOOL Button::GetAddIndent ( );
__declspec(implementation_key(1764)) void Button::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1765)) _variant_t Button::GetAutoScaleFont ( );
__declspec(implementation_key(1766)) void Button::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(1767)) VARIANT_BOOL Button::GetAutoSize ( );
__declspec(implementation_key(1768)) void Button::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1769)) _bstr_t Button::GetCaption ( );
__declspec(implementation_key(1770)) void Button::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1771)) CharactersPtr Button::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1772)) _variant_t Button::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1773)) FontPtr Button::GetFont ( );
__declspec(implementation_key(1774)) _bstr_t Button::GetFormula ( );
__declspec(implementation_key(1775)) void Button::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1776)) _variant_t Button::GetHorizontalAlignment ( );
__declspec(implementation_key(1777)) void Button::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1778)) VARIANT_BOOL Button::GetLockedText ( );
__declspec(implementation_key(1779)) void Button::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1780)) _variant_t Button::GetOrientation ( );
__declspec(implementation_key(1781)) void Button::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1782)) _bstr_t Button::GetText ( );
__declspec(implementation_key(1783)) void Button::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1784)) _variant_t Button::GetVerticalAlignment ( );
__declspec(implementation_key(1785)) void Button::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1786)) long Button::GetReadingOrder ( );
__declspec(implementation_key(1787)) void Button::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1788)) _variant_t Button::GetAccelerator ( );
__declspec(implementation_key(1789)) void Button::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1790)) VARIANT_BOOL Button::GetCancelButton ( );
__declspec(implementation_key(1791)) void Button::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1792)) VARIANT_BOOL Button::GetDefaultButton ( );
__declspec(implementation_key(1793)) void Button::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1794)) VARIANT_BOOL Button::GetDismissButton ( );
__declspec(implementation_key(1795)) void Button::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1796)) VARIANT_BOOL Button::GetHelpButton ( );
__declspec(implementation_key(1797)) void Button::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1798)) _variant_t Button::GetPhoneticAccelerator ( );
__declspec(implementation_key(1799)) void Button::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1800)) _ApplicationPtr Buttons::GetApplication ( );
__declspec(implementation_key(1801)) enum XlCreator Buttons::GetCreator ( );
__declspec(implementation_key(1802)) IDispatchPtr Buttons::GetParent ( );
__declspec(implementation_key(1803)) _variant_t Buttons::BringToFront ( );
__declspec(implementation_key(1804)) _variant_t Buttons::Copy ( );
__declspec(implementation_key(1805)) _variant_t Buttons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1806)) _variant_t Buttons::Cut ( );
__declspec(implementation_key(1807)) _variant_t Buttons::Delete ( );
__declspec(implementation_key(1808)) IDispatchPtr Buttons::Duplicate ( );
__declspec(implementation_key(1809)) VARIANT_BOOL Buttons::GetEnabled ( );
__declspec(implementation_key(1810)) void Buttons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1811)) double Buttons::GetHeight ( );
__declspec(implementation_key(1812)) void Buttons::PutHeight ( double _arg1 );
__declspec(implementation_key(1813)) double Buttons::GetLeft ( );
__declspec(implementation_key(1814)) void Buttons::PutLeft ( double _arg1 );
__declspec(implementation_key(1815)) VARIANT_BOOL Buttons::GetLocked ( );
__declspec(implementation_key(1816)) void Buttons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1817)) _bstr_t Buttons::GetOnAction ( );
__declspec(implementation_key(1818)) void Buttons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1819)) _variant_t Buttons::GetPlacement ( );
__declspec(implementation_key(1820)) void Buttons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1821)) VARIANT_BOOL Buttons::GetPrintObject ( );
__declspec(implementation_key(1822)) void Buttons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1823)) _variant_t Buttons::Select ( const _variant_t & Replace );
__declspec(implementation_key(1824)) _variant_t Buttons::SendToBack ( );
__declspec(implementation_key(1825)) double Buttons::GetTop ( );
__declspec(implementation_key(1826)) void Buttons::PutTop ( double _arg1 );
__declspec(implementation_key(1827)) VARIANT_BOOL Buttons::GetVisible ( );
__declspec(implementation_key(1828)) void Buttons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1829)) double Buttons::GetWidth ( );
__declspec(implementation_key(1830)) void Buttons::PutWidth ( double _arg1 );
__declspec(implementation_key(1831)) long Buttons::GetZOrder ( );
__declspec(implementation_key(1832)) ShapeRangePtr Buttons::GetShapeRange ( );
__declspec(implementation_key(1833)) VARIANT_BOOL Buttons::GetAddIndent ( );
__declspec(implementation_key(1834)) void Buttons::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1835)) _variant_t Buttons::GetAutoScaleFont ( );
__declspec(implementation_key(1836)) void Buttons::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(1837)) VARIANT_BOOL Buttons::GetAutoSize ( );
__declspec(implementation_key(1838)) void Buttons::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1839)) _bstr_t Buttons::GetCaption ( );
__declspec(implementation_key(1840)) void Buttons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1841)) CharactersPtr Buttons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1842)) _variant_t Buttons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1843)) FontPtr Buttons::GetFont ( );
__declspec(implementation_key(1844)) _bstr_t Buttons::GetFormula ( );
__declspec(implementation_key(1845)) void Buttons::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(1846)) _variant_t Buttons::GetHorizontalAlignment ( );
__declspec(implementation_key(1847)) void Buttons::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1848)) VARIANT_BOOL Buttons::GetLockedText ( );
__declspec(implementation_key(1849)) void Buttons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1850)) _variant_t Buttons::GetOrientation ( );
__declspec(implementation_key(1851)) void Buttons::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(1852)) _bstr_t Buttons::GetText ( );
__declspec(implementation_key(1853)) void Buttons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1854)) _variant_t Buttons::GetVerticalAlignment ( );
__declspec(implementation_key(1855)) void Buttons::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(1856)) long Buttons::GetReadingOrder ( );
__declspec(implementation_key(1857)) void Buttons::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(1858)) _variant_t Buttons::GetAccelerator ( );
__declspec(implementation_key(1859)) void Buttons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1860)) VARIANT_BOOL Buttons::GetCancelButton ( );
__declspec(implementation_key(1861)) void Buttons::PutCancelButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1862)) VARIANT_BOOL Buttons::GetDefaultButton ( );
__declspec(implementation_key(1863)) void Buttons::PutDefaultButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1864)) VARIANT_BOOL Buttons::GetDismissButton ( );
__declspec(implementation_key(1865)) void Buttons::PutDismissButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1866)) VARIANT_BOOL Buttons::GetHelpButton ( );
__declspec(implementation_key(1867)) void Buttons::PutHelpButton ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1868)) _variant_t Buttons::GetPhoneticAccelerator ( );
__declspec(implementation_key(1869)) void Buttons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1870)) ButtonPtr Buttons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(1871)) long Buttons::GetCount ( );
__declspec(implementation_key(1872)) GroupObjectPtr Buttons::Group ( );
__declspec(implementation_key(1873)) IDispatchPtr Buttons::Item ( const _variant_t & Index );
__declspec(implementation_key(1874)) IUnknownPtr Buttons::_NewEnum ( );
__declspec(implementation_key(1875)) _ApplicationPtr CheckBox::GetApplication ( );
__declspec(implementation_key(1876)) enum XlCreator CheckBox::GetCreator ( );
__declspec(implementation_key(1877)) IDispatchPtr CheckBox::GetParent ( );
__declspec(implementation_key(1878)) RangePtr CheckBox::GetBottomRightCell ( );
__declspec(implementation_key(1879)) _variant_t CheckBox::BringToFront ( );
__declspec(implementation_key(1880)) _variant_t CheckBox::Copy ( );
__declspec(implementation_key(1881)) _variant_t CheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1882)) _variant_t CheckBox::Cut ( );
__declspec(implementation_key(1883)) _variant_t CheckBox::Delete ( );
__declspec(implementation_key(1884)) IDispatchPtr CheckBox::Duplicate ( );
__declspec(implementation_key(1885)) VARIANT_BOOL CheckBox::GetEnabled ( );
__declspec(implementation_key(1886)) void CheckBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1887)) double CheckBox::GetHeight ( );
__declspec(implementation_key(1888)) void CheckBox::PutHeight ( double _arg1 );
__declspec(implementation_key(1889)) long CheckBox::GetIndex ( );
__declspec(implementation_key(1890)) double CheckBox::GetLeft ( );
__declspec(implementation_key(1891)) void CheckBox::PutLeft ( double _arg1 );
__declspec(implementation_key(1892)) VARIANT_BOOL CheckBox::GetLocked ( );
__declspec(implementation_key(1893)) void CheckBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1894)) _bstr_t CheckBox::GetName ( );
__declspec(implementation_key(1895)) void CheckBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1896)) _bstr_t CheckBox::GetOnAction ( );
__declspec(implementation_key(1897)) void CheckBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1898)) _variant_t CheckBox::GetPlacement ( );
__declspec(implementation_key(1899)) void CheckBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1900)) VARIANT_BOOL CheckBox::GetPrintObject ( );
__declspec(implementation_key(1901)) void CheckBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1902)) _variant_t CheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(1903)) _variant_t CheckBox::SendToBack ( );
__declspec(implementation_key(1904)) double CheckBox::GetTop ( );
__declspec(implementation_key(1905)) void CheckBox::PutTop ( double _arg1 );
__declspec(implementation_key(1906)) RangePtr CheckBox::GetTopLeftCell ( );
__declspec(implementation_key(1907)) VARIANT_BOOL CheckBox::GetVisible ( );
__declspec(implementation_key(1908)) void CheckBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1909)) double CheckBox::GetWidth ( );
__declspec(implementation_key(1910)) void CheckBox::PutWidth ( double _arg1 );
__declspec(implementation_key(1911)) long CheckBox::GetZOrder ( );
__declspec(implementation_key(1912)) ShapeRangePtr CheckBox::GetShapeRange ( );
__declspec(implementation_key(1913)) _bstr_t CheckBox::GetCaption ( );
__declspec(implementation_key(1914)) void CheckBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1915)) CharactersPtr CheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1916)) _variant_t CheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1917)) VARIANT_BOOL CheckBox::GetLockedText ( );
__declspec(implementation_key(1918)) void CheckBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1919)) _bstr_t CheckBox::GetText ( );
__declspec(implementation_key(1920)) void CheckBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1921)) _variant_t CheckBox::GetAccelerator ( );
__declspec(implementation_key(1922)) void CheckBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1923)) BorderPtr CheckBox::GetBorder ( );
__declspec(implementation_key(1924)) long CheckBox::Get_Default ( );
__declspec(implementation_key(1925)) void CheckBox::Put_Default ( long _arg1 );
__declspec(implementation_key(1926)) VARIANT_BOOL CheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(1927)) void CheckBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1928)) InteriorPtr CheckBox::GetInterior ( );
__declspec(implementation_key(1929)) _bstr_t CheckBox::GetLinkedCell ( );
__declspec(implementation_key(1930)) void CheckBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1931)) _variant_t CheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(1932)) void CheckBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1933)) _variant_t CheckBox::GetValue ( );
__declspec(implementation_key(1934)) void CheckBox::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1935)) _ApplicationPtr CheckBoxes::GetApplication ( );
__declspec(implementation_key(1936)) enum XlCreator CheckBoxes::GetCreator ( );
__declspec(implementation_key(1937)) IDispatchPtr CheckBoxes::GetParent ( );
__declspec(implementation_key(1938)) _variant_t CheckBoxes::BringToFront ( );
__declspec(implementation_key(1939)) _variant_t CheckBoxes::Copy ( );
__declspec(implementation_key(1940)) _variant_t CheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(1941)) _variant_t CheckBoxes::Cut ( );
__declspec(implementation_key(1942)) _variant_t CheckBoxes::Delete ( );
__declspec(implementation_key(1943)) IDispatchPtr CheckBoxes::Duplicate ( );
__declspec(implementation_key(1944)) VARIANT_BOOL CheckBoxes::GetEnabled ( );
__declspec(implementation_key(1945)) void CheckBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1946)) double CheckBoxes::GetHeight ( );
__declspec(implementation_key(1947)) void CheckBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(1948)) double CheckBoxes::GetLeft ( );
__declspec(implementation_key(1949)) void CheckBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(1950)) VARIANT_BOOL CheckBoxes::GetLocked ( );
__declspec(implementation_key(1951)) void CheckBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1952)) _bstr_t CheckBoxes::GetOnAction ( );
__declspec(implementation_key(1953)) void CheckBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(1954)) _variant_t CheckBoxes::GetPlacement ( );
__declspec(implementation_key(1955)) void CheckBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(1956)) VARIANT_BOOL CheckBoxes::GetPrintObject ( );
__declspec(implementation_key(1957)) void CheckBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1958)) _variant_t CheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(1959)) _variant_t CheckBoxes::SendToBack ( );
__declspec(implementation_key(1960)) double CheckBoxes::GetTop ( );
__declspec(implementation_key(1961)) void CheckBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(1962)) VARIANT_BOOL CheckBoxes::GetVisible ( );
__declspec(implementation_key(1963)) void CheckBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1964)) double CheckBoxes::GetWidth ( );
__declspec(implementation_key(1965)) void CheckBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(1966)) long CheckBoxes::GetZOrder ( );
__declspec(implementation_key(1967)) ShapeRangePtr CheckBoxes::GetShapeRange ( );
__declspec(implementation_key(1968)) _bstr_t CheckBoxes::GetCaption ( );
__declspec(implementation_key(1969)) void CheckBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1970)) CharactersPtr CheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(1971)) _variant_t CheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(1972)) VARIANT_BOOL CheckBoxes::GetLockedText ( );
__declspec(implementation_key(1973)) void CheckBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1974)) _bstr_t CheckBoxes::GetText ( );
__declspec(implementation_key(1975)) void CheckBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(1976)) _variant_t CheckBoxes::GetAccelerator ( );
__declspec(implementation_key(1977)) void CheckBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1978)) BorderPtr CheckBoxes::GetBorder ( );
__declspec(implementation_key(1979)) long CheckBoxes::Get_Default ( );
__declspec(implementation_key(1980)) void CheckBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(1981)) VARIANT_BOOL CheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(1982)) void CheckBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1983)) InteriorPtr CheckBoxes::GetInterior ( );
__declspec(implementation_key(1984)) _bstr_t CheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(1985)) void CheckBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(1986)) _variant_t CheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(1987)) void CheckBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(1988)) _variant_t CheckBoxes::GetValue ( );
__declspec(implementation_key(1989)) void CheckBoxes::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(1990)) CheckBoxPtr CheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(1991)) long CheckBoxes::GetCount ( );
__declspec(implementation_key(1992)) GroupObjectPtr CheckBoxes::Group ( );
__declspec(implementation_key(1993)) IDispatchPtr CheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(1994)) IUnknownPtr CheckBoxes::_NewEnum ( );
__declspec(implementation_key(1995)) _ApplicationPtr OptionButton::GetApplication ( );
__declspec(implementation_key(1996)) enum XlCreator OptionButton::GetCreator ( );
__declspec(implementation_key(1997)) IDispatchPtr OptionButton::GetParent ( );
__declspec(implementation_key(1998)) RangePtr OptionButton::GetBottomRightCell ( );
__declspec(implementation_key(1999)) _variant_t OptionButton::BringToFront ( );
__declspec(implementation_key(2000)) _variant_t OptionButton::Copy ( );
__declspec(implementation_key(2001)) _variant_t OptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2002)) _variant_t OptionButton::Cut ( );
__declspec(implementation_key(2003)) _variant_t OptionButton::Delete ( );
__declspec(implementation_key(2004)) IDispatchPtr OptionButton::Duplicate ( );
__declspec(implementation_key(2005)) VARIANT_BOOL OptionButton::GetEnabled ( );
__declspec(implementation_key(2006)) void OptionButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2007)) double OptionButton::GetHeight ( );
__declspec(implementation_key(2008)) void OptionButton::PutHeight ( double _arg1 );
__declspec(implementation_key(2009)) long OptionButton::GetIndex ( );
__declspec(implementation_key(2010)) double OptionButton::GetLeft ( );
__declspec(implementation_key(2011)) void OptionButton::PutLeft ( double _arg1 );
__declspec(implementation_key(2012)) VARIANT_BOOL OptionButton::GetLocked ( );
__declspec(implementation_key(2013)) void OptionButton::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2014)) _bstr_t OptionButton::GetName ( );
__declspec(implementation_key(2015)) void OptionButton::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2016)) _bstr_t OptionButton::GetOnAction ( );
__declspec(implementation_key(2017)) void OptionButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2018)) _variant_t OptionButton::GetPlacement ( );
__declspec(implementation_key(2019)) void OptionButton::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2020)) VARIANT_BOOL OptionButton::GetPrintObject ( );
__declspec(implementation_key(2021)) void OptionButton::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2022)) _variant_t OptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(2023)) _variant_t OptionButton::SendToBack ( );
__declspec(implementation_key(2024)) double OptionButton::GetTop ( );
__declspec(implementation_key(2025)) void OptionButton::PutTop ( double _arg1 );
__declspec(implementation_key(2026)) RangePtr OptionButton::GetTopLeftCell ( );
__declspec(implementation_key(2027)) VARIANT_BOOL OptionButton::GetVisible ( );
__declspec(implementation_key(2028)) void OptionButton::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2029)) double OptionButton::GetWidth ( );
__declspec(implementation_key(2030)) void OptionButton::PutWidth ( double _arg1 );
__declspec(implementation_key(2031)) long OptionButton::GetZOrder ( );
__declspec(implementation_key(2032)) ShapeRangePtr OptionButton::GetShapeRange ( );
__declspec(implementation_key(2033)) _bstr_t OptionButton::GetCaption ( );
__declspec(implementation_key(2034)) void OptionButton::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2035)) CharactersPtr OptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2036)) _variant_t OptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2037)) VARIANT_BOOL OptionButton::GetLockedText ( );
__declspec(implementation_key(2038)) void OptionButton::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2039)) _bstr_t OptionButton::GetText ( );
__declspec(implementation_key(2040)) void OptionButton::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2041)) _variant_t OptionButton::GetAccelerator ( );
__declspec(implementation_key(2042)) void OptionButton::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2043)) BorderPtr OptionButton::GetBorder ( );
__declspec(implementation_key(2044)) long OptionButton::Get_Default ( );
__declspec(implementation_key(2045)) void OptionButton::Put_Default ( long _arg1 );
__declspec(implementation_key(2046)) VARIANT_BOOL OptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(2047)) void OptionButton::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2048)) InteriorPtr OptionButton::GetInterior ( );
__declspec(implementation_key(2049)) _bstr_t OptionButton::GetLinkedCell ( );
__declspec(implementation_key(2050)) void OptionButton::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2051)) _variant_t OptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(2052)) void OptionButton::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2053)) _variant_t OptionButton::GetValue ( );
__declspec(implementation_key(2054)) void OptionButton::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(2055)) GroupBoxPtr OptionButton::GetGroupBox ( );
__declspec(implementation_key(2056)) _ApplicationPtr OptionButtons::GetApplication ( );
__declspec(implementation_key(2057)) enum XlCreator OptionButtons::GetCreator ( );
__declspec(implementation_key(2058)) IDispatchPtr OptionButtons::GetParent ( );
__declspec(implementation_key(2059)) _variant_t OptionButtons::BringToFront ( );
__declspec(implementation_key(2060)) _variant_t OptionButtons::Copy ( );
__declspec(implementation_key(2061)) _variant_t OptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2062)) _variant_t OptionButtons::Cut ( );
__declspec(implementation_key(2063)) _variant_t OptionButtons::Delete ( );
__declspec(implementation_key(2064)) IDispatchPtr OptionButtons::Duplicate ( );
__declspec(implementation_key(2065)) VARIANT_BOOL OptionButtons::GetEnabled ( );
__declspec(implementation_key(2066)) void OptionButtons::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2067)) double OptionButtons::GetHeight ( );
__declspec(implementation_key(2068)) void OptionButtons::PutHeight ( double _arg1 );
__declspec(implementation_key(2069)) double OptionButtons::GetLeft ( );
__declspec(implementation_key(2070)) void OptionButtons::PutLeft ( double _arg1 );
__declspec(implementation_key(2071)) VARIANT_BOOL OptionButtons::GetLocked ( );
__declspec(implementation_key(2072)) void OptionButtons::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2073)) _bstr_t OptionButtons::GetOnAction ( );
__declspec(implementation_key(2074)) void OptionButtons::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2075)) _variant_t OptionButtons::GetPlacement ( );
__declspec(implementation_key(2076)) void OptionButtons::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2077)) VARIANT_BOOL OptionButtons::GetPrintObject ( );
__declspec(implementation_key(2078)) void OptionButtons::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2079)) _variant_t OptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(2080)) _variant_t OptionButtons::SendToBack ( );
__declspec(implementation_key(2081)) double OptionButtons::GetTop ( );
__declspec(implementation_key(2082)) void OptionButtons::PutTop ( double _arg1 );
__declspec(implementation_key(2083)) VARIANT_BOOL OptionButtons::GetVisible ( );
__declspec(implementation_key(2084)) void OptionButtons::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2085)) double OptionButtons::GetWidth ( );
__declspec(implementation_key(2086)) void OptionButtons::PutWidth ( double _arg1 );
__declspec(implementation_key(2087)) long OptionButtons::GetZOrder ( );
__declspec(implementation_key(2088)) ShapeRangePtr OptionButtons::GetShapeRange ( );
__declspec(implementation_key(2089)) _bstr_t OptionButtons::GetCaption ( );
__declspec(implementation_key(2090)) void OptionButtons::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2091)) CharactersPtr OptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2092)) _variant_t OptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2093)) VARIANT_BOOL OptionButtons::GetLockedText ( );
__declspec(implementation_key(2094)) void OptionButtons::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2095)) _bstr_t OptionButtons::GetText ( );
__declspec(implementation_key(2096)) void OptionButtons::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2097)) _variant_t OptionButtons::GetAccelerator ( );
__declspec(implementation_key(2098)) void OptionButtons::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2099)) BorderPtr OptionButtons::GetBorder ( );
__declspec(implementation_key(2100)) long OptionButtons::Get_Default ( );
__declspec(implementation_key(2101)) void OptionButtons::Put_Default ( long _arg1 );
__declspec(implementation_key(2102)) VARIANT_BOOL OptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(2103)) void OptionButtons::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2104)) InteriorPtr OptionButtons::GetInterior ( );
__declspec(implementation_key(2105)) _bstr_t OptionButtons::GetLinkedCell ( );
__declspec(implementation_key(2106)) void OptionButtons::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2107)) _variant_t OptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(2108)) void OptionButtons::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2109)) _variant_t OptionButtons::GetValue ( );
__declspec(implementation_key(2110)) void OptionButtons::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(2111)) GroupBoxPtr OptionButtons::GetGroupBox ( );
__declspec(implementation_key(2112)) OptionButtonPtr OptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2113)) long OptionButtons::GetCount ( );
__declspec(implementation_key(2114)) GroupObjectPtr OptionButtons::Group ( );
__declspec(implementation_key(2115)) IDispatchPtr OptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(2116)) IUnknownPtr OptionButtons::_NewEnum ( );
__declspec(implementation_key(2117)) _ApplicationPtr EditBox::GetApplication ( );
__declspec(implementation_key(2118)) enum XlCreator EditBox::GetCreator ( );
__declspec(implementation_key(2119)) IDispatchPtr EditBox::GetParent ( );
__declspec(implementation_key(2120)) RangePtr EditBox::GetBottomRightCell ( );
__declspec(implementation_key(2121)) _variant_t EditBox::BringToFront ( );
__declspec(implementation_key(2122)) _variant_t EditBox::Copy ( );
__declspec(implementation_key(2123)) _variant_t EditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2124)) _variant_t EditBox::Cut ( );
__declspec(implementation_key(2125)) _variant_t EditBox::Delete ( );
__declspec(implementation_key(2126)) IDispatchPtr EditBox::Duplicate ( );
__declspec(implementation_key(2127)) VARIANT_BOOL EditBox::GetEnabled ( );
__declspec(implementation_key(2128)) void EditBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2129)) double EditBox::GetHeight ( );
__declspec(implementation_key(2130)) void EditBox::PutHeight ( double _arg1 );
__declspec(implementation_key(2131)) long EditBox::GetIndex ( );
__declspec(implementation_key(2132)) double EditBox::GetLeft ( );
__declspec(implementation_key(2133)) void EditBox::PutLeft ( double _arg1 );
__declspec(implementation_key(2134)) VARIANT_BOOL EditBox::GetLocked ( );
__declspec(implementation_key(2135)) void EditBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2136)) _bstr_t EditBox::GetName ( );
__declspec(implementation_key(2137)) void EditBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2138)) _bstr_t EditBox::GetOnAction ( );
__declspec(implementation_key(2139)) void EditBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2140)) _variant_t EditBox::GetPlacement ( );
__declspec(implementation_key(2141)) void EditBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2142)) VARIANT_BOOL EditBox::GetPrintObject ( );
__declspec(implementation_key(2143)) void EditBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2144)) _variant_t EditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2145)) _variant_t EditBox::SendToBack ( );
__declspec(implementation_key(2146)) double EditBox::GetTop ( );
__declspec(implementation_key(2147)) void EditBox::PutTop ( double _arg1 );
__declspec(implementation_key(2148)) RangePtr EditBox::GetTopLeftCell ( );
__declspec(implementation_key(2149)) VARIANT_BOOL EditBox::GetVisible ( );
__declspec(implementation_key(2150)) void EditBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2151)) double EditBox::GetWidth ( );
__declspec(implementation_key(2152)) void EditBox::PutWidth ( double _arg1 );
__declspec(implementation_key(2153)) long EditBox::GetZOrder ( );
__declspec(implementation_key(2154)) ShapeRangePtr EditBox::GetShapeRange ( );
__declspec(implementation_key(2155)) _bstr_t EditBox::GetCaption ( );
__declspec(implementation_key(2156)) void EditBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2157)) CharactersPtr EditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2158)) _variant_t EditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2159)) VARIANT_BOOL EditBox::GetLockedText ( );
__declspec(implementation_key(2160)) void EditBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2161)) _bstr_t EditBox::GetText ( );
__declspec(implementation_key(2162)) void EditBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2163)) VARIANT_BOOL EditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(2164)) void EditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2165)) long EditBox::GetInputType ( );
__declspec(implementation_key(2166)) void EditBox::PutInputType ( long _arg1 );
__declspec(implementation_key(2167)) _bstr_t EditBox::GetLinkedObject ( );
__declspec(implementation_key(2168)) VARIANT_BOOL EditBox::GetMultiLine ( );
__declspec(implementation_key(2169)) void EditBox::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2170)) VARIANT_BOOL EditBox::GetPasswordEdit ( );
__declspec(implementation_key(2171)) void EditBox::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2172)) _ApplicationPtr EditBoxes::GetApplication ( );
__declspec(implementation_key(2173)) enum XlCreator EditBoxes::GetCreator ( );
__declspec(implementation_key(2174)) IDispatchPtr EditBoxes::GetParent ( );
__declspec(implementation_key(2175)) _variant_t EditBoxes::BringToFront ( );
__declspec(implementation_key(2176)) _variant_t EditBoxes::Copy ( );
__declspec(implementation_key(2177)) _variant_t EditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2178)) _variant_t EditBoxes::Cut ( );
__declspec(implementation_key(2179)) _variant_t EditBoxes::Delete ( );
__declspec(implementation_key(2180)) IDispatchPtr EditBoxes::Duplicate ( );
__declspec(implementation_key(2181)) VARIANT_BOOL EditBoxes::GetEnabled ( );
__declspec(implementation_key(2182)) void EditBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2183)) double EditBoxes::GetHeight ( );
__declspec(implementation_key(2184)) void EditBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2185)) double EditBoxes::GetLeft ( );
__declspec(implementation_key(2186)) void EditBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2187)) VARIANT_BOOL EditBoxes::GetLocked ( );
__declspec(implementation_key(2188)) void EditBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2189)) _bstr_t EditBoxes::GetOnAction ( );
__declspec(implementation_key(2190)) void EditBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2191)) _variant_t EditBoxes::GetPlacement ( );
__declspec(implementation_key(2192)) void EditBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2193)) VARIANT_BOOL EditBoxes::GetPrintObject ( );
__declspec(implementation_key(2194)) void EditBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2195)) _variant_t EditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2196)) _variant_t EditBoxes::SendToBack ( );
__declspec(implementation_key(2197)) double EditBoxes::GetTop ( );
__declspec(implementation_key(2198)) void EditBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2199)) VARIANT_BOOL EditBoxes::GetVisible ( );
__declspec(implementation_key(2200)) void EditBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2201)) double EditBoxes::GetWidth ( );
__declspec(implementation_key(2202)) void EditBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2203)) long EditBoxes::GetZOrder ( );
__declspec(implementation_key(2204)) ShapeRangePtr EditBoxes::GetShapeRange ( );
__declspec(implementation_key(2205)) _bstr_t EditBoxes::GetCaption ( );
__declspec(implementation_key(2206)) void EditBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2207)) CharactersPtr EditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2208)) _variant_t EditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2209)) VARIANT_BOOL EditBoxes::GetLockedText ( );
__declspec(implementation_key(2210)) void EditBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2211)) _bstr_t EditBoxes::GetText ( );
__declspec(implementation_key(2212)) void EditBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2213)) VARIANT_BOOL EditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(2214)) void EditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2215)) long EditBoxes::GetInputType ( );
__declspec(implementation_key(2216)) void EditBoxes::PutInputType ( long _arg1 );
__declspec(implementation_key(2217)) VARIANT_BOOL EditBoxes::GetMultiLine ( );
__declspec(implementation_key(2218)) void EditBoxes::PutMultiLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2219)) VARIANT_BOOL EditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(2220)) void EditBoxes::PutPasswordEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2221)) EditBoxPtr EditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2222)) long EditBoxes::GetCount ( );
__declspec(implementation_key(2223)) GroupObjectPtr EditBoxes::Group ( );
__declspec(implementation_key(2224)) _variant_t EditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2225)) IUnknownPtr EditBoxes::_NewEnum ( );
__declspec(implementation_key(2226)) _ApplicationPtr ScrollBar::GetApplication ( );
__declspec(implementation_key(2227)) enum XlCreator ScrollBar::GetCreator ( );
__declspec(implementation_key(2228)) IDispatchPtr ScrollBar::GetParent ( );
__declspec(implementation_key(2229)) RangePtr ScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(2230)) _variant_t ScrollBar::BringToFront ( );
__declspec(implementation_key(2231)) _variant_t ScrollBar::Copy ( );
__declspec(implementation_key(2232)) _variant_t ScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2233)) _variant_t ScrollBar::Cut ( );
__declspec(implementation_key(2234)) _variant_t ScrollBar::Delete ( );
__declspec(implementation_key(2235)) IDispatchPtr ScrollBar::Duplicate ( );
__declspec(implementation_key(2236)) VARIANT_BOOL ScrollBar::GetEnabled ( );
__declspec(implementation_key(2237)) void ScrollBar::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2238)) double ScrollBar::GetHeight ( );
__declspec(implementation_key(2239)) void ScrollBar::PutHeight ( double _arg1 );
__declspec(implementation_key(2240)) long ScrollBar::GetIndex ( );
__declspec(implementation_key(2241)) double ScrollBar::GetLeft ( );
__declspec(implementation_key(2242)) void ScrollBar::PutLeft ( double _arg1 );
__declspec(implementation_key(2243)) VARIANT_BOOL ScrollBar::GetLocked ( );
__declspec(implementation_key(2244)) void ScrollBar::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2245)) _bstr_t ScrollBar::GetName ( );
__declspec(implementation_key(2246)) void ScrollBar::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2247)) _bstr_t ScrollBar::GetOnAction ( );
__declspec(implementation_key(2248)) void ScrollBar::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2249)) _variant_t ScrollBar::GetPlacement ( );
__declspec(implementation_key(2250)) void ScrollBar::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2251)) VARIANT_BOOL ScrollBar::GetPrintObject ( );
__declspec(implementation_key(2252)) void ScrollBar::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2253)) _variant_t ScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(2254)) _variant_t ScrollBar::SendToBack ( );
__declspec(implementation_key(2255)) double ScrollBar::GetTop ( );
__declspec(implementation_key(2256)) void ScrollBar::PutTop ( double _arg1 );
__declspec(implementation_key(2257)) RangePtr ScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(2258)) VARIANT_BOOL ScrollBar::GetVisible ( );
__declspec(implementation_key(2259)) void ScrollBar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2260)) double ScrollBar::GetWidth ( );
__declspec(implementation_key(2261)) void ScrollBar::PutWidth ( double _arg1 );
__declspec(implementation_key(2262)) long ScrollBar::GetZOrder ( );
__declspec(implementation_key(2263)) ShapeRangePtr ScrollBar::GetShapeRange ( );
__declspec(implementation_key(2264)) long ScrollBar::Get_Default ( );
__declspec(implementation_key(2265)) void ScrollBar::Put_Default ( long _arg1 );
__declspec(implementation_key(2266)) VARIANT_BOOL ScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(2267)) void ScrollBar::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2268)) _bstr_t ScrollBar::GetLinkedCell ( );
__declspec(implementation_key(2269)) void ScrollBar::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2270)) long ScrollBar::GetMax ( );
__declspec(implementation_key(2271)) void ScrollBar::PutMax ( long _arg1 );
__declspec(implementation_key(2272)) long ScrollBar::GetMin ( );
__declspec(implementation_key(2273)) void ScrollBar::PutMin ( long _arg1 );
__declspec(implementation_key(2274)) long ScrollBar::GetSmallChange ( );
__declspec(implementation_key(2275)) void ScrollBar::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2276)) long ScrollBar::GetValue ( );
__declspec(implementation_key(2277)) void ScrollBar::PutValue ( long _arg1 );
__declspec(implementation_key(2278)) long ScrollBar::GetLargeChange ( );
__declspec(implementation_key(2279)) void ScrollBar::PutLargeChange ( long _arg1 );
__declspec(implementation_key(2280)) _ApplicationPtr ScrollBars::GetApplication ( );
__declspec(implementation_key(2281)) enum XlCreator ScrollBars::GetCreator ( );
__declspec(implementation_key(2282)) IDispatchPtr ScrollBars::GetParent ( );
__declspec(implementation_key(2283)) _variant_t ScrollBars::BringToFront ( );
__declspec(implementation_key(2284)) _variant_t ScrollBars::Copy ( );
__declspec(implementation_key(2285)) _variant_t ScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2286)) _variant_t ScrollBars::Cut ( );
__declspec(implementation_key(2287)) _variant_t ScrollBars::Delete ( );
__declspec(implementation_key(2288)) IDispatchPtr ScrollBars::Duplicate ( );
__declspec(implementation_key(2289)) VARIANT_BOOL ScrollBars::GetEnabled ( );
__declspec(implementation_key(2290)) void ScrollBars::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2291)) double ScrollBars::GetHeight ( );
__declspec(implementation_key(2292)) void ScrollBars::PutHeight ( double _arg1 );
__declspec(implementation_key(2293)) double ScrollBars::GetLeft ( );
__declspec(implementation_key(2294)) void ScrollBars::PutLeft ( double _arg1 );
__declspec(implementation_key(2295)) VARIANT_BOOL ScrollBars::GetLocked ( );
__declspec(implementation_key(2296)) void ScrollBars::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2297)) _bstr_t ScrollBars::GetOnAction ( );
__declspec(implementation_key(2298)) void ScrollBars::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2299)) _variant_t ScrollBars::GetPlacement ( );
__declspec(implementation_key(2300)) void ScrollBars::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2301)) VARIANT_BOOL ScrollBars::GetPrintObject ( );
__declspec(implementation_key(2302)) void ScrollBars::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2303)) _variant_t ScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(2304)) _variant_t ScrollBars::SendToBack ( );
__declspec(implementation_key(2305)) double ScrollBars::GetTop ( );
__declspec(implementation_key(2306)) void ScrollBars::PutTop ( double _arg1 );
__declspec(implementation_key(2307)) VARIANT_BOOL ScrollBars::GetVisible ( );
__declspec(implementation_key(2308)) void ScrollBars::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2309)) double ScrollBars::GetWidth ( );
__declspec(implementation_key(2310)) void ScrollBars::PutWidth ( double _arg1 );
__declspec(implementation_key(2311)) long ScrollBars::GetZOrder ( );
__declspec(implementation_key(2312)) ShapeRangePtr ScrollBars::GetShapeRange ( );
__declspec(implementation_key(2313)) long ScrollBars::Get_Default ( );
__declspec(implementation_key(2314)) void ScrollBars::Put_Default ( long _arg1 );
__declspec(implementation_key(2315)) VARIANT_BOOL ScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(2316)) void ScrollBars::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2317)) _bstr_t ScrollBars::GetLinkedCell ( );
__declspec(implementation_key(2318)) void ScrollBars::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2319)) long ScrollBars::GetMax ( );
__declspec(implementation_key(2320)) void ScrollBars::PutMax ( long _arg1 );
__declspec(implementation_key(2321)) long ScrollBars::GetMin ( );
__declspec(implementation_key(2322)) void ScrollBars::PutMin ( long _arg1 );
__declspec(implementation_key(2323)) long ScrollBars::GetSmallChange ( );
__declspec(implementation_key(2324)) void ScrollBars::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2325)) long ScrollBars::GetValue ( );
__declspec(implementation_key(2326)) void ScrollBars::PutValue ( long _arg1 );
__declspec(implementation_key(2327)) long ScrollBars::GetLargeChange ( );
__declspec(implementation_key(2328)) void ScrollBars::PutLargeChange ( long _arg1 );
__declspec(implementation_key(2329)) ScrollBarPtr ScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2330)) long ScrollBars::GetCount ( );
__declspec(implementation_key(2331)) GroupObjectPtr ScrollBars::Group ( );
__declspec(implementation_key(2332)) IDispatchPtr ScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(2333)) IUnknownPtr ScrollBars::_NewEnum ( );
__declspec(implementation_key(2334)) _ApplicationPtr ListBox::GetApplication ( );
__declspec(implementation_key(2335)) enum XlCreator ListBox::GetCreator ( );
__declspec(implementation_key(2336)) IDispatchPtr ListBox::GetParent ( );
__declspec(implementation_key(2337)) RangePtr ListBox::GetBottomRightCell ( );
__declspec(implementation_key(2338)) _variant_t ListBox::BringToFront ( );
__declspec(implementation_key(2339)) _variant_t ListBox::Copy ( );
__declspec(implementation_key(2340)) _variant_t ListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2341)) _variant_t ListBox::Cut ( );
__declspec(implementation_key(2342)) _variant_t ListBox::Delete ( );
__declspec(implementation_key(2343)) IDispatchPtr ListBox::Duplicate ( );
__declspec(implementation_key(2344)) VARIANT_BOOL ListBox::GetEnabled ( );
__declspec(implementation_key(2345)) void ListBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2346)) double ListBox::GetHeight ( );
__declspec(implementation_key(2347)) void ListBox::PutHeight ( double _arg1 );
__declspec(implementation_key(2348)) long ListBox::GetIndex ( );
__declspec(implementation_key(2349)) double ListBox::GetLeft ( );
__declspec(implementation_key(2350)) void ListBox::PutLeft ( double _arg1 );
__declspec(implementation_key(2351)) VARIANT_BOOL ListBox::GetLocked ( );
__declspec(implementation_key(2352)) void ListBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2353)) _bstr_t ListBox::GetName ( );
__declspec(implementation_key(2354)) void ListBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2355)) _bstr_t ListBox::GetOnAction ( );
__declspec(implementation_key(2356)) void ListBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2357)) _variant_t ListBox::GetPlacement ( );
__declspec(implementation_key(2358)) void ListBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2359)) VARIANT_BOOL ListBox::GetPrintObject ( );
__declspec(implementation_key(2360)) void ListBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2361)) _variant_t ListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2362)) _variant_t ListBox::SendToBack ( );
__declspec(implementation_key(2363)) double ListBox::GetTop ( );
__declspec(implementation_key(2364)) void ListBox::PutTop ( double _arg1 );
__declspec(implementation_key(2365)) RangePtr ListBox::GetTopLeftCell ( );
__declspec(implementation_key(2366)) VARIANT_BOOL ListBox::GetVisible ( );
__declspec(implementation_key(2367)) void ListBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2368)) double ListBox::GetWidth ( );
__declspec(implementation_key(2369)) void ListBox::PutWidth ( double _arg1 );
__declspec(implementation_key(2370)) long ListBox::GetZOrder ( );
__declspec(implementation_key(2371)) ShapeRangePtr ListBox::GetShapeRange ( );
__declspec(implementation_key(2372)) _variant_t ListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2373)) VARIANT_BOOL ListBox::GetDisplay3DShading ( );
__declspec(implementation_key(2374)) void ListBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2375)) long ListBox::Get_Default ( );
__declspec(implementation_key(2376)) void ListBox::Put_Default ( long _arg1 );
__declspec(implementation_key(2377)) _bstr_t ListBox::GetLinkedCell ( );
__declspec(implementation_key(2378)) void ListBox::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2379)) _variant_t ListBox::GetLinkedObject ( );
__declspec(implementation_key(2380)) _variant_t ListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(2381)) void ListBox::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2382)) long ListBox::GetListCount ( );
__declspec(implementation_key(2383)) _bstr_t ListBox::GetListFillRange ( );
__declspec(implementation_key(2384)) void ListBox::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2385)) long ListBox::GetListIndex ( );
__declspec(implementation_key(2386)) void ListBox::PutListIndex ( long _arg1 );
__declspec(implementation_key(2387)) long ListBox::GetMultiSelect ( );
__declspec(implementation_key(2388)) void ListBox::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(2389)) _variant_t ListBox::RemoveAllItems ( );
__declspec(implementation_key(2390)) _variant_t ListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2391)) _variant_t ListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2392)) void ListBox::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2393)) long ListBox::GetValue ( );
__declspec(implementation_key(2394)) void ListBox::PutValue ( long _arg1 );
__declspec(implementation_key(2395)) _ApplicationPtr ListBoxes::GetApplication ( );
__declspec(implementation_key(2396)) enum XlCreator ListBoxes::GetCreator ( );
__declspec(implementation_key(2397)) IDispatchPtr ListBoxes::GetParent ( );
__declspec(implementation_key(2398)) _variant_t ListBoxes::BringToFront ( );
__declspec(implementation_key(2399)) _variant_t ListBoxes::Copy ( );
__declspec(implementation_key(2400)) _variant_t ListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2401)) _variant_t ListBoxes::Cut ( );
__declspec(implementation_key(2402)) _variant_t ListBoxes::Delete ( );
__declspec(implementation_key(2403)) IDispatchPtr ListBoxes::Duplicate ( );
__declspec(implementation_key(2404)) VARIANT_BOOL ListBoxes::GetEnabled ( );
__declspec(implementation_key(2405)) void ListBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2406)) double ListBoxes::GetHeight ( );
__declspec(implementation_key(2407)) void ListBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2408)) double ListBoxes::GetLeft ( );
__declspec(implementation_key(2409)) void ListBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2410)) VARIANT_BOOL ListBoxes::GetLocked ( );
__declspec(implementation_key(2411)) void ListBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2412)) _bstr_t ListBoxes::GetOnAction ( );
__declspec(implementation_key(2413)) void ListBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2414)) _variant_t ListBoxes::GetPlacement ( );
__declspec(implementation_key(2415)) void ListBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2416)) VARIANT_BOOL ListBoxes::GetPrintObject ( );
__declspec(implementation_key(2417)) void ListBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2418)) _variant_t ListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2419)) _variant_t ListBoxes::SendToBack ( );
__declspec(implementation_key(2420)) double ListBoxes::GetTop ( );
__declspec(implementation_key(2421)) void ListBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2422)) VARIANT_BOOL ListBoxes::GetVisible ( );
__declspec(implementation_key(2423)) void ListBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2424)) double ListBoxes::GetWidth ( );
__declspec(implementation_key(2425)) void ListBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2426)) long ListBoxes::GetZOrder ( );
__declspec(implementation_key(2427)) ShapeRangePtr ListBoxes::GetShapeRange ( );
__declspec(implementation_key(2428)) _variant_t ListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2429)) VARIANT_BOOL ListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(2430)) void ListBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2431)) long ListBoxes::Get_Default ( );
__declspec(implementation_key(2432)) void ListBoxes::Put_Default ( long _arg1 );
__declspec(implementation_key(2433)) _bstr_t ListBoxes::GetLinkedCell ( );
__declspec(implementation_key(2434)) void ListBoxes::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2435)) _variant_t ListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(2436)) void ListBoxes::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2437)) _bstr_t ListBoxes::GetListFillRange ( );
__declspec(implementation_key(2438)) void ListBoxes::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2439)) long ListBoxes::GetListIndex ( );
__declspec(implementation_key(2440)) void ListBoxes::PutListIndex ( long _arg1 );
__declspec(implementation_key(2441)) long ListBoxes::GetMultiSelect ( );
__declspec(implementation_key(2442)) void ListBoxes::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(2443)) _variant_t ListBoxes::RemoveAllItems ( );
__declspec(implementation_key(2444)) _variant_t ListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2445)) _variant_t ListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2446)) void ListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2447)) long ListBoxes::GetValue ( );
__declspec(implementation_key(2448)) void ListBoxes::PutValue ( long _arg1 );
__declspec(implementation_key(2449)) ListBoxPtr ListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2450)) long ListBoxes::GetCount ( );
__declspec(implementation_key(2451)) GroupObjectPtr ListBoxes::Group ( );
__declspec(implementation_key(2452)) IDispatchPtr ListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2453)) IUnknownPtr ListBoxes::_NewEnum ( );
__declspec(implementation_key(2454)) _ApplicationPtr GroupBox::GetApplication ( );
__declspec(implementation_key(2455)) enum XlCreator GroupBox::GetCreator ( );
__declspec(implementation_key(2456)) IDispatchPtr GroupBox::GetParent ( );
__declspec(implementation_key(2457)) RangePtr GroupBox::GetBottomRightCell ( );
__declspec(implementation_key(2458)) _variant_t GroupBox::BringToFront ( );
__declspec(implementation_key(2459)) _variant_t GroupBox::Copy ( );
__declspec(implementation_key(2460)) _variant_t GroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2461)) _variant_t GroupBox::Cut ( );
__declspec(implementation_key(2462)) _variant_t GroupBox::Delete ( );
__declspec(implementation_key(2463)) IDispatchPtr GroupBox::Duplicate ( );
__declspec(implementation_key(2464)) VARIANT_BOOL GroupBox::GetEnabled ( );
__declspec(implementation_key(2465)) void GroupBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2466)) double GroupBox::GetHeight ( );
__declspec(implementation_key(2467)) void GroupBox::PutHeight ( double _arg1 );
__declspec(implementation_key(2468)) long GroupBox::GetIndex ( );
__declspec(implementation_key(2469)) double GroupBox::GetLeft ( );
__declspec(implementation_key(2470)) void GroupBox::PutLeft ( double _arg1 );
__declspec(implementation_key(2471)) VARIANT_BOOL GroupBox::GetLocked ( );
__declspec(implementation_key(2472)) void GroupBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2473)) _bstr_t GroupBox::GetName ( );
__declspec(implementation_key(2474)) void GroupBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2475)) _bstr_t GroupBox::GetOnAction ( );
__declspec(implementation_key(2476)) void GroupBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2477)) _variant_t GroupBox::GetPlacement ( );
__declspec(implementation_key(2478)) void GroupBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2479)) VARIANT_BOOL GroupBox::GetPrintObject ( );
__declspec(implementation_key(2480)) void GroupBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2481)) _variant_t GroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(2482)) _variant_t GroupBox::SendToBack ( );
__declspec(implementation_key(2483)) double GroupBox::GetTop ( );
__declspec(implementation_key(2484)) void GroupBox::PutTop ( double _arg1 );
__declspec(implementation_key(2485)) RangePtr GroupBox::GetTopLeftCell ( );
__declspec(implementation_key(2486)) VARIANT_BOOL GroupBox::GetVisible ( );
__declspec(implementation_key(2487)) void GroupBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2488)) double GroupBox::GetWidth ( );
__declspec(implementation_key(2489)) void GroupBox::PutWidth ( double _arg1 );
__declspec(implementation_key(2490)) long GroupBox::GetZOrder ( );
__declspec(implementation_key(2491)) ShapeRangePtr GroupBox::GetShapeRange ( );
__declspec(implementation_key(2492)) _bstr_t GroupBox::GetCaption ( );
__declspec(implementation_key(2493)) void GroupBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2494)) CharactersPtr GroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2495)) _variant_t GroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2496)) VARIANT_BOOL GroupBox::GetLockedText ( );
__declspec(implementation_key(2497)) void GroupBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2498)) _bstr_t GroupBox::GetText ( );
__declspec(implementation_key(2499)) void GroupBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2500)) _variant_t GroupBox::GetAccelerator ( );
__declspec(implementation_key(2501)) void GroupBox::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2502)) VARIANT_BOOL GroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(2503)) void GroupBox::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2504)) _variant_t GroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(2505)) void GroupBox::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2506)) _ApplicationPtr GroupBoxes::GetApplication ( );
__declspec(implementation_key(2507)) enum XlCreator GroupBoxes::GetCreator ( );
__declspec(implementation_key(2508)) IDispatchPtr GroupBoxes::GetParent ( );
__declspec(implementation_key(2509)) _variant_t GroupBoxes::BringToFront ( );
__declspec(implementation_key(2510)) _variant_t GroupBoxes::Copy ( );
__declspec(implementation_key(2511)) _variant_t GroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2512)) _variant_t GroupBoxes::Cut ( );
__declspec(implementation_key(2513)) _variant_t GroupBoxes::Delete ( );
__declspec(implementation_key(2514)) IDispatchPtr GroupBoxes::Duplicate ( );
__declspec(implementation_key(2515)) VARIANT_BOOL GroupBoxes::GetEnabled ( );
__declspec(implementation_key(2516)) void GroupBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2517)) double GroupBoxes::GetHeight ( );
__declspec(implementation_key(2518)) void GroupBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(2519)) double GroupBoxes::GetLeft ( );
__declspec(implementation_key(2520)) void GroupBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(2521)) VARIANT_BOOL GroupBoxes::GetLocked ( );
__declspec(implementation_key(2522)) void GroupBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2523)) _bstr_t GroupBoxes::GetOnAction ( );
__declspec(implementation_key(2524)) void GroupBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2525)) _variant_t GroupBoxes::GetPlacement ( );
__declspec(implementation_key(2526)) void GroupBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2527)) VARIANT_BOOL GroupBoxes::GetPrintObject ( );
__declspec(implementation_key(2528)) void GroupBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2529)) _variant_t GroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(2530)) _variant_t GroupBoxes::SendToBack ( );
__declspec(implementation_key(2531)) double GroupBoxes::GetTop ( );
__declspec(implementation_key(2532)) void GroupBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(2533)) VARIANT_BOOL GroupBoxes::GetVisible ( );
__declspec(implementation_key(2534)) void GroupBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2535)) double GroupBoxes::GetWidth ( );
__declspec(implementation_key(2536)) void GroupBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(2537)) long GroupBoxes::GetZOrder ( );
__declspec(implementation_key(2538)) ShapeRangePtr GroupBoxes::GetShapeRange ( );
__declspec(implementation_key(2539)) _bstr_t GroupBoxes::GetCaption ( );
__declspec(implementation_key(2540)) void GroupBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2541)) CharactersPtr GroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2542)) _variant_t GroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2543)) VARIANT_BOOL GroupBoxes::GetLockedText ( );
__declspec(implementation_key(2544)) void GroupBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2545)) _bstr_t GroupBoxes::GetText ( );
__declspec(implementation_key(2546)) void GroupBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2547)) _variant_t GroupBoxes::GetAccelerator ( );
__declspec(implementation_key(2548)) void GroupBoxes::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2549)) VARIANT_BOOL GroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(2550)) void GroupBoxes::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2551)) _variant_t GroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(2552)) void GroupBoxes::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2553)) GroupBoxPtr GroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2554)) long GroupBoxes::GetCount ( );
__declspec(implementation_key(2555)) GroupObjectPtr GroupBoxes::Group ( );
__declspec(implementation_key(2556)) IDispatchPtr GroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(2557)) IUnknownPtr GroupBoxes::_NewEnum ( );
__declspec(implementation_key(2558)) _ApplicationPtr DropDown::GetApplication ( );
__declspec(implementation_key(2559)) enum XlCreator DropDown::GetCreator ( );
__declspec(implementation_key(2560)) IDispatchPtr DropDown::GetParent ( );
__declspec(implementation_key(2561)) RangePtr DropDown::GetBottomRightCell ( );
__declspec(implementation_key(2562)) _variant_t DropDown::BringToFront ( );
__declspec(implementation_key(2563)) _variant_t DropDown::Copy ( );
__declspec(implementation_key(2564)) _variant_t DropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2565)) _variant_t DropDown::Cut ( );
__declspec(implementation_key(2566)) _variant_t DropDown::Delete ( );
__declspec(implementation_key(2567)) IDispatchPtr DropDown::Duplicate ( );
__declspec(implementation_key(2568)) VARIANT_BOOL DropDown::GetEnabled ( );
__declspec(implementation_key(2569)) void DropDown::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2570)) double DropDown::GetHeight ( );
__declspec(implementation_key(2571)) void DropDown::PutHeight ( double _arg1 );
__declspec(implementation_key(2572)) long DropDown::GetIndex ( );
__declspec(implementation_key(2573)) double DropDown::GetLeft ( );
__declspec(implementation_key(2574)) void DropDown::PutLeft ( double _arg1 );
__declspec(implementation_key(2575)) VARIANT_BOOL DropDown::GetLocked ( );
__declspec(implementation_key(2576)) void DropDown::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2577)) _bstr_t DropDown::GetName ( );
__declspec(implementation_key(2578)) void DropDown::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2579)) _bstr_t DropDown::GetOnAction ( );
__declspec(implementation_key(2580)) void DropDown::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2581)) _variant_t DropDown::GetPlacement ( );
__declspec(implementation_key(2582)) void DropDown::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2583)) VARIANT_BOOL DropDown::GetPrintObject ( );
__declspec(implementation_key(2584)) void DropDown::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2585)) _variant_t DropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(2586)) _variant_t DropDown::SendToBack ( );
__declspec(implementation_key(2587)) double DropDown::GetTop ( );
__declspec(implementation_key(2588)) void DropDown::PutTop ( double _arg1 );
__declspec(implementation_key(2589)) RangePtr DropDown::GetTopLeftCell ( );
__declspec(implementation_key(2590)) VARIANT_BOOL DropDown::GetVisible ( );
__declspec(implementation_key(2591)) void DropDown::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2592)) double DropDown::GetWidth ( );
__declspec(implementation_key(2593)) void DropDown::PutWidth ( double _arg1 );
__declspec(implementation_key(2594)) long DropDown::GetZOrder ( );
__declspec(implementation_key(2595)) ShapeRangePtr DropDown::GetShapeRange ( );
__declspec(implementation_key(2596)) _variant_t DropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2597)) VARIANT_BOOL DropDown::GetDisplay3DShading ( );
__declspec(implementation_key(2598)) void DropDown::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2599)) long DropDown::Get_Default ( );
__declspec(implementation_key(2600)) void DropDown::Put_Default ( long _arg1 );
__declspec(implementation_key(2601)) _bstr_t DropDown::GetLinkedCell ( );
__declspec(implementation_key(2602)) void DropDown::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2603)) _variant_t DropDown::GetLinkedObject ( );
__declspec(implementation_key(2604)) _variant_t DropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(2605)) void DropDown::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2606)) long DropDown::GetListCount ( );
__declspec(implementation_key(2607)) _bstr_t DropDown::GetListFillRange ( );
__declspec(implementation_key(2608)) void DropDown::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2609)) long DropDown::GetListIndex ( );
__declspec(implementation_key(2610)) void DropDown::PutListIndex ( long _arg1 );
__declspec(implementation_key(2611)) _variant_t DropDown::RemoveAllItems ( );
__declspec(implementation_key(2612)) _variant_t DropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2613)) _variant_t DropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2614)) void DropDown::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2615)) long DropDown::GetValue ( );
__declspec(implementation_key(2616)) void DropDown::PutValue ( long _arg1 );
__declspec(implementation_key(2617)) _bstr_t DropDown::GetCaption ( );
__declspec(implementation_key(2618)) void DropDown::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2619)) CharactersPtr DropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2620)) long DropDown::GetDropDownLines ( );
__declspec(implementation_key(2621)) void DropDown::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(2622)) _bstr_t DropDown::GetText ( );
__declspec(implementation_key(2623)) void DropDown::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2624)) _ApplicationPtr DropDowns::GetApplication ( );
__declspec(implementation_key(2625)) enum XlCreator DropDowns::GetCreator ( );
__declspec(implementation_key(2626)) IDispatchPtr DropDowns::GetParent ( );
__declspec(implementation_key(2627)) _variant_t DropDowns::BringToFront ( );
__declspec(implementation_key(2628)) _variant_t DropDowns::Copy ( );
__declspec(implementation_key(2629)) _variant_t DropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2630)) _variant_t DropDowns::Cut ( );
__declspec(implementation_key(2631)) _variant_t DropDowns::Delete ( );
__declspec(implementation_key(2632)) IDispatchPtr DropDowns::Duplicate ( );
__declspec(implementation_key(2633)) VARIANT_BOOL DropDowns::GetEnabled ( );
__declspec(implementation_key(2634)) void DropDowns::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2635)) double DropDowns::GetHeight ( );
__declspec(implementation_key(2636)) void DropDowns::PutHeight ( double _arg1 );
__declspec(implementation_key(2637)) double DropDowns::GetLeft ( );
__declspec(implementation_key(2638)) void DropDowns::PutLeft ( double _arg1 );
__declspec(implementation_key(2639)) VARIANT_BOOL DropDowns::GetLocked ( );
__declspec(implementation_key(2640)) void DropDowns::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2641)) _bstr_t DropDowns::GetOnAction ( );
__declspec(implementation_key(2642)) void DropDowns::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2643)) _variant_t DropDowns::GetPlacement ( );
__declspec(implementation_key(2644)) void DropDowns::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2645)) VARIANT_BOOL DropDowns::GetPrintObject ( );
__declspec(implementation_key(2646)) void DropDowns::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2647)) _variant_t DropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(2648)) _variant_t DropDowns::SendToBack ( );
__declspec(implementation_key(2649)) double DropDowns::GetTop ( );
__declspec(implementation_key(2650)) void DropDowns::PutTop ( double _arg1 );
__declspec(implementation_key(2651)) VARIANT_BOOL DropDowns::GetVisible ( );
__declspec(implementation_key(2652)) void DropDowns::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2653)) double DropDowns::GetWidth ( );
__declspec(implementation_key(2654)) void DropDowns::PutWidth ( double _arg1 );
__declspec(implementation_key(2655)) long DropDowns::GetZOrder ( );
__declspec(implementation_key(2656)) ShapeRangePtr DropDowns::GetShapeRange ( );
__declspec(implementation_key(2657)) _variant_t DropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(2658)) VARIANT_BOOL DropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(2659)) void DropDowns::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2660)) long DropDowns::Get_Default ( );
__declspec(implementation_key(2661)) void DropDowns::Put_Default ( long _arg1 );
__declspec(implementation_key(2662)) _bstr_t DropDowns::GetLinkedCell ( );
__declspec(implementation_key(2663)) void DropDowns::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2664)) _variant_t DropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(2665)) void DropDowns::PutList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2666)) _bstr_t DropDowns::GetListFillRange ( );
__declspec(implementation_key(2667)) void DropDowns::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(2668)) long DropDowns::GetListIndex ( );
__declspec(implementation_key(2669)) void DropDowns::PutListIndex ( long _arg1 );
__declspec(implementation_key(2670)) _variant_t DropDowns::RemoveAllItems ( );
__declspec(implementation_key(2671)) _variant_t DropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(2672)) _variant_t DropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(2673)) void DropDowns::PutSelected ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(2674)) long DropDowns::GetValue ( );
__declspec(implementation_key(2675)) void DropDowns::PutValue ( long _arg1 );
__declspec(implementation_key(2676)) _bstr_t DropDowns::GetCaption ( );
__declspec(implementation_key(2677)) void DropDowns::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2678)) CharactersPtr DropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2679)) long DropDowns::GetDropDownLines ( );
__declspec(implementation_key(2680)) void DropDowns::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(2681)) _bstr_t DropDowns::GetText ( );
__declspec(implementation_key(2682)) void DropDowns::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2683)) DropDownPtr DropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(2684)) long DropDowns::GetCount ( );
__declspec(implementation_key(2685)) GroupObjectPtr DropDowns::Group ( );
__declspec(implementation_key(2686)) IDispatchPtr DropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(2687)) IUnknownPtr DropDowns::_NewEnum ( );
__declspec(implementation_key(2688)) _ApplicationPtr Spinner::GetApplication ( );
__declspec(implementation_key(2689)) enum XlCreator Spinner::GetCreator ( );
__declspec(implementation_key(2690)) IDispatchPtr Spinner::GetParent ( );
__declspec(implementation_key(2691)) RangePtr Spinner::GetBottomRightCell ( );
__declspec(implementation_key(2692)) _variant_t Spinner::BringToFront ( );
__declspec(implementation_key(2693)) _variant_t Spinner::Copy ( );
__declspec(implementation_key(2694)) _variant_t Spinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2695)) _variant_t Spinner::Cut ( );
__declspec(implementation_key(2696)) _variant_t Spinner::Delete ( );
__declspec(implementation_key(2697)) IDispatchPtr Spinner::Duplicate ( );
__declspec(implementation_key(2698)) VARIANT_BOOL Spinner::GetEnabled ( );
__declspec(implementation_key(2699)) void Spinner::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2700)) double Spinner::GetHeight ( );
__declspec(implementation_key(2701)) void Spinner::PutHeight ( double _arg1 );
__declspec(implementation_key(2702)) long Spinner::GetIndex ( );
__declspec(implementation_key(2703)) double Spinner::GetLeft ( );
__declspec(implementation_key(2704)) void Spinner::PutLeft ( double _arg1 );
__declspec(implementation_key(2705)) VARIANT_BOOL Spinner::GetLocked ( );
__declspec(implementation_key(2706)) void Spinner::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2707)) _bstr_t Spinner::GetName ( );
__declspec(implementation_key(2708)) void Spinner::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2709)) _bstr_t Spinner::GetOnAction ( );
__declspec(implementation_key(2710)) void Spinner::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2711)) _variant_t Spinner::GetPlacement ( );
__declspec(implementation_key(2712)) void Spinner::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2713)) VARIANT_BOOL Spinner::GetPrintObject ( );
__declspec(implementation_key(2714)) void Spinner::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2715)) _variant_t Spinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(2716)) _variant_t Spinner::SendToBack ( );
__declspec(implementation_key(2717)) double Spinner::GetTop ( );
__declspec(implementation_key(2718)) void Spinner::PutTop ( double _arg1 );
__declspec(implementation_key(2719)) RangePtr Spinner::GetTopLeftCell ( );
__declspec(implementation_key(2720)) VARIANT_BOOL Spinner::GetVisible ( );
__declspec(implementation_key(2721)) void Spinner::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2722)) double Spinner::GetWidth ( );
__declspec(implementation_key(2723)) void Spinner::PutWidth ( double _arg1 );
__declspec(implementation_key(2724)) long Spinner::GetZOrder ( );
__declspec(implementation_key(2725)) ShapeRangePtr Spinner::GetShapeRange ( );
__declspec(implementation_key(2726)) long Spinner::Get_Default ( );
__declspec(implementation_key(2727)) void Spinner::Put_Default ( long _arg1 );
__declspec(implementation_key(2728)) VARIANT_BOOL Spinner::GetDisplay3DShading ( );
__declspec(implementation_key(2729)) void Spinner::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2730)) _bstr_t Spinner::GetLinkedCell ( );
__declspec(implementation_key(2731)) void Spinner::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2732)) long Spinner::GetMax ( );
__declspec(implementation_key(2733)) void Spinner::PutMax ( long _arg1 );
__declspec(implementation_key(2734)) long Spinner::GetMin ( );
__declspec(implementation_key(2735)) void Spinner::PutMin ( long _arg1 );
__declspec(implementation_key(2736)) long Spinner::GetSmallChange ( );
__declspec(implementation_key(2737)) void Spinner::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2738)) long Spinner::GetValue ( );
__declspec(implementation_key(2739)) void Spinner::PutValue ( long _arg1 );
__declspec(implementation_key(2740)) _ApplicationPtr Spinners::GetApplication ( );
__declspec(implementation_key(2741)) enum XlCreator Spinners::GetCreator ( );
__declspec(implementation_key(2742)) IDispatchPtr Spinners::GetParent ( );
__declspec(implementation_key(2743)) _variant_t Spinners::BringToFront ( );
__declspec(implementation_key(2744)) _variant_t Spinners::Copy ( );
__declspec(implementation_key(2745)) _variant_t Spinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2746)) _variant_t Spinners::Cut ( );
__declspec(implementation_key(2747)) _variant_t Spinners::Delete ( );
__declspec(implementation_key(2748)) IDispatchPtr Spinners::Duplicate ( );
__declspec(implementation_key(2749)) VARIANT_BOOL Spinners::GetEnabled ( );
__declspec(implementation_key(2750)) void Spinners::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2751)) double Spinners::GetHeight ( );
__declspec(implementation_key(2752)) void Spinners::PutHeight ( double _arg1 );
__declspec(implementation_key(2753)) double Spinners::GetLeft ( );
__declspec(implementation_key(2754)) void Spinners::PutLeft ( double _arg1 );
__declspec(implementation_key(2755)) VARIANT_BOOL Spinners::GetLocked ( );
__declspec(implementation_key(2756)) void Spinners::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2757)) _bstr_t Spinners::GetOnAction ( );
__declspec(implementation_key(2758)) void Spinners::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2759)) _variant_t Spinners::GetPlacement ( );
__declspec(implementation_key(2760)) void Spinners::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2761)) VARIANT_BOOL Spinners::GetPrintObject ( );
__declspec(implementation_key(2762)) void Spinners::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2763)) _variant_t Spinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(2764)) _variant_t Spinners::SendToBack ( );
__declspec(implementation_key(2765)) double Spinners::GetTop ( );
__declspec(implementation_key(2766)) void Spinners::PutTop ( double _arg1 );
__declspec(implementation_key(2767)) VARIANT_BOOL Spinners::GetVisible ( );
__declspec(implementation_key(2768)) void Spinners::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2769)) double Spinners::GetWidth ( );
__declspec(implementation_key(2770)) void Spinners::PutWidth ( double _arg1 );
__declspec(implementation_key(2771)) long Spinners::GetZOrder ( );
__declspec(implementation_key(2772)) ShapeRangePtr Spinners::GetShapeRange ( );
__declspec(implementation_key(2773)) long Spinners::Get_Default ( );
__declspec(implementation_key(2774)) void Spinners::Put_Default ( long _arg1 );
__declspec(implementation_key(2775)) VARIANT_BOOL Spinners::GetDisplay3DShading ( );
__declspec(implementation_key(2776)) void Spinners::PutDisplay3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2777)) _bstr_t Spinners::GetLinkedCell ( );
__declspec(implementation_key(2778)) void Spinners::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(2779)) long Spinners::GetMax ( );
__declspec(implementation_key(2780)) void Spinners::PutMax ( long _arg1 );
__declspec(implementation_key(2781)) long Spinners::GetMin ( );
__declspec(implementation_key(2782)) void Spinners::PutMin ( long _arg1 );
__declspec(implementation_key(2783)) long Spinners::GetSmallChange ( );
__declspec(implementation_key(2784)) void Spinners::PutSmallChange ( long _arg1 );
__declspec(implementation_key(2785)) long Spinners::GetValue ( );
__declspec(implementation_key(2786)) void Spinners::PutValue ( long _arg1 );
__declspec(implementation_key(2787)) SpinnerPtr Spinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2788)) long Spinners::GetCount ( );
__declspec(implementation_key(2789)) GroupObjectPtr Spinners::Group ( );
__declspec(implementation_key(2790)) IDispatchPtr Spinners::Item ( const _variant_t & Index );
__declspec(implementation_key(2791)) IUnknownPtr Spinners::_NewEnum ( );
__declspec(implementation_key(2792)) _ApplicationPtr DialogFrame::GetApplication ( );
__declspec(implementation_key(2793)) enum XlCreator DialogFrame::GetCreator ( );
__declspec(implementation_key(2794)) IDispatchPtr DialogFrame::GetParent ( );
__declspec(implementation_key(2795)) _variant_t DialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2796)) double DialogFrame::GetHeight ( );
__declspec(implementation_key(2797)) void DialogFrame::PutHeight ( double _arg1 );
__declspec(implementation_key(2798)) double DialogFrame::GetLeft ( );
__declspec(implementation_key(2799)) void DialogFrame::PutLeft ( double _arg1 );
__declspec(implementation_key(2800)) VARIANT_BOOL DialogFrame::GetLocked ( );
__declspec(implementation_key(2801)) void DialogFrame::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2802)) _bstr_t DialogFrame::GetName ( );
__declspec(implementation_key(2803)) void DialogFrame::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2804)) _bstr_t DialogFrame::GetOnAction ( );
__declspec(implementation_key(2805)) void DialogFrame::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2806)) _variant_t DialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(2807)) double DialogFrame::GetTop ( );
__declspec(implementation_key(2808)) void DialogFrame::PutTop ( double _arg1 );
__declspec(implementation_key(2809)) double DialogFrame::GetWidth ( );
__declspec(implementation_key(2810)) void DialogFrame::PutWidth ( double _arg1 );
__declspec(implementation_key(2811)) ShapeRangePtr DialogFrame::GetShapeRange ( );
__declspec(implementation_key(2812)) _bstr_t DialogFrame::GetCaption ( );
__declspec(implementation_key(2813)) void DialogFrame::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2814)) CharactersPtr DialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2815)) _variant_t DialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2816)) VARIANT_BOOL DialogFrame::GetLockedText ( );
__declspec(implementation_key(2817)) void DialogFrame::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2818)) _bstr_t DialogFrame::GetText ( );
__declspec(implementation_key(2819)) void DialogFrame::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2820)) _ApplicationPtr Label::GetApplication ( );
__declspec(implementation_key(2821)) enum XlCreator Label::GetCreator ( );
__declspec(implementation_key(2822)) IDispatchPtr Label::GetParent ( );
__declspec(implementation_key(2823)) RangePtr Label::GetBottomRightCell ( );
__declspec(implementation_key(2824)) _variant_t Label::BringToFront ( );
__declspec(implementation_key(2825)) _variant_t Label::Copy ( );
__declspec(implementation_key(2826)) _variant_t Label::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2827)) _variant_t Label::Cut ( );
__declspec(implementation_key(2828)) _variant_t Label::Delete ( );
__declspec(implementation_key(2829)) IDispatchPtr Label::Duplicate ( );
__declspec(implementation_key(2830)) VARIANT_BOOL Label::GetEnabled ( );
__declspec(implementation_key(2831)) void Label::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2832)) double Label::GetHeight ( );
__declspec(implementation_key(2833)) void Label::PutHeight ( double _arg1 );
__declspec(implementation_key(2834)) long Label::GetIndex ( );
__declspec(implementation_key(2835)) double Label::GetLeft ( );
__declspec(implementation_key(2836)) void Label::PutLeft ( double _arg1 );
__declspec(implementation_key(2837)) VARIANT_BOOL Label::GetLocked ( );
__declspec(implementation_key(2838)) void Label::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2839)) _bstr_t Label::GetName ( );
__declspec(implementation_key(2840)) void Label::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2841)) _bstr_t Label::GetOnAction ( );
__declspec(implementation_key(2842)) void Label::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2843)) _variant_t Label::GetPlacement ( );
__declspec(implementation_key(2844)) void Label::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2845)) VARIANT_BOOL Label::GetPrintObject ( );
__declspec(implementation_key(2846)) void Label::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2847)) _variant_t Label::Select ( const _variant_t & Replace );
__declspec(implementation_key(2848)) _variant_t Label::SendToBack ( );
__declspec(implementation_key(2849)) double Label::GetTop ( );
__declspec(implementation_key(2850)) void Label::PutTop ( double _arg1 );
__declspec(implementation_key(2851)) RangePtr Label::GetTopLeftCell ( );
__declspec(implementation_key(2852)) VARIANT_BOOL Label::GetVisible ( );
__declspec(implementation_key(2853)) void Label::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2854)) double Label::GetWidth ( );
__declspec(implementation_key(2855)) void Label::PutWidth ( double _arg1 );
__declspec(implementation_key(2856)) long Label::GetZOrder ( );
__declspec(implementation_key(2857)) ShapeRangePtr Label::GetShapeRange ( );
__declspec(implementation_key(2858)) _bstr_t Label::GetCaption ( );
__declspec(implementation_key(2859)) void Label::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2860)) CharactersPtr Label::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2861)) _variant_t Label::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2862)) VARIANT_BOOL Label::GetLockedText ( );
__declspec(implementation_key(2863)) void Label::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2864)) _bstr_t Label::GetText ( );
__declspec(implementation_key(2865)) void Label::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2866)) _variant_t Label::GetAccelerator ( );
__declspec(implementation_key(2867)) void Label::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2868)) _variant_t Label::GetPhoneticAccelerator ( );
__declspec(implementation_key(2869)) void Label::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2870)) _ApplicationPtr Labels::GetApplication ( );
__declspec(implementation_key(2871)) enum XlCreator Labels::GetCreator ( );
__declspec(implementation_key(2872)) IDispatchPtr Labels::GetParent ( );
__declspec(implementation_key(2873)) _variant_t Labels::BringToFront ( );
__declspec(implementation_key(2874)) _variant_t Labels::Copy ( );
__declspec(implementation_key(2875)) _variant_t Labels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2876)) _variant_t Labels::Cut ( );
__declspec(implementation_key(2877)) _variant_t Labels::Delete ( );
__declspec(implementation_key(2878)) IDispatchPtr Labels::Duplicate ( );
__declspec(implementation_key(2879)) VARIANT_BOOL Labels::GetEnabled ( );
__declspec(implementation_key(2880)) void Labels::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2881)) double Labels::GetHeight ( );
__declspec(implementation_key(2882)) void Labels::PutHeight ( double _arg1 );
__declspec(implementation_key(2883)) double Labels::GetLeft ( );
__declspec(implementation_key(2884)) void Labels::PutLeft ( double _arg1 );
__declspec(implementation_key(2885)) VARIANT_BOOL Labels::GetLocked ( );
__declspec(implementation_key(2886)) void Labels::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2887)) _bstr_t Labels::GetOnAction ( );
__declspec(implementation_key(2888)) void Labels::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2889)) _variant_t Labels::GetPlacement ( );
__declspec(implementation_key(2890)) void Labels::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2891)) VARIANT_BOOL Labels::GetPrintObject ( );
__declspec(implementation_key(2892)) void Labels::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2893)) _variant_t Labels::Select ( const _variant_t & Replace );
__declspec(implementation_key(2894)) _variant_t Labels::SendToBack ( );
__declspec(implementation_key(2895)) double Labels::GetTop ( );
__declspec(implementation_key(2896)) void Labels::PutTop ( double _arg1 );
__declspec(implementation_key(2897)) VARIANT_BOOL Labels::GetVisible ( );
__declspec(implementation_key(2898)) void Labels::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2899)) double Labels::GetWidth ( );
__declspec(implementation_key(2900)) void Labels::PutWidth ( double _arg1 );
__declspec(implementation_key(2901)) long Labels::GetZOrder ( );
__declspec(implementation_key(2902)) ShapeRangePtr Labels::GetShapeRange ( );
__declspec(implementation_key(2903)) _bstr_t Labels::GetCaption ( );
__declspec(implementation_key(2904)) void Labels::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2905)) CharactersPtr Labels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(2906)) _variant_t Labels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(2907)) VARIANT_BOOL Labels::GetLockedText ( );
__declspec(implementation_key(2908)) void Labels::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2909)) _bstr_t Labels::GetText ( );
__declspec(implementation_key(2910)) void Labels::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(2911)) _variant_t Labels::GetAccelerator ( );
__declspec(implementation_key(2912)) void Labels::PutAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2913)) _variant_t Labels::GetPhoneticAccelerator ( );
__declspec(implementation_key(2914)) void Labels::PutPhoneticAccelerator ( const _variant_t & _arg1 );
__declspec(implementation_key(2915)) LabelPtr Labels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(2916)) long Labels::GetCount ( );
__declspec(implementation_key(2917)) GroupObjectPtr Labels::Group ( );
__declspec(implementation_key(2918)) IDispatchPtr Labels::Item ( const _variant_t & Index );
__declspec(implementation_key(2919)) IUnknownPtr Labels::_NewEnum ( );
__declspec(implementation_key(2920)) _ApplicationPtr Panes::GetApplication ( );
__declspec(implementation_key(2921)) enum XlCreator Panes::GetCreator ( );
__declspec(implementation_key(2922)) IDispatchPtr Panes::GetParent ( );
__declspec(implementation_key(2923)) long Panes::GetCount ( );
__declspec(implementation_key(2924)) PanePtr Panes::GetItem ( long Index );
__declspec(implementation_key(2925)) PanePtr Panes::Get_Default ( long Index );
__declspec(implementation_key(2926)) _ApplicationPtr Pane::GetApplication ( );
__declspec(implementation_key(2927)) enum XlCreator Pane::GetCreator ( );
__declspec(implementation_key(2928)) IDispatchPtr Pane::GetParent ( );
__declspec(implementation_key(2929)) VARIANT_BOOL Pane::Activate ( );
__declspec(implementation_key(2930)) long Pane::GetIndex ( );
__declspec(implementation_key(2931)) _variant_t Pane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(2932)) long Pane::GetScrollColumn ( );
__declspec(implementation_key(2933)) void Pane::PutScrollColumn ( long _arg1 );
__declspec(implementation_key(2934)) long Pane::GetScrollRow ( );
__declspec(implementation_key(2935)) void Pane::PutScrollRow ( long _arg1 );
__declspec(implementation_key(2936)) _variant_t Pane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(2937)) RangePtr Pane::GetVisibleRange ( );
__declspec(implementation_key(2938)) HRESULT Pane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(2939)) _ApplicationPtr Scenarios::GetApplication ( );
__declspec(implementation_key(2940)) enum XlCreator Scenarios::GetCreator ( );
__declspec(implementation_key(2941)) IDispatchPtr Scenarios::GetParent ( );
__declspec(implementation_key(2942)) ScenarioPtr Scenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(2943)) long Scenarios::GetCount ( );
__declspec(implementation_key(2944)) _variant_t Scenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(2945)) ScenarioPtr Scenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(2946)) _variant_t Scenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(2947)) IUnknownPtr Scenarios::_NewEnum ( );
__declspec(implementation_key(2948)) _ApplicationPtr Scenario::GetApplication ( );
__declspec(implementation_key(2949)) enum XlCreator Scenario::GetCreator ( );
__declspec(implementation_key(2950)) IDispatchPtr Scenario::GetParent ( );
__declspec(implementation_key(2951)) _variant_t Scenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(2952)) RangePtr Scenario::GetChangingCells ( );
__declspec(implementation_key(2953)) _bstr_t Scenario::GetComment ( );
__declspec(implementation_key(2954)) void Scenario::PutComment ( _bstr_t _arg1 );
__declspec(implementation_key(2955)) _variant_t Scenario::Delete ( );
__declspec(implementation_key(2956)) VARIANT_BOOL Scenario::GetHidden ( );
__declspec(implementation_key(2957)) void Scenario::PutHidden ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2958)) long Scenario::GetIndex ( );
__declspec(implementation_key(2959)) VARIANT_BOOL Scenario::GetLocked ( );
__declspec(implementation_key(2960)) void Scenario::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2961)) _bstr_t Scenario::GetName ( );
__declspec(implementation_key(2962)) void Scenario::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2963)) _variant_t Scenario::Show ( );
__declspec(implementation_key(2964)) _variant_t Scenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(2965)) _ApplicationPtr GroupObject::GetApplication ( );
__declspec(implementation_key(2966)) enum XlCreator GroupObject::GetCreator ( );
__declspec(implementation_key(2967)) IDispatchPtr GroupObject::GetParent ( );
__declspec(implementation_key(2968)) RangePtr GroupObject::GetBottomRightCell ( );
__declspec(implementation_key(2969)) _variant_t GroupObject::BringToFront ( );
__declspec(implementation_key(2970)) _variant_t GroupObject::Copy ( );
__declspec(implementation_key(2971)) _variant_t GroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(2972)) _variant_t GroupObject::Cut ( );
__declspec(implementation_key(2973)) _variant_t GroupObject::Delete ( );
__declspec(implementation_key(2974)) IDispatchPtr GroupObject::Duplicate ( );
__declspec(implementation_key(2975)) VARIANT_BOOL GroupObject::GetEnabled ( );
__declspec(implementation_key(2976)) void GroupObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2977)) double GroupObject::GetHeight ( );
__declspec(implementation_key(2978)) void GroupObject::PutHeight ( double _arg1 );
__declspec(implementation_key(2979)) long GroupObject::GetIndex ( );
__declspec(implementation_key(2980)) double GroupObject::GetLeft ( );
__declspec(implementation_key(2981)) void GroupObject::PutLeft ( double _arg1 );
__declspec(implementation_key(2982)) VARIANT_BOOL GroupObject::GetLocked ( );
__declspec(implementation_key(2983)) void GroupObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2984)) _bstr_t GroupObject::GetName ( );
__declspec(implementation_key(2985)) void GroupObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2986)) _bstr_t GroupObject::GetOnAction ( );
__declspec(implementation_key(2987)) void GroupObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2988)) _variant_t GroupObject::GetPlacement ( );
__declspec(implementation_key(2989)) void GroupObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(2990)) VARIANT_BOOL GroupObject::GetPrintObject ( );
__declspec(implementation_key(2991)) void GroupObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2992)) _variant_t GroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(2993)) _variant_t GroupObject::SendToBack ( );
__declspec(implementation_key(2994)) double GroupObject::GetTop ( );
__declspec(implementation_key(2995)) void GroupObject::PutTop ( double _arg1 );
__declspec(implementation_key(2996)) RangePtr GroupObject::GetTopLeftCell ( );
__declspec(implementation_key(2997)) VARIANT_BOOL GroupObject::GetVisible ( );
__declspec(implementation_key(2998)) void GroupObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2999)) double GroupObject::GetWidth ( );
__declspec(implementation_key(3000)) void GroupObject::PutWidth ( double _arg1 );
__declspec(implementation_key(3001)) long GroupObject::GetZOrder ( );
__declspec(implementation_key(3002)) ShapeRangePtr GroupObject::GetShapeRange ( );
__declspec(implementation_key(3003)) VARIANT_BOOL GroupObject::GetAddIndent ( );
__declspec(implementation_key(3004)) void GroupObject::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3005)) _variant_t GroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(3006)) void GroupObject::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(3007)) _variant_t GroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(3008)) void GroupObject::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(3009)) _variant_t GroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(3010)) void GroupObject::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(3011)) VARIANT_BOOL GroupObject::GetAutoSize ( );
__declspec(implementation_key(3012)) void GroupObject::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3013)) BorderPtr GroupObject::GetBorder ( );
__declspec(implementation_key(3014)) _variant_t GroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3015)) long GroupObject::Get_Default ( );
__declspec(implementation_key(3016)) void GroupObject::Put_Default ( long _arg1 );
__declspec(implementation_key(3017)) FontPtr GroupObject::GetFont ( );
__declspec(implementation_key(3018)) _variant_t GroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(3019)) void GroupObject::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3020)) InteriorPtr GroupObject::GetInterior ( );
__declspec(implementation_key(3021)) _variant_t GroupObject::GetOrientation ( );
__declspec(implementation_key(3022)) void GroupObject::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3023)) VARIANT_BOOL GroupObject::GetRoundedCorners ( );
__declspec(implementation_key(3024)) void GroupObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3025)) VARIANT_BOOL GroupObject::GetShadow ( );
__declspec(implementation_key(3026)) void GroupObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3027)) IDispatchPtr GroupObject::Ungroup ( );
__declspec(implementation_key(3028)) _variant_t GroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(3029)) void GroupObject::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3030)) long GroupObject::GetReadingOrder ( );
__declspec(implementation_key(3031)) void GroupObject::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3032)) _ApplicationPtr GroupObjects::GetApplication ( );
__declspec(implementation_key(3033)) enum XlCreator GroupObjects::GetCreator ( );
__declspec(implementation_key(3034)) IDispatchPtr GroupObjects::GetParent ( );
__declspec(implementation_key(3035)) _variant_t GroupObjects::BringToFront ( );
__declspec(implementation_key(3036)) _variant_t GroupObjects::Copy ( );
__declspec(implementation_key(3037)) _variant_t GroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3038)) _variant_t GroupObjects::Cut ( );
__declspec(implementation_key(3039)) _variant_t GroupObjects::Delete ( );
__declspec(implementation_key(3040)) IDispatchPtr GroupObjects::Duplicate ( );
__declspec(implementation_key(3041)) VARIANT_BOOL GroupObjects::GetEnabled ( );
__declspec(implementation_key(3042)) void GroupObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3043)) double GroupObjects::GetHeight ( );
__declspec(implementation_key(3044)) void GroupObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(3045)) double GroupObjects::GetLeft ( );
__declspec(implementation_key(3046)) void GroupObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(3047)) VARIANT_BOOL GroupObjects::GetLocked ( );
__declspec(implementation_key(3048)) void GroupObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3049)) _bstr_t GroupObjects::GetOnAction ( );
__declspec(implementation_key(3050)) void GroupObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3051)) _variant_t GroupObjects::GetPlacement ( );
__declspec(implementation_key(3052)) void GroupObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3053)) VARIANT_BOOL GroupObjects::GetPrintObject ( );
__declspec(implementation_key(3054)) void GroupObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3055)) _variant_t GroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(3056)) _variant_t GroupObjects::SendToBack ( );
__declspec(implementation_key(3057)) double GroupObjects::GetTop ( );
__declspec(implementation_key(3058)) void GroupObjects::PutTop ( double _arg1 );
__declspec(implementation_key(3059)) VARIANT_BOOL GroupObjects::GetVisible ( );
__declspec(implementation_key(3060)) void GroupObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3061)) double GroupObjects::GetWidth ( );
__declspec(implementation_key(3062)) void GroupObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(3063)) long GroupObjects::GetZOrder ( );
__declspec(implementation_key(3064)) ShapeRangePtr GroupObjects::GetShapeRange ( );
__declspec(implementation_key(3065)) VARIANT_BOOL GroupObjects::GetAddIndent ( );
__declspec(implementation_key(3066)) void GroupObjects::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3067)) _variant_t GroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(3068)) void GroupObjects::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(3069)) _variant_t GroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(3070)) void GroupObjects::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(3071)) _variant_t GroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(3072)) void GroupObjects::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(3073)) VARIANT_BOOL GroupObjects::GetAutoSize ( );
__declspec(implementation_key(3074)) void GroupObjects::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3075)) BorderPtr GroupObjects::GetBorder ( );
__declspec(implementation_key(3076)) _variant_t GroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3077)) long GroupObjects::Get_Default ( );
__declspec(implementation_key(3078)) void GroupObjects::Put_Default ( long _arg1 );
__declspec(implementation_key(3079)) FontPtr GroupObjects::GetFont ( );
__declspec(implementation_key(3080)) _variant_t GroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(3081)) void GroupObjects::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3082)) InteriorPtr GroupObjects::GetInterior ( );
__declspec(implementation_key(3083)) _variant_t GroupObjects::GetOrientation ( );
__declspec(implementation_key(3084)) void GroupObjects::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3085)) VARIANT_BOOL GroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(3086)) void GroupObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3087)) VARIANT_BOOL GroupObjects::GetShadow ( );
__declspec(implementation_key(3088)) void GroupObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3089)) IDispatchPtr GroupObjects::Ungroup ( );
__declspec(implementation_key(3090)) _variant_t GroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(3091)) void GroupObjects::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3092)) long GroupObjects::GetReadingOrder ( );
__declspec(implementation_key(3093)) void GroupObjects::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3094)) long GroupObjects::GetCount ( );
__declspec(implementation_key(3095)) GroupObjectPtr GroupObjects::Group ( );
__declspec(implementation_key(3096)) IDispatchPtr GroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(3097)) IUnknownPtr GroupObjects::_NewEnum ( );
__declspec(implementation_key(3098)) _ApplicationPtr Line::GetApplication ( );
__declspec(implementation_key(3099)) enum XlCreator Line::GetCreator ( );
__declspec(implementation_key(3100)) IDispatchPtr Line::GetParent ( );
__declspec(implementation_key(3101)) RangePtr Line::GetBottomRightCell ( );
__declspec(implementation_key(3102)) _variant_t Line::BringToFront ( );
__declspec(implementation_key(3103)) _variant_t Line::Copy ( );
__declspec(implementation_key(3104)) _variant_t Line::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3105)) _variant_t Line::Cut ( );
__declspec(implementation_key(3106)) _variant_t Line::Delete ( );
__declspec(implementation_key(3107)) IDispatchPtr Line::Duplicate ( );
__declspec(implementation_key(3108)) VARIANT_BOOL Line::GetEnabled ( );
__declspec(implementation_key(3109)) void Line::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3110)) double Line::GetHeight ( );
__declspec(implementation_key(3111)) void Line::PutHeight ( double _arg1 );
__declspec(implementation_key(3112)) long Line::GetIndex ( );
__declspec(implementation_key(3113)) double Line::GetLeft ( );
__declspec(implementation_key(3114)) void Line::PutLeft ( double _arg1 );
__declspec(implementation_key(3115)) VARIANT_BOOL Line::GetLocked ( );
__declspec(implementation_key(3116)) void Line::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3117)) _bstr_t Line::GetName ( );
__declspec(implementation_key(3118)) void Line::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3119)) _bstr_t Line::GetOnAction ( );
__declspec(implementation_key(3120)) void Line::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3121)) _variant_t Line::GetPlacement ( );
__declspec(implementation_key(3122)) void Line::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3123)) VARIANT_BOOL Line::GetPrintObject ( );
__declspec(implementation_key(3124)) void Line::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3125)) _variant_t Line::Select ( const _variant_t & Replace );
__declspec(implementation_key(3126)) _variant_t Line::SendToBack ( );
__declspec(implementation_key(3127)) double Line::GetTop ( );
__declspec(implementation_key(3128)) void Line::PutTop ( double _arg1 );
__declspec(implementation_key(3129)) RangePtr Line::GetTopLeftCell ( );
__declspec(implementation_key(3130)) VARIANT_BOOL Line::GetVisible ( );
__declspec(implementation_key(3131)) void Line::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3132)) double Line::GetWidth ( );
__declspec(implementation_key(3133)) void Line::PutWidth ( double _arg1 );
__declspec(implementation_key(3134)) long Line::GetZOrder ( );
__declspec(implementation_key(3135)) ShapeRangePtr Line::GetShapeRange ( );
__declspec(implementation_key(3136)) _variant_t Line::GetArrowHeadLength ( );
__declspec(implementation_key(3137)) void Line::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(3138)) _variant_t Line::GetArrowHeadStyle ( );
__declspec(implementation_key(3139)) void Line::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(3140)) _variant_t Line::GetArrowHeadWidth ( );
__declspec(implementation_key(3141)) void Line::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(3142)) BorderPtr Line::GetBorder ( );
__declspec(implementation_key(3143)) _ApplicationPtr Lines::GetApplication ( );
__declspec(implementation_key(3144)) enum XlCreator Lines::GetCreator ( );
__declspec(implementation_key(3145)) IDispatchPtr Lines::GetParent ( );
__declspec(implementation_key(3146)) _variant_t Lines::BringToFront ( );
__declspec(implementation_key(3147)) _variant_t Lines::Copy ( );
__declspec(implementation_key(3148)) _variant_t Lines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3149)) _variant_t Lines::Cut ( );
__declspec(implementation_key(3150)) _variant_t Lines::Delete ( );
__declspec(implementation_key(3151)) IDispatchPtr Lines::Duplicate ( );
__declspec(implementation_key(3152)) VARIANT_BOOL Lines::GetEnabled ( );
__declspec(implementation_key(3153)) void Lines::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3154)) double Lines::GetHeight ( );
__declspec(implementation_key(3155)) void Lines::PutHeight ( double _arg1 );
__declspec(implementation_key(3156)) double Lines::GetLeft ( );
__declspec(implementation_key(3157)) void Lines::PutLeft ( double _arg1 );
__declspec(implementation_key(3158)) VARIANT_BOOL Lines::GetLocked ( );
__declspec(implementation_key(3159)) void Lines::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3160)) _bstr_t Lines::GetOnAction ( );
__declspec(implementation_key(3161)) void Lines::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3162)) _variant_t Lines::GetPlacement ( );
__declspec(implementation_key(3163)) void Lines::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3164)) VARIANT_BOOL Lines::GetPrintObject ( );
__declspec(implementation_key(3165)) void Lines::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3166)) _variant_t Lines::Select ( const _variant_t & Replace );
__declspec(implementation_key(3167)) _variant_t Lines::SendToBack ( );
__declspec(implementation_key(3168)) double Lines::GetTop ( );
__declspec(implementation_key(3169)) void Lines::PutTop ( double _arg1 );
__declspec(implementation_key(3170)) VARIANT_BOOL Lines::GetVisible ( );
__declspec(implementation_key(3171)) void Lines::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3172)) double Lines::GetWidth ( );
__declspec(implementation_key(3173)) void Lines::PutWidth ( double _arg1 );
__declspec(implementation_key(3174)) long Lines::GetZOrder ( );
__declspec(implementation_key(3175)) ShapeRangePtr Lines::GetShapeRange ( );
__declspec(implementation_key(3176)) _variant_t Lines::GetArrowHeadLength ( );
__declspec(implementation_key(3177)) void Lines::PutArrowHeadLength ( const _variant_t & _arg1 );
__declspec(implementation_key(3178)) _variant_t Lines::GetArrowHeadStyle ( );
__declspec(implementation_key(3179)) void Lines::PutArrowHeadStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(3180)) _variant_t Lines::GetArrowHeadWidth ( );
__declspec(implementation_key(3181)) void Lines::PutArrowHeadWidth ( const _variant_t & _arg1 );
__declspec(implementation_key(3182)) BorderPtr Lines::GetBorder ( );
__declspec(implementation_key(3183)) LinePtr Lines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(3184)) long Lines::GetCount ( );
__declspec(implementation_key(3185)) GroupObjectPtr Lines::Group ( );
__declspec(implementation_key(3186)) IDispatchPtr Lines::Item ( const _variant_t & Index );
__declspec(implementation_key(3187)) IUnknownPtr Lines::_NewEnum ( );
__declspec(implementation_key(3188)) _ApplicationPtr Rectangle::GetApplication ( );
__declspec(implementation_key(3189)) enum XlCreator Rectangle::GetCreator ( );
__declspec(implementation_key(3190)) IDispatchPtr Rectangle::GetParent ( );
__declspec(implementation_key(3191)) RangePtr Rectangle::GetBottomRightCell ( );
__declspec(implementation_key(3192)) _variant_t Rectangle::BringToFront ( );
__declspec(implementation_key(3193)) _variant_t Rectangle::Copy ( );
__declspec(implementation_key(3194)) _variant_t Rectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3195)) _variant_t Rectangle::Cut ( );
__declspec(implementation_key(3196)) _variant_t Rectangle::Delete ( );
__declspec(implementation_key(3197)) IDispatchPtr Rectangle::Duplicate ( );
__declspec(implementation_key(3198)) VARIANT_BOOL Rectangle::GetEnabled ( );
__declspec(implementation_key(3199)) void Rectangle::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3200)) double Rectangle::GetHeight ( );
__declspec(implementation_key(3201)) void Rectangle::PutHeight ( double _arg1 );
__declspec(implementation_key(3202)) long Rectangle::GetIndex ( );
__declspec(implementation_key(3203)) double Rectangle::GetLeft ( );
__declspec(implementation_key(3204)) void Rectangle::PutLeft ( double _arg1 );
__declspec(implementation_key(3205)) VARIANT_BOOL Rectangle::GetLocked ( );
__declspec(implementation_key(3206)) void Rectangle::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3207)) _bstr_t Rectangle::GetName ( );
__declspec(implementation_key(3208)) void Rectangle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3209)) _bstr_t Rectangle::GetOnAction ( );
__declspec(implementation_key(3210)) void Rectangle::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3211)) _variant_t Rectangle::GetPlacement ( );
__declspec(implementation_key(3212)) void Rectangle::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3213)) VARIANT_BOOL Rectangle::GetPrintObject ( );
__declspec(implementation_key(3214)) void Rectangle::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3215)) _variant_t Rectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(3216)) _variant_t Rectangle::SendToBack ( );
__declspec(implementation_key(3217)) double Rectangle::GetTop ( );
__declspec(implementation_key(3218)) void Rectangle::PutTop ( double _arg1 );
__declspec(implementation_key(3219)) RangePtr Rectangle::GetTopLeftCell ( );
__declspec(implementation_key(3220)) VARIANT_BOOL Rectangle::GetVisible ( );
__declspec(implementation_key(3221)) void Rectangle::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3222)) double Rectangle::GetWidth ( );
__declspec(implementation_key(3223)) void Rectangle::PutWidth ( double _arg1 );
__declspec(implementation_key(3224)) long Rectangle::GetZOrder ( );
__declspec(implementation_key(3225)) ShapeRangePtr Rectangle::GetShapeRange ( );
__declspec(implementation_key(3226)) VARIANT_BOOL Rectangle::GetAddIndent ( );
__declspec(implementation_key(3227)) void Rectangle::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3228)) _variant_t Rectangle::GetAutoScaleFont ( );
__declspec(implementation_key(3229)) void Rectangle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3230)) VARIANT_BOOL Rectangle::GetAutoSize ( );
__declspec(implementation_key(3231)) void Rectangle::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3232)) _bstr_t Rectangle::GetCaption ( );
__declspec(implementation_key(3233)) void Rectangle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3234)) CharactersPtr Rectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3235)) _variant_t Rectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3236)) FontPtr Rectangle::GetFont ( );
__declspec(implementation_key(3237)) _bstr_t Rectangle::GetFormula ( );
__declspec(implementation_key(3238)) void Rectangle::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3239)) _variant_t Rectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(3240)) void Rectangle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3241)) VARIANT_BOOL Rectangle::GetLockedText ( );
__declspec(implementation_key(3242)) void Rectangle::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3243)) _variant_t Rectangle::GetOrientation ( );
__declspec(implementation_key(3244)) void Rectangle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3245)) _bstr_t Rectangle::GetText ( );
__declspec(implementation_key(3246)) void Rectangle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3247)) _variant_t Rectangle::GetVerticalAlignment ( );
__declspec(implementation_key(3248)) void Rectangle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3249)) long Rectangle::GetReadingOrder ( );
__declspec(implementation_key(3250)) void Rectangle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3251)) BorderPtr Rectangle::GetBorder ( );
__declspec(implementation_key(3252)) InteriorPtr Rectangle::GetInterior ( );
__declspec(implementation_key(3253)) VARIANT_BOOL Rectangle::GetShadow ( );
__declspec(implementation_key(3254)) void Rectangle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3255)) VARIANT_BOOL Rectangle::GetRoundedCorners ( );
__declspec(implementation_key(3256)) void Rectangle::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3257)) _ApplicationPtr Rectangles::GetApplication ( );
__declspec(implementation_key(3258)) enum XlCreator Rectangles::GetCreator ( );
__declspec(implementation_key(3259)) IDispatchPtr Rectangles::GetParent ( );
__declspec(implementation_key(3260)) _variant_t Rectangles::BringToFront ( );
__declspec(implementation_key(3261)) _variant_t Rectangles::Copy ( );
__declspec(implementation_key(3262)) _variant_t Rectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3263)) _variant_t Rectangles::Cut ( );
__declspec(implementation_key(3264)) _variant_t Rectangles::Delete ( );
__declspec(implementation_key(3265)) IDispatchPtr Rectangles::Duplicate ( );
__declspec(implementation_key(3266)) VARIANT_BOOL Rectangles::GetEnabled ( );
__declspec(implementation_key(3267)) void Rectangles::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3268)) double Rectangles::GetHeight ( );
__declspec(implementation_key(3269)) void Rectangles::PutHeight ( double _arg1 );
__declspec(implementation_key(3270)) double Rectangles::GetLeft ( );
__declspec(implementation_key(3271)) void Rectangles::PutLeft ( double _arg1 );
__declspec(implementation_key(3272)) VARIANT_BOOL Rectangles::GetLocked ( );
__declspec(implementation_key(3273)) void Rectangles::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3274)) _bstr_t Rectangles::GetOnAction ( );
__declspec(implementation_key(3275)) void Rectangles::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3276)) _variant_t Rectangles::GetPlacement ( );
__declspec(implementation_key(3277)) void Rectangles::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3278)) VARIANT_BOOL Rectangles::GetPrintObject ( );
__declspec(implementation_key(3279)) void Rectangles::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3280)) _variant_t Rectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(3281)) _variant_t Rectangles::SendToBack ( );
__declspec(implementation_key(3282)) double Rectangles::GetTop ( );
__declspec(implementation_key(3283)) void Rectangles::PutTop ( double _arg1 );
__declspec(implementation_key(3284)) VARIANT_BOOL Rectangles::GetVisible ( );
__declspec(implementation_key(3285)) void Rectangles::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3286)) double Rectangles::GetWidth ( );
__declspec(implementation_key(3287)) void Rectangles::PutWidth ( double _arg1 );
__declspec(implementation_key(3288)) long Rectangles::GetZOrder ( );
__declspec(implementation_key(3289)) ShapeRangePtr Rectangles::GetShapeRange ( );
__declspec(implementation_key(3290)) VARIANT_BOOL Rectangles::GetAddIndent ( );
__declspec(implementation_key(3291)) void Rectangles::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3292)) _variant_t Rectangles::GetAutoScaleFont ( );
__declspec(implementation_key(3293)) void Rectangles::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3294)) VARIANT_BOOL Rectangles::GetAutoSize ( );
__declspec(implementation_key(3295)) void Rectangles::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3296)) _bstr_t Rectangles::GetCaption ( );
__declspec(implementation_key(3297)) void Rectangles::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3298)) CharactersPtr Rectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3299)) _variant_t Rectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3300)) FontPtr Rectangles::GetFont ( );
__declspec(implementation_key(3301)) _bstr_t Rectangles::GetFormula ( );
__declspec(implementation_key(3302)) void Rectangles::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3303)) _variant_t Rectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(3304)) void Rectangles::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3305)) VARIANT_BOOL Rectangles::GetLockedText ( );
__declspec(implementation_key(3306)) void Rectangles::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3307)) _variant_t Rectangles::GetOrientation ( );
__declspec(implementation_key(3308)) void Rectangles::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3309)) _bstr_t Rectangles::GetText ( );
__declspec(implementation_key(3310)) void Rectangles::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3311)) _variant_t Rectangles::GetVerticalAlignment ( );
__declspec(implementation_key(3312)) void Rectangles::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3313)) long Rectangles::GetReadingOrder ( );
__declspec(implementation_key(3314)) void Rectangles::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3315)) BorderPtr Rectangles::GetBorder ( );
__declspec(implementation_key(3316)) InteriorPtr Rectangles::GetInterior ( );
__declspec(implementation_key(3317)) VARIANT_BOOL Rectangles::GetShadow ( );
__declspec(implementation_key(3318)) void Rectangles::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3319)) VARIANT_BOOL Rectangles::GetRoundedCorners ( );
__declspec(implementation_key(3320)) void Rectangles::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3321)) RectanglePtr Rectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3322)) long Rectangles::GetCount ( );
__declspec(implementation_key(3323)) GroupObjectPtr Rectangles::Group ( );
__declspec(implementation_key(3324)) IDispatchPtr Rectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(3325)) IUnknownPtr Rectangles::_NewEnum ( );
__declspec(implementation_key(3326)) _ApplicationPtr Oval::GetApplication ( );
__declspec(implementation_key(3327)) enum XlCreator Oval::GetCreator ( );
__declspec(implementation_key(3328)) IDispatchPtr Oval::GetParent ( );
__declspec(implementation_key(3329)) RangePtr Oval::GetBottomRightCell ( );
__declspec(implementation_key(3330)) _variant_t Oval::BringToFront ( );
__declspec(implementation_key(3331)) _variant_t Oval::Copy ( );
__declspec(implementation_key(3332)) _variant_t Oval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3333)) _variant_t Oval::Cut ( );
__declspec(implementation_key(3334)) _variant_t Oval::Delete ( );
__declspec(implementation_key(3335)) IDispatchPtr Oval::Duplicate ( );
__declspec(implementation_key(3336)) VARIANT_BOOL Oval::GetEnabled ( );
__declspec(implementation_key(3337)) void Oval::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3338)) double Oval::GetHeight ( );
__declspec(implementation_key(3339)) void Oval::PutHeight ( double _arg1 );
__declspec(implementation_key(3340)) long Oval::GetIndex ( );
__declspec(implementation_key(3341)) double Oval::GetLeft ( );
__declspec(implementation_key(3342)) void Oval::PutLeft ( double _arg1 );
__declspec(implementation_key(3343)) VARIANT_BOOL Oval::GetLocked ( );
__declspec(implementation_key(3344)) void Oval::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3345)) _bstr_t Oval::GetName ( );
__declspec(implementation_key(3346)) void Oval::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3347)) _bstr_t Oval::GetOnAction ( );
__declspec(implementation_key(3348)) void Oval::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3349)) _variant_t Oval::GetPlacement ( );
__declspec(implementation_key(3350)) void Oval::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3351)) VARIANT_BOOL Oval::GetPrintObject ( );
__declspec(implementation_key(3352)) void Oval::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3353)) _variant_t Oval::Select ( const _variant_t & Replace );
__declspec(implementation_key(3354)) _variant_t Oval::SendToBack ( );
__declspec(implementation_key(3355)) double Oval::GetTop ( );
__declspec(implementation_key(3356)) void Oval::PutTop ( double _arg1 );
__declspec(implementation_key(3357)) RangePtr Oval::GetTopLeftCell ( );
__declspec(implementation_key(3358)) VARIANT_BOOL Oval::GetVisible ( );
__declspec(implementation_key(3359)) void Oval::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3360)) double Oval::GetWidth ( );
__declspec(implementation_key(3361)) void Oval::PutWidth ( double _arg1 );
__declspec(implementation_key(3362)) long Oval::GetZOrder ( );
__declspec(implementation_key(3363)) ShapeRangePtr Oval::GetShapeRange ( );
__declspec(implementation_key(3364)) VARIANT_BOOL Oval::GetAddIndent ( );
__declspec(implementation_key(3365)) void Oval::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3366)) _variant_t Oval::GetAutoScaleFont ( );
__declspec(implementation_key(3367)) void Oval::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3368)) VARIANT_BOOL Oval::GetAutoSize ( );
__declspec(implementation_key(3369)) void Oval::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3370)) _bstr_t Oval::GetCaption ( );
__declspec(implementation_key(3371)) void Oval::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3372)) CharactersPtr Oval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3373)) _variant_t Oval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3374)) FontPtr Oval::GetFont ( );
__declspec(implementation_key(3375)) _bstr_t Oval::GetFormula ( );
__declspec(implementation_key(3376)) void Oval::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3377)) _variant_t Oval::GetHorizontalAlignment ( );
__declspec(implementation_key(3378)) void Oval::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3379)) VARIANT_BOOL Oval::GetLockedText ( );
__declspec(implementation_key(3380)) void Oval::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3381)) _variant_t Oval::GetOrientation ( );
__declspec(implementation_key(3382)) void Oval::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3383)) _bstr_t Oval::GetText ( );
__declspec(implementation_key(3384)) void Oval::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3385)) _variant_t Oval::GetVerticalAlignment ( );
__declspec(implementation_key(3386)) void Oval::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3387)) long Oval::GetReadingOrder ( );
__declspec(implementation_key(3388)) void Oval::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3389)) BorderPtr Oval::GetBorder ( );
__declspec(implementation_key(3390)) InteriorPtr Oval::GetInterior ( );
__declspec(implementation_key(3391)) VARIANT_BOOL Oval::GetShadow ( );
__declspec(implementation_key(3392)) void Oval::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3393)) _ApplicationPtr Ovals::GetApplication ( );
__declspec(implementation_key(3394)) enum XlCreator Ovals::GetCreator ( );
__declspec(implementation_key(3395)) IDispatchPtr Ovals::GetParent ( );
__declspec(implementation_key(3396)) _variant_t Ovals::BringToFront ( );
__declspec(implementation_key(3397)) _variant_t Ovals::Copy ( );
__declspec(implementation_key(3398)) _variant_t Ovals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3399)) _variant_t Ovals::Cut ( );
__declspec(implementation_key(3400)) _variant_t Ovals::Delete ( );
__declspec(implementation_key(3401)) IDispatchPtr Ovals::Duplicate ( );
__declspec(implementation_key(3402)) VARIANT_BOOL Ovals::GetEnabled ( );
__declspec(implementation_key(3403)) void Ovals::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3404)) double Ovals::GetHeight ( );
__declspec(implementation_key(3405)) void Ovals::PutHeight ( double _arg1 );
__declspec(implementation_key(3406)) double Ovals::GetLeft ( );
__declspec(implementation_key(3407)) void Ovals::PutLeft ( double _arg1 );
__declspec(implementation_key(3408)) VARIANT_BOOL Ovals::GetLocked ( );
__declspec(implementation_key(3409)) void Ovals::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3410)) _bstr_t Ovals::GetOnAction ( );
__declspec(implementation_key(3411)) void Ovals::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3412)) _variant_t Ovals::GetPlacement ( );
__declspec(implementation_key(3413)) void Ovals::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3414)) VARIANT_BOOL Ovals::GetPrintObject ( );
__declspec(implementation_key(3415)) void Ovals::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3416)) _variant_t Ovals::Select ( const _variant_t & Replace );
__declspec(implementation_key(3417)) _variant_t Ovals::SendToBack ( );
__declspec(implementation_key(3418)) double Ovals::GetTop ( );
__declspec(implementation_key(3419)) void Ovals::PutTop ( double _arg1 );
__declspec(implementation_key(3420)) VARIANT_BOOL Ovals::GetVisible ( );
__declspec(implementation_key(3421)) void Ovals::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3422)) double Ovals::GetWidth ( );
__declspec(implementation_key(3423)) void Ovals::PutWidth ( double _arg1 );
__declspec(implementation_key(3424)) long Ovals::GetZOrder ( );
__declspec(implementation_key(3425)) ShapeRangePtr Ovals::GetShapeRange ( );
__declspec(implementation_key(3426)) VARIANT_BOOL Ovals::GetAddIndent ( );
__declspec(implementation_key(3427)) void Ovals::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3428)) _variant_t Ovals::GetAutoScaleFont ( );
__declspec(implementation_key(3429)) void Ovals::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3430)) VARIANT_BOOL Ovals::GetAutoSize ( );
__declspec(implementation_key(3431)) void Ovals::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3432)) _bstr_t Ovals::GetCaption ( );
__declspec(implementation_key(3433)) void Ovals::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3434)) CharactersPtr Ovals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3435)) _variant_t Ovals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3436)) FontPtr Ovals::GetFont ( );
__declspec(implementation_key(3437)) _bstr_t Ovals::GetFormula ( );
__declspec(implementation_key(3438)) void Ovals::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3439)) _variant_t Ovals::GetHorizontalAlignment ( );
__declspec(implementation_key(3440)) void Ovals::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3441)) VARIANT_BOOL Ovals::GetLockedText ( );
__declspec(implementation_key(3442)) void Ovals::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3443)) _variant_t Ovals::GetOrientation ( );
__declspec(implementation_key(3444)) void Ovals::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3445)) _bstr_t Ovals::GetText ( );
__declspec(implementation_key(3446)) void Ovals::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3447)) _variant_t Ovals::GetVerticalAlignment ( );
__declspec(implementation_key(3448)) void Ovals::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3449)) long Ovals::GetReadingOrder ( );
__declspec(implementation_key(3450)) void Ovals::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3451)) BorderPtr Ovals::GetBorder ( );
__declspec(implementation_key(3452)) InteriorPtr Ovals::GetInterior ( );
__declspec(implementation_key(3453)) VARIANT_BOOL Ovals::GetShadow ( );
__declspec(implementation_key(3454)) void Ovals::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3455)) OvalPtr Ovals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3456)) long Ovals::GetCount ( );
__declspec(implementation_key(3457)) GroupObjectPtr Ovals::Group ( );
__declspec(implementation_key(3458)) IDispatchPtr Ovals::Item ( const _variant_t & Index );
__declspec(implementation_key(3459)) IUnknownPtr Ovals::_NewEnum ( );
__declspec(implementation_key(3460)) _ApplicationPtr Arc::GetApplication ( );
__declspec(implementation_key(3461)) enum XlCreator Arc::GetCreator ( );
__declspec(implementation_key(3462)) IDispatchPtr Arc::GetParent ( );
__declspec(implementation_key(3463)) RangePtr Arc::GetBottomRightCell ( );
__declspec(implementation_key(3464)) _variant_t Arc::BringToFront ( );
__declspec(implementation_key(3465)) _variant_t Arc::Copy ( );
__declspec(implementation_key(3466)) _variant_t Arc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3467)) _variant_t Arc::Cut ( );
__declspec(implementation_key(3468)) _variant_t Arc::Delete ( );
__declspec(implementation_key(3469)) IDispatchPtr Arc::Duplicate ( );
__declspec(implementation_key(3470)) VARIANT_BOOL Arc::GetEnabled ( );
__declspec(implementation_key(3471)) void Arc::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3472)) double Arc::GetHeight ( );
__declspec(implementation_key(3473)) void Arc::PutHeight ( double _arg1 );
__declspec(implementation_key(3474)) long Arc::GetIndex ( );
__declspec(implementation_key(3475)) double Arc::GetLeft ( );
__declspec(implementation_key(3476)) void Arc::PutLeft ( double _arg1 );
__declspec(implementation_key(3477)) VARIANT_BOOL Arc::GetLocked ( );
__declspec(implementation_key(3478)) void Arc::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3479)) _bstr_t Arc::GetName ( );
__declspec(implementation_key(3480)) void Arc::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3481)) _bstr_t Arc::GetOnAction ( );
__declspec(implementation_key(3482)) void Arc::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3483)) _variant_t Arc::GetPlacement ( );
__declspec(implementation_key(3484)) void Arc::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3485)) VARIANT_BOOL Arc::GetPrintObject ( );
__declspec(implementation_key(3486)) void Arc::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3487)) _variant_t Arc::Select ( const _variant_t & Replace );
__declspec(implementation_key(3488)) _variant_t Arc::SendToBack ( );
__declspec(implementation_key(3489)) double Arc::GetTop ( );
__declspec(implementation_key(3490)) void Arc::PutTop ( double _arg1 );
__declspec(implementation_key(3491)) RangePtr Arc::GetTopLeftCell ( );
__declspec(implementation_key(3492)) VARIANT_BOOL Arc::GetVisible ( );
__declspec(implementation_key(3493)) void Arc::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3494)) double Arc::GetWidth ( );
__declspec(implementation_key(3495)) void Arc::PutWidth ( double _arg1 );
__declspec(implementation_key(3496)) long Arc::GetZOrder ( );
__declspec(implementation_key(3497)) ShapeRangePtr Arc::GetShapeRange ( );
__declspec(implementation_key(3498)) VARIANT_BOOL Arc::GetAddIndent ( );
__declspec(implementation_key(3499)) void Arc::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3500)) _variant_t Arc::GetAutoScaleFont ( );
__declspec(implementation_key(3501)) void Arc::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3502)) VARIANT_BOOL Arc::GetAutoSize ( );
__declspec(implementation_key(3503)) void Arc::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3504)) _bstr_t Arc::GetCaption ( );
__declspec(implementation_key(3505)) void Arc::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3506)) CharactersPtr Arc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3507)) _variant_t Arc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3508)) FontPtr Arc::GetFont ( );
__declspec(implementation_key(3509)) _bstr_t Arc::GetFormula ( );
__declspec(implementation_key(3510)) void Arc::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3511)) _variant_t Arc::GetHorizontalAlignment ( );
__declspec(implementation_key(3512)) void Arc::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3513)) VARIANT_BOOL Arc::GetLockedText ( );
__declspec(implementation_key(3514)) void Arc::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3515)) _variant_t Arc::GetOrientation ( );
__declspec(implementation_key(3516)) void Arc::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3517)) _bstr_t Arc::GetText ( );
__declspec(implementation_key(3518)) void Arc::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3519)) _variant_t Arc::GetVerticalAlignment ( );
__declspec(implementation_key(3520)) void Arc::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3521)) long Arc::GetReadingOrder ( );
__declspec(implementation_key(3522)) void Arc::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3523)) BorderPtr Arc::GetBorder ( );
__declspec(implementation_key(3524)) InteriorPtr Arc::GetInterior ( );
__declspec(implementation_key(3525)) _ApplicationPtr Arcs::GetApplication ( );
__declspec(implementation_key(3526)) enum XlCreator Arcs::GetCreator ( );
__declspec(implementation_key(3527)) IDispatchPtr Arcs::GetParent ( );
__declspec(implementation_key(3528)) _variant_t Arcs::BringToFront ( );
__declspec(implementation_key(3529)) _variant_t Arcs::Copy ( );
__declspec(implementation_key(3530)) _variant_t Arcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3531)) _variant_t Arcs::Cut ( );
__declspec(implementation_key(3532)) _variant_t Arcs::Delete ( );
__declspec(implementation_key(3533)) IDispatchPtr Arcs::Duplicate ( );
__declspec(implementation_key(3534)) VARIANT_BOOL Arcs::GetEnabled ( );
__declspec(implementation_key(3535)) void Arcs::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3536)) double Arcs::GetHeight ( );
__declspec(implementation_key(3537)) void Arcs::PutHeight ( double _arg1 );
__declspec(implementation_key(3538)) double Arcs::GetLeft ( );
__declspec(implementation_key(3539)) void Arcs::PutLeft ( double _arg1 );
__declspec(implementation_key(3540)) VARIANT_BOOL Arcs::GetLocked ( );
__declspec(implementation_key(3541)) void Arcs::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3542)) _bstr_t Arcs::GetOnAction ( );
__declspec(implementation_key(3543)) void Arcs::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3544)) _variant_t Arcs::GetPlacement ( );
__declspec(implementation_key(3545)) void Arcs::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3546)) VARIANT_BOOL Arcs::GetPrintObject ( );
__declspec(implementation_key(3547)) void Arcs::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3548)) _variant_t Arcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(3549)) _variant_t Arcs::SendToBack ( );
__declspec(implementation_key(3550)) double Arcs::GetTop ( );
__declspec(implementation_key(3551)) void Arcs::PutTop ( double _arg1 );
__declspec(implementation_key(3552)) VARIANT_BOOL Arcs::GetVisible ( );
__declspec(implementation_key(3553)) void Arcs::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3554)) double Arcs::GetWidth ( );
__declspec(implementation_key(3555)) void Arcs::PutWidth ( double _arg1 );
__declspec(implementation_key(3556)) long Arcs::GetZOrder ( );
__declspec(implementation_key(3557)) ShapeRangePtr Arcs::GetShapeRange ( );
__declspec(implementation_key(3558)) VARIANT_BOOL Arcs::GetAddIndent ( );
__declspec(implementation_key(3559)) void Arcs::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3560)) _variant_t Arcs::GetAutoScaleFont ( );
__declspec(implementation_key(3561)) void Arcs::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3562)) VARIANT_BOOL Arcs::GetAutoSize ( );
__declspec(implementation_key(3563)) void Arcs::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3564)) _bstr_t Arcs::GetCaption ( );
__declspec(implementation_key(3565)) void Arcs::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3566)) CharactersPtr Arcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3567)) _variant_t Arcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3568)) FontPtr Arcs::GetFont ( );
__declspec(implementation_key(3569)) _bstr_t Arcs::GetFormula ( );
__declspec(implementation_key(3570)) void Arcs::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3571)) _variant_t Arcs::GetHorizontalAlignment ( );
__declspec(implementation_key(3572)) void Arcs::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3573)) VARIANT_BOOL Arcs::GetLockedText ( );
__declspec(implementation_key(3574)) void Arcs::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3575)) _variant_t Arcs::GetOrientation ( );
__declspec(implementation_key(3576)) void Arcs::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3577)) _bstr_t Arcs::GetText ( );
__declspec(implementation_key(3578)) void Arcs::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3579)) _variant_t Arcs::GetVerticalAlignment ( );
__declspec(implementation_key(3580)) void Arcs::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3581)) long Arcs::GetReadingOrder ( );
__declspec(implementation_key(3582)) void Arcs::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3583)) BorderPtr Arcs::GetBorder ( );
__declspec(implementation_key(3584)) InteriorPtr Arcs::GetInterior ( );
__declspec(implementation_key(3585)) ArcPtr Arcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(3586)) long Arcs::GetCount ( );
__declspec(implementation_key(3587)) GroupObjectPtr Arcs::Group ( );
__declspec(implementation_key(3588)) IDispatchPtr Arcs::Item ( const _variant_t & Index );
__declspec(implementation_key(3589)) IUnknownPtr Arcs::_NewEnum ( );
__declspec(implementation_key(3590)) HRESULT OLEObjectEvents::GotFocus ( );
__declspec(implementation_key(3591)) HRESULT OLEObjectEvents::LostFocus ( );
__declspec(implementation_key(3592)) _ApplicationPtr _OLEObject::GetApplication ( );
__declspec(implementation_key(3593)) enum XlCreator _OLEObject::GetCreator ( );
__declspec(implementation_key(3594)) IDispatchPtr _OLEObject::GetParent ( );
__declspec(implementation_key(3595)) RangePtr _OLEObject::GetBottomRightCell ( );
__declspec(implementation_key(3596)) _variant_t _OLEObject::BringToFront ( );
__declspec(implementation_key(3597)) _variant_t _OLEObject::Copy ( );
__declspec(implementation_key(3598)) _variant_t _OLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3599)) _variant_t _OLEObject::Cut ( );
__declspec(implementation_key(3600)) _variant_t _OLEObject::Delete ( );
__declspec(implementation_key(3601)) IDispatchPtr _OLEObject::Duplicate ( );
__declspec(implementation_key(3602)) VARIANT_BOOL _OLEObject::GetEnabled ( );
__declspec(implementation_key(3603)) void _OLEObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3604)) double _OLEObject::GetHeight ( );
__declspec(implementation_key(3605)) void _OLEObject::PutHeight ( double _arg1 );
__declspec(implementation_key(3606)) long _OLEObject::GetIndex ( );
__declspec(implementation_key(3607)) double _OLEObject::GetLeft ( );
__declspec(implementation_key(3608)) void _OLEObject::PutLeft ( double _arg1 );
__declspec(implementation_key(3609)) VARIANT_BOOL _OLEObject::GetLocked ( );
__declspec(implementation_key(3610)) void _OLEObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3611)) _bstr_t _OLEObject::GetName ( );
__declspec(implementation_key(3612)) void _OLEObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3613)) _bstr_t _OLEObject::GetOnAction ( );
__declspec(implementation_key(3614)) void _OLEObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3615)) _variant_t _OLEObject::GetPlacement ( );
__declspec(implementation_key(3616)) void _OLEObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3617)) VARIANT_BOOL _OLEObject::GetPrintObject ( );
__declspec(implementation_key(3618)) void _OLEObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3619)) _variant_t _OLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(3620)) _variant_t _OLEObject::SendToBack ( );
__declspec(implementation_key(3621)) double _OLEObject::GetTop ( );
__declspec(implementation_key(3622)) void _OLEObject::PutTop ( double _arg1 );
__declspec(implementation_key(3623)) RangePtr _OLEObject::GetTopLeftCell ( );
__declspec(implementation_key(3624)) VARIANT_BOOL _OLEObject::GetVisible ( );
__declspec(implementation_key(3625)) void _OLEObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3626)) double _OLEObject::GetWidth ( );
__declspec(implementation_key(3627)) void _OLEObject::PutWidth ( double _arg1 );
__declspec(implementation_key(3628)) long _OLEObject::GetZOrder ( );
__declspec(implementation_key(3629)) ShapeRangePtr _OLEObject::GetShapeRange ( );
__declspec(implementation_key(3630)) BorderPtr _OLEObject::GetBorder ( );
__declspec(implementation_key(3631)) InteriorPtr _OLEObject::GetInterior ( );
__declspec(implementation_key(3632)) VARIANT_BOOL _OLEObject::GetShadow ( );
__declspec(implementation_key(3633)) void _OLEObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3634)) _variant_t _OLEObject::Activate ( );
__declspec(implementation_key(3635)) VARIANT_BOOL _OLEObject::GetAutoLoad ( );
__declspec(implementation_key(3636)) void _OLEObject::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3637)) VARIANT_BOOL _OLEObject::GetAutoUpdate ( );
__declspec(implementation_key(3638)) void _OLEObject::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3639)) IDispatchPtr _OLEObject::GetObject ( );
__declspec(implementation_key(3640)) _variant_t _OLEObject::GetOLEType ( );
__declspec(implementation_key(3641)) _bstr_t _OLEObject::GetSourceName ( );
__declspec(implementation_key(3642)) void _OLEObject::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(3643)) _variant_t _OLEObject::Update ( );
__declspec(implementation_key(3644)) _variant_t _OLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(3645)) _bstr_t _OLEObject::GetLinkedCell ( );
__declspec(implementation_key(3646)) void _OLEObject::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(3647)) _bstr_t _OLEObject::GetListFillRange ( );
__declspec(implementation_key(3648)) void _OLEObject::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(3649)) _bstr_t _OLEObject::GetprogID ( );
__declspec(implementation_key(3650)) _bstr_t _OLEObject::GetAltHTML ( );
__declspec(implementation_key(3651)) void _OLEObject::PutAltHTML ( _bstr_t _arg1 );
__declspec(implementation_key(3652)) _ApplicationPtr OLEObjects::GetApplication ( );
__declspec(implementation_key(3653)) enum XlCreator OLEObjects::GetCreator ( );
__declspec(implementation_key(3654)) IDispatchPtr OLEObjects::GetParent ( );
__declspec(implementation_key(3655)) _variant_t OLEObjects::BringToFront ( );
__declspec(implementation_key(3656)) _variant_t OLEObjects::Copy ( );
__declspec(implementation_key(3657)) _variant_t OLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3658)) _variant_t OLEObjects::Cut ( );
__declspec(implementation_key(3659)) _variant_t OLEObjects::Delete ( );
__declspec(implementation_key(3660)) IDispatchPtr OLEObjects::Duplicate ( );
__declspec(implementation_key(3661)) VARIANT_BOOL OLEObjects::GetEnabled ( );
__declspec(implementation_key(3662)) void OLEObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3663)) double OLEObjects::GetHeight ( );
__declspec(implementation_key(3664)) void OLEObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(3665)) double OLEObjects::GetLeft ( );
__declspec(implementation_key(3666)) void OLEObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(3667)) VARIANT_BOOL OLEObjects::GetLocked ( );
__declspec(implementation_key(3668)) void OLEObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3669)) _bstr_t OLEObjects::GetOnAction ( );
__declspec(implementation_key(3670)) void OLEObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3671)) _variant_t OLEObjects::GetPlacement ( );
__declspec(implementation_key(3672)) void OLEObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3673)) VARIANT_BOOL OLEObjects::GetPrintObject ( );
__declspec(implementation_key(3674)) void OLEObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3675)) _variant_t OLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(3676)) _variant_t OLEObjects::SendToBack ( );
__declspec(implementation_key(3677)) double OLEObjects::GetTop ( );
__declspec(implementation_key(3678)) void OLEObjects::PutTop ( double _arg1 );
__declspec(implementation_key(3679)) VARIANT_BOOL OLEObjects::GetVisible ( );
__declspec(implementation_key(3680)) void OLEObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3681)) double OLEObjects::GetWidth ( );
__declspec(implementation_key(3682)) void OLEObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(3683)) long OLEObjects::GetZOrder ( );
__declspec(implementation_key(3684)) ShapeRangePtr OLEObjects::GetShapeRange ( );
__declspec(implementation_key(3685)) BorderPtr OLEObjects::GetBorder ( );
__declspec(implementation_key(3686)) InteriorPtr OLEObjects::GetInterior ( );
__declspec(implementation_key(3687)) VARIANT_BOOL OLEObjects::GetShadow ( );
__declspec(implementation_key(3688)) void OLEObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3689)) VARIANT_BOOL OLEObjects::GetAutoLoad ( );
__declspec(implementation_key(3690)) void OLEObjects::PutAutoLoad ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3691)) _bstr_t OLEObjects::GetSourceName ( );
__declspec(implementation_key(3692)) void OLEObjects::PutSourceName ( _bstr_t _arg1 );
__declspec(implementation_key(3693)) _OLEObjectPtr OLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(3694)) long OLEObjects::GetCount ( );
__declspec(implementation_key(3695)) GroupObjectPtr OLEObjects::Group ( );
__declspec(implementation_key(3696)) IDispatchPtr OLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(3697)) IUnknownPtr OLEObjects::_NewEnum ( );
__declspec(implementation_key(3698)) _ApplicationPtr TextBox::GetApplication ( );
__declspec(implementation_key(3699)) enum XlCreator TextBox::GetCreator ( );
__declspec(implementation_key(3700)) IDispatchPtr TextBox::GetParent ( );
__declspec(implementation_key(3701)) RangePtr TextBox::GetBottomRightCell ( );
__declspec(implementation_key(3702)) _variant_t TextBox::BringToFront ( );
__declspec(implementation_key(3703)) _variant_t TextBox::Copy ( );
__declspec(implementation_key(3704)) _variant_t TextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3705)) _variant_t TextBox::Cut ( );
__declspec(implementation_key(3706)) _variant_t TextBox::Delete ( );
__declspec(implementation_key(3707)) IDispatchPtr TextBox::Duplicate ( );
__declspec(implementation_key(3708)) VARIANT_BOOL TextBox::GetEnabled ( );
__declspec(implementation_key(3709)) void TextBox::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3710)) double TextBox::GetHeight ( );
__declspec(implementation_key(3711)) void TextBox::PutHeight ( double _arg1 );
__declspec(implementation_key(3712)) long TextBox::GetIndex ( );
__declspec(implementation_key(3713)) double TextBox::GetLeft ( );
__declspec(implementation_key(3714)) void TextBox::PutLeft ( double _arg1 );
__declspec(implementation_key(3715)) VARIANT_BOOL TextBox::GetLocked ( );
__declspec(implementation_key(3716)) void TextBox::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3717)) _bstr_t TextBox::GetName ( );
__declspec(implementation_key(3718)) void TextBox::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3719)) _bstr_t TextBox::GetOnAction ( );
__declspec(implementation_key(3720)) void TextBox::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3721)) _variant_t TextBox::GetPlacement ( );
__declspec(implementation_key(3722)) void TextBox::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3723)) VARIANT_BOOL TextBox::GetPrintObject ( );
__declspec(implementation_key(3724)) void TextBox::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3725)) _variant_t TextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(3726)) _variant_t TextBox::SendToBack ( );
__declspec(implementation_key(3727)) double TextBox::GetTop ( );
__declspec(implementation_key(3728)) void TextBox::PutTop ( double _arg1 );
__declspec(implementation_key(3729)) RangePtr TextBox::GetTopLeftCell ( );
__declspec(implementation_key(3730)) VARIANT_BOOL TextBox::GetVisible ( );
__declspec(implementation_key(3731)) void TextBox::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3732)) double TextBox::GetWidth ( );
__declspec(implementation_key(3733)) void TextBox::PutWidth ( double _arg1 );
__declspec(implementation_key(3734)) long TextBox::GetZOrder ( );
__declspec(implementation_key(3735)) ShapeRangePtr TextBox::GetShapeRange ( );
__declspec(implementation_key(3736)) VARIANT_BOOL TextBox::GetAddIndent ( );
__declspec(implementation_key(3737)) void TextBox::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3738)) _variant_t TextBox::GetAutoScaleFont ( );
__declspec(implementation_key(3739)) void TextBox::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3740)) VARIANT_BOOL TextBox::GetAutoSize ( );
__declspec(implementation_key(3741)) void TextBox::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3742)) _bstr_t TextBox::GetCaption ( );
__declspec(implementation_key(3743)) void TextBox::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3744)) CharactersPtr TextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3745)) _variant_t TextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3746)) FontPtr TextBox::GetFont ( );
__declspec(implementation_key(3747)) _bstr_t TextBox::GetFormula ( );
__declspec(implementation_key(3748)) void TextBox::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3749)) _variant_t TextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(3750)) void TextBox::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3751)) VARIANT_BOOL TextBox::GetLockedText ( );
__declspec(implementation_key(3752)) void TextBox::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3753)) _variant_t TextBox::GetOrientation ( );
__declspec(implementation_key(3754)) void TextBox::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3755)) _bstr_t TextBox::GetText ( );
__declspec(implementation_key(3756)) void TextBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3757)) _variant_t TextBox::GetVerticalAlignment ( );
__declspec(implementation_key(3758)) void TextBox::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3759)) long TextBox::GetReadingOrder ( );
__declspec(implementation_key(3760)) void TextBox::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3761)) BorderPtr TextBox::GetBorder ( );
__declspec(implementation_key(3762)) InteriorPtr TextBox::GetInterior ( );
__declspec(implementation_key(3763)) VARIANT_BOOL TextBox::GetRoundedCorners ( );
__declspec(implementation_key(3764)) void TextBox::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3765)) VARIANT_BOOL TextBox::GetShadow ( );
__declspec(implementation_key(3766)) void TextBox::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3767)) _ApplicationPtr TextBoxes::GetApplication ( );
__declspec(implementation_key(3768)) enum XlCreator TextBoxes::GetCreator ( );
__declspec(implementation_key(3769)) IDispatchPtr TextBoxes::GetParent ( );
__declspec(implementation_key(3770)) _variant_t TextBoxes::BringToFront ( );
__declspec(implementation_key(3771)) _variant_t TextBoxes::Copy ( );
__declspec(implementation_key(3772)) _variant_t TextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3773)) _variant_t TextBoxes::Cut ( );
__declspec(implementation_key(3774)) _variant_t TextBoxes::Delete ( );
__declspec(implementation_key(3775)) IDispatchPtr TextBoxes::Duplicate ( );
__declspec(implementation_key(3776)) VARIANT_BOOL TextBoxes::GetEnabled ( );
__declspec(implementation_key(3777)) void TextBoxes::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3778)) double TextBoxes::GetHeight ( );
__declspec(implementation_key(3779)) void TextBoxes::PutHeight ( double _arg1 );
__declspec(implementation_key(3780)) double TextBoxes::GetLeft ( );
__declspec(implementation_key(3781)) void TextBoxes::PutLeft ( double _arg1 );
__declspec(implementation_key(3782)) VARIANT_BOOL TextBoxes::GetLocked ( );
__declspec(implementation_key(3783)) void TextBoxes::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3784)) _bstr_t TextBoxes::GetOnAction ( );
__declspec(implementation_key(3785)) void TextBoxes::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3786)) _variant_t TextBoxes::GetPlacement ( );
__declspec(implementation_key(3787)) void TextBoxes::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3788)) VARIANT_BOOL TextBoxes::GetPrintObject ( );
__declspec(implementation_key(3789)) void TextBoxes::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3790)) _variant_t TextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(3791)) _variant_t TextBoxes::SendToBack ( );
__declspec(implementation_key(3792)) double TextBoxes::GetTop ( );
__declspec(implementation_key(3793)) void TextBoxes::PutTop ( double _arg1 );
__declspec(implementation_key(3794)) VARIANT_BOOL TextBoxes::GetVisible ( );
__declspec(implementation_key(3795)) void TextBoxes::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3796)) double TextBoxes::GetWidth ( );
__declspec(implementation_key(3797)) void TextBoxes::PutWidth ( double _arg1 );
__declspec(implementation_key(3798)) long TextBoxes::GetZOrder ( );
__declspec(implementation_key(3799)) ShapeRangePtr TextBoxes::GetShapeRange ( );
__declspec(implementation_key(3800)) VARIANT_BOOL TextBoxes::GetAddIndent ( );
__declspec(implementation_key(3801)) void TextBoxes::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3802)) _variant_t TextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(3803)) void TextBoxes::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3804)) VARIANT_BOOL TextBoxes::GetAutoSize ( );
__declspec(implementation_key(3805)) void TextBoxes::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3806)) _bstr_t TextBoxes::GetCaption ( );
__declspec(implementation_key(3807)) void TextBoxes::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3808)) CharactersPtr TextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3809)) _variant_t TextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3810)) FontPtr TextBoxes::GetFont ( );
__declspec(implementation_key(3811)) _bstr_t TextBoxes::GetFormula ( );
__declspec(implementation_key(3812)) void TextBoxes::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3813)) _variant_t TextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(3814)) void TextBoxes::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3815)) VARIANT_BOOL TextBoxes::GetLockedText ( );
__declspec(implementation_key(3816)) void TextBoxes::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3817)) _variant_t TextBoxes::GetOrientation ( );
__declspec(implementation_key(3818)) void TextBoxes::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3819)) _bstr_t TextBoxes::GetText ( );
__declspec(implementation_key(3820)) void TextBoxes::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3821)) _variant_t TextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(3822)) void TextBoxes::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3823)) long TextBoxes::GetReadingOrder ( );
__declspec(implementation_key(3824)) void TextBoxes::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3825)) BorderPtr TextBoxes::GetBorder ( );
__declspec(implementation_key(3826)) InteriorPtr TextBoxes::GetInterior ( );
__declspec(implementation_key(3827)) VARIANT_BOOL TextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(3828)) void TextBoxes::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3829)) VARIANT_BOOL TextBoxes::GetShadow ( );
__declspec(implementation_key(3830)) void TextBoxes::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3831)) TextBoxPtr TextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3832)) long TextBoxes::GetCount ( );
__declspec(implementation_key(3833)) GroupObjectPtr TextBoxes::Group ( );
__declspec(implementation_key(3834)) IDispatchPtr TextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(3835)) IUnknownPtr TextBoxes::_NewEnum ( );
__declspec(implementation_key(3836)) _ApplicationPtr Picture::GetApplication ( );
__declspec(implementation_key(3837)) enum XlCreator Picture::GetCreator ( );
__declspec(implementation_key(3838)) IDispatchPtr Picture::GetParent ( );
__declspec(implementation_key(3839)) RangePtr Picture::GetBottomRightCell ( );
__declspec(implementation_key(3840)) _variant_t Picture::BringToFront ( );
__declspec(implementation_key(3841)) _variant_t Picture::Copy ( );
__declspec(implementation_key(3842)) _variant_t Picture::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3843)) _variant_t Picture::Cut ( );
__declspec(implementation_key(3844)) _variant_t Picture::Delete ( );
__declspec(implementation_key(3845)) IDispatchPtr Picture::Duplicate ( );
__declspec(implementation_key(3846)) VARIANT_BOOL Picture::GetEnabled ( );
__declspec(implementation_key(3847)) void Picture::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3848)) double Picture::GetHeight ( );
__declspec(implementation_key(3849)) void Picture::PutHeight ( double _arg1 );
__declspec(implementation_key(3850)) long Picture::GetIndex ( );
__declspec(implementation_key(3851)) double Picture::GetLeft ( );
__declspec(implementation_key(3852)) void Picture::PutLeft ( double _arg1 );
__declspec(implementation_key(3853)) VARIANT_BOOL Picture::GetLocked ( );
__declspec(implementation_key(3854)) void Picture::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3855)) _bstr_t Picture::GetName ( );
__declspec(implementation_key(3856)) void Picture::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3857)) _bstr_t Picture::GetOnAction ( );
__declspec(implementation_key(3858)) void Picture::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3859)) _variant_t Picture::GetPlacement ( );
__declspec(implementation_key(3860)) void Picture::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3861)) VARIANT_BOOL Picture::GetPrintObject ( );
__declspec(implementation_key(3862)) void Picture::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3863)) _variant_t Picture::Select ( const _variant_t & Replace );
__declspec(implementation_key(3864)) _variant_t Picture::SendToBack ( );
__declspec(implementation_key(3865)) double Picture::GetTop ( );
__declspec(implementation_key(3866)) void Picture::PutTop ( double _arg1 );
__declspec(implementation_key(3867)) RangePtr Picture::GetTopLeftCell ( );
__declspec(implementation_key(3868)) VARIANT_BOOL Picture::GetVisible ( );
__declspec(implementation_key(3869)) void Picture::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3870)) double Picture::GetWidth ( );
__declspec(implementation_key(3871)) void Picture::PutWidth ( double _arg1 );
__declspec(implementation_key(3872)) long Picture::GetZOrder ( );
__declspec(implementation_key(3873)) ShapeRangePtr Picture::GetShapeRange ( );
__declspec(implementation_key(3874)) BorderPtr Picture::GetBorder ( );
__declspec(implementation_key(3875)) InteriorPtr Picture::GetInterior ( );
__declspec(implementation_key(3876)) VARIANT_BOOL Picture::GetShadow ( );
__declspec(implementation_key(3877)) void Picture::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3878)) _bstr_t Picture::GetFormula ( );
__declspec(implementation_key(3879)) void Picture::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3880)) _ApplicationPtr Pictures::GetApplication ( );
__declspec(implementation_key(3881)) enum XlCreator Pictures::GetCreator ( );
__declspec(implementation_key(3882)) IDispatchPtr Pictures::GetParent ( );
__declspec(implementation_key(3883)) _variant_t Pictures::BringToFront ( );
__declspec(implementation_key(3884)) _variant_t Pictures::Copy ( );
__declspec(implementation_key(3885)) _variant_t Pictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3886)) _variant_t Pictures::Cut ( );
__declspec(implementation_key(3887)) _variant_t Pictures::Delete ( );
__declspec(implementation_key(3888)) IDispatchPtr Pictures::Duplicate ( );
__declspec(implementation_key(3889)) VARIANT_BOOL Pictures::GetEnabled ( );
__declspec(implementation_key(3890)) void Pictures::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3891)) double Pictures::GetHeight ( );
__declspec(implementation_key(3892)) void Pictures::PutHeight ( double _arg1 );
__declspec(implementation_key(3893)) double Pictures::GetLeft ( );
__declspec(implementation_key(3894)) void Pictures::PutLeft ( double _arg1 );
__declspec(implementation_key(3895)) VARIANT_BOOL Pictures::GetLocked ( );
__declspec(implementation_key(3896)) void Pictures::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3897)) _bstr_t Pictures::GetOnAction ( );
__declspec(implementation_key(3898)) void Pictures::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3899)) _variant_t Pictures::GetPlacement ( );
__declspec(implementation_key(3900)) void Pictures::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3901)) VARIANT_BOOL Pictures::GetPrintObject ( );
__declspec(implementation_key(3902)) void Pictures::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3903)) _variant_t Pictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(3904)) _variant_t Pictures::SendToBack ( );
__declspec(implementation_key(3905)) double Pictures::GetTop ( );
__declspec(implementation_key(3906)) void Pictures::PutTop ( double _arg1 );
__declspec(implementation_key(3907)) VARIANT_BOOL Pictures::GetVisible ( );
__declspec(implementation_key(3908)) void Pictures::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3909)) double Pictures::GetWidth ( );
__declspec(implementation_key(3910)) void Pictures::PutWidth ( double _arg1 );
__declspec(implementation_key(3911)) long Pictures::GetZOrder ( );
__declspec(implementation_key(3912)) ShapeRangePtr Pictures::GetShapeRange ( );
__declspec(implementation_key(3913)) BorderPtr Pictures::GetBorder ( );
__declspec(implementation_key(3914)) InteriorPtr Pictures::GetInterior ( );
__declspec(implementation_key(3915)) VARIANT_BOOL Pictures::GetShadow ( );
__declspec(implementation_key(3916)) void Pictures::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3917)) _bstr_t Pictures::GetFormula ( );
__declspec(implementation_key(3918)) void Pictures::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3919)) PicturePtr Pictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(3920)) long Pictures::GetCount ( );
__declspec(implementation_key(3921)) GroupObjectPtr Pictures::Group ( );
__declspec(implementation_key(3922)) PicturePtr Pictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(3923)) IDispatchPtr Pictures::Item ( const _variant_t & Index );
__declspec(implementation_key(3924)) IUnknownPtr Pictures::_NewEnum ( );
__declspec(implementation_key(3925)) PicturePtr Pictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(3926)) _ApplicationPtr Drawing::GetApplication ( );
__declspec(implementation_key(3927)) enum XlCreator Drawing::GetCreator ( );
__declspec(implementation_key(3928)) IDispatchPtr Drawing::GetParent ( );
__declspec(implementation_key(3929)) RangePtr Drawing::GetBottomRightCell ( );
__declspec(implementation_key(3930)) _variant_t Drawing::BringToFront ( );
__declspec(implementation_key(3931)) _variant_t Drawing::Copy ( );
__declspec(implementation_key(3932)) _variant_t Drawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(3933)) _variant_t Drawing::Cut ( );
__declspec(implementation_key(3934)) _variant_t Drawing::Delete ( );
__declspec(implementation_key(3935)) IDispatchPtr Drawing::Duplicate ( );
__declspec(implementation_key(3936)) VARIANT_BOOL Drawing::GetEnabled ( );
__declspec(implementation_key(3937)) void Drawing::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3938)) double Drawing::GetHeight ( );
__declspec(implementation_key(3939)) void Drawing::PutHeight ( double _arg1 );
__declspec(implementation_key(3940)) long Drawing::GetIndex ( );
__declspec(implementation_key(3941)) double Drawing::GetLeft ( );
__declspec(implementation_key(3942)) void Drawing::PutLeft ( double _arg1 );
__declspec(implementation_key(3943)) VARIANT_BOOL Drawing::GetLocked ( );
__declspec(implementation_key(3944)) void Drawing::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3945)) _bstr_t Drawing::GetName ( );
__declspec(implementation_key(3946)) void Drawing::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3947)) _bstr_t Drawing::GetOnAction ( );
__declspec(implementation_key(3948)) void Drawing::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(3949)) _variant_t Drawing::GetPlacement ( );
__declspec(implementation_key(3950)) void Drawing::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(3951)) VARIANT_BOOL Drawing::GetPrintObject ( );
__declspec(implementation_key(3952)) void Drawing::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3953)) _variant_t Drawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(3954)) _variant_t Drawing::SendToBack ( );
__declspec(implementation_key(3955)) double Drawing::GetTop ( );
__declspec(implementation_key(3956)) void Drawing::PutTop ( double _arg1 );
__declspec(implementation_key(3957)) RangePtr Drawing::GetTopLeftCell ( );
__declspec(implementation_key(3958)) VARIANT_BOOL Drawing::GetVisible ( );
__declspec(implementation_key(3959)) void Drawing::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3960)) double Drawing::GetWidth ( );
__declspec(implementation_key(3961)) void Drawing::PutWidth ( double _arg1 );
__declspec(implementation_key(3962)) long Drawing::GetZOrder ( );
__declspec(implementation_key(3963)) ShapeRangePtr Drawing::GetShapeRange ( );
__declspec(implementation_key(3964)) VARIANT_BOOL Drawing::GetAddIndent ( );
__declspec(implementation_key(3965)) void Drawing::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3966)) _variant_t Drawing::GetAutoScaleFont ( );
__declspec(implementation_key(3967)) void Drawing::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(3968)) VARIANT_BOOL Drawing::GetAutoSize ( );
__declspec(implementation_key(3969)) void Drawing::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3970)) _bstr_t Drawing::GetCaption ( );
__declspec(implementation_key(3971)) void Drawing::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(3972)) CharactersPtr Drawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(3973)) _variant_t Drawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(3974)) FontPtr Drawing::GetFont ( );
__declspec(implementation_key(3975)) _bstr_t Drawing::GetFormula ( );
__declspec(implementation_key(3976)) void Drawing::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3977)) _variant_t Drawing::GetHorizontalAlignment ( );
__declspec(implementation_key(3978)) void Drawing::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3979)) VARIANT_BOOL Drawing::GetLockedText ( );
__declspec(implementation_key(3980)) void Drawing::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3981)) _variant_t Drawing::GetOrientation ( );
__declspec(implementation_key(3982)) void Drawing::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(3983)) _bstr_t Drawing::GetText ( );
__declspec(implementation_key(3984)) void Drawing::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(3985)) _variant_t Drawing::GetVerticalAlignment ( );
__declspec(implementation_key(3986)) void Drawing::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(3987)) long Drawing::GetReadingOrder ( );
__declspec(implementation_key(3988)) void Drawing::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(3989)) BorderPtr Drawing::GetBorder ( );
__declspec(implementation_key(3990)) InteriorPtr Drawing::GetInterior ( );
__declspec(implementation_key(3991)) VARIANT_BOOL Drawing::GetShadow ( );
__declspec(implementation_key(3992)) void Drawing::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3993)) _variant_t Drawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(3994)) _variant_t Drawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(3995)) _variant_t Drawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(3996)) _ApplicationPtr Drawings::GetApplication ( );
__declspec(implementation_key(3997)) enum XlCreator Drawings::GetCreator ( );
__declspec(implementation_key(3998)) IDispatchPtr Drawings::GetParent ( );
__declspec(implementation_key(3999)) _variant_t Drawings::BringToFront ( );
__declspec(implementation_key(4000)) _variant_t Drawings::Copy ( );
__declspec(implementation_key(4001)) _variant_t Drawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4002)) _variant_t Drawings::Cut ( );
__declspec(implementation_key(4003)) _variant_t Drawings::Delete ( );
__declspec(implementation_key(4004)) IDispatchPtr Drawings::Duplicate ( );
__declspec(implementation_key(4005)) VARIANT_BOOL Drawings::GetEnabled ( );
__declspec(implementation_key(4006)) void Drawings::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4007)) double Drawings::GetHeight ( );
__declspec(implementation_key(4008)) void Drawings::PutHeight ( double _arg1 );
__declspec(implementation_key(4009)) double Drawings::GetLeft ( );
__declspec(implementation_key(4010)) void Drawings::PutLeft ( double _arg1 );
__declspec(implementation_key(4011)) VARIANT_BOOL Drawings::GetLocked ( );
__declspec(implementation_key(4012)) void Drawings::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4013)) _bstr_t Drawings::GetOnAction ( );
__declspec(implementation_key(4014)) void Drawings::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(4015)) _variant_t Drawings::GetPlacement ( );
__declspec(implementation_key(4016)) void Drawings::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(4017)) VARIANT_BOOL Drawings::GetPrintObject ( );
__declspec(implementation_key(4018)) void Drawings::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4019)) _variant_t Drawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(4020)) _variant_t Drawings::SendToBack ( );
__declspec(implementation_key(4021)) double Drawings::GetTop ( );
__declspec(implementation_key(4022)) void Drawings::PutTop ( double _arg1 );
__declspec(implementation_key(4023)) VARIANT_BOOL Drawings::GetVisible ( );
__declspec(implementation_key(4024)) void Drawings::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4025)) double Drawings::GetWidth ( );
__declspec(implementation_key(4026)) void Drawings::PutWidth ( double _arg1 );
__declspec(implementation_key(4027)) long Drawings::GetZOrder ( );
__declspec(implementation_key(4028)) ShapeRangePtr Drawings::GetShapeRange ( );
__declspec(implementation_key(4029)) VARIANT_BOOL Drawings::GetAddIndent ( );
__declspec(implementation_key(4030)) void Drawings::PutAddIndent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4031)) _variant_t Drawings::GetAutoScaleFont ( );
__declspec(implementation_key(4032)) void Drawings::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(4033)) VARIANT_BOOL Drawings::GetAutoSize ( );
__declspec(implementation_key(4034)) void Drawings::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4035)) _bstr_t Drawings::GetCaption ( );
__declspec(implementation_key(4036)) void Drawings::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(4037)) CharactersPtr Drawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4038)) _variant_t Drawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4039)) FontPtr Drawings::GetFont ( );
__declspec(implementation_key(4040)) _bstr_t Drawings::GetFormula ( );
__declspec(implementation_key(4041)) void Drawings::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(4042)) _variant_t Drawings::GetHorizontalAlignment ( );
__declspec(implementation_key(4043)) void Drawings::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4044)) VARIANT_BOOL Drawings::GetLockedText ( );
__declspec(implementation_key(4045)) void Drawings::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4046)) _variant_t Drawings::GetOrientation ( );
__declspec(implementation_key(4047)) void Drawings::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(4048)) _bstr_t Drawings::GetText ( );
__declspec(implementation_key(4049)) void Drawings::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(4050)) _variant_t Drawings::GetVerticalAlignment ( );
__declspec(implementation_key(4051)) void Drawings::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4052)) long Drawings::GetReadingOrder ( );
__declspec(implementation_key(4053)) void Drawings::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(4054)) BorderPtr Drawings::GetBorder ( );
__declspec(implementation_key(4055)) InteriorPtr Drawings::GetInterior ( );
__declspec(implementation_key(4056)) VARIANT_BOOL Drawings::GetShadow ( );
__declspec(implementation_key(4057)) void Drawings::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4058)) _variant_t Drawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(4059)) DrawingPtr Drawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(4060)) long Drawings::GetCount ( );
__declspec(implementation_key(4061)) GroupObjectPtr Drawings::Group ( );
__declspec(implementation_key(4062)) IDispatchPtr Drawings::Item ( const _variant_t & Index );
__declspec(implementation_key(4063)) IUnknownPtr Drawings::_NewEnum ( );
__declspec(implementation_key(4064)) _ApplicationPtr RoutingSlip::GetApplication ( );
__declspec(implementation_key(4065)) enum XlCreator RoutingSlip::GetCreator ( );
__declspec(implementation_key(4066)) IDispatchPtr RoutingSlip::GetParent ( );
__declspec(implementation_key(4067)) enum XlRoutingSlipDelivery RoutingSlip::GetDelivery ( );
__declspec(implementation_key(4068)) void RoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery _arg1 );
__declspec(implementation_key(4069)) _variant_t RoutingSlip::GetMessage ( );
__declspec(implementation_key(4070)) void RoutingSlip::PutMessage ( const _variant_t & _arg1 );
__declspec(implementation_key(4071)) _variant_t RoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(4072)) void RoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(4073)) _variant_t RoutingSlip::Reset ( );
__declspec(implementation_key(4074)) VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(4075)) void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4076)) enum XlRoutingSlipStatus RoutingSlip::GetStatus ( );
__declspec(implementation_key(4077)) _variant_t RoutingSlip::GetSubject ( );
__declspec(implementation_key(4078)) void RoutingSlip::PutSubject ( const _variant_t & _arg1 );
__declspec(implementation_key(4079)) VARIANT_BOOL RoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(4080)) void RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4081)) _ApplicationPtr Outline::GetApplication ( );
__declspec(implementation_key(4082)) enum XlCreator Outline::GetCreator ( );
__declspec(implementation_key(4083)) IDispatchPtr Outline::GetParent ( );
__declspec(implementation_key(4084)) VARIANT_BOOL Outline::GetAutomaticStyles ( );
__declspec(implementation_key(4085)) void Outline::PutAutomaticStyles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4086)) _variant_t Outline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(4087)) enum XlSummaryColumn Outline::GetSummaryColumn ( );
__declspec(implementation_key(4088)) void Outline::PutSummaryColumn ( enum XlSummaryColumn _arg1 );
__declspec(implementation_key(4089)) enum XlSummaryRow Outline::GetSummaryRow ( );
__declspec(implementation_key(4090)) void Outline::PutSummaryRow ( enum XlSummaryRow _arg1 );
__declspec(implementation_key(4091)) _ApplicationPtr Module::GetApplication ( );
__declspec(implementation_key(4092)) enum XlCreator Module::GetCreator ( );
__declspec(implementation_key(4093)) IDispatchPtr Module::GetParent ( );
__declspec(implementation_key(4094)) HRESULT Module::Activate ( );
__declspec(implementation_key(4095)) HRESULT Module::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4096)) HRESULT Module::Delete ( );
__declspec(implementation_key(4097)) _bstr_t Module::GetCodeName ( );
__declspec(implementation_key(4098)) _bstr_t Module::Get_CodeName ( );
__declspec(implementation_key(4099)) void Module::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(4100)) long Module::GetIndex ( );
__declspec(implementation_key(4101)) HRESULT Module::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4102)) _bstr_t Module::GetName ( );
__declspec(implementation_key(4103)) void Module::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4104)) IDispatchPtr Module::GetNext ( );
__declspec(implementation_key(4105)) _bstr_t Module::GetOnDoubleClick ( );
__declspec(implementation_key(4106)) void Module::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(4107)) _bstr_t Module::GetOnSheetActivate ( );
__declspec(implementation_key(4108)) void Module::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(4109)) _bstr_t Module::GetOnSheetDeactivate ( );
__declspec(implementation_key(4110)) void Module::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(4111)) PageSetupPtr Module::GetPageSetup ( );
__declspec(implementation_key(4112)) IDispatchPtr Module::GetPrevious ( );
__declspec(implementation_key(4113)) HRESULT Module::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4114)) HRESULT Module::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(4115)) VARIANT_BOOL Module::GetProtectContents ( );
__declspec(implementation_key(4116)) VARIANT_BOOL Module::GetProtectionMode ( );
__declspec(implementation_key(4117)) HRESULT Module::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(4118)) HRESULT Module::Select ( const _variant_t & Replace );
__declspec(implementation_key(4119)) HRESULT Module::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(4120)) enum XlSheetVisibility Module::GetVisible ( );
__declspec(implementation_key(4121)) void Module::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(4122)) ShapesPtr Module::GetShapes ( );
__declspec(implementation_key(4123)) _variant_t Module::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(4124)) HRESULT Module::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(4125)) HRESULT Module::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(4126)) _ApplicationPtr Modules::GetApplication ( );
__declspec(implementation_key(4127)) enum XlCreator Modules::GetCreator ( );
__declspec(implementation_key(4128)) IDispatchPtr Modules::GetParent ( );
__declspec(implementation_key(4129)) ModulePtr Modules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(4130)) HRESULT Modules::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4131)) long Modules::GetCount ( );
__declspec(implementation_key(4132)) HRESULT Modules::Delete ( );
__declspec(implementation_key(4133)) IDispatchPtr Modules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4134)) HRESULT Modules::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4135)) IUnknownPtr Modules::Get_NewEnum ( );
__declspec(implementation_key(4136)) HRESULT Modules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4137)) HRESULT Modules::Select ( const _variant_t & Replace );
__declspec(implementation_key(4138)) HPageBreaksPtr Modules::GetHPageBreaks ( );
__declspec(implementation_key(4139)) VPageBreaksPtr Modules::GetVPageBreaks ( );
__declspec(implementation_key(4140)) _variant_t Modules::GetVisible ( );
__declspec(implementation_key(4141)) void Modules::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(4142)) IDispatchPtr Modules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4143)) HRESULT Modules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4144)) _ApplicationPtr DialogSheet::GetApplication ( );
__declspec(implementation_key(4145)) enum XlCreator DialogSheet::GetCreator ( );
__declspec(implementation_key(4146)) IDispatchPtr DialogSheet::GetParent ( );
__declspec(implementation_key(4147)) HRESULT DialogSheet::Activate ( );
__declspec(implementation_key(4148)) HRESULT DialogSheet::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4149)) HRESULT DialogSheet::Delete ( );
__declspec(implementation_key(4150)) _bstr_t DialogSheet::GetCodeName ( );
__declspec(implementation_key(4151)) _bstr_t DialogSheet::Get_CodeName ( );
__declspec(implementation_key(4152)) void DialogSheet::Put_CodeName ( _bstr_t _arg1 );
__declspec(implementation_key(4153)) long DialogSheet::GetIndex ( );
__declspec(implementation_key(4154)) HRESULT DialogSheet::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4155)) _bstr_t DialogSheet::GetName ( );
__declspec(implementation_key(4156)) void DialogSheet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4157)) IDispatchPtr DialogSheet::GetNext ( );
__declspec(implementation_key(4158)) _bstr_t DialogSheet::GetOnDoubleClick ( );
__declspec(implementation_key(4159)) void DialogSheet::PutOnDoubleClick ( _bstr_t _arg1 );
__declspec(implementation_key(4160)) _bstr_t DialogSheet::GetOnSheetActivate ( );
__declspec(implementation_key(4161)) void DialogSheet::PutOnSheetActivate ( _bstr_t _arg1 );
__declspec(implementation_key(4162)) _bstr_t DialogSheet::GetOnSheetDeactivate ( );
__declspec(implementation_key(4163)) void DialogSheet::PutOnSheetDeactivate ( _bstr_t _arg1 );
__declspec(implementation_key(4164)) PageSetupPtr DialogSheet::GetPageSetup ( );
__declspec(implementation_key(4165)) IDispatchPtr DialogSheet::GetPrevious ( );
__declspec(implementation_key(4166)) HRESULT DialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4167)) HRESULT DialogSheet::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4168)) HRESULT DialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(4169)) VARIANT_BOOL DialogSheet::GetProtectContents ( );
__declspec(implementation_key(4170)) VARIANT_BOOL DialogSheet::GetProtectDrawingObjects ( );
__declspec(implementation_key(4171)) VARIANT_BOOL DialogSheet::GetProtectionMode ( );
__declspec(implementation_key(4172)) VARIANT_BOOL DialogSheet::GetProtectScenarios ( );
__declspec(implementation_key(4173)) HRESULT DialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(4174)) HRESULT DialogSheet::Select ( const _variant_t & Replace );
__declspec(implementation_key(4175)) HRESULT DialogSheet::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(4176)) enum XlSheetVisibility DialogSheet::GetVisible ( );
__declspec(implementation_key(4177)) void DialogSheet::PutVisible ( enum XlSheetVisibility _arg1 );
__declspec(implementation_key(4178)) ShapesPtr DialogSheet::GetShapes ( );
__declspec(implementation_key(4179)) IDispatchPtr DialogSheet::Arcs ( const _variant_t & Index );
__declspec(implementation_key(4180)) IDispatchPtr DialogSheet::Buttons ( const _variant_t & Index );
__declspec(implementation_key(4181)) VARIANT_BOOL DialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(4182)) void DialogSheet::PutEnableCalculation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4183)) IDispatchPtr DialogSheet::ChartObjects ( const _variant_t & Index );
__declspec(implementation_key(4184)) IDispatchPtr DialogSheet::CheckBoxes ( const _variant_t & Index );
__declspec(implementation_key(4185)) HRESULT DialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(4186)) VARIANT_BOOL DialogSheet::GetDisplayAutomaticPageBreaks ( );
__declspec(implementation_key(4187)) void DialogSheet::PutDisplayAutomaticPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4188)) IDispatchPtr DialogSheet::Drawings ( const _variant_t & Index );
__declspec(implementation_key(4189)) IDispatchPtr DialogSheet::DrawingObjects ( const _variant_t & Index );
__declspec(implementation_key(4190)) IDispatchPtr DialogSheet::DropDowns ( const _variant_t & Index );
__declspec(implementation_key(4191)) VARIANT_BOOL DialogSheet::GetEnableAutoFilter ( );
__declspec(implementation_key(4192)) void DialogSheet::PutEnableAutoFilter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4193)) enum XlEnableSelection DialogSheet::GetEnableSelection ( );
__declspec(implementation_key(4194)) void DialogSheet::PutEnableSelection ( enum XlEnableSelection _arg1 );
__declspec(implementation_key(4195)) VARIANT_BOOL DialogSheet::GetEnableOutlining ( );
__declspec(implementation_key(4196)) void DialogSheet::PutEnableOutlining ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4197)) VARIANT_BOOL DialogSheet::GetEnablePivotTable ( );
__declspec(implementation_key(4198)) void DialogSheet::PutEnablePivotTable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4199)) _variant_t DialogSheet::Evaluate ( const _variant_t & Name );
__declspec(implementation_key(4200)) _variant_t DialogSheet::_Evaluate ( const _variant_t & Name );
__declspec(implementation_key(4201)) HRESULT DialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(4202)) IDispatchPtr DialogSheet::GroupBoxes ( const _variant_t & Index );
__declspec(implementation_key(4203)) IDispatchPtr DialogSheet::GroupObjects ( const _variant_t & Index );
__declspec(implementation_key(4204)) IDispatchPtr DialogSheet::Labels ( const _variant_t & Index );
__declspec(implementation_key(4205)) IDispatchPtr DialogSheet::Lines ( const _variant_t & Index );
__declspec(implementation_key(4206)) IDispatchPtr DialogSheet::ListBoxes ( const _variant_t & Index );
__declspec(implementation_key(4207)) NamesPtr DialogSheet::GetNames ( );
__declspec(implementation_key(4208)) IDispatchPtr DialogSheet::OLEObjects ( const _variant_t & Index );
__declspec(implementation_key(4209)) IDispatchPtr DialogSheet::OptionButtons ( const _variant_t & Index );
__declspec(implementation_key(4210)) IDispatchPtr DialogSheet::Ovals ( const _variant_t & Index );
__declspec(implementation_key(4211)) HRESULT DialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link );
__declspec(implementation_key(4212)) HRESULT DialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel );
__declspec(implementation_key(4213)) IDispatchPtr DialogSheet::Pictures ( const _variant_t & Index );
__declspec(implementation_key(4214)) IDispatchPtr DialogSheet::Rectangles ( const _variant_t & Index );
__declspec(implementation_key(4215)) _bstr_t DialogSheet::GetScrollArea ( );
__declspec(implementation_key(4216)) void DialogSheet::PutScrollArea ( _bstr_t _arg1 );
__declspec(implementation_key(4217)) IDispatchPtr DialogSheet::ScrollBars ( const _variant_t & Index );
__declspec(implementation_key(4218)) IDispatchPtr DialogSheet::Spinners ( const _variant_t & Index );
__declspec(implementation_key(4219)) IDispatchPtr DialogSheet::TextBoxes ( const _variant_t & Index );
__declspec(implementation_key(4220)) HPageBreaksPtr DialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(4221)) VPageBreaksPtr DialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(4222)) QueryTablesPtr DialogSheet::GetQueryTables ( );
__declspec(implementation_key(4223)) VARIANT_BOOL DialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(4224)) void DialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4225)) CommentsPtr DialogSheet::GetComments ( );
__declspec(implementation_key(4226)) HyperlinksPtr DialogSheet::GetHyperlinks ( );
__declspec(implementation_key(4227)) HRESULT DialogSheet::ClearCircles ( );
__declspec(implementation_key(4228)) HRESULT DialogSheet::CircleInvalid ( );
__declspec(implementation_key(4229)) long DialogSheet::Get_DisplayRightToLeft ( );
__declspec(implementation_key(4230)) void DialogSheet::Put_DisplayRightToLeft ( long _arg1 );
__declspec(implementation_key(4231)) AutoFilterPtr DialogSheet::GetAutoFilter ( );
__declspec(implementation_key(4232)) VARIANT_BOOL DialogSheet::GetDisplayRightToLeft ( );
__declspec(implementation_key(4233)) void DialogSheet::PutDisplayRightToLeft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4234)) Office::ScriptsPtr DialogSheet::GetScripts ( );
__declspec(implementation_key(4235)) HRESULT DialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4236)) HRESULT DialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript );
__declspec(implementation_key(4237)) TabPtr DialogSheet::GetTab ( );
__declspec(implementation_key(4238)) Office::IMsoEnvelopeVBPtr DialogSheet::GetMailEnvelope ( );
__declspec(implementation_key(4239)) HRESULT DialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(4240)) CustomPropertiesPtr DialogSheet::GetCustomProperties ( );
__declspec(implementation_key(4241)) SmartTagsPtr DialogSheet::GetSmartTags ( );
__declspec(implementation_key(4242)) ProtectionPtr DialogSheet::GetProtection ( );
__declspec(implementation_key(4243)) HRESULT DialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting );
__declspec(implementation_key(4244)) HRESULT DialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(4245)) _variant_t DialogSheet::GetDefaultButton ( );
__declspec(implementation_key(4246)) void DialogSheet::PutDefaultButton ( const _variant_t & _arg1 );
__declspec(implementation_key(4247)) DialogFramePtr DialogSheet::GetDialogFrame ( );
__declspec(implementation_key(4248)) IDispatchPtr DialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(4249)) _variant_t DialogSheet::GetFocus ( );
__declspec(implementation_key(4250)) void DialogSheet::PutFocus ( const _variant_t & _arg1 );
__declspec(implementation_key(4251)) VARIANT_BOOL DialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(4252)) VARIANT_BOOL DialogSheet::Show ( );
__declspec(implementation_key(4253)) _ApplicationPtr DialogSheets::GetApplication ( );
__declspec(implementation_key(4254)) enum XlCreator DialogSheets::GetCreator ( );
__declspec(implementation_key(4255)) IDispatchPtr DialogSheets::GetParent ( );
__declspec(implementation_key(4256)) DialogSheetPtr DialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(4257)) HRESULT DialogSheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4258)) long DialogSheets::GetCount ( );
__declspec(implementation_key(4259)) HRESULT DialogSheets::Delete ( );
__declspec(implementation_key(4260)) IDispatchPtr DialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4261)) HRESULT DialogSheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4262)) IUnknownPtr DialogSheets::Get_NewEnum ( );
__declspec(implementation_key(4263)) HRESULT DialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4264)) HRESULT DialogSheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4265)) HRESULT DialogSheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(4266)) HPageBreaksPtr DialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(4267)) VPageBreaksPtr DialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(4268)) _variant_t DialogSheets::GetVisible ( );
__declspec(implementation_key(4269)) void DialogSheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(4270)) IDispatchPtr DialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4271)) HRESULT DialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4272)) _ApplicationPtr Worksheets::GetApplication ( );
__declspec(implementation_key(4273)) enum XlCreator Worksheets::GetCreator ( );
__declspec(implementation_key(4274)) IDispatchPtr Worksheets::GetParent ( );
__declspec(implementation_key(4275)) IDispatchPtr Worksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type );
__declspec(implementation_key(4276)) HRESULT Worksheets::Copy ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4277)) long Worksheets::GetCount ( );
__declspec(implementation_key(4278)) HRESULT Worksheets::Delete ( );
__declspec(implementation_key(4279)) HRESULT Worksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type );
__declspec(implementation_key(4280)) IDispatchPtr Worksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4281)) HRESULT Worksheets::Move ( const _variant_t & Before, const _variant_t & After );
__declspec(implementation_key(4282)) IUnknownPtr Worksheets::Get_NewEnum ( );
__declspec(implementation_key(4283)) HRESULT Worksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(4284)) HRESULT Worksheets::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(4285)) HRESULT Worksheets::Select ( const _variant_t & Replace );
__declspec(implementation_key(4286)) HPageBreaksPtr Worksheets::GetHPageBreaks ( );
__declspec(implementation_key(4287)) VPageBreaksPtr Worksheets::GetVPageBreaks ( );
__declspec(implementation_key(4288)) _variant_t Worksheets::GetVisible ( );
__declspec(implementation_key(4289)) void Worksheets::PutVisible ( const _variant_t & _arg1 );
__declspec(implementation_key(4290)) IDispatchPtr Worksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4291)) HRESULT Worksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(4292)) _ApplicationPtr PageSetup::GetApplication ( );
__declspec(implementation_key(4293)) enum XlCreator PageSetup::GetCreator ( );
__declspec(implementation_key(4294)) IDispatchPtr PageSetup::GetParent ( );
__declspec(implementation_key(4295)) VARIANT_BOOL PageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(4296)) void PageSetup::PutBlackAndWhite ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4297)) double PageSetup::GetBottomMargin ( );
__declspec(implementation_key(4298)) void PageSetup::PutBottomMargin ( double _arg1 );
__declspec(implementation_key(4299)) _bstr_t PageSetup::GetCenterFooter ( );
__declspec(implementation_key(4300)) void PageSetup::PutCenterFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4301)) _bstr_t PageSetup::GetCenterHeader ( );
__declspec(implementation_key(4302)) void PageSetup::PutCenterHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4303)) VARIANT_BOOL PageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(4304)) void PageSetup::PutCenterHorizontally ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4305)) VARIANT_BOOL PageSetup::GetCenterVertically ( );
__declspec(implementation_key(4306)) void PageSetup::PutCenterVertically ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4307)) enum XlObjectSize PageSetup::GetChartSize ( );
__declspec(implementation_key(4308)) void PageSetup::PutChartSize ( enum XlObjectSize _arg1 );
__declspec(implementation_key(4309)) VARIANT_BOOL PageSetup::GetDraft ( );
__declspec(implementation_key(4310)) void PageSetup::PutDraft ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4311)) long PageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(4312)) void PageSetup::PutFirstPageNumber ( long _arg1 );
__declspec(implementation_key(4313)) _variant_t PageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(4314)) void PageSetup::PutFitToPagesTall ( const _variant_t & _arg1 );
__declspec(implementation_key(4315)) _variant_t PageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(4316)) void PageSetup::PutFitToPagesWide ( const _variant_t & _arg1 );
__declspec(implementation_key(4317)) double PageSetup::GetFooterMargin ( );
__declspec(implementation_key(4318)) void PageSetup::PutFooterMargin ( double _arg1 );
__declspec(implementation_key(4319)) double PageSetup::GetHeaderMargin ( );
__declspec(implementation_key(4320)) void PageSetup::PutHeaderMargin ( double _arg1 );
__declspec(implementation_key(4321)) _bstr_t PageSetup::GetLeftFooter ( );
__declspec(implementation_key(4322)) void PageSetup::PutLeftFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4323)) _bstr_t PageSetup::GetLeftHeader ( );
__declspec(implementation_key(4324)) void PageSetup::PutLeftHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4325)) double PageSetup::GetLeftMargin ( );
__declspec(implementation_key(4326)) void PageSetup::PutLeftMargin ( double _arg1 );
__declspec(implementation_key(4327)) enum XlOrder PageSetup::GetOrder ( );
__declspec(implementation_key(4328)) void PageSetup::PutOrder ( enum XlOrder _arg1 );
__declspec(implementation_key(4329)) enum XlPageOrientation PageSetup::GetOrientation ( );
__declspec(implementation_key(4330)) void PageSetup::PutOrientation ( enum XlPageOrientation _arg1 );
__declspec(implementation_key(4331)) enum XlPaperSize PageSetup::GetPaperSize ( );
__declspec(implementation_key(4332)) void PageSetup::PutPaperSize ( enum XlPaperSize _arg1 );
__declspec(implementation_key(4333)) _bstr_t PageSetup::GetPrintArea ( );
__declspec(implementation_key(4334)) void PageSetup::PutPrintArea ( _bstr_t _arg1 );
__declspec(implementation_key(4335)) VARIANT_BOOL PageSetup::GetPrintGridlines ( );
__declspec(implementation_key(4336)) void PageSetup::PutPrintGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4337)) VARIANT_BOOL PageSetup::GetPrintHeadings ( );
__declspec(implementation_key(4338)) void PageSetup::PutPrintHeadings ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4339)) VARIANT_BOOL PageSetup::GetPrintNotes ( );
__declspec(implementation_key(4340)) void PageSetup::PutPrintNotes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4341)) _variant_t PageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(4342)) void PageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(4343)) _bstr_t PageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(4344)) void PageSetup::PutPrintTitleColumns ( _bstr_t _arg1 );
__declspec(implementation_key(4345)) _bstr_t PageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(4346)) void PageSetup::PutPrintTitleRows ( _bstr_t _arg1 );
__declspec(implementation_key(4347)) _bstr_t PageSetup::GetRightFooter ( );
__declspec(implementation_key(4348)) void PageSetup::PutRightFooter ( _bstr_t _arg1 );
__declspec(implementation_key(4349)) _bstr_t PageSetup::GetRightHeader ( );
__declspec(implementation_key(4350)) void PageSetup::PutRightHeader ( _bstr_t _arg1 );
__declspec(implementation_key(4351)) double PageSetup::GetRightMargin ( );
__declspec(implementation_key(4352)) void PageSetup::PutRightMargin ( double _arg1 );
__declspec(implementation_key(4353)) double PageSetup::GetTopMargin ( );
__declspec(implementation_key(4354)) void PageSetup::PutTopMargin ( double _arg1 );
__declspec(implementation_key(4355)) _variant_t PageSetup::GetZoom ( );
__declspec(implementation_key(4356)) void PageSetup::PutZoom ( const _variant_t & _arg1 );
__declspec(implementation_key(4357)) enum XlPrintLocation PageSetup::GetPrintComments ( );
__declspec(implementation_key(4358)) void PageSetup::PutPrintComments ( enum XlPrintLocation _arg1 );
__declspec(implementation_key(4359)) enum XlPrintErrors PageSetup::GetPrintErrors ( );
__declspec(implementation_key(4360)) void PageSetup::PutPrintErrors ( enum XlPrintErrors _arg1 );
__declspec(implementation_key(4361)) GraphicPtr PageSetup::GetCenterHeaderPicture ( );
__declspec(implementation_key(4362)) GraphicPtr PageSetup::GetCenterFooterPicture ( );
__declspec(implementation_key(4363)) GraphicPtr PageSetup::GetLeftHeaderPicture ( );
__declspec(implementation_key(4364)) GraphicPtr PageSetup::GetLeftFooterPicture ( );
__declspec(implementation_key(4365)) GraphicPtr PageSetup::GetRightHeaderPicture ( );
__declspec(implementation_key(4366)) GraphicPtr PageSetup::GetRightFooterPicture ( );
__declspec(implementation_key(4367)) _ApplicationPtr Names::GetApplication ( );
__declspec(implementation_key(4368)) enum XlCreator Names::GetCreator ( );
__declspec(implementation_key(4369)) IDispatchPtr Names::GetParent ( );
__declspec(implementation_key(4370)) NamePtr Names::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(4371)) NamePtr Names::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(4372)) NamePtr Names::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo );
__declspec(implementation_key(4373)) long Names::GetCount ( );
__declspec(implementation_key(4374)) IUnknownPtr Names::Get_NewEnum ( );
__declspec(implementation_key(4375)) _ApplicationPtr Name::GetApplication ( );
__declspec(implementation_key(4376)) enum XlCreator Name::GetCreator ( );
__declspec(implementation_key(4377)) IDispatchPtr Name::GetParent ( );
__declspec(implementation_key(4378)) _bstr_t Name::Get_Default ( );
__declspec(implementation_key(4379)) long Name::GetIndex ( );
__declspec(implementation_key(4380)) _bstr_t Name::GetCategory ( );
__declspec(implementation_key(4381)) void Name::PutCategory ( _bstr_t _arg1 );
__declspec(implementation_key(4382)) _bstr_t Name::GetCategoryLocal ( );
__declspec(implementation_key(4383)) void Name::PutCategoryLocal ( _bstr_t _arg1 );
__declspec(implementation_key(4384)) HRESULT Name::Delete ( );
__declspec(implementation_key(4385)) enum XlXLMMacroType Name::GetMacroType ( );
__declspec(implementation_key(4386)) void Name::PutMacroType ( enum XlXLMMacroType _arg1 );
__declspec(implementation_key(4387)) _bstr_t Name::GetName ( );
__declspec(implementation_key(4388)) void Name::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4389)) _variant_t Name::GetRefersTo ( );
__declspec(implementation_key(4390)) void Name::PutRefersTo ( const _variant_t & _arg1 );
__declspec(implementation_key(4391)) _bstr_t Name::GetShortcutKey ( );
__declspec(implementation_key(4392)) void Name::PutShortcutKey ( _bstr_t _arg1 );
__declspec(implementation_key(4393)) _bstr_t Name::GetValue ( );
__declspec(implementation_key(4394)) void Name::PutValue ( _bstr_t _arg1 );
__declspec(implementation_key(4395)) VARIANT_BOOL Name::GetVisible ( );
__declspec(implementation_key(4396)) void Name::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4397)) _bstr_t Name::GetNameLocal ( );
__declspec(implementation_key(4398)) void Name::PutNameLocal ( _bstr_t _arg1 );
__declspec(implementation_key(4399)) _variant_t Name::GetRefersToLocal ( );
__declspec(implementation_key(4400)) void Name::PutRefersToLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(4401)) _variant_t Name::GetRefersToR1C1 ( );
__declspec(implementation_key(4402)) void Name::PutRefersToR1C1 ( const _variant_t & _arg1 );
__declspec(implementation_key(4403)) _variant_t Name::GetRefersToR1C1Local ( );
__declspec(implementation_key(4404)) void Name::PutRefersToR1C1Local ( const _variant_t & _arg1 );
__declspec(implementation_key(4405)) RangePtr Name::GetRefersToRange ( );
__declspec(implementation_key(4406)) _ApplicationPtr ChartObject::GetApplication ( );
__declspec(implementation_key(4407)) enum XlCreator ChartObject::GetCreator ( );
__declspec(implementation_key(4408)) IDispatchPtr ChartObject::GetParent ( );
__declspec(implementation_key(4409)) RangePtr ChartObject::GetBottomRightCell ( );
__declspec(implementation_key(4410)) _variant_t ChartObject::BringToFront ( );
__declspec(implementation_key(4411)) _variant_t ChartObject::Copy ( );
__declspec(implementation_key(4412)) _variant_t ChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4413)) _variant_t ChartObject::Cut ( );
__declspec(implementation_key(4414)) _variant_t ChartObject::Delete ( );
__declspec(implementation_key(4415)) IDispatchPtr ChartObject::Duplicate ( );
__declspec(implementation_key(4416)) VARIANT_BOOL ChartObject::GetEnabled ( );
__declspec(implementation_key(4417)) void ChartObject::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4418)) double ChartObject::GetHeight ( );
__declspec(implementation_key(4419)) void ChartObject::PutHeight ( double _arg1 );
__declspec(implementation_key(4420)) long ChartObject::GetIndex ( );
__declspec(implementation_key(4421)) double ChartObject::GetLeft ( );
__declspec(implementation_key(4422)) void ChartObject::PutLeft ( double _arg1 );
__declspec(implementation_key(4423)) VARIANT_BOOL ChartObject::GetLocked ( );
__declspec(implementation_key(4424)) void ChartObject::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4425)) _bstr_t ChartObject::GetName ( );
__declspec(implementation_key(4426)) void ChartObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4427)) _bstr_t ChartObject::GetOnAction ( );
__declspec(implementation_key(4428)) void ChartObject::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(4429)) _variant_t ChartObject::GetPlacement ( );
__declspec(implementation_key(4430)) void ChartObject::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(4431)) VARIANT_BOOL ChartObject::GetPrintObject ( );
__declspec(implementation_key(4432)) void ChartObject::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4433)) _variant_t ChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(4434)) _variant_t ChartObject::SendToBack ( );
__declspec(implementation_key(4435)) double ChartObject::GetTop ( );
__declspec(implementation_key(4436)) void ChartObject::PutTop ( double _arg1 );
__declspec(implementation_key(4437)) RangePtr ChartObject::GetTopLeftCell ( );
__declspec(implementation_key(4438)) VARIANT_BOOL ChartObject::GetVisible ( );
__declspec(implementation_key(4439)) void ChartObject::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4440)) double ChartObject::GetWidth ( );
__declspec(implementation_key(4441)) void ChartObject::PutWidth ( double _arg1 );
__declspec(implementation_key(4442)) long ChartObject::GetZOrder ( );
__declspec(implementation_key(4443)) ShapeRangePtr ChartObject::GetShapeRange ( );
__declspec(implementation_key(4444)) _variant_t ChartObject::Activate ( );
__declspec(implementation_key(4445)) _ChartPtr ChartObject::GetChart ( );
__declspec(implementation_key(4446)) VARIANT_BOOL ChartObject::GetProtectChartObject ( );
__declspec(implementation_key(4447)) void ChartObject::PutProtectChartObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4448)) VARIANT_BOOL ChartObject::GetRoundedCorners ( );
__declspec(implementation_key(4449)) void ChartObject::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4450)) BorderPtr ChartObject::GetBorder ( );
__declspec(implementation_key(4451)) InteriorPtr ChartObject::GetInterior ( );
__declspec(implementation_key(4452)) VARIANT_BOOL ChartObject::GetShadow ( );
__declspec(implementation_key(4453)) void ChartObject::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4454)) _ApplicationPtr ChartObjects::GetApplication ( );
__declspec(implementation_key(4455)) enum XlCreator ChartObjects::GetCreator ( );
__declspec(implementation_key(4456)) IDispatchPtr ChartObjects::GetParent ( );
__declspec(implementation_key(4457)) _variant_t ChartObjects::BringToFront ( );
__declspec(implementation_key(4458)) _variant_t ChartObjects::Copy ( );
__declspec(implementation_key(4459)) _variant_t ChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(4460)) _variant_t ChartObjects::Cut ( );
__declspec(implementation_key(4461)) _variant_t ChartObjects::Delete ( );
__declspec(implementation_key(4462)) IDispatchPtr ChartObjects::Duplicate ( );
__declspec(implementation_key(4463)) VARIANT_BOOL ChartObjects::GetEnabled ( );
__declspec(implementation_key(4464)) void ChartObjects::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4465)) double ChartObjects::GetHeight ( );
__declspec(implementation_key(4466)) void ChartObjects::PutHeight ( double _arg1 );
__declspec(implementation_key(4467)) double ChartObjects::GetLeft ( );
__declspec(implementation_key(4468)) void ChartObjects::PutLeft ( double _arg1 );
__declspec(implementation_key(4469)) VARIANT_BOOL ChartObjects::GetLocked ( );
__declspec(implementation_key(4470)) void ChartObjects::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4471)) _bstr_t ChartObjects::GetOnAction ( );
__declspec(implementation_key(4472)) void ChartObjects::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(4473)) _variant_t ChartObjects::GetPlacement ( );
__declspec(implementation_key(4474)) void ChartObjects::PutPlacement ( const _variant_t & _arg1 );
__declspec(implementation_key(4475)) VARIANT_BOOL ChartObjects::GetPrintObject ( );
__declspec(implementation_key(4476)) void ChartObjects::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4477)) _variant_t ChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(4478)) _variant_t ChartObjects::SendToBack ( );
__declspec(implementation_key(4479)) double ChartObjects::GetTop ( );
__declspec(implementation_key(4480)) void ChartObjects::PutTop ( double _arg1 );
__declspec(implementation_key(4481)) VARIANT_BOOL ChartObjects::GetVisible ( );
__declspec(implementation_key(4482)) void ChartObjects::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4483)) double ChartObjects::GetWidth ( );
__declspec(implementation_key(4484)) void ChartObjects::PutWidth ( double _arg1 );
__declspec(implementation_key(4485)) ShapeRangePtr ChartObjects::GetShapeRange ( );
__declspec(implementation_key(4486)) VARIANT_BOOL ChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(4487)) void ChartObjects::PutRoundedCorners ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4488)) BorderPtr ChartObjects::GetBorder ( );
__declspec(implementation_key(4489)) InteriorPtr ChartObjects::GetInterior ( );
__declspec(implementation_key(4490)) VARIANT_BOOL ChartObjects::GetShadow ( );
__declspec(implementation_key(4491)) void ChartObjects::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4492)) ChartObjectPtr ChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(4493)) long ChartObjects::GetCount ( );
__declspec(implementation_key(4494)) GroupObjectPtr ChartObjects::Group ( );
__declspec(implementation_key(4495)) IDispatchPtr ChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(4496)) IUnknownPtr ChartObjects::_NewEnum ( );
__declspec(implementation_key(4497)) _ApplicationPtr Mailer::GetApplication ( );
__declspec(implementation_key(4498)) enum XlCreator Mailer::GetCreator ( );
__declspec(implementation_key(4499)) IDispatchPtr Mailer::GetParent ( );
__declspec(implementation_key(4500)) _variant_t Mailer::GetBCCRecipients ( );
__declspec(implementation_key(4501)) void Mailer::PutBCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4502)) _variant_t Mailer::GetCCRecipients ( );
__declspec(implementation_key(4503)) void Mailer::PutCCRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4504)) _variant_t Mailer::GetEnclosures ( );
__declspec(implementation_key(4505)) void Mailer::PutEnclosures ( const _variant_t & _arg1 );
__declspec(implementation_key(4506)) VARIANT_BOOL Mailer::GetReceived ( );
__declspec(implementation_key(4507)) DATE Mailer::GetSendDateTime ( );
__declspec(implementation_key(4508)) _bstr_t Mailer::GetSender ( );
__declspec(implementation_key(4509)) _bstr_t Mailer::GetSubject ( );
__declspec(implementation_key(4510)) void Mailer::PutSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4511)) _variant_t Mailer::GetToRecipients ( );
__declspec(implementation_key(4512)) void Mailer::PutToRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4513)) _variant_t Mailer::GetWhichAddress ( );
__declspec(implementation_key(4514)) void Mailer::PutWhichAddress ( const _variant_t & _arg1 );
__declspec(implementation_key(4515)) _ApplicationPtr CustomViews::GetApplication ( );
__declspec(implementation_key(4516)) enum XlCreator CustomViews::GetCreator ( );
__declspec(implementation_key(4517)) IDispatchPtr CustomViews::GetParent ( );
__declspec(implementation_key(4518)) long CustomViews::GetCount ( );
__declspec(implementation_key(4519)) CustomViewPtr CustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(4520)) CustomViewPtr CustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(4521)) CustomViewPtr CustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(4522)) IUnknownPtr CustomViews::Get_NewEnum ( );
__declspec(implementation_key(4523)) _ApplicationPtr CustomView::GetApplication ( );
__declspec(implementation_key(4524)) enum XlCreator CustomView::GetCreator ( );
__declspec(implementation_key(4525)) IDispatchPtr CustomView::GetParent ( );
__declspec(implementation_key(4526)) _bstr_t CustomView::GetName ( );
__declspec(implementation_key(4527)) VARIANT_BOOL CustomView::GetPrintSettings ( );
__declspec(implementation_key(4528)) VARIANT_BOOL CustomView::GetRowColSettings ( );
__declspec(implementation_key(4529)) HRESULT CustomView::Show ( );
__declspec(implementation_key(4530)) HRESULT CustomView::Delete ( );
__declspec(implementation_key(4531)) _ApplicationPtr FormatConditions::GetApplication ( );
__declspec(implementation_key(4532)) enum XlCreator FormatConditions::GetCreator ( );
__declspec(implementation_key(4533)) IDispatchPtr FormatConditions::GetParent ( );
__declspec(implementation_key(4534)) long FormatConditions::GetCount ( );
__declspec(implementation_key(4535)) FormatConditionPtr FormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(4536)) FormatConditionPtr FormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4537)) FormatConditionPtr FormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4538)) IUnknownPtr FormatConditions::Get_NewEnum ( );
__declspec(implementation_key(4539)) HRESULT FormatConditions::Delete ( );
__declspec(implementation_key(4540)) _ApplicationPtr FormatCondition::GetApplication ( );
__declspec(implementation_key(4541)) enum XlCreator FormatCondition::GetCreator ( );
__declspec(implementation_key(4542)) IDispatchPtr FormatCondition::GetParent ( );
__declspec(implementation_key(4543)) HRESULT FormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4544)) long FormatCondition::GetType ( );
__declspec(implementation_key(4545)) long FormatCondition::GetOperator ( );
__declspec(implementation_key(4546)) _bstr_t FormatCondition::GetFormula1 ( );
__declspec(implementation_key(4547)) _bstr_t FormatCondition::GetFormula2 ( );
__declspec(implementation_key(4548)) InteriorPtr FormatCondition::GetInterior ( );
__declspec(implementation_key(4549)) BordersPtr FormatCondition::GetBorders ( );
__declspec(implementation_key(4550)) FontPtr FormatCondition::GetFont ( );
__declspec(implementation_key(4551)) HRESULT FormatCondition::Delete ( );
__declspec(implementation_key(4552)) _ApplicationPtr Comments::GetApplication ( );
__declspec(implementation_key(4553)) enum XlCreator Comments::GetCreator ( );
__declspec(implementation_key(4554)) IDispatchPtr Comments::GetParent ( );
__declspec(implementation_key(4555)) long Comments::GetCount ( );
__declspec(implementation_key(4556)) CommentPtr Comments::Item ( long Index );
__declspec(implementation_key(4557)) CommentPtr Comments::Get_Default ( long Index );
__declspec(implementation_key(4558)) IUnknownPtr Comments::Get_NewEnum ( );
__declspec(implementation_key(4559)) _ApplicationPtr Comment::GetApplication ( );
__declspec(implementation_key(4560)) enum XlCreator Comment::GetCreator ( );
__declspec(implementation_key(4561)) IDispatchPtr Comment::GetParent ( );
__declspec(implementation_key(4562)) _bstr_t Comment::GetAuthor ( );
__declspec(implementation_key(4563)) ShapePtr Comment::GetShape ( );
__declspec(implementation_key(4564)) VARIANT_BOOL Comment::GetVisible ( );
__declspec(implementation_key(4565)) void Comment::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4566)) _bstr_t Comment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(4567)) HRESULT Comment::Delete ( );
__declspec(implementation_key(4568)) CommentPtr Comment::Next ( );
__declspec(implementation_key(4569)) CommentPtr Comment::Previous ( );
__declspec(implementation_key(4570)) HRESULT RefreshEvents::BeforeRefresh ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(4571)) HRESULT RefreshEvents::AfterRefresh ( VARIANT_BOOL Success );
__declspec(implementation_key(4572)) _ApplicationPtr _QueryTable::GetApplication ( );
__declspec(implementation_key(4573)) enum XlCreator _QueryTable::GetCreator ( );
__declspec(implementation_key(4574)) IDispatchPtr _QueryTable::GetParent ( );
__declspec(implementation_key(4575)) _bstr_t _QueryTable::GetName ( );
__declspec(implementation_key(4576)) void _QueryTable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4577)) VARIANT_BOOL _QueryTable::GetFieldNames ( );
__declspec(implementation_key(4578)) void _QueryTable::PutFieldNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4579)) VARIANT_BOOL _QueryTable::GetRowNumbers ( );
__declspec(implementation_key(4580)) void _QueryTable::PutRowNumbers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4581)) VARIANT_BOOL _QueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(4582)) void _QueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4583)) VARIANT_BOOL _QueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(4584)) void _QueryTable::PutHasAutoFormat ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4585)) VARIANT_BOOL _QueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(4586)) void _QueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4587)) VARIANT_BOOL _QueryTable::GetRefreshing ( );
__declspec(implementation_key(4588)) VARIANT_BOOL _QueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(4589)) VARIANT_BOOL _QueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(4590)) void _QueryTable::PutBackgroundQuery ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4591)) HRESULT _QueryTable::CancelRefresh ( );
__declspec(implementation_key(4592)) enum XlCellInsertionMode _QueryTable::GetRefreshStyle ( );
__declspec(implementation_key(4593)) void _QueryTable::PutRefreshStyle ( enum XlCellInsertionMode _arg1 );
__declspec(implementation_key(4594)) VARIANT_BOOL _QueryTable::GetEnableRefresh ( );
__declspec(implementation_key(4595)) void _QueryTable::PutEnableRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4596)) VARIANT_BOOL _QueryTable::GetSavePassword ( );
__declspec(implementation_key(4597)) void _QueryTable::PutSavePassword ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4598)) RangePtr _QueryTable::GetDestination ( );
__declspec(implementation_key(4599)) _variant_t _QueryTable::GetConnection ( );
__declspec(implementation_key(4600)) void _QueryTable::PutConnection ( const _variant_t & _arg1 );
__declspec(implementation_key(4601)) _variant_t _QueryTable::GetSql ( );
__declspec(implementation_key(4602)) void _QueryTable::PutSql ( const _variant_t & _arg1 );
__declspec(implementation_key(4603)) _bstr_t _QueryTable::GetPostText ( );
__declspec(implementation_key(4604)) void _QueryTable::PutPostText ( _bstr_t _arg1 );
__declspec(implementation_key(4605)) RangePtr _QueryTable::GetResultRange ( );
__declspec(implementation_key(4606)) HRESULT _QueryTable::Delete ( );
__declspec(implementation_key(4607)) VARIANT_BOOL _QueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(4608)) ParametersPtr _QueryTable::GetParameters ( );
__declspec(implementation_key(4609)) IDispatchPtr _QueryTable::GetRecordset ( );
__declspec(implementation_key(4610)) void _QueryTable::PutRefRecordset ( IDispatch * _arg1 );
__declspec(implementation_key(4611)) VARIANT_BOOL _QueryTable::GetSaveData ( );
__declspec(implementation_key(4612)) void _QueryTable::PutSaveData ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4613)) VARIANT_BOOL _QueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(4614)) void _QueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4615)) VARIANT_BOOL _QueryTable::GetEnableEditing ( );
__declspec(implementation_key(4616)) void _QueryTable::PutEnableEditing ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4617)) long _QueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(4618)) void _QueryTable::PutTextFilePlatform ( long _arg1 );
__declspec(implementation_key(4619)) long _QueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(4620)) void _QueryTable::PutTextFileStartRow ( long _arg1 );
__declspec(implementation_key(4621)) enum XlTextParsingType _QueryTable::GetTextFileParseType ( );
__declspec(implementation_key(4622)) void _QueryTable::PutTextFileParseType ( enum XlTextParsingType _arg1 );
__declspec(implementation_key(4623)) enum XlTextQualifier _QueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(4624)) void _QueryTable::PutTextFileTextQualifier ( enum XlTextQualifier _arg1 );
__declspec(implementation_key(4625)) VARIANT_BOOL _QueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(4626)) void _QueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4627)) VARIANT_BOOL _QueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(4628)) void _QueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4629)) VARIANT_BOOL _QueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(4630)) void _QueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4631)) VARIANT_BOOL _QueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(4632)) void _QueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4633)) VARIANT_BOOL _QueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(4634)) void _QueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4635)) _bstr_t _QueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(4636)) void _QueryTable::PutTextFileOtherDelimiter ( _bstr_t _arg1 );
__declspec(implementation_key(4637)) _variant_t _QueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(4638)) void _QueryTable::PutTextFileColumnDataTypes ( const _variant_t & _arg1 );
__declspec(implementation_key(4639)) _variant_t _QueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(4640)) void _QueryTable::PutTextFileFixedColumnWidths ( const _variant_t & _arg1 );
__declspec(implementation_key(4641)) VARIANT_BOOL _QueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(4642)) void _QueryTable::PutPreserveColumnInfo ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4643)) VARIANT_BOOL _QueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(4644)) void _QueryTable::PutPreserveFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4645)) VARIANT_BOOL _QueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(4646)) void _QueryTable::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4647)) _variant_t _QueryTable::GetCommandText ( );
__declspec(implementation_key(4648)) void _QueryTable::PutCommandText ( const _variant_t & _arg1 );
__declspec(implementation_key(4649)) enum XlCmdType _QueryTable::GetCommandType ( );
__declspec(implementation_key(4650)) void _QueryTable::PutCommandType ( enum XlCmdType _arg1 );
__declspec(implementation_key(4651)) VARIANT_BOOL _QueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(4652)) void _QueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4653)) enum XlQueryType _QueryTable::GetQueryType ( );
__declspec(implementation_key(4654)) VARIANT_BOOL _QueryTable::GetMaintainConnection ( );
__declspec(implementation_key(4655)) void _QueryTable::PutMaintainConnection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4656)) _bstr_t _QueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(4657)) void _QueryTable::PutTextFileDecimalSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(4658)) _bstr_t _QueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(4659)) void _QueryTable::PutTextFileThousandsSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(4660)) long _QueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(4661)) void _QueryTable::PutRefreshPeriod ( long _arg1 );
__declspec(implementation_key(4662)) HRESULT _QueryTable::ResetTimer ( );
__declspec(implementation_key(4663)) enum XlWebSelectionType _QueryTable::GetWebSelectionType ( );
__declspec(implementation_key(4664)) void _QueryTable::PutWebSelectionType ( enum XlWebSelectionType _arg1 );
__declspec(implementation_key(4665)) enum XlWebFormatting _QueryTable::GetWebFormatting ( );
__declspec(implementation_key(4666)) void _QueryTable::PutWebFormatting ( enum XlWebFormatting _arg1 );
__declspec(implementation_key(4667)) _bstr_t _QueryTable::GetWebTables ( );
__declspec(implementation_key(4668)) void _QueryTable::PutWebTables ( _bstr_t _arg1 );
__declspec(implementation_key(4669)) VARIANT_BOOL _QueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(4670)) void _QueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4671)) VARIANT_BOOL _QueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(4672)) void _QueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4673)) VARIANT_BOOL _QueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(4674)) void _QueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4675)) VARIANT_BOOL _QueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(4676)) void _QueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4677)) VARIANT_BOOL _QueryTable::GetWebDisableRedirections ( );
__declspec(implementation_key(4678)) void _QueryTable::PutWebDisableRedirections ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4679)) _variant_t _QueryTable::GetEditWebPage ( );
__declspec(implementation_key(4680)) void _QueryTable::PutEditWebPage ( const _variant_t & _arg1 );
__declspec(implementation_key(4681)) _bstr_t _QueryTable::GetSourceConnectionFile ( );
__declspec(implementation_key(4682)) void _QueryTable::PutSourceConnectionFile ( _bstr_t _arg1 );
__declspec(implementation_key(4683)) _bstr_t _QueryTable::GetSourceDataFile ( );
__declspec(implementation_key(4684)) void _QueryTable::PutSourceDataFile ( _bstr_t _arg1 );
__declspec(implementation_key(4685)) enum XlRobustConnect _QueryTable::GetRobustConnect ( );
__declspec(implementation_key(4686)) void _QueryTable::PutRobustConnect ( enum XlRobustConnect _arg1 );
__declspec(implementation_key(4687)) VARIANT_BOOL _QueryTable::GetTextFileTrailingMinusNumbers ( );
__declspec(implementation_key(4688)) void _QueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4689)) HRESULT _QueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(4690)) ListObjectPtr _QueryTable::GetListObject ( );
__declspec(implementation_key(4691)) enum XlTextVisualLayoutType _QueryTable::GetTextFileVisualLayout ( );
__declspec(implementation_key(4692)) void _QueryTable::PutTextFileVisualLayout ( enum XlTextVisualLayoutType _arg1 );
__declspec(implementation_key(4693)) _ApplicationPtr QueryTables::GetApplication ( );
__declspec(implementation_key(4694)) enum XlCreator QueryTables::GetCreator ( );
__declspec(implementation_key(4695)) IDispatchPtr QueryTables::GetParent ( );
__declspec(implementation_key(4696)) long QueryTables::GetCount ( );
__declspec(implementation_key(4697)) _QueryTablePtr QueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(4698)) _QueryTablePtr QueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(4699)) _QueryTablePtr QueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4700)) IUnknownPtr QueryTables::_NewEnum ( );
__declspec(implementation_key(4701)) _ApplicationPtr Parameter::GetApplication ( );
__declspec(implementation_key(4702)) enum XlCreator Parameter::GetCreator ( );
__declspec(implementation_key(4703)) IDispatchPtr Parameter::GetParent ( );
__declspec(implementation_key(4704)) enum XlParameterDataType Parameter::GetDataType ( );
__declspec(implementation_key(4705)) void Parameter::PutDataType ( enum XlParameterDataType _arg1 );
__declspec(implementation_key(4706)) enum XlParameterType Parameter::GetType ( );
__declspec(implementation_key(4707)) _bstr_t Parameter::GetPromptString ( );
__declspec(implementation_key(4708)) _variant_t Parameter::GetValue ( );
__declspec(implementation_key(4709)) RangePtr Parameter::GetSourceRange ( );
__declspec(implementation_key(4710)) _bstr_t Parameter::GetName ( );
__declspec(implementation_key(4711)) void Parameter::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4712)) HRESULT Parameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(4713)) VARIANT_BOOL Parameter::GetRefreshOnChange ( );
__declspec(implementation_key(4714)) void Parameter::PutRefreshOnChange ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4715)) _ApplicationPtr Parameters::GetApplication ( );
__declspec(implementation_key(4716)) enum XlCreator Parameters::GetCreator ( );
__declspec(implementation_key(4717)) IDispatchPtr Parameters::GetParent ( );
__declspec(implementation_key(4718)) ParameterPtr Parameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(4719)) long Parameters::GetCount ( );
__declspec(implementation_key(4720)) ParameterPtr Parameters::Item ( const _variant_t & Index );
__declspec(implementation_key(4721)) ParameterPtr Parameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4722)) HRESULT Parameters::Delete ( );
__declspec(implementation_key(4723)) IUnknownPtr Parameters::_NewEnum ( );
__declspec(implementation_key(4724)) _ApplicationPtr ODBCError::GetApplication ( );
__declspec(implementation_key(4725)) enum XlCreator ODBCError::GetCreator ( );
__declspec(implementation_key(4726)) IDispatchPtr ODBCError::GetParent ( );
__declspec(implementation_key(4727)) _bstr_t ODBCError::GetSqlState ( );
__declspec(implementation_key(4728)) _bstr_t ODBCError::GetErrorString ( );
__declspec(implementation_key(4729)) _ApplicationPtr ODBCErrors::GetApplication ( );
__declspec(implementation_key(4730)) enum XlCreator ODBCErrors::GetCreator ( );
__declspec(implementation_key(4731)) IDispatchPtr ODBCErrors::GetParent ( );
__declspec(implementation_key(4732)) long ODBCErrors::GetCount ( );
__declspec(implementation_key(4733)) ODBCErrorPtr ODBCErrors::Item ( long Index );
__declspec(implementation_key(4734)) ODBCErrorPtr ODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(4735)) IUnknownPtr ODBCErrors::_NewEnum ( );
__declspec(implementation_key(4736)) _ApplicationPtr Validation::GetApplication ( );
__declspec(implementation_key(4737)) enum XlCreator Validation::GetCreator ( );
__declspec(implementation_key(4738)) IDispatchPtr Validation::GetParent ( );
__declspec(implementation_key(4739)) HRESULT Validation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4740)) long Validation::GetAlertStyle ( );
__declspec(implementation_key(4741)) VARIANT_BOOL Validation::GetIgnoreBlank ( );
__declspec(implementation_key(4742)) void Validation::PutIgnoreBlank ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4743)) long Validation::GetIMEMode ( );
__declspec(implementation_key(4744)) void Validation::PutIMEMode ( long _arg1 );
__declspec(implementation_key(4745)) VARIANT_BOOL Validation::GetInCellDropdown ( );
__declspec(implementation_key(4746)) void Validation::PutInCellDropdown ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4747)) HRESULT Validation::Delete ( );
__declspec(implementation_key(4748)) _bstr_t Validation::GetErrorMessage ( );
__declspec(implementation_key(4749)) void Validation::PutErrorMessage ( _bstr_t _arg1 );
__declspec(implementation_key(4750)) _bstr_t Validation::GetErrorTitle ( );
__declspec(implementation_key(4751)) void Validation::PutErrorTitle ( _bstr_t _arg1 );
__declspec(implementation_key(4752)) _bstr_t Validation::GetInputMessage ( );
__declspec(implementation_key(4753)) void Validation::PutInputMessage ( _bstr_t _arg1 );
__declspec(implementation_key(4754)) _bstr_t Validation::GetInputTitle ( );
__declspec(implementation_key(4755)) void Validation::PutInputTitle ( _bstr_t _arg1 );
__declspec(implementation_key(4756)) _bstr_t Validation::GetFormula1 ( );
__declspec(implementation_key(4757)) _bstr_t Validation::GetFormula2 ( );
__declspec(implementation_key(4758)) HRESULT Validation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(4759)) long Validation::GetOperator ( );
__declspec(implementation_key(4760)) VARIANT_BOOL Validation::GetShowError ( );
__declspec(implementation_key(4761)) void Validation::PutShowError ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4762)) VARIANT_BOOL Validation::GetShowInput ( );
__declspec(implementation_key(4763)) void Validation::PutShowInput ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4764)) long Validation::GetType ( );
__declspec(implementation_key(4765)) VARIANT_BOOL Validation::GetValue ( );
__declspec(implementation_key(4766)) _ApplicationPtr Hyperlinks::GetApplication ( );
__declspec(implementation_key(4767)) enum XlCreator Hyperlinks::GetCreator ( );
__declspec(implementation_key(4768)) IDispatchPtr Hyperlinks::GetParent ( );
__declspec(implementation_key(4769)) IDispatchPtr Hyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(4770)) long Hyperlinks::GetCount ( );
__declspec(implementation_key(4771)) HyperlinkPtr Hyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(4772)) HyperlinkPtr Hyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(4773)) IUnknownPtr Hyperlinks::Get_NewEnum ( );
__declspec(implementation_key(4774)) HRESULT Hyperlinks::Delete ( );
__declspec(implementation_key(4775)) _ApplicationPtr Hyperlink::GetApplication ( );
__declspec(implementation_key(4776)) enum XlCreator Hyperlink::GetCreator ( );
__declspec(implementation_key(4777)) IDispatchPtr Hyperlink::GetParent ( );
__declspec(implementation_key(4778)) _bstr_t Hyperlink::GetName ( );
__declspec(implementation_key(4779)) RangePtr Hyperlink::GetRange ( );
__declspec(implementation_key(4780)) ShapePtr Hyperlink::GetShape ( );
__declspec(implementation_key(4781)) _bstr_t Hyperlink::GetSubAddress ( );
__declspec(implementation_key(4782)) void Hyperlink::PutSubAddress ( _bstr_t _arg1 );
__declspec(implementation_key(4783)) _bstr_t Hyperlink::GetAddress ( );
__declspec(implementation_key(4784)) void Hyperlink::PutAddress ( _bstr_t _arg1 );
__declspec(implementation_key(4785)) long Hyperlink::GetType ( );
__declspec(implementation_key(4786)) HRESULT Hyperlink::AddToFavorites ( );
__declspec(implementation_key(4787)) HRESULT Hyperlink::Delete ( );
__declspec(implementation_key(4788)) HRESULT Hyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(4789)) _bstr_t Hyperlink::GetEmailSubject ( );
__declspec(implementation_key(4790)) void Hyperlink::PutEmailSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4791)) _bstr_t Hyperlink::GetScreenTip ( );
__declspec(implementation_key(4792)) void Hyperlink::PutScreenTip ( _bstr_t _arg1 );
__declspec(implementation_key(4793)) _bstr_t Hyperlink::GetTextToDisplay ( );
__declspec(implementation_key(4794)) void Hyperlink::PutTextToDisplay ( _bstr_t _arg1 );
__declspec(implementation_key(4795)) HRESULT Hyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(4796)) HRESULT IDocEvents::SelectionChange ( struct Range * Target );
__declspec(implementation_key(4797)) HRESULT IDocEvents::BeforeDoubleClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4798)) HRESULT IDocEvents::BeforeRightClick ( struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(4799)) HRESULT IDocEvents::Activate ( );
__declspec(implementation_key(4800)) HRESULT IDocEvents::Deactivate ( );
__declspec(implementation_key(4801)) HRESULT IDocEvents::Calculate ( );
__declspec(implementation_key(4802)) HRESULT IDocEvents::Change ( struct Range * Target );
__declspec(implementation_key(4803)) HRESULT IDocEvents::FollowHyperlink ( struct Hyperlink * Target );
__declspec(implementation_key(4804)) HRESULT IDocEvents::PivotTableUpdate ( struct PivotTable * Target );
__declspec(implementation_key(4805)) _ApplicationPtr AutoFilter::GetApplication ( );
__declspec(implementation_key(4806)) enum XlCreator AutoFilter::GetCreator ( );
__declspec(implementation_key(4807)) IDispatchPtr AutoFilter::GetParent ( );
__declspec(implementation_key(4808)) RangePtr AutoFilter::GetRange ( );
__declspec(implementation_key(4809)) FiltersPtr AutoFilter::GetFilters ( );
__declspec(implementation_key(4810)) _ApplicationPtr Filters::GetApplication ( );
__declspec(implementation_key(4811)) enum XlCreator Filters::GetCreator ( );
__declspec(implementation_key(4812)) IDispatchPtr Filters::GetParent ( );
__declspec(implementation_key(4813)) long Filters::GetCount ( );
__declspec(implementation_key(4814)) FilterPtr Filters::Get_Default ( long Index );
__declspec(implementation_key(4815)) FilterPtr Filters::GetItem ( long Index );
__declspec(implementation_key(4816)) IUnknownPtr Filters::Get_NewEnum ( );
__declspec(implementation_key(4817)) _ApplicationPtr Filter::GetApplication ( );
__declspec(implementation_key(4818)) enum XlCreator Filter::GetCreator ( );
__declspec(implementation_key(4819)) IDispatchPtr Filter::GetParent ( );
__declspec(implementation_key(4820)) VARIANT_BOOL Filter::GetOn ( );
__declspec(implementation_key(4821)) _variant_t Filter::GetCriteria1 ( );
__declspec(implementation_key(4822)) enum XlAutoFilterOperator Filter::GetOperator ( );
__declspec(implementation_key(4823)) _variant_t Filter::GetCriteria2 ( );
__declspec(implementation_key(4824)) _ApplicationPtr AutoCorrect::GetApplication ( );
__declspec(implementation_key(4825)) enum XlCreator AutoCorrect::GetCreator ( );
__declspec(implementation_key(4826)) IDispatchPtr AutoCorrect::GetParent ( );
__declspec(implementation_key(4827)) _variant_t AutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(4828)) VARIANT_BOOL AutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(4829)) void AutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4830)) _variant_t AutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(4831)) _variant_t AutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(4832)) void AutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & _arg2 );
__declspec(implementation_key(4833)) VARIANT_BOOL AutoCorrect::GetReplaceText ( );
__declspec(implementation_key(4834)) void AutoCorrect::PutReplaceText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4835)) VARIANT_BOOL AutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(4836)) void AutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4837)) VARIANT_BOOL AutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(4838)) void AutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4839)) VARIANT_BOOL AutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(4840)) void AutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4841)) VARIANT_BOOL AutoCorrect::GetDisplayAutoCorrectOptions ( );
__declspec(implementation_key(4842)) void AutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4843)) VARIANT_BOOL AutoCorrect::GetAutoExpandListRange ( );
__declspec(implementation_key(4844)) void AutoCorrect::PutAutoExpandListRange ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4845)) _ApplicationPtr Border::GetApplication ( );
__declspec(implementation_key(4846)) enum XlCreator Border::GetCreator ( );
__declspec(implementation_key(4847)) IDispatchPtr Border::GetParent ( );
__declspec(implementation_key(4848)) _variant_t Border::GetColor ( );
__declspec(implementation_key(4849)) void Border::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4850)) _variant_t Border::GetColorIndex ( );
__declspec(implementation_key(4851)) void Border::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4852)) _variant_t Border::GetLineStyle ( );
__declspec(implementation_key(4853)) void Border::PutLineStyle ( const _variant_t & _arg1 );
__declspec(implementation_key(4854)) _variant_t Border::GetWeight ( );
__declspec(implementation_key(4855)) void Border::PutWeight ( const _variant_t & _arg1 );
__declspec(implementation_key(4856)) _ApplicationPtr Interior::GetApplication ( );
__declspec(implementation_key(4857)) enum XlCreator Interior::GetCreator ( );
__declspec(implementation_key(4858)) IDispatchPtr Interior::GetParent ( );
__declspec(implementation_key(4859)) _variant_t Interior::GetColor ( );
__declspec(implementation_key(4860)) void Interior::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4861)) _variant_t Interior::GetColorIndex ( );
__declspec(implementation_key(4862)) void Interior::PutColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4863)) _variant_t Interior::GetInvertIfNegative ( );
__declspec(implementation_key(4864)) void Interior::PutInvertIfNegative ( const _variant_t & _arg1 );
__declspec(implementation_key(4865)) _variant_t Interior::GetPattern ( );
__declspec(implementation_key(4866)) void Interior::PutPattern ( const _variant_t & _arg1 );
__declspec(implementation_key(4867)) _variant_t Interior::GetPatternColor ( );
__declspec(implementation_key(4868)) void Interior::PutPatternColor ( const _variant_t & _arg1 );
__declspec(implementation_key(4869)) _variant_t Interior::GetPatternColorIndex ( );
__declspec(implementation_key(4870)) void Interior::PutPatternColorIndex ( const _variant_t & _arg1 );
__declspec(implementation_key(4871)) _ApplicationPtr ChartFillFormat::GetApplication ( );
__declspec(implementation_key(4872)) enum XlCreator ChartFillFormat::GetCreator ( );
__declspec(implementation_key(4873)) IDispatchPtr ChartFillFormat::GetParent ( );
__declspec(implementation_key(4874)) HRESULT ChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(4875)) HRESULT ChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(4876)) HRESULT ChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(4877)) HRESULT ChartFillFormat::Solid ( );
__declspec(implementation_key(4878)) HRESULT ChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(4879)) HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(4880)) HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(4881)) HRESULT ChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(4882)) ChartColorFormatPtr ChartFillFormat::GetBackColor ( );
__declspec(implementation_key(4883)) ChartColorFormatPtr ChartFillFormat::GetForeColor ( );
__declspec(implementation_key(4884)) enum Office::MsoGradientColorType ChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(4885)) float ChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(4886)) enum Office::MsoGradientStyle ChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(4887)) long ChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(4888)) enum Office::MsoPatternType ChartFillFormat::GetPattern ( );
__declspec(implementation_key(4889)) enum Office::MsoPresetGradientType ChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(4890)) enum Office::MsoPresetTexture ChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(4891)) _bstr_t ChartFillFormat::GetTextureName ( );
__declspec(implementation_key(4892)) enum Office::MsoTextureType ChartFillFormat::GetTextureType ( );
__declspec(implementation_key(4893)) enum Office::MsoFillType ChartFillFormat::GetType ( );
__declspec(implementation_key(4894)) enum Office::MsoTriState ChartFillFormat::GetVisible ( );
__declspec(implementation_key(4895)) void ChartFillFormat::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(4896)) _ApplicationPtr ChartColorFormat::GetApplication ( );
__declspec(implementation_key(4897)) enum XlCreator ChartColorFormat::GetCreator ( );
__declspec(implementation_key(4898)) IDispatchPtr ChartColorFormat::GetParent ( );
__declspec(implementation_key(4899)) long ChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(4900)) void ChartColorFormat::PutSchemeColor ( long _arg1 );
__declspec(implementation_key(4901)) long ChartColorFormat::GetRGBEx ( );
__declspec(implementation_key(4902)) long ChartColorFormat::Get_Default ( );
__declspec(implementation_key(4903)) long ChartColorFormat::GetType ( );
__declspec(implementation_key(4904)) _ApplicationPtr Axis::GetApplication ( );
__declspec(implementation_key(4905)) enum XlCreator Axis::GetCreator ( );
__declspec(implementation_key(4906)) IDispatchPtr Axis::GetParent ( );
__declspec(implementation_key(4907)) VARIANT_BOOL Axis::GetAxisBetweenCategories ( );
__declspec(implementation_key(4908)) void Axis::PutAxisBetweenCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4909)) enum XlAxisGroup Axis::GetAxisGroup ( );
__declspec(implementation_key(4910)) AxisTitlePtr Axis::GetAxisTitle ( );
__declspec(implementation_key(4911)) BorderPtr Axis::GetBorder ( );
__declspec(implementation_key(4912)) _variant_t Axis::GetCategoryNames ( );
__declspec(implementation_key(4913)) void Axis::PutCategoryNames ( const _variant_t & _arg1 );
__declspec(implementation_key(4914)) enum XlAxisCrosses Axis::GetCrosses ( );
__declspec(implementation_key(4915)) void Axis::PutCrosses ( enum XlAxisCrosses _arg1 );
__declspec(implementation_key(4916)) double Axis::GetCrossesAt ( );
__declspec(implementation_key(4917)) void Axis::PutCrossesAt ( double _arg1 );
__declspec(implementation_key(4918)) _variant_t Axis::Delete ( );
__declspec(implementation_key(4919)) VARIANT_BOOL Axis::GetHasMajorGridlines ( );
__declspec(implementation_key(4920)) void Axis::PutHasMajorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4921)) VARIANT_BOOL Axis::GetHasMinorGridlines ( );
__declspec(implementation_key(4922)) void Axis::PutHasMinorGridlines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4923)) VARIANT_BOOL Axis::GetHasTitle ( );
__declspec(implementation_key(4924)) void Axis::PutHasTitle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4925)) GridlinesPtr Axis::GetMajorGridlines ( );
__declspec(implementation_key(4926)) enum XlTickMark Axis::GetMajorTickMark ( );
__declspec(implementation_key(4927)) void Axis::PutMajorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(4928)) double Axis::GetMajorUnit ( );
__declspec(implementation_key(4929)) void Axis::PutMajorUnit ( double _arg1 );
__declspec(implementation_key(4930)) VARIANT_BOOL Axis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(4931)) void Axis::PutMajorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4932)) double Axis::GetMaximumScale ( );
__declspec(implementation_key(4933)) void Axis::PutMaximumScale ( double _arg1 );
__declspec(implementation_key(4934)) VARIANT_BOOL Axis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(4935)) void Axis::PutMaximumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4936)) double Axis::GetMinimumScale ( );
__declspec(implementation_key(4937)) void Axis::PutMinimumScale ( double _arg1 );
__declspec(implementation_key(4938)) VARIANT_BOOL Axis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(4939)) void Axis::PutMinimumScaleIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4940)) GridlinesPtr Axis::GetMinorGridlines ( );
__declspec(implementation_key(4941)) enum XlTickMark Axis::GetMinorTickMark ( );
__declspec(implementation_key(4942)) void Axis::PutMinorTickMark ( enum XlTickMark _arg1 );
__declspec(implementation_key(4943)) double Axis::GetMinorUnit ( );
__declspec(implementation_key(4944)) void Axis::PutMinorUnit ( double _arg1 );
__declspec(implementation_key(4945)) VARIANT_BOOL Axis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(4946)) void Axis::PutMinorUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4947)) VARIANT_BOOL Axis::GetReversePlotOrder ( );
__declspec(implementation_key(4948)) void Axis::PutReversePlotOrder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4949)) enum XlScaleType Axis::GetScaleType ( );
__declspec(implementation_key(4950)) void Axis::PutScaleType ( enum XlScaleType _arg1 );
__declspec(implementation_key(4951)) _variant_t Axis::Select ( );
__declspec(implementation_key(4952)) enum XlTickLabelPosition Axis::GetTickLabelPosition ( );
__declspec(implementation_key(4953)) void Axis::PutTickLabelPosition ( enum XlTickLabelPosition _arg1 );
__declspec(implementation_key(4954)) TickLabelsPtr Axis::GetTickLabels ( );
__declspec(implementation_key(4955)) long Axis::GetTickLabelSpacing ( );
__declspec(implementation_key(4956)) void Axis::PutTickLabelSpacing ( long _arg1 );
__declspec(implementation_key(4957)) long Axis::GetTickMarkSpacing ( );
__declspec(implementation_key(4958)) void Axis::PutTickMarkSpacing ( long _arg1 );
__declspec(implementation_key(4959)) enum XlAxisType Axis::GetType ( );
__declspec(implementation_key(4960)) void Axis::PutType ( enum XlAxisType _arg1 );
__declspec(implementation_key(4961)) enum XlTimeUnit Axis::GetBaseUnit ( );
__declspec(implementation_key(4962)) void Axis::PutBaseUnit ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4963)) VARIANT_BOOL Axis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(4964)) void Axis::PutBaseUnitIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4965)) enum XlTimeUnit Axis::GetMajorUnitScale ( );
__declspec(implementation_key(4966)) void Axis::PutMajorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4967)) enum XlTimeUnit Axis::GetMinorUnitScale ( );
__declspec(implementation_key(4968)) void Axis::PutMinorUnitScale ( enum XlTimeUnit _arg1 );
__declspec(implementation_key(4969)) enum XlCategoryType Axis::GetCategoryType ( );
__declspec(implementation_key(4970)) void Axis::PutCategoryType ( enum XlCategoryType _arg1 );
__declspec(implementation_key(4971)) double Axis::GetLeft ( );
__declspec(implementation_key(4972)) double Axis::GetTop ( );
__declspec(implementation_key(4973)) double Axis::GetWidth ( );
__declspec(implementation_key(4974)) double Axis::GetHeight ( );
__declspec(implementation_key(4975)) enum XlDisplayUnit Axis::GetDisplayUnit ( );
__declspec(implementation_key(4976)) void Axis::PutDisplayUnit ( enum XlDisplayUnit _arg1 );
__declspec(implementation_key(4977)) double Axis::GetDisplayUnitCustom ( );
__declspec(implementation_key(4978)) void Axis::PutDisplayUnitCustom ( double _arg1 );
__declspec(implementation_key(4979)) VARIANT_BOOL Axis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(4980)) void Axis::PutHasDisplayUnitLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4981)) DisplayUnitLabelPtr Axis::GetDisplayUnitLabel ( );
__declspec(implementation_key(4982)) _ApplicationPtr ChartTitle::GetApplication ( );
__declspec(implementation_key(4983)) enum XlCreator ChartTitle::GetCreator ( );
__declspec(implementation_key(4984)) IDispatchPtr ChartTitle::GetParent ( );
__declspec(implementation_key(4985)) _bstr_t ChartTitle::GetName ( );
__declspec(implementation_key(4986)) _variant_t ChartTitle::Select ( );
__declspec(implementation_key(4987)) BorderPtr ChartTitle::GetBorder ( );
__declspec(implementation_key(4988)) _variant_t ChartTitle::Delete ( );
__declspec(implementation_key(4989)) InteriorPtr ChartTitle::GetInterior ( );
__declspec(implementation_key(4990)) ChartFillFormatPtr ChartTitle::GetFill ( );
__declspec(implementation_key(4991)) _bstr_t ChartTitle::GetCaption ( );
__declspec(implementation_key(4992)) void ChartTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(4993)) CharactersPtr ChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(4994)) FontPtr ChartTitle::GetFont ( );
__declspec(implementation_key(4995)) _variant_t ChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(4996)) void ChartTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(4997)) double ChartTitle::GetLeft ( );
__declspec(implementation_key(4998)) void ChartTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(4999)) _variant_t ChartTitle::GetOrientation ( );
__declspec(implementation_key(5000)) void ChartTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5001)) VARIANT_BOOL ChartTitle::GetShadow ( );
__declspec(implementation_key(5002)) void ChartTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5003)) _bstr_t ChartTitle::GetText ( );
__declspec(implementation_key(5004)) void ChartTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5005)) double ChartTitle::GetTop ( );
__declspec(implementation_key(5006)) void ChartTitle::PutTop ( double _arg1 );
__declspec(implementation_key(5007)) _variant_t ChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(5008)) void ChartTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5009)) long ChartTitle::GetReadingOrder ( );
__declspec(implementation_key(5010)) void ChartTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5011)) _variant_t ChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(5012)) void ChartTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5013)) _ApplicationPtr AxisTitle::GetApplication ( );
__declspec(implementation_key(5014)) enum XlCreator AxisTitle::GetCreator ( );
__declspec(implementation_key(5015)) IDispatchPtr AxisTitle::GetParent ( );
__declspec(implementation_key(5016)) _bstr_t AxisTitle::GetName ( );
__declspec(implementation_key(5017)) _variant_t AxisTitle::Select ( );
__declspec(implementation_key(5018)) BorderPtr AxisTitle::GetBorder ( );
__declspec(implementation_key(5019)) _variant_t AxisTitle::Delete ( );
__declspec(implementation_key(5020)) InteriorPtr AxisTitle::GetInterior ( );
__declspec(implementation_key(5021)) ChartFillFormatPtr AxisTitle::GetFill ( );
__declspec(implementation_key(5022)) _bstr_t AxisTitle::GetCaption ( );
__declspec(implementation_key(5023)) void AxisTitle::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(5024)) CharactersPtr AxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5025)) FontPtr AxisTitle::GetFont ( );
__declspec(implementation_key(5026)) _variant_t AxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(5027)) void AxisTitle::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5028)) double AxisTitle::GetLeft ( );
__declspec(implementation_key(5029)) void AxisTitle::PutLeft ( double _arg1 );
__declspec(implementation_key(5030)) _variant_t AxisTitle::GetOrientation ( );
__declspec(implementation_key(5031)) void AxisTitle::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5032)) VARIANT_BOOL AxisTitle::GetShadow ( );
__declspec(implementation_key(5033)) void AxisTitle::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5034)) _bstr_t AxisTitle::GetText ( );
__declspec(implementation_key(5035)) void AxisTitle::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5036)) double AxisTitle::GetTop ( );
__declspec(implementation_key(5037)) void AxisTitle::PutTop ( double _arg1 );
__declspec(implementation_key(5038)) _variant_t AxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(5039)) void AxisTitle::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5040)) long AxisTitle::GetReadingOrder ( );
__declspec(implementation_key(5041)) void AxisTitle::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5042)) _variant_t AxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(5043)) void AxisTitle::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5044)) _ApplicationPtr ChartGroup::GetApplication ( );
__declspec(implementation_key(5045)) enum XlCreator ChartGroup::GetCreator ( );
__declspec(implementation_key(5046)) IDispatchPtr ChartGroup::GetParent ( );
__declspec(implementation_key(5047)) enum XlAxisGroup ChartGroup::GetAxisGroup ( );
__declspec(implementation_key(5048)) void ChartGroup::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(5049)) long ChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(5050)) void ChartGroup::PutDoughnutHoleSize ( long _arg1 );
__declspec(implementation_key(5051)) DownBarsPtr ChartGroup::GetDownBars ( );
__declspec(implementation_key(5052)) DropLinesPtr ChartGroup::GetDropLines ( );
__declspec(implementation_key(5053)) long ChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(5054)) void ChartGroup::PutFirstSliceAngle ( long _arg1 );
__declspec(implementation_key(5055)) long ChartGroup::GetGapWidth ( );
__declspec(implementation_key(5056)) void ChartGroup::PutGapWidth ( long _arg1 );
__declspec(implementation_key(5057)) VARIANT_BOOL ChartGroup::GetHasDropLines ( );
__declspec(implementation_key(5058)) void ChartGroup::PutHasDropLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5059)) VARIANT_BOOL ChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(5060)) void ChartGroup::PutHasHiLoLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5061)) VARIANT_BOOL ChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(5062)) void ChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5063)) VARIANT_BOOL ChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(5064)) void ChartGroup::PutHasSeriesLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5065)) VARIANT_BOOL ChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(5066)) void ChartGroup::PutHasUpDownBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5067)) HiLoLinesPtr ChartGroup::GetHiLoLines ( );
__declspec(implementation_key(5068)) long ChartGroup::GetIndex ( );
__declspec(implementation_key(5069)) long ChartGroup::GetOverlap ( );
__declspec(implementation_key(5070)) void ChartGroup::PutOverlap ( long _arg1 );
__declspec(implementation_key(5071)) TickLabelsPtr ChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(5072)) IDispatchPtr ChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(5073)) SeriesLinesPtr ChartGroup::GetSeriesLines ( );
__declspec(implementation_key(5074)) long ChartGroup::GetSubType ( );
__declspec(implementation_key(5075)) void ChartGroup::PutSubType ( long _arg1 );
__declspec(implementation_key(5076)) long ChartGroup::GetType ( );
__declspec(implementation_key(5077)) void ChartGroup::PutType ( long _arg1 );
__declspec(implementation_key(5078)) UpBarsPtr ChartGroup::GetUpBars ( );
__declspec(implementation_key(5079)) VARIANT_BOOL ChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(5080)) void ChartGroup::PutVaryByCategories ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5081)) enum XlSizeRepresents ChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(5082)) void ChartGroup::PutSizeRepresents ( enum XlSizeRepresents _arg1 );
__declspec(implementation_key(5083)) long ChartGroup::GetBubbleScale ( );
__declspec(implementation_key(5084)) void ChartGroup::PutBubbleScale ( long _arg1 );
__declspec(implementation_key(5085)) VARIANT_BOOL ChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(5086)) void ChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5087)) enum XlChartSplitType ChartGroup::GetSplitType ( );
__declspec(implementation_key(5088)) void ChartGroup::PutSplitType ( enum XlChartSplitType _arg1 );
__declspec(implementation_key(5089)) _variant_t ChartGroup::GetSplitValue ( );
__declspec(implementation_key(5090)) void ChartGroup::PutSplitValue ( const _variant_t & _arg1 );
__declspec(implementation_key(5091)) long ChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(5092)) void ChartGroup::PutSecondPlotSize ( long _arg1 );
__declspec(implementation_key(5093)) VARIANT_BOOL ChartGroup::GetHas3DShading ( );
__declspec(implementation_key(5094)) void ChartGroup::PutHas3DShading ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5095)) _ApplicationPtr ChartGroups::GetApplication ( );
__declspec(implementation_key(5096)) enum XlCreator ChartGroups::GetCreator ( );
__declspec(implementation_key(5097)) IDispatchPtr ChartGroups::GetParent ( );
__declspec(implementation_key(5098)) long ChartGroups::GetCount ( );
__declspec(implementation_key(5099)) ChartGroupPtr ChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(5100)) IUnknownPtr ChartGroups::_NewEnum ( );
__declspec(implementation_key(5101)) _ApplicationPtr Axes::GetApplication ( );
__declspec(implementation_key(5102)) enum XlCreator Axes::GetCreator ( );
__declspec(implementation_key(5103)) IDispatchPtr Axes::GetParent ( );
__declspec(implementation_key(5104)) long Axes::GetCount ( );
__declspec(implementation_key(5105)) AxisPtr Axes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(5106)) IUnknownPtr Axes::_NewEnum ( );
__declspec(implementation_key(5107)) _ApplicationPtr Points::GetApplication ( );
__declspec(implementation_key(5108)) enum XlCreator Points::GetCreator ( );
__declspec(implementation_key(5109)) IDispatchPtr Points::GetParent ( );
__declspec(implementation_key(5110)) long Points::GetCount ( );
__declspec(implementation_key(5111)) PointPtr Points::Item ( long Index );
__declspec(implementation_key(5112)) IUnknownPtr Points::_NewEnum ( );
__declspec(implementation_key(5113)) _ApplicationPtr Point::GetApplication ( );
__declspec(implementation_key(5114)) enum XlCreator Point::GetCreator ( );
__declspec(implementation_key(5115)) IDispatchPtr Point::GetParent ( );
__declspec(implementation_key(5116)) _variant_t Point::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(5117)) BorderPtr Point::GetBorder ( );
__declspec(implementation_key(5118)) _variant_t Point::ClearFormats ( );
__declspec(implementation_key(5119)) _variant_t Point::Copy ( );
__declspec(implementation_key(5120)) DataLabelPtr Point::GetDataLabel ( );
__declspec(implementation_key(5121)) _variant_t Point::Delete ( );
__declspec(implementation_key(5122)) long Point::GetExplosion ( );
__declspec(implementation_key(5123)) void Point::PutExplosion ( long _arg1 );
__declspec(implementation_key(5124)) VARIANT_BOOL Point::GetHasDataLabel ( );
__declspec(implementation_key(5125)) void Point::PutHasDataLabel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5126)) InteriorPtr Point::GetInterior ( );
__declspec(implementation_key(5127)) VARIANT_BOOL Point::GetInvertIfNegative ( );
__declspec(implementation_key(5128)) void Point::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5129)) long Point::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5130)) void Point::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(5131)) enum XlColorIndex Point::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5132)) void Point::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5133)) long Point::GetMarkerForegroundColor ( );
__declspec(implementation_key(5134)) void Point::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(5135)) enum XlColorIndex Point::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5136)) void Point::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5137)) long Point::GetMarkerSize ( );
__declspec(implementation_key(5138)) void Point::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(5139)) enum XlMarkerStyle Point::GetMarkerStyle ( );
__declspec(implementation_key(5140)) void Point::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(5141)) _variant_t Point::Paste ( );
__declspec(implementation_key(5142)) enum XlChartPictureType Point::GetPictureType ( );
__declspec(implementation_key(5143)) void Point::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(5144)) long Point::GetPictureUnit ( );
__declspec(implementation_key(5145)) void Point::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(5146)) _variant_t Point::Select ( );
__declspec(implementation_key(5147)) VARIANT_BOOL Point::GetApplyPictToSides ( );
__declspec(implementation_key(5148)) void Point::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5149)) VARIANT_BOOL Point::GetApplyPictToFront ( );
__declspec(implementation_key(5150)) void Point::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5151)) VARIANT_BOOL Point::GetApplyPictToEnd ( );
__declspec(implementation_key(5152)) void Point::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5153)) VARIANT_BOOL Point::GetShadow ( );
__declspec(implementation_key(5154)) void Point::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5155)) VARIANT_BOOL Point::GetSecondaryPlot ( );
__declspec(implementation_key(5156)) void Point::PutSecondaryPlot ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5157)) ChartFillFormatPtr Point::GetFill ( );
__declspec(implementation_key(5158)) _variant_t Point::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(5159)) _ApplicationPtr Series::GetApplication ( );
__declspec(implementation_key(5160)) enum XlCreator Series::GetCreator ( );
__declspec(implementation_key(5161)) IDispatchPtr Series::GetParent ( );
__declspec(implementation_key(5162)) _variant_t Series::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(5163)) enum XlAxisGroup Series::GetAxisGroup ( );
__declspec(implementation_key(5164)) void Series::PutAxisGroup ( enum XlAxisGroup _arg1 );
__declspec(implementation_key(5165)) BorderPtr Series::GetBorder ( );
__declspec(implementation_key(5166)) _variant_t Series::ClearFormats ( );
__declspec(implementation_key(5167)) _variant_t Series::Copy ( );
__declspec(implementation_key(5168)) IDispatchPtr Series::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(5169)) _variant_t Series::Delete ( );
__declspec(implementation_key(5170)) _variant_t Series::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(5171)) ErrorBarsPtr Series::GetErrorBars ( );
__declspec(implementation_key(5172)) long Series::GetExplosion ( );
__declspec(implementation_key(5173)) void Series::PutExplosion ( long _arg1 );
__declspec(implementation_key(5174)) _bstr_t Series::GetFormula ( );
__declspec(implementation_key(5175)) void Series::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(5176)) _bstr_t Series::GetFormulaLocal ( );
__declspec(implementation_key(5177)) void Series::PutFormulaLocal ( _bstr_t _arg1 );
__declspec(implementation_key(5178)) _bstr_t Series::GetFormulaR1C1 ( );
__declspec(implementation_key(5179)) void Series::PutFormulaR1C1 ( _bstr_t _arg1 );
__declspec(implementation_key(5180)) _bstr_t Series::GetFormulaR1C1Local ( );
__declspec(implementation_key(5181)) void Series::PutFormulaR1C1Local ( _bstr_t _arg1 );
__declspec(implementation_key(5182)) VARIANT_BOOL Series::GetHasDataLabels ( );
__declspec(implementation_key(5183)) void Series::PutHasDataLabels ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5184)) VARIANT_BOOL Series::GetHasErrorBars ( );
__declspec(implementation_key(5185)) void Series::PutHasErrorBars ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5186)) InteriorPtr Series::GetInterior ( );
__declspec(implementation_key(5187)) ChartFillFormatPtr Series::GetFill ( );
__declspec(implementation_key(5188)) VARIANT_BOOL Series::GetInvertIfNegative ( );
__declspec(implementation_key(5189)) void Series::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5190)) long Series::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5191)) void Series::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(5192)) enum XlColorIndex Series::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5193)) void Series::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5194)) long Series::GetMarkerForegroundColor ( );
__declspec(implementation_key(5195)) void Series::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(5196)) enum XlColorIndex Series::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5197)) void Series::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5198)) long Series::GetMarkerSize ( );
__declspec(implementation_key(5199)) void Series::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(5200)) enum XlMarkerStyle Series::GetMarkerStyle ( );
__declspec(implementation_key(5201)) void Series::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(5202)) _bstr_t Series::GetName ( );
__declspec(implementation_key(5203)) void Series::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5204)) _variant_t Series::Paste ( );
__declspec(implementation_key(5205)) enum XlChartPictureType Series::GetPictureType ( );
__declspec(implementation_key(5206)) void Series::PutPictureType ( enum XlChartPictureType _arg1 );
__declspec(implementation_key(5207)) long Series::GetPictureUnit ( );
__declspec(implementation_key(5208)) void Series::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(5209)) long Series::GetPlotOrder ( );
__declspec(implementation_key(5210)) void Series::PutPlotOrder ( long _arg1 );
__declspec(implementation_key(5211)) IDispatchPtr Series::Points ( const _variant_t & Index );
__declspec(implementation_key(5212)) _variant_t Series::Select ( );
__declspec(implementation_key(5213)) VARIANT_BOOL Series::GetSmooth ( );
__declspec(implementation_key(5214)) void Series::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5215)) IDispatchPtr Series::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(5216)) long Series::GetType ( );
__declspec(implementation_key(5217)) void Series::PutType ( long _arg1 );
__declspec(implementation_key(5218)) enum XlChartType Series::GetChartType ( );
__declspec(implementation_key(5219)) void Series::PutChartType ( enum XlChartType _arg1 );
__declspec(implementation_key(5220)) HRESULT Series::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(5221)) _variant_t Series::GetValues ( );
__declspec(implementation_key(5222)) void Series::PutValues ( const _variant_t & _arg1 );
__declspec(implementation_key(5223)) _variant_t Series::GetXValues ( );
__declspec(implementation_key(5224)) void Series::PutXValues ( const _variant_t & _arg1 );
__declspec(implementation_key(5225)) _variant_t Series::GetBubbleSizes ( );
__declspec(implementation_key(5226)) void Series::PutBubbleSizes ( const _variant_t & _arg1 );
__declspec(implementation_key(5227)) enum XlBarShape Series::GetBarShape ( );
__declspec(implementation_key(5228)) void Series::PutBarShape ( enum XlBarShape _arg1 );
__declspec(implementation_key(5229)) VARIANT_BOOL Series::GetApplyPictToSides ( );
__declspec(implementation_key(5230)) void Series::PutApplyPictToSides ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5231)) VARIANT_BOOL Series::GetApplyPictToFront ( );
__declspec(implementation_key(5232)) void Series::PutApplyPictToFront ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5233)) VARIANT_BOOL Series::GetApplyPictToEnd ( );
__declspec(implementation_key(5234)) void Series::PutApplyPictToEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5235)) VARIANT_BOOL Series::GetHas3DEffect ( );
__declspec(implementation_key(5236)) void Series::PutHas3DEffect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5237)) VARIANT_BOOL Series::GetShadow ( );
__declspec(implementation_key(5238)) void Series::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5239)) VARIANT_BOOL Series::GetHasLeaderLines ( );
__declspec(implementation_key(5240)) void Series::PutHasLeaderLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5241)) LeaderLinesPtr Series::GetLeaderLines ( );
__declspec(implementation_key(5242)) _variant_t Series::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(5243)) _ApplicationPtr SeriesCollection::GetApplication ( );
__declspec(implementation_key(5244)) enum XlCreator SeriesCollection::GetCreator ( );
__declspec(implementation_key(5245)) IDispatchPtr SeriesCollection::GetParent ( );
__declspec(implementation_key(5246)) SeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(5247)) long SeriesCollection::GetCount ( );
__declspec(implementation_key(5248)) _variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(5249)) SeriesPtr SeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(5250)) IUnknownPtr SeriesCollection::_NewEnum ( );
__declspec(implementation_key(5251)) _variant_t SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(5252)) SeriesPtr SeriesCollection::NewSeries ( );
__declspec(implementation_key(5253)) _ApplicationPtr DataLabel::GetApplication ( );
__declspec(implementation_key(5254)) enum XlCreator DataLabel::GetCreator ( );
__declspec(implementation_key(5255)) IDispatchPtr DataLabel::GetParent ( );
__declspec(implementation_key(5256)) _bstr_t DataLabel::GetName ( );
__declspec(implementation_key(5257)) _variant_t DataLabel::Select ( );
__declspec(implementation_key(5258)) BorderPtr DataLabel::GetBorder ( );
__declspec(implementation_key(5259)) _variant_t DataLabel::Delete ( );
__declspec(implementation_key(5260)) InteriorPtr DataLabel::GetInterior ( );
__declspec(implementation_key(5261)) ChartFillFormatPtr DataLabel::GetFill ( );
__declspec(implementation_key(5262)) _bstr_t DataLabel::GetCaption ( );
__declspec(implementation_key(5263)) void DataLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(5264)) CharactersPtr DataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5265)) FontPtr DataLabel::GetFont ( );
__declspec(implementation_key(5266)) _variant_t DataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(5267)) void DataLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5268)) double DataLabel::GetLeft ( );
__declspec(implementation_key(5269)) void DataLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(5270)) _variant_t DataLabel::GetOrientation ( );
__declspec(implementation_key(5271)) void DataLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5272)) VARIANT_BOOL DataLabel::GetShadow ( );
__declspec(implementation_key(5273)) void DataLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5274)) _bstr_t DataLabel::GetText ( );
__declspec(implementation_key(5275)) void DataLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5276)) double DataLabel::GetTop ( );
__declspec(implementation_key(5277)) void DataLabel::PutTop ( double _arg1 );
__declspec(implementation_key(5278)) _variant_t DataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(5279)) void DataLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5280)) long DataLabel::GetReadingOrder ( );
__declspec(implementation_key(5281)) void DataLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5282)) _variant_t DataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(5283)) void DataLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5284)) VARIANT_BOOL DataLabel::GetAutoText ( );
__declspec(implementation_key(5285)) void DataLabel::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5286)) _bstr_t DataLabel::GetNumberFormat ( );
__declspec(implementation_key(5287)) void DataLabel::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5288)) VARIANT_BOOL DataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(5289)) void DataLabel::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5290)) _variant_t DataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(5291)) void DataLabel::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5292)) VARIANT_BOOL DataLabel::GetShowLegendKey ( );
__declspec(implementation_key(5293)) void DataLabel::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5294)) _variant_t DataLabel::GetType ( );
__declspec(implementation_key(5295)) void DataLabel::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(5296)) enum XlDataLabelPosition DataLabel::GetPosition ( );
__declspec(implementation_key(5297)) void DataLabel::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(5298)) VARIANT_BOOL DataLabel::GetShowSeriesName ( );
__declspec(implementation_key(5299)) void DataLabel::PutShowSeriesName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5300)) VARIANT_BOOL DataLabel::GetShowCategoryName ( );
__declspec(implementation_key(5301)) void DataLabel::PutShowCategoryName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5302)) VARIANT_BOOL DataLabel::GetShowValue ( );
__declspec(implementation_key(5303)) void DataLabel::PutShowValue ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5304)) VARIANT_BOOL DataLabel::GetShowPercentage ( );
__declspec(implementation_key(5305)) void DataLabel::PutShowPercentage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5306)) VARIANT_BOOL DataLabel::GetShowBubbleSize ( );
__declspec(implementation_key(5307)) void DataLabel::PutShowBubbleSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5308)) _variant_t DataLabel::GetSeparator ( );
__declspec(implementation_key(5309)) void DataLabel::PutSeparator ( const _variant_t & _arg1 );
__declspec(implementation_key(5310)) _ApplicationPtr DataLabels::GetApplication ( );
__declspec(implementation_key(5311)) enum XlCreator DataLabels::GetCreator ( );
__declspec(implementation_key(5312)) IDispatchPtr DataLabels::GetParent ( );
__declspec(implementation_key(5313)) _bstr_t DataLabels::GetName ( );
__declspec(implementation_key(5314)) _variant_t DataLabels::Select ( );
__declspec(implementation_key(5315)) BorderPtr DataLabels::GetBorder ( );
__declspec(implementation_key(5316)) _variant_t DataLabels::Delete ( );
__declspec(implementation_key(5317)) InteriorPtr DataLabels::GetInterior ( );
__declspec(implementation_key(5318)) ChartFillFormatPtr DataLabels::GetFill ( );
__declspec(implementation_key(5319)) FontPtr DataLabels::GetFont ( );
__declspec(implementation_key(5320)) _variant_t DataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(5321)) void DataLabels::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5322)) _variant_t DataLabels::GetOrientation ( );
__declspec(implementation_key(5323)) void DataLabels::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(5324)) VARIANT_BOOL DataLabels::GetShadow ( );
__declspec(implementation_key(5325)) void DataLabels::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5326)) _variant_t DataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(5327)) void DataLabels::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(5328)) long DataLabels::GetReadingOrder ( );
__declspec(implementation_key(5329)) void DataLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5330)) _variant_t DataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(5331)) void DataLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5332)) VARIANT_BOOL DataLabels::GetAutoText ( );
__declspec(implementation_key(5333)) void DataLabels::PutAutoText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5334)) _bstr_t DataLabels::GetNumberFormat ( );
__declspec(implementation_key(5335)) void DataLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5336)) VARIANT_BOOL DataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(5337)) void DataLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5338)) _variant_t DataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(5339)) void DataLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5340)) VARIANT_BOOL DataLabels::GetShowLegendKey ( );
__declspec(implementation_key(5341)) void DataLabels::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5342)) _variant_t DataLabels::GetType ( );
__declspec(implementation_key(5343)) void DataLabels::PutType ( const _variant_t & _arg1 );
__declspec(implementation_key(5344)) enum XlDataLabelPosition DataLabels::GetPosition ( );
__declspec(implementation_key(5345)) void DataLabels::PutPosition ( enum XlDataLabelPosition _arg1 );
__declspec(implementation_key(5346)) VARIANT_BOOL DataLabels::GetShowSeriesName ( );
__declspec(implementation_key(5347)) void DataLabels::PutShowSeriesName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5348)) VARIANT_BOOL DataLabels::GetShowCategoryName ( );
__declspec(implementation_key(5349)) void DataLabels::PutShowCategoryName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5350)) VARIANT_BOOL DataLabels::GetShowValue ( );
__declspec(implementation_key(5351)) void DataLabels::PutShowValue ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5352)) VARIANT_BOOL DataLabels::GetShowPercentage ( );
__declspec(implementation_key(5353)) void DataLabels::PutShowPercentage ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5354)) VARIANT_BOOL DataLabels::GetShowBubbleSize ( );
__declspec(implementation_key(5355)) void DataLabels::PutShowBubbleSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5356)) _variant_t DataLabels::GetSeparator ( );
__declspec(implementation_key(5357)) void DataLabels::PutSeparator ( const _variant_t & _arg1 );
__declspec(implementation_key(5358)) long DataLabels::GetCount ( );
__declspec(implementation_key(5359)) DataLabelPtr DataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(5360)) IUnknownPtr DataLabels::_NewEnum ( );
__declspec(implementation_key(5361)) _ApplicationPtr LegendEntry::GetApplication ( );
__declspec(implementation_key(5362)) enum XlCreator LegendEntry::GetCreator ( );
__declspec(implementation_key(5363)) IDispatchPtr LegendEntry::GetParent ( );
__declspec(implementation_key(5364)) _variant_t LegendEntry::Delete ( );
__declspec(implementation_key(5365)) FontPtr LegendEntry::GetFont ( );
__declspec(implementation_key(5366)) long LegendEntry::GetIndex ( );
__declspec(implementation_key(5367)) LegendKeyPtr LegendEntry::GetLegendKey ( );
__declspec(implementation_key(5368)) _variant_t LegendEntry::Select ( );
__declspec(implementation_key(5369)) _variant_t LegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(5370)) void LegendEntry::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5371)) double LegendEntry::GetLeft ( );
__declspec(implementation_key(5372)) double LegendEntry::GetTop ( );
__declspec(implementation_key(5373)) double LegendEntry::GetWidth ( );
__declspec(implementation_key(5374)) double LegendEntry::GetHeight ( );
__declspec(implementation_key(5375)) _ApplicationPtr LegendEntries::GetApplication ( );
__declspec(implementation_key(5376)) enum XlCreator LegendEntries::GetCreator ( );
__declspec(implementation_key(5377)) IDispatchPtr LegendEntries::GetParent ( );
__declspec(implementation_key(5378)) long LegendEntries::GetCount ( );
__declspec(implementation_key(5379)) LegendEntryPtr LegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(5380)) IUnknownPtr LegendEntries::_NewEnum ( );
__declspec(implementation_key(5381)) _ApplicationPtr LegendKey::GetApplication ( );
__declspec(implementation_key(5382)) enum XlCreator LegendKey::GetCreator ( );
__declspec(implementation_key(5383)) IDispatchPtr LegendKey::GetParent ( );
__declspec(implementation_key(5384)) BorderPtr LegendKey::GetBorder ( );
__declspec(implementation_key(5385)) _variant_t LegendKey::ClearFormats ( );
__declspec(implementation_key(5386)) _variant_t LegendKey::Delete ( );
__declspec(implementation_key(5387)) InteriorPtr LegendKey::GetInterior ( );
__declspec(implementation_key(5388)) ChartFillFormatPtr LegendKey::GetFill ( );
__declspec(implementation_key(5389)) VARIANT_BOOL LegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(5390)) void LegendKey::PutInvertIfNegative ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5391)) long LegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(5392)) void LegendKey::PutMarkerBackgroundColor ( long _arg1 );
__declspec(implementation_key(5393)) enum XlColorIndex LegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(5394)) void LegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5395)) long LegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(5396)) void LegendKey::PutMarkerForegroundColor ( long _arg1 );
__declspec(implementation_key(5397)) enum XlColorIndex LegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(5398)) void LegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(5399)) long LegendKey::GetMarkerSize ( );
__declspec(implementation_key(5400)) void LegendKey::PutMarkerSize ( long _arg1 );
__declspec(implementation_key(5401)) enum XlMarkerStyle LegendKey::GetMarkerStyle ( );
__declspec(implementation_key(5402)) void LegendKey::PutMarkerStyle ( enum XlMarkerStyle _arg1 );
__declspec(implementation_key(5403)) long LegendKey::GetPictureType ( );
__declspec(implementation_key(5404)) void LegendKey::PutPictureType ( long _arg1 );
__declspec(implementation_key(5405)) long LegendKey::GetPictureUnit ( );
__declspec(implementation_key(5406)) void LegendKey::PutPictureUnit ( long _arg1 );
__declspec(implementation_key(5407)) _variant_t LegendKey::Select ( );
__declspec(implementation_key(5408)) VARIANT_BOOL LegendKey::GetSmooth ( );
__declspec(implementation_key(5409)) void LegendKey::PutSmooth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5410)) double LegendKey::GetLeft ( );
__declspec(implementation_key(5411)) double LegendKey::GetTop ( );
__declspec(implementation_key(5412)) double LegendKey::GetWidth ( );
__declspec(implementation_key(5413)) double LegendKey::GetHeight ( );
__declspec(implementation_key(5414)) VARIANT_BOOL LegendKey::GetShadow ( );
__declspec(implementation_key(5415)) void LegendKey::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5416)) _ApplicationPtr Trendlines::GetApplication ( );
__declspec(implementation_key(5417)) enum XlCreator Trendlines::GetCreator ( );
__declspec(implementation_key(5418)) IDispatchPtr Trendlines::GetParent ( );
__declspec(implementation_key(5419)) TrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(5420)) long Trendlines::GetCount ( );
__declspec(implementation_key(5421)) TrendlinePtr Trendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(5422)) IUnknownPtr Trendlines::_NewEnum ( );
__declspec(implementation_key(5423)) _ApplicationPtr Trendline::GetApplication ( );
__declspec(implementation_key(5424)) enum XlCreator Trendline::GetCreator ( );
__declspec(implementation_key(5425)) IDispatchPtr Trendline::GetParent ( );
__declspec(implementation_key(5426)) long Trendline::GetBackward ( );
__declspec(implementation_key(5427)) void Trendline::PutBackward ( long _arg1 );
__declspec(implementation_key(5428)) BorderPtr Trendline::GetBorder ( );
__declspec(implementation_key(5429)) _variant_t Trendline::ClearFormats ( );
__declspec(implementation_key(5430)) DataLabelPtr Trendline::GetDataLabel ( );
__declspec(implementation_key(5431)) _variant_t Trendline::Delete ( );
__declspec(implementation_key(5432)) VARIANT_BOOL Trendline::GetDisplayEquation ( );
__declspec(implementation_key(5433)) void Trendline::PutDisplayEquation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5434)) VARIANT_BOOL Trendline::GetDisplayRSquared ( );
__declspec(implementation_key(5435)) void Trendline::PutDisplayRSquared ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5436)) long Trendline::GetForward ( );
__declspec(implementation_key(5437)) void Trendline::PutForward ( long _arg1 );
__declspec(implementation_key(5438)) long Trendline::GetIndex ( );
__declspec(implementation_key(5439)) double Trendline::GetIntercept ( );
__declspec(implementation_key(5440)) void Trendline::PutIntercept ( double _arg1 );
__declspec(implementation_key(5441)) VARIANT_BOOL Trendline::GetInterceptIsAuto ( );
__declspec(implementation_key(5442)) void Trendline::PutInterceptIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5443)) _bstr_t Trendline::GetName ( );
__declspec(implementation_key(5444)) void Trendline::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5445)) VARIANT_BOOL Trendline::GetNameIsAuto ( );
__declspec(implementation_key(5446)) void Trendline::PutNameIsAuto ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5447)) long Trendline::GetOrder ( );
__declspec(implementation_key(5448)) void Trendline::PutOrder ( long _arg1 );
__declspec(implementation_key(5449)) long Trendline::GetPeriod ( );
__declspec(implementation_key(5450)) void Trendline::PutPeriod ( long _arg1 );
__declspec(implementation_key(5451)) _variant_t Trendline::Select ( );
__declspec(implementation_key(5452)) enum XlTrendlineType Trendline::GetType ( );
__declspec(implementation_key(5453)) void Trendline::PutType ( enum XlTrendlineType _arg1 );
__declspec(implementation_key(5454)) _ApplicationPtr Corners::GetApplication ( );
__declspec(implementation_key(5455)) enum XlCreator Corners::GetCreator ( );
__declspec(implementation_key(5456)) IDispatchPtr Corners::GetParent ( );
__declspec(implementation_key(5457)) _bstr_t Corners::GetName ( );
__declspec(implementation_key(5458)) _variant_t Corners::Select ( );
__declspec(implementation_key(5459)) _ApplicationPtr SeriesLines::GetApplication ( );
__declspec(implementation_key(5460)) enum XlCreator SeriesLines::GetCreator ( );
__declspec(implementation_key(5461)) IDispatchPtr SeriesLines::GetParent ( );
__declspec(implementation_key(5462)) _bstr_t SeriesLines::GetName ( );
__declspec(implementation_key(5463)) _variant_t SeriesLines::Select ( );
__declspec(implementation_key(5464)) BorderPtr SeriesLines::GetBorder ( );
__declspec(implementation_key(5465)) _variant_t SeriesLines::Delete ( );
__declspec(implementation_key(5466)) _ApplicationPtr HiLoLines::GetApplication ( );
__declspec(implementation_key(5467)) enum XlCreator HiLoLines::GetCreator ( );
__declspec(implementation_key(5468)) IDispatchPtr HiLoLines::GetParent ( );
__declspec(implementation_key(5469)) _bstr_t HiLoLines::GetName ( );
__declspec(implementation_key(5470)) _variant_t HiLoLines::Select ( );
__declspec(implementation_key(5471)) BorderPtr HiLoLines::GetBorder ( );
__declspec(implementation_key(5472)) _variant_t HiLoLines::Delete ( );
__declspec(implementation_key(5473)) _ApplicationPtr Gridlines::GetApplication ( );
__declspec(implementation_key(5474)) enum XlCreator Gridlines::GetCreator ( );
__declspec(implementation_key(5475)) IDispatchPtr Gridlines::GetParent ( );
__declspec(implementation_key(5476)) _bstr_t Gridlines::GetName ( );
__declspec(implementation_key(5477)) _variant_t Gridlines::Select ( );
__declspec(implementation_key(5478)) BorderPtr Gridlines::GetBorder ( );
__declspec(implementation_key(5479)) _variant_t Gridlines::Delete ( );
__declspec(implementation_key(5480)) _ApplicationPtr DropLines::GetApplication ( );
__declspec(implementation_key(5481)) enum XlCreator DropLines::GetCreator ( );
__declspec(implementation_key(5482)) IDispatchPtr DropLines::GetParent ( );
__declspec(implementation_key(5483)) _bstr_t DropLines::GetName ( );
__declspec(implementation_key(5484)) _variant_t DropLines::Select ( );
__declspec(implementation_key(5485)) BorderPtr DropLines::GetBorder ( );
__declspec(implementation_key(5486)) _variant_t DropLines::Delete ( );
__declspec(implementation_key(5487)) _ApplicationPtr LeaderLines::GetApplication ( );
__declspec(implementation_key(5488)) enum XlCreator LeaderLines::GetCreator ( );
__declspec(implementation_key(5489)) IDispatchPtr LeaderLines::GetParent ( );
__declspec(implementation_key(5490)) BorderPtr LeaderLines::GetBorder ( );
__declspec(implementation_key(5491)) HRESULT LeaderLines::Delete ( );
__declspec(implementation_key(5492)) HRESULT LeaderLines::Select ( );
__declspec(implementation_key(5493)) _ApplicationPtr UpBars::GetApplication ( );
__declspec(implementation_key(5494)) enum XlCreator UpBars::GetCreator ( );
__declspec(implementation_key(5495)) IDispatchPtr UpBars::GetParent ( );
__declspec(implementation_key(5496)) _bstr_t UpBars::GetName ( );
__declspec(implementation_key(5497)) _variant_t UpBars::Select ( );
__declspec(implementation_key(5498)) BorderPtr UpBars::GetBorder ( );
__declspec(implementation_key(5499)) _variant_t UpBars::Delete ( );
__declspec(implementation_key(5500)) InteriorPtr UpBars::GetInterior ( );
__declspec(implementation_key(5501)) ChartFillFormatPtr UpBars::GetFill ( );
__declspec(implementation_key(5502)) _ApplicationPtr DownBars::GetApplication ( );
__declspec(implementation_key(5503)) enum XlCreator DownBars::GetCreator ( );
__declspec(implementation_key(5504)) IDispatchPtr DownBars::GetParent ( );
__declspec(implementation_key(5505)) _bstr_t DownBars::GetName ( );
__declspec(implementation_key(5506)) _variant_t DownBars::Select ( );
__declspec(implementation_key(5507)) BorderPtr DownBars::GetBorder ( );
__declspec(implementation_key(5508)) _variant_t DownBars::Delete ( );
__declspec(implementation_key(5509)) InteriorPtr DownBars::GetInterior ( );
__declspec(implementation_key(5510)) ChartFillFormatPtr DownBars::GetFill ( );
__declspec(implementation_key(5511)) _ApplicationPtr Floor::GetApplication ( );
__declspec(implementation_key(5512)) enum XlCreator Floor::GetCreator ( );
__declspec(implementation_key(5513)) IDispatchPtr Floor::GetParent ( );
__declspec(implementation_key(5514)) _bstr_t Floor::GetName ( );
__declspec(implementation_key(5515)) _variant_t Floor::Select ( );
__declspec(implementation_key(5516)) BorderPtr Floor::GetBorder ( );
__declspec(implementation_key(5517)) _variant_t Floor::ClearFormats ( );
__declspec(implementation_key(5518)) InteriorPtr Floor::GetInterior ( );
__declspec(implementation_key(5519)) ChartFillFormatPtr Floor::GetFill ( );
__declspec(implementation_key(5520)) _variant_t Floor::GetPictureType ( );
__declspec(implementation_key(5521)) void Floor::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(5522)) HRESULT Floor::Paste ( );
__declspec(implementation_key(5523)) _ApplicationPtr Walls::GetApplication ( );
__declspec(implementation_key(5524)) enum XlCreator Walls::GetCreator ( );
__declspec(implementation_key(5525)) IDispatchPtr Walls::GetParent ( );
__declspec(implementation_key(5526)) _bstr_t Walls::GetName ( );
__declspec(implementation_key(5527)) _variant_t Walls::Select ( );
__declspec(implementation_key(5528)) BorderPtr Walls::GetBorder ( );
__declspec(implementation_key(5529)) _variant_t Walls::ClearFormats ( );
__declspec(implementation_key(5530)) InteriorPtr Walls::GetInterior ( );
__declspec(implementation_key(5531)) ChartFillFormatPtr Walls::GetFill ( );
__declspec(implementation_key(5532)) _variant_t Walls::GetPictureType ( );
__declspec(implementation_key(5533)) void Walls::PutPictureType ( const _variant_t & _arg1 );
__declspec(implementation_key(5534)) HRESULT Walls::Paste ( );
__declspec(implementation_key(5535)) _variant_t Walls::GetPictureUnit ( );
__declspec(implementation_key(5536)) void Walls::PutPictureUnit ( const _variant_t & _arg1 );
__declspec(implementation_key(5537)) _ApplicationPtr TickLabels::GetApplication ( );
__declspec(implementation_key(5538)) enum XlCreator TickLabels::GetCreator ( );
__declspec(implementation_key(5539)) IDispatchPtr TickLabels::GetParent ( );
__declspec(implementation_key(5540)) _variant_t TickLabels::Delete ( );
__declspec(implementation_key(5541)) FontPtr TickLabels::GetFont ( );
__declspec(implementation_key(5542)) _bstr_t TickLabels::GetName ( );
__declspec(implementation_key(5543)) _bstr_t TickLabels::GetNumberFormat ( );
__declspec(implementation_key(5544)) void TickLabels::PutNumberFormat ( _bstr_t _arg1 );
__declspec(implementation_key(5545)) VARIANT_BOOL TickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(5546)) void TickLabels::PutNumberFormatLinked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5547)) _variant_t TickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(5548)) void TickLabels::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(5549)) enum XlTickLabelOrientation TickLabels::GetOrientation ( );
__declspec(implementation_key(5550)) void TickLabels::PutOrientation ( enum XlTickLabelOrientation _arg1 );
__declspec(implementation_key(5551)) _variant_t TickLabels::Select ( );
__declspec(implementation_key(5552)) long TickLabels::GetReadingOrder ( );
__declspec(implementation_key(5553)) void TickLabels::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5554)) _variant_t TickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(5555)) void TickLabels::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5556)) long TickLabels::GetDepth ( );
__declspec(implementation_key(5557)) long TickLabels::GetOffset ( );
__declspec(implementation_key(5558)) void TickLabels::PutOffset ( long _arg1 );
__declspec(implementation_key(5559)) long TickLabels::GetAlignment ( );
__declspec(implementation_key(5560)) void TickLabels::PutAlignment ( long _arg1 );
__declspec(implementation_key(5561)) _ApplicationPtr PlotArea::GetApplication ( );
__declspec(implementation_key(5562)) enum XlCreator PlotArea::GetCreator ( );
__declspec(implementation_key(5563)) IDispatchPtr PlotArea::GetParent ( );
__declspec(implementation_key(5564)) _bstr_t PlotArea::GetName ( );
__declspec(implementation_key(5565)) _variant_t PlotArea::Select ( );
__declspec(implementation_key(5566)) BorderPtr PlotArea::GetBorder ( );
__declspec(implementation_key(5567)) _variant_t PlotArea::ClearFormats ( );
__declspec(implementation_key(5568)) double PlotArea::GetHeight ( );
__declspec(implementation_key(5569)) void PlotArea::PutHeight ( double _arg1 );
__declspec(implementation_key(5570)) InteriorPtr PlotArea::GetInterior ( );
__declspec(implementation_key(5571)) ChartFillFormatPtr PlotArea::GetFill ( );
__declspec(implementation_key(5572)) double PlotArea::GetLeft ( );
__declspec(implementation_key(5573)) void PlotArea::PutLeft ( double _arg1 );
__declspec(implementation_key(5574)) double PlotArea::GetTop ( );
__declspec(implementation_key(5575)) void PlotArea::PutTop ( double _arg1 );
__declspec(implementation_key(5576)) double PlotArea::GetWidth ( );
__declspec(implementation_key(5577)) void PlotArea::PutWidth ( double _arg1 );
__declspec(implementation_key(5578)) double PlotArea::GetInsideLeft ( );
__declspec(implementation_key(5579)) double PlotArea::GetInsideTop ( );
__declspec(implementation_key(5580)) double PlotArea::GetInsideWidth ( );
__declspec(implementation_key(5581)) double PlotArea::GetInsideHeight ( );
__declspec(implementation_key(5582)) _ApplicationPtr ChartArea::GetApplication ( );
__declspec(implementation_key(5583)) enum XlCreator ChartArea::GetCreator ( );
__declspec(implementation_key(5584)) IDispatchPtr ChartArea::GetParent ( );
__declspec(implementation_key(5585)) _bstr_t ChartArea::GetName ( );
__declspec(implementation_key(5586)) _variant_t ChartArea::Select ( );
__declspec(implementation_key(5587)) BorderPtr ChartArea::GetBorder ( );
__declspec(implementation_key(5588)) _variant_t ChartArea::Clear ( );
__declspec(implementation_key(5589)) _variant_t ChartArea::ClearContents ( );
__declspec(implementation_key(5590)) _variant_t ChartArea::Copy ( );
__declspec(implementation_key(5591)) FontPtr ChartArea::GetFont ( );
__declspec(implementation_key(5592)) VARIANT_BOOL ChartArea::GetShadow ( );
__declspec(implementation_key(5593)) void ChartArea::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5594)) _variant_t ChartArea::ClearFormats ( );
__declspec(implementation_key(5595)) double ChartArea::GetHeight ( );
__declspec(implementation_key(5596)) void ChartArea::PutHeight ( double _arg1 );
__declspec(implementation_key(5597)) InteriorPtr ChartArea::GetInterior ( );
__declspec(implementation_key(5598)) ChartFillFormatPtr ChartArea::GetFill ( );
__declspec(implementation_key(5599)) double ChartArea::GetLeft ( );
__declspec(implementation_key(5600)) void ChartArea::PutLeft ( double _arg1 );
__declspec(implementation_key(5601)) double ChartArea::GetTop ( );
__declspec(implementation_key(5602)) void ChartArea::PutTop ( double _arg1 );
__declspec(implementation_key(5603)) double ChartArea::GetWidth ( );
__declspec(implementation_key(5604)) void ChartArea::PutWidth ( double _arg1 );
__declspec(implementation_key(5605)) _variant_t ChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(5606)) void ChartArea::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5607)) _ApplicationPtr Legend::GetApplication ( );
__declspec(implementation_key(5608)) enum XlCreator Legend::GetCreator ( );
__declspec(implementation_key(5609)) IDispatchPtr Legend::GetParent ( );
__declspec(implementation_key(5610)) _bstr_t Legend::GetName ( );
__declspec(implementation_key(5611)) _variant_t Legend::Select ( );
__declspec(implementation_key(5612)) BorderPtr Legend::GetBorder ( );
__declspec(implementation_key(5613)) _variant_t Legend::Delete ( );
__declspec(implementation_key(5614)) FontPtr Legend::GetFont ( );
__declspec(implementation_key(5615)) IDispatchPtr Legend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(5616)) enum XlLegendPosition Legend::GetPosition ( );
__declspec(implementation_key(5617)) void Legend::PutPosition ( enum XlLegendPosition _arg1 );
__declspec(implementation_key(5618)) VARIANT_BOOL Legend::GetShadow ( );
__declspec(implementation_key(5619)) void Legend::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5620)) _variant_t Legend::Clear ( );
__declspec(implementation_key(5621)) double Legend::GetHeight ( );
__declspec(implementation_key(5622)) void Legend::PutHeight ( double _arg1 );
__declspec(implementation_key(5623)) InteriorPtr Legend::GetInterior ( );
__declspec(implementation_key(5624)) ChartFillFormatPtr Legend::GetFill ( );
__declspec(implementation_key(5625)) double Legend::GetLeft ( );
__declspec(implementation_key(5626)) void Legend::PutLeft ( double _arg1 );
__declspec(implementation_key(5627)) double Legend::GetTop ( );
__declspec(implementation_key(5628)) void Legend::PutTop ( double _arg1 );
__declspec(implementation_key(5629)) double Legend::GetWidth ( );
__declspec(implementation_key(5630)) void Legend::PutWidth ( double _arg1 );
__declspec(implementation_key(5631)) _variant_t Legend::GetAutoScaleFont ( );
__declspec(implementation_key(5632)) void Legend::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5633)) _ApplicationPtr ErrorBars::GetApplication ( );
__declspec(implementation_key(5634)) enum XlCreator ErrorBars::GetCreator ( );
__declspec(implementation_key(5635)) IDispatchPtr ErrorBars::GetParent ( );
__declspec(implementation_key(5636)) _bstr_t ErrorBars::GetName ( );
__declspec(implementation_key(5637)) _variant_t ErrorBars::Select ( );
__declspec(implementation_key(5638)) BorderPtr ErrorBars::GetBorder ( );
__declspec(implementation_key(5639)) _variant_t ErrorBars::Delete ( );
__declspec(implementation_key(5640)) _variant_t ErrorBars::ClearFormats ( );
__declspec(implementation_key(5641)) enum XlEndStyleCap ErrorBars::GetEndStyle ( );
__declspec(implementation_key(5642)) void ErrorBars::PutEndStyle ( enum XlEndStyleCap _arg1 );
__declspec(implementation_key(5643)) _ApplicationPtr DataTable::GetApplication ( );
__declspec(implementation_key(5644)) enum XlCreator DataTable::GetCreator ( );
__declspec(implementation_key(5645)) IDispatchPtr DataTable::GetParent ( );
__declspec(implementation_key(5646)) VARIANT_BOOL DataTable::GetShowLegendKey ( );
__declspec(implementation_key(5647)) void DataTable::PutShowLegendKey ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5648)) VARIANT_BOOL DataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(5649)) void DataTable::PutHasBorderHorizontal ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5650)) VARIANT_BOOL DataTable::GetHasBorderVertical ( );
__declspec(implementation_key(5651)) void DataTable::PutHasBorderVertical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5652)) VARIANT_BOOL DataTable::GetHasBorderOutline ( );
__declspec(implementation_key(5653)) void DataTable::PutHasBorderOutline ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5654)) BorderPtr DataTable::GetBorder ( );
__declspec(implementation_key(5655)) FontPtr DataTable::GetFont ( );
__declspec(implementation_key(5656)) HRESULT DataTable::Select ( );
__declspec(implementation_key(5657)) HRESULT DataTable::Delete ( );
__declspec(implementation_key(5658)) _variant_t DataTable::GetAutoScaleFont ( );
__declspec(implementation_key(5659)) void DataTable::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(5660)) _ApplicationPtr Phonetic::GetApplication ( );
__declspec(implementation_key(5661)) enum XlCreator Phonetic::GetCreator ( );
__declspec(implementation_key(5662)) IDispatchPtr Phonetic::GetParent ( );
__declspec(implementation_key(5663)) VARIANT_BOOL Phonetic::GetVisible ( );
__declspec(implementation_key(5664)) void Phonetic::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5665)) long Phonetic::GetCharacterType ( );
__declspec(implementation_key(5666)) void Phonetic::PutCharacterType ( long _arg1 );
__declspec(implementation_key(5667)) long Phonetic::GetAlignment ( );
__declspec(implementation_key(5668)) void Phonetic::PutAlignment ( long _arg1 );
__declspec(implementation_key(5669)) FontPtr Phonetic::GetFont ( );
__declspec(implementation_key(5670)) _bstr_t Phonetic::GetText ( );
__declspec(implementation_key(5671)) void Phonetic::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(5672)) _ApplicationPtr Shape::GetApplication ( );
__declspec(implementation_key(5673)) enum XlCreator Shape::GetCreator ( );
__declspec(implementation_key(5674)) IDispatchPtr Shape::GetParent ( );
__declspec(implementation_key(5675)) HRESULT Shape::Apply ( );
__declspec(implementation_key(5676)) HRESULT Shape::Delete ( );
__declspec(implementation_key(5677)) ShapePtr Shape::Duplicate ( );
__declspec(implementation_key(5678)) HRESULT Shape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(5679)) HRESULT Shape::IncrementLeft ( float Increment );
__declspec(implementation_key(5680)) HRESULT Shape::IncrementRotation ( float Increment );
__declspec(implementation_key(5681)) HRESULT Shape::IncrementTop ( float Increment );
__declspec(implementation_key(5682)) HRESULT Shape::PickUp ( );
__declspec(implementation_key(5683)) HRESULT Shape::RerouteConnections ( );
__declspec(implementation_key(5684)) HRESULT Shape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5685)) HRESULT Shape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5686)) HRESULT Shape::Select ( const _variant_t & Replace );
__declspec(implementation_key(5687)) HRESULT Shape::SetShapesDefaultProperties ( );
__declspec(implementation_key(5688)) ShapeRangePtr Shape::Ungroup ( );
__declspec(implementation_key(5689)) HRESULT Shape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(5690)) AdjustmentsPtr Shape::GetAdjustments ( );
__declspec(implementation_key(5691)) TextFramePtr Shape::GetTextFrame ( );
__declspec(implementation_key(5692)) enum Office::MsoAutoShapeType Shape::GetAutoShapeType ( );
__declspec(implementation_key(5693)) void Shape::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(5694)) CalloutFormatPtr Shape::GetCallout ( );
__declspec(implementation_key(5695)) long Shape::GetConnectionSiteCount ( );
__declspec(implementation_key(5696)) enum Office::MsoTriState Shape::GetConnector ( );
__declspec(implementation_key(5697)) ConnectorFormatPtr Shape::GetConnectorFormat ( );
__declspec(implementation_key(5698)) FillFormatPtr Shape::GetFill ( );
__declspec(implementation_key(5699)) GroupShapesPtr Shape::GetGroupItems ( );
__declspec(implementation_key(5700)) float Shape::GetHeight ( );
__declspec(implementation_key(5701)) void Shape::PutHeight ( float _arg1 );
__declspec(implementation_key(5702)) enum Office::MsoTriState Shape::GetHorizontalFlip ( );
__declspec(implementation_key(5703)) float Shape::GetLeft ( );
__declspec(implementation_key(5704)) void Shape::PutLeft ( float _arg1 );
__declspec(implementation_key(5705)) LineFormatPtr Shape::GetLine ( );
__declspec(implementation_key(5706)) enum Office::MsoTriState Shape::GetLockAspectRatio ( );
__declspec(implementation_key(5707)) void Shape::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5708)) _bstr_t Shape::GetName ( );
__declspec(implementation_key(5709)) void Shape::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5710)) ShapeNodesPtr Shape::GetNodes ( );
__declspec(implementation_key(5711)) float Shape::GetRotation ( );
__declspec(implementation_key(5712)) void Shape::PutRotation ( float _arg1 );
__declspec(implementation_key(5713)) PictureFormatPtr Shape::GetPictureFormat ( );
__declspec(implementation_key(5714)) ShadowFormatPtr Shape::GetShadow ( );
__declspec(implementation_key(5715)) TextEffectFormatPtr Shape::GetTextEffect ( );
__declspec(implementation_key(5716)) ThreeDFormatPtr Shape::GetThreeD ( );
__declspec(implementation_key(5717)) float Shape::GetTop ( );
__declspec(implementation_key(5718)) void Shape::PutTop ( float _arg1 );
__declspec(implementation_key(5719)) enum Office::MsoShapeType Shape::GetType ( );
__declspec(implementation_key(5720)) enum Office::MsoTriState Shape::GetVerticalFlip ( );
__declspec(implementation_key(5721)) _variant_t Shape::GetVertices ( );
__declspec(implementation_key(5722)) enum Office::MsoTriState Shape::GetVisible ( );
__declspec(implementation_key(5723)) void Shape::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5724)) float Shape::GetWidth ( );
__declspec(implementation_key(5725)) void Shape::PutWidth ( float _arg1 );
__declspec(implementation_key(5726)) long Shape::GetZOrderPosition ( );
__declspec(implementation_key(5727)) HyperlinkPtr Shape::GetHyperlink ( );
__declspec(implementation_key(5728)) enum Office::MsoBlackWhiteMode Shape::GetBlackWhiteMode ( );
__declspec(implementation_key(5729)) void Shape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(5730)) IDispatchPtr Shape::GetDrawingObject ( );
__declspec(implementation_key(5731)) _bstr_t Shape::GetOnAction ( );
__declspec(implementation_key(5732)) void Shape::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(5733)) VARIANT_BOOL Shape::GetLocked ( );
__declspec(implementation_key(5734)) void Shape::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5735)) RangePtr Shape::GetTopLeftCell ( );
__declspec(implementation_key(5736)) RangePtr Shape::GetBottomRightCell ( );
__declspec(implementation_key(5737)) enum XlPlacement Shape::GetPlacement ( );
__declspec(implementation_key(5738)) void Shape::PutPlacement ( enum XlPlacement _arg1 );
__declspec(implementation_key(5739)) HRESULT Shape::Copy ( );
__declspec(implementation_key(5740)) HRESULT Shape::Cut ( );
__declspec(implementation_key(5741)) HRESULT Shape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(5742)) ControlFormatPtr Shape::GetControlFormat ( );
__declspec(implementation_key(5743)) LinkFormatPtr Shape::GetLinkFormat ( );
__declspec(implementation_key(5744)) OLEFormatPtr Shape::GetOLEFormat ( );
__declspec(implementation_key(5745)) enum XlFormControl Shape::GetFormControlType ( );
__declspec(implementation_key(5746)) _bstr_t Shape::GetAlternativeText ( );
__declspec(implementation_key(5747)) void Shape::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(5748)) Office::ScriptPtr Shape::GetScript ( );
__declspec(implementation_key(5749)) DiagramNodePtr Shape::GetDiagramNode ( );
__declspec(implementation_key(5750)) enum Office::MsoTriState Shape::GetHasDiagramNode ( );
__declspec(implementation_key(5751)) DiagramPtr Shape::GetDiagram ( );
__declspec(implementation_key(5752)) enum Office::MsoTriState Shape::GetHasDiagram ( );
__declspec(implementation_key(5753)) enum Office::MsoTriState Shape::GetChild ( );
__declspec(implementation_key(5754)) ShapePtr Shape::GetParentGroup ( );
__declspec(implementation_key(5755)) Office::CanvasShapesPtr Shape::GetCanvasItems ( );
__declspec(implementation_key(5756)) long Shape::GetID ( );
__declspec(implementation_key(5757)) HRESULT Shape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(5758)) HRESULT Shape::CanvasCropTop ( float Increment );
__declspec(implementation_key(5759)) HRESULT Shape::CanvasCropRight ( float Increment );
__declspec(implementation_key(5760)) HRESULT Shape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(5761)) _ApplicationPtr Shapes::GetApplication ( );
__declspec(implementation_key(5762)) enum XlCreator Shapes::GetCreator ( );
__declspec(implementation_key(5763)) IDispatchPtr Shapes::GetParent ( );
__declspec(implementation_key(5764)) long Shapes::GetCount ( );
__declspec(implementation_key(5765)) ShapePtr Shapes::Item ( const _variant_t & Index );
__declspec(implementation_key(5766)) ShapePtr Shapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(5767)) IUnknownPtr Shapes::Get_NewEnum ( );
__declspec(implementation_key(5768)) ShapePtr Shapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5769)) ShapePtr Shapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(5770)) ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(5771)) ShapePtr Shapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5772)) ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(5773)) ShapePtr Shapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5774)) ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(5775)) ShapePtr Shapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5776)) ShapePtr Shapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(5777)) ShapePtr Shapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5778)) FreeformBuilderPtr Shapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(5779)) ShapeRangePtr Shapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(5780)) HRESULT Shapes::SelectAll ( );
__declspec(implementation_key(5781)) ShapePtr Shapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(5782)) ShapePtr Shapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(5783)) ShapePtr Shapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(5784)) ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(5785)) _ApplicationPtr ShapeRange::GetApplication ( );
__declspec(implementation_key(5786)) enum XlCreator ShapeRange::GetCreator ( );
__declspec(implementation_key(5787)) IDispatchPtr ShapeRange::GetParent ( );
__declspec(implementation_key(5788)) long ShapeRange::GetCount ( );
__declspec(implementation_key(5789)) ShapePtr ShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(5790)) ShapePtr ShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(5791)) IUnknownPtr ShapeRange::Get_NewEnum ( );
__declspec(implementation_key(5792)) HRESULT ShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(5793)) HRESULT ShapeRange::Apply ( );
__declspec(implementation_key(5794)) HRESULT ShapeRange::Delete ( );
__declspec(implementation_key(5795)) HRESULT ShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(5796)) ShapeRangePtr ShapeRange::Duplicate ( );
__declspec(implementation_key(5797)) HRESULT ShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(5798)) HRESULT ShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(5799)) HRESULT ShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(5800)) HRESULT ShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(5801)) ShapePtr ShapeRange::Group ( );
__declspec(implementation_key(5802)) HRESULT ShapeRange::PickUp ( );
__declspec(implementation_key(5803)) HRESULT ShapeRange::RerouteConnections ( );
__declspec(implementation_key(5804)) ShapePtr ShapeRange::Regroup ( );
__declspec(implementation_key(5805)) HRESULT ShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5806)) HRESULT ShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(5807)) HRESULT ShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(5808)) HRESULT ShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(5809)) ShapeRangePtr ShapeRange::Ungroup ( );
__declspec(implementation_key(5810)) HRESULT ShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(5811)) AdjustmentsPtr ShapeRange::GetAdjustments ( );
__declspec(implementation_key(5812)) TextFramePtr ShapeRange::GetTextFrame ( );
__declspec(implementation_key(5813)) enum Office::MsoAutoShapeType ShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(5814)) void ShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType _arg1 );
__declspec(implementation_key(5815)) CalloutFormatPtr ShapeRange::GetCallout ( );
__declspec(implementation_key(5816)) long ShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(5817)) enum Office::MsoTriState ShapeRange::GetConnector ( );
__declspec(implementation_key(5818)) ConnectorFormatPtr ShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(5819)) FillFormatPtr ShapeRange::GetFill ( );
__declspec(implementation_key(5820)) GroupShapesPtr ShapeRange::GetGroupItems ( );
__declspec(implementation_key(5821)) float ShapeRange::GetHeight ( );
__declspec(implementation_key(5822)) void ShapeRange::PutHeight ( float _arg1 );
__declspec(implementation_key(5823)) enum Office::MsoTriState ShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(5824)) float ShapeRange::GetLeft ( );
__declspec(implementation_key(5825)) void ShapeRange::PutLeft ( float _arg1 );
__declspec(implementation_key(5826)) LineFormatPtr ShapeRange::GetLine ( );
__declspec(implementation_key(5827)) enum Office::MsoTriState ShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(5828)) void ShapeRange::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5829)) _bstr_t ShapeRange::GetName ( );
__declspec(implementation_key(5830)) void ShapeRange::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5831)) ShapeNodesPtr ShapeRange::GetNodes ( );
__declspec(implementation_key(5832)) float ShapeRange::GetRotation ( );
__declspec(implementation_key(5833)) void ShapeRange::PutRotation ( float _arg1 );
__declspec(implementation_key(5834)) PictureFormatPtr ShapeRange::GetPictureFormat ( );
__declspec(implementation_key(5835)) ShadowFormatPtr ShapeRange::GetShadow ( );
__declspec(implementation_key(5836)) TextEffectFormatPtr ShapeRange::GetTextEffect ( );
__declspec(implementation_key(5837)) ThreeDFormatPtr ShapeRange::GetThreeD ( );
__declspec(implementation_key(5838)) float ShapeRange::GetTop ( );
__declspec(implementation_key(5839)) void ShapeRange::PutTop ( float _arg1 );
__declspec(implementation_key(5840)) enum Office::MsoShapeType ShapeRange::GetType ( );
__declspec(implementation_key(5841)) enum Office::MsoTriState ShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(5842)) _variant_t ShapeRange::GetVertices ( );
__declspec(implementation_key(5843)) enum Office::MsoTriState ShapeRange::GetVisible ( );
__declspec(implementation_key(5844)) void ShapeRange::PutVisible ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(5845)) float ShapeRange::GetWidth ( );
__declspec(implementation_key(5846)) void ShapeRange::PutWidth ( float _arg1 );
__declspec(implementation_key(5847)) long ShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(5848)) enum Office::MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(5849)) void ShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode _arg1 );
__declspec(implementation_key(5850)) _bstr_t ShapeRange::GetAlternativeText ( );
__declspec(implementation_key(5851)) void ShapeRange::PutAlternativeText ( _bstr_t _arg1 );
__declspec(implementation_key(5852)) DiagramNodePtr ShapeRange::GetDiagramNode ( );
__declspec(implementation_key(5853)) enum Office::MsoTriState ShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(5854)) DiagramPtr ShapeRange::GetDiagram ( );
__declspec(implementation_key(5855)) enum Office::MsoTriState ShapeRange::GetHasDiagram ( );
__declspec(implementation_key(5856)) enum Office::MsoTriState ShapeRange::GetChild ( );
__declspec(implementation_key(5857)) ShapePtr ShapeRange::GetParentGroup ( );
__declspec(implementation_key(5858)) Office::CanvasShapesPtr ShapeRange::GetCanvasItems ( );
__declspec(implementation_key(5859)) long ShapeRange::GetID ( );
__declspec(implementation_key(5860)) HRESULT ShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(5861)) HRESULT ShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(5862)) HRESULT ShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(5863)) HRESULT ShapeRange::CanvasCropBottom ( float Increment );
__declspec(implementation_key(5864)) _ApplicationPtr GroupShapes::GetApplication ( );
__declspec(implementation_key(5865)) enum XlCreator GroupShapes::GetCreator ( );
__declspec(implementation_key(5866)) IDispatchPtr GroupShapes::GetParent ( );
__declspec(implementation_key(5867)) long GroupShapes::GetCount ( );
__declspec(implementation_key(5868)) ShapePtr GroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(5869)) ShapePtr GroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(5870)) IUnknownPtr GroupShapes::Get_NewEnum ( );
__declspec(implementation_key(5871)) ShapeRangePtr GroupShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(5872)) _ApplicationPtr TextFrame::GetApplication ( );
__declspec(implementation_key(5873)) enum XlCreator TextFrame::GetCreator ( );
__declspec(implementation_key(5874)) IDispatchPtr TextFrame::GetParent ( );
__declspec(implementation_key(5875)) float TextFrame::GetMarginBottom ( );
__declspec(implementation_key(5876)) void TextFrame::PutMarginBottom ( float _arg1 );
__declspec(implementation_key(5877)) float TextFrame::GetMarginLeft ( );
__declspec(implementation_key(5878)) void TextFrame::PutMarginLeft ( float _arg1 );
__declspec(implementation_key(5879)) float TextFrame::GetMarginRight ( );
__declspec(implementation_key(5880)) void TextFrame::PutMarginRight ( float _arg1 );
__declspec(implementation_key(5881)) float TextFrame::GetMarginTop ( );
__declspec(implementation_key(5882)) void TextFrame::PutMarginTop ( float _arg1 );
__declspec(implementation_key(5883)) enum Office::MsoTextOrientation TextFrame::GetOrientation ( );
__declspec(implementation_key(5884)) void TextFrame::PutOrientation ( enum Office::MsoTextOrientation _arg1 );
__declspec(implementation_key(5885)) CharactersPtr TextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(5886)) enum XlHAlign TextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(5887)) void TextFrame::PutHorizontalAlignment ( enum XlHAlign _arg1 );
__declspec(implementation_key(5888)) enum XlVAlign TextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(5889)) void TextFrame::PutVerticalAlignment ( enum XlVAlign _arg1 );
__declspec(implementation_key(5890)) VARIANT_BOOL TextFrame::GetAutoSize ( );
__declspec(implementation_key(5891)) void TextFrame::PutAutoSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5892)) long TextFrame::GetReadingOrder ( );
__declspec(implementation_key(5893)) void TextFrame::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(5894)) VARIANT_BOOL TextFrame::GetAutoMargins ( );
__declspec(implementation_key(5895)) void TextFrame::PutAutoMargins ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5896)) _ApplicationPtr ConnectorFormat::GetApplication ( );
__declspec(implementation_key(5897)) enum XlCreator ConnectorFormat::GetCreator ( );
__declspec(implementation_key(5898)) IDispatchPtr ConnectorFormat::GetParent ( );
__declspec(implementation_key(5899)) HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(5900)) HRESULT ConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(5901)) HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(5902)) HRESULT ConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(5903)) enum Office::MsoTriState ConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(5904)) ShapePtr ConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(5905)) long ConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(5906)) enum Office::MsoTriState ConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(5907)) ShapePtr ConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(5908)) long ConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(5909)) enum Office::MsoConnectorType ConnectorFormat::GetType ( );
__declspec(implementation_key(5910)) void ConnectorFormat::PutType ( enum Office::MsoConnectorType _arg1 );
__declspec(implementation_key(5911)) _ApplicationPtr FreeformBuilder::GetApplication ( );
__declspec(implementation_key(5912)) enum XlCreator FreeformBuilder::GetCreator ( );
__declspec(implementation_key(5913)) IDispatchPtr FreeformBuilder::GetParent ( );
__declspec(implementation_key(5914)) HRESULT FreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(5915)) ShapePtr FreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(5916)) _ApplicationPtr ControlFormat::GetApplication ( );
__declspec(implementation_key(5917)) enum XlCreator ControlFormat::GetCreator ( );
__declspec(implementation_key(5918)) IDispatchPtr ControlFormat::GetParent ( );
__declspec(implementation_key(5919)) HRESULT ControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(5920)) HRESULT ControlFormat::RemoveAllItems ( );
__declspec(implementation_key(5921)) HRESULT ControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(5922)) long ControlFormat::GetDropDownLines ( );
__declspec(implementation_key(5923)) void ControlFormat::PutDropDownLines ( long _arg1 );
__declspec(implementation_key(5924)) VARIANT_BOOL ControlFormat::GetEnabled ( );
__declspec(implementation_key(5925)) void ControlFormat::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5926)) long ControlFormat::GetLargeChange ( );
__declspec(implementation_key(5927)) void ControlFormat::PutLargeChange ( long _arg1 );
__declspec(implementation_key(5928)) _bstr_t ControlFormat::GetLinkedCell ( );
__declspec(implementation_key(5929)) void ControlFormat::PutLinkedCell ( _bstr_t _arg1 );
__declspec(implementation_key(5930)) _variant_t ControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(5931)) long ControlFormat::GetListCount ( );
__declspec(implementation_key(5932)) void ControlFormat::PutListCount ( long _arg1 );
__declspec(implementation_key(5933)) _bstr_t ControlFormat::GetListFillRange ( );
__declspec(implementation_key(5934)) void ControlFormat::PutListFillRange ( _bstr_t _arg1 );
__declspec(implementation_key(5935)) long ControlFormat::GetListIndex ( );
__declspec(implementation_key(5936)) void ControlFormat::PutListIndex ( long _arg1 );
__declspec(implementation_key(5937)) VARIANT_BOOL ControlFormat::GetLockedText ( );
__declspec(implementation_key(5938)) void ControlFormat::PutLockedText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5939)) long ControlFormat::GetMax ( );
__declspec(implementation_key(5940)) void ControlFormat::PutMax ( long _arg1 );
__declspec(implementation_key(5941)) long ControlFormat::GetMin ( );
__declspec(implementation_key(5942)) void ControlFormat::PutMin ( long _arg1 );
__declspec(implementation_key(5943)) long ControlFormat::GetMultiSelect ( );
__declspec(implementation_key(5944)) void ControlFormat::PutMultiSelect ( long _arg1 );
__declspec(implementation_key(5945)) VARIANT_BOOL ControlFormat::GetPrintObject ( );
__declspec(implementation_key(5946)) void ControlFormat::PutPrintObject ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5947)) long ControlFormat::GetSmallChange ( );
__declspec(implementation_key(5948)) void ControlFormat::PutSmallChange ( long _arg1 );
__declspec(implementation_key(5949)) long ControlFormat::Get_Default ( );
__declspec(implementation_key(5950)) void ControlFormat::Put_Default ( long _arg1 );
__declspec(implementation_key(5951)) long ControlFormat::GetValue ( );
__declspec(implementation_key(5952)) void ControlFormat::PutValue ( long _arg1 );
__declspec(implementation_key(5953)) _ApplicationPtr OLEFormat::GetApplication ( );
__declspec(implementation_key(5954)) enum XlCreator OLEFormat::GetCreator ( );
__declspec(implementation_key(5955)) IDispatchPtr OLEFormat::GetParent ( );
__declspec(implementation_key(5956)) HRESULT OLEFormat::Activate ( );
__declspec(implementation_key(5957)) IDispatchPtr OLEFormat::GetObject ( );
__declspec(implementation_key(5958)) _bstr_t OLEFormat::GetprogID ( );
__declspec(implementation_key(5959)) HRESULT OLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(5960)) _ApplicationPtr LinkFormat::GetApplication ( );
__declspec(implementation_key(5961)) enum XlCreator LinkFormat::GetCreator ( );
__declspec(implementation_key(5962)) IDispatchPtr LinkFormat::GetParent ( );
__declspec(implementation_key(5963)) VARIANT_BOOL LinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(5964)) void LinkFormat::PutAutoUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5965)) VARIANT_BOOL LinkFormat::GetLocked ( );
__declspec(implementation_key(5966)) void LinkFormat::PutLocked ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5967)) HRESULT LinkFormat::Update ( );
__declspec(implementation_key(5968)) _ApplicationPtr PublishObjects::GetApplication ( );
__declspec(implementation_key(5969)) enum XlCreator PublishObjects::GetCreator ( );
__declspec(implementation_key(5970)) IDispatchPtr PublishObjects::GetParent ( );
__declspec(implementation_key(5971)) PublishObjectPtr PublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(5972)) long PublishObjects::GetCount ( );
__declspec(implementation_key(5973)) PublishObjectPtr PublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(5974)) PublishObjectPtr PublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(5975)) IUnknownPtr PublishObjects::Get_NewEnum ( );
__declspec(implementation_key(5976)) HRESULT PublishObjects::Delete ( );
__declspec(implementation_key(5977)) HRESULT PublishObjects::Publish ( );
__declspec(implementation_key(5978)) _ApplicationPtr OLEDBError::GetApplication ( );
__declspec(implementation_key(5979)) enum XlCreator OLEDBError::GetCreator ( );
__declspec(implementation_key(5980)) IDispatchPtr OLEDBError::GetParent ( );
__declspec(implementation_key(5981)) _bstr_t OLEDBError::GetSqlState ( );
__declspec(implementation_key(5982)) _bstr_t OLEDBError::GetErrorString ( );
__declspec(implementation_key(5983)) long OLEDBError::GetNative ( );
__declspec(implementation_key(5984)) long OLEDBError::GetNumber ( );
__declspec(implementation_key(5985)) long OLEDBError::GetStage ( );
__declspec(implementation_key(5986)) _ApplicationPtr OLEDBErrors::GetApplication ( );
__declspec(implementation_key(5987)) enum XlCreator OLEDBErrors::GetCreator ( );
__declspec(implementation_key(5988)) IDispatchPtr OLEDBErrors::GetParent ( );
__declspec(implementation_key(5989)) long OLEDBErrors::GetCount ( );
__declspec(implementation_key(5990)) OLEDBErrorPtr OLEDBErrors::Item ( long Index );
__declspec(implementation_key(5991)) OLEDBErrorPtr OLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(5992)) IUnknownPtr OLEDBErrors::_NewEnum ( );
__declspec(implementation_key(5993)) _ApplicationPtr Phonetics::GetApplication ( );
__declspec(implementation_key(5994)) enum XlCreator Phonetics::GetCreator ( );
__declspec(implementation_key(5995)) IDispatchPtr Phonetics::GetParent ( );
__declspec(implementation_key(5996)) long Phonetics::GetCount ( );
__declspec(implementation_key(5997)) long Phonetics::GetStart ( );
__declspec(implementation_key(5998)) long Phonetics::GetLength ( );
__declspec(implementation_key(5999)) VARIANT_BOOL Phonetics::GetVisible ( );
__declspec(implementation_key(6000)) void Phonetics::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6001)) long Phonetics::GetCharacterType ( );
__declspec(implementation_key(6002)) void Phonetics::PutCharacterType ( long _arg1 );
__declspec(implementation_key(6003)) long Phonetics::GetAlignment ( );
__declspec(implementation_key(6004)) void Phonetics::PutAlignment ( long _arg1 );
__declspec(implementation_key(6005)) FontPtr Phonetics::GetFont ( );
__declspec(implementation_key(6006)) IDispatchPtr Phonetics::GetItem ( long Index );
__declspec(implementation_key(6007)) HRESULT Phonetics::Delete ( );
__declspec(implementation_key(6008)) HRESULT Phonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(6009)) _bstr_t Phonetics::GetText ( );
__declspec(implementation_key(6010)) void Phonetics::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(6011)) IDispatchPtr Phonetics::Get_Default ( long Index );
__declspec(implementation_key(6012)) IUnknownPtr Phonetics::Get_NewEnum ( );
__declspec(implementation_key(6013)) _ApplicationPtr PivotLayout::GetApplication ( );
__declspec(implementation_key(6014)) enum XlCreator PivotLayout::GetCreator ( );
__declspec(implementation_key(6015)) IDispatchPtr PivotLayout::GetParent ( );
__declspec(implementation_key(6016)) IDispatchPtr PivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(6017)) IDispatchPtr PivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(6018)) IDispatchPtr PivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(6019)) IDispatchPtr PivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(6020)) IDispatchPtr PivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(6021)) IDispatchPtr PivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(6022)) IDispatchPtr PivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(6023)) CubeFieldsPtr PivotLayout::GetCubeFields ( );
__declspec(implementation_key(6024)) PivotCachePtr PivotLayout::GetPivotCache ( );
__declspec(implementation_key(6025)) PivotTablePtr PivotLayout::GetPivotTable ( );
__declspec(implementation_key(6026)) _bstr_t PivotLayout::GetInnerDetail ( );
__declspec(implementation_key(6027)) void PivotLayout::PutInnerDetail ( _bstr_t _arg1 );
__declspec(implementation_key(6028)) HRESULT PivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(6029)) _ApplicationPtr DisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(6030)) enum XlCreator DisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(6031)) IDispatchPtr DisplayUnitLabel::GetParent ( );
__declspec(implementation_key(6032)) _bstr_t DisplayUnitLabel::GetName ( );
__declspec(implementation_key(6033)) _variant_t DisplayUnitLabel::Select ( );
__declspec(implementation_key(6034)) BorderPtr DisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(6035)) _variant_t DisplayUnitLabel::Delete ( );
__declspec(implementation_key(6036)) InteriorPtr DisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(6037)) ChartFillFormatPtr DisplayUnitLabel::GetFill ( );
__declspec(implementation_key(6038)) _bstr_t DisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(6039)) void DisplayUnitLabel::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(6040)) CharactersPtr DisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(6041)) FontPtr DisplayUnitLabel::GetFont ( );
__declspec(implementation_key(6042)) _variant_t DisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(6043)) void DisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(6044)) double DisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(6045)) void DisplayUnitLabel::PutLeft ( double _arg1 );
__declspec(implementation_key(6046)) _variant_t DisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(6047)) void DisplayUnitLabel::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(6048)) VARIANT_BOOL DisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(6049)) void DisplayUnitLabel::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6050)) _bstr_t DisplayUnitLabel::GetText ( );
__declspec(implementation_key(6051)) void DisplayUnitLabel::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(6052)) double DisplayUnitLabel::GetTop ( );
__declspec(implementation_key(6053)) void DisplayUnitLabel::PutTop ( double _arg1 );
__declspec(implementation_key(6054)) _variant_t DisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(6055)) void DisplayUnitLabel::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(6056)) long DisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(6057)) void DisplayUnitLabel::PutReadingOrder ( long _arg1 );
__declspec(implementation_key(6058)) _variant_t DisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(6059)) void DisplayUnitLabel::PutAutoScaleFont ( const _variant_t & _arg1 );
__declspec(implementation_key(6060)) _ApplicationPtr CellFormat::GetApplication ( );
__declspec(implementation_key(6061)) enum XlCreator CellFormat::GetCreator ( );
__declspec(implementation_key(6062)) IDispatchPtr CellFormat::GetParent ( );
__declspec(implementation_key(6063)) BordersPtr CellFormat::GetBorders ( );
__declspec(implementation_key(6064)) void CellFormat::PutRefBorders ( struct Borders * _arg1 );
__declspec(implementation_key(6065)) FontPtr CellFormat::GetFont ( );
__declspec(implementation_key(6066)) void CellFormat::PutRefFont ( struct Font * _arg1 );
__declspec(implementation_key(6067)) InteriorPtr CellFormat::GetInterior ( );
__declspec(implementation_key(6068)) void CellFormat::PutRefInterior ( struct Interior * _arg1 );
__declspec(implementation_key(6069)) _variant_t CellFormat::GetNumberFormat ( );
__declspec(implementation_key(6070)) void CellFormat::PutNumberFormat ( const _variant_t & _arg1 );
__declspec(implementation_key(6071)) _variant_t CellFormat::GetNumberFormatLocal ( );
__declspec(implementation_key(6072)) void CellFormat::PutNumberFormatLocal ( const _variant_t & _arg1 );
__declspec(implementation_key(6073)) _variant_t CellFormat::GetAddIndent ( );
__declspec(implementation_key(6074)) void CellFormat::PutAddIndent ( const _variant_t & _arg1 );
__declspec(implementation_key(6075)) _variant_t CellFormat::GetIndentLevel ( );
__declspec(implementation_key(6076)) void CellFormat::PutIndentLevel ( const _variant_t & _arg1 );
__declspec(implementation_key(6077)) _variant_t CellFormat::GetHorizontalAlignment ( );
__declspec(implementation_key(6078)) void CellFormat::PutHorizontalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(6079)) _variant_t CellFormat::GetVerticalAlignment ( );
__declspec(implementation_key(6080)) void CellFormat::PutVerticalAlignment ( const _variant_t & _arg1 );
__declspec(implementation_key(6081)) _variant_t CellFormat::GetOrientation ( );
__declspec(implementation_key(6082)) void CellFormat::PutOrientation ( const _variant_t & _arg1 );
__declspec(implementation_key(6083)) _variant_t CellFormat::GetShrinkToFit ( );
__declspec(implementation_key(6084)) void CellFormat::PutShrinkToFit ( const _variant_t & _arg1 );
__declspec(implementation_key(6085)) _variant_t CellFormat::GetWrapText ( );
__declspec(implementation_key(6086)) void CellFormat::PutWrapText ( const _variant_t & _arg1 );
__declspec(implementation_key(6087)) _variant_t CellFormat::GetLocked ( );
__declspec(implementation_key(6088)) void CellFormat::PutLocked ( const _variant_t & _arg1 );
__declspec(implementation_key(6089)) _variant_t CellFormat::GetFormulaHidden ( );
__declspec(implementation_key(6090)) void CellFormat::PutFormulaHidden ( const _variant_t & _arg1 );
__declspec(implementation_key(6091)) _variant_t CellFormat::GetMergeCells ( );
__declspec(implementation_key(6092)) void CellFormat::PutMergeCells ( const _variant_t & _arg1 );
__declspec(implementation_key(6093)) HRESULT CellFormat::Clear ( );
__declspec(implementation_key(6094)) _ApplicationPtr UsedObjects::GetApplication ( );
__declspec(implementation_key(6095)) enum XlCreator UsedObjects::GetCreator ( );
__declspec(implementation_key(6096)) IDispatchPtr UsedObjects::GetParent ( );
__declspec(implementation_key(6097)) long UsedObjects::GetCount ( );
__declspec(implementation_key(6098)) IUnknownPtr UsedObjects::Get_NewEnum ( );
__declspec(implementation_key(6099)) IDispatchPtr UsedObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6100)) IDispatchPtr UsedObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6101)) _ApplicationPtr CustomProperties::GetApplication ( );
__declspec(implementation_key(6102)) enum XlCreator CustomProperties::GetCreator ( );
__declspec(implementation_key(6103)) IDispatchPtr CustomProperties::GetParent ( );
__declspec(implementation_key(6104)) CustomPropertyPtr CustomProperties::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(6105)) long CustomProperties::GetCount ( );
__declspec(implementation_key(6106)) CustomPropertyPtr CustomProperties::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6107)) CustomPropertyPtr CustomProperties::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6108)) IUnknownPtr CustomProperties::Get_NewEnum ( );
__declspec(implementation_key(6109)) _ApplicationPtr CustomProperty::GetApplication ( );
__declspec(implementation_key(6110)) enum XlCreator CustomProperty::GetCreator ( );
__declspec(implementation_key(6111)) IDispatchPtr CustomProperty::GetParent ( );
__declspec(implementation_key(6112)) _bstr_t CustomProperty::GetName ( );
__declspec(implementation_key(6113)) void CustomProperty::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(6114)) _variant_t CustomProperty::GetValue ( );
__declspec(implementation_key(6115)) void CustomProperty::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(6116)) _variant_t CustomProperty::Get_Default ( );
__declspec(implementation_key(6117)) HRESULT CustomProperty::Delete ( );
__declspec(implementation_key(6118)) _ApplicationPtr CalculatedMembers::GetApplication ( );
__declspec(implementation_key(6119)) enum XlCreator CalculatedMembers::GetCreator ( );
__declspec(implementation_key(6120)) IDispatchPtr CalculatedMembers::GetParent ( );
__declspec(implementation_key(6121)) long CalculatedMembers::GetCount ( );
__declspec(implementation_key(6122)) CalculatedMemberPtr CalculatedMembers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6123)) CalculatedMemberPtr CalculatedMembers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6124)) IUnknownPtr CalculatedMembers::Get_NewEnum ( );
__declspec(implementation_key(6125)) CalculatedMemberPtr CalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type );
__declspec(implementation_key(6126)) _ApplicationPtr CalculatedMember::GetApplication ( );
__declspec(implementation_key(6127)) enum XlCreator CalculatedMember::GetCreator ( );
__declspec(implementation_key(6128)) IDispatchPtr CalculatedMember::GetParent ( );
__declspec(implementation_key(6129)) _bstr_t CalculatedMember::GetName ( );
__declspec(implementation_key(6130)) _bstr_t CalculatedMember::GetFormula ( );
__declspec(implementation_key(6131)) _bstr_t CalculatedMember::GetSourceName ( );
__declspec(implementation_key(6132)) long CalculatedMember::GetSolveOrder ( );
__declspec(implementation_key(6133)) VARIANT_BOOL CalculatedMember::GetIsValid ( );
__declspec(implementation_key(6134)) _bstr_t CalculatedMember::Get_Default ( );
__declspec(implementation_key(6135)) HRESULT CalculatedMember::Delete ( );
__declspec(implementation_key(6136)) enum XlCalculatedMemberType CalculatedMember::GetType ( );
__declspec(implementation_key(6137)) _ApplicationPtr Watches::GetApplication ( );
__declspec(implementation_key(6138)) enum XlCreator Watches::GetCreator ( );
__declspec(implementation_key(6139)) IDispatchPtr Watches::GetParent ( );
__declspec(implementation_key(6140)) WatchPtr Watches::Add ( const _variant_t & Source );
__declspec(implementation_key(6141)) long Watches::GetCount ( );
__declspec(implementation_key(6142)) WatchPtr Watches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6143)) WatchPtr Watches::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6144)) IUnknownPtr Watches::Get_NewEnum ( );
__declspec(implementation_key(6145)) HRESULT Watches::Delete ( );
__declspec(implementation_key(6146)) _ApplicationPtr Watch::GetApplication ( );
__declspec(implementation_key(6147)) enum XlCreator Watch::GetCreator ( );
__declspec(implementation_key(6148)) IDispatchPtr Watch::GetParent ( );
__declspec(implementation_key(6149)) HRESULT Watch::Delete ( );
__declspec(implementation_key(6150)) _variant_t Watch::GetSource ( );
__declspec(implementation_key(6151)) _ApplicationPtr PivotCell::GetApplication ( );
__declspec(implementation_key(6152)) enum XlCreator PivotCell::GetCreator ( );
__declspec(implementation_key(6153)) IDispatchPtr PivotCell::GetParent ( );
__declspec(implementation_key(6154)) enum XlPivotCellType PivotCell::GetPivotCellType ( );
__declspec(implementation_key(6155)) PivotTablePtr PivotCell::GetPivotTable ( );
__declspec(implementation_key(6156)) PivotFieldPtr PivotCell::GetDataField ( );
__declspec(implementation_key(6157)) PivotFieldPtr PivotCell::GetPivotField ( );
__declspec(implementation_key(6158)) PivotItemPtr PivotCell::GetPivotItem ( );
__declspec(implementation_key(6159)) PivotItemListPtr PivotCell::GetRowItems ( );
__declspec(implementation_key(6160)) PivotItemListPtr PivotCell::GetColumnItems ( );
__declspec(implementation_key(6161)) RangePtr PivotCell::GetRange ( );
__declspec(implementation_key(6162)) _bstr_t PivotCell::GetDummy18 ( );
__declspec(implementation_key(6163)) enum XlConsolidationFunction PivotCell::GetCustomSubtotalFunction ( );
__declspec(implementation_key(6164)) _ApplicationPtr Graphic::GetApplication ( );
__declspec(implementation_key(6165)) enum XlCreator Graphic::GetCreator ( );
__declspec(implementation_key(6166)) IDispatchPtr Graphic::GetParent ( );
__declspec(implementation_key(6167)) float Graphic::GetBrightness ( );
__declspec(implementation_key(6168)) void Graphic::PutBrightness ( float _arg1 );
__declspec(implementation_key(6169)) enum Office::MsoPictureColorType Graphic::GetColorType ( );
__declspec(implementation_key(6170)) void Graphic::PutColorType ( enum Office::MsoPictureColorType _arg1 );
__declspec(implementation_key(6171)) float Graphic::GetContrast ( );
__declspec(implementation_key(6172)) void Graphic::PutContrast ( float _arg1 );
__declspec(implementation_key(6173)) float Graphic::GetCropBottom ( );
__declspec(implementation_key(6174)) void Graphic::PutCropBottom ( float _arg1 );
__declspec(implementation_key(6175)) float Graphic::GetCropLeft ( );
__declspec(implementation_key(6176)) void Graphic::PutCropLeft ( float _arg1 );
__declspec(implementation_key(6177)) float Graphic::GetCropRight ( );
__declspec(implementation_key(6178)) void Graphic::PutCropRight ( float _arg1 );
__declspec(implementation_key(6179)) float Graphic::GetCropTop ( );
__declspec(implementation_key(6180)) void Graphic::PutCropTop ( float _arg1 );
__declspec(implementation_key(6181)) _bstr_t Graphic::GetFilename ( );
__declspec(implementation_key(6182)) void Graphic::PutFilename ( _bstr_t _arg1 );
__declspec(implementation_key(6183)) float Graphic::GetHeight ( );
__declspec(implementation_key(6184)) void Graphic::PutHeight ( float _arg1 );
__declspec(implementation_key(6185)) enum Office::MsoTriState Graphic::GetLockAspectRatio ( );
__declspec(implementation_key(6186)) void Graphic::PutLockAspectRatio ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(6187)) float Graphic::GetWidth ( );
__declspec(implementation_key(6188)) void Graphic::PutWidth ( float _arg1 );
__declspec(implementation_key(6189)) _ApplicationPtr AutoRecover::GetApplication ( );
__declspec(implementation_key(6190)) enum XlCreator AutoRecover::GetCreator ( );
__declspec(implementation_key(6191)) IDispatchPtr AutoRecover::GetParent ( );
__declspec(implementation_key(6192)) VARIANT_BOOL AutoRecover::GetEnabled ( );
__declspec(implementation_key(6193)) void AutoRecover::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6194)) long AutoRecover::GetTime ( );
__declspec(implementation_key(6195)) void AutoRecover::PutTime ( long _arg1 );
__declspec(implementation_key(6196)) _bstr_t AutoRecover::GetPath ( );
__declspec(implementation_key(6197)) void AutoRecover::PutPath ( _bstr_t _arg1 );
__declspec(implementation_key(6198)) _ApplicationPtr ErrorCheckingOptions::GetApplication ( );
__declspec(implementation_key(6199)) enum XlCreator ErrorCheckingOptions::GetCreator ( );
__declspec(implementation_key(6200)) IDispatchPtr ErrorCheckingOptions::GetParent ( );
__declspec(implementation_key(6201)) VARIANT_BOOL ErrorCheckingOptions::GetBackgroundChecking ( );
__declspec(implementation_key(6202)) void ErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6203)) enum XlColorIndex ErrorCheckingOptions::GetIndicatorColorIndex ( );
__declspec(implementation_key(6204)) void ErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(6205)) VARIANT_BOOL ErrorCheckingOptions::GetEvaluateToError ( );
__declspec(implementation_key(6206)) void ErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6207)) VARIANT_BOOL ErrorCheckingOptions::GetTextDate ( );
__declspec(implementation_key(6208)) void ErrorCheckingOptions::PutTextDate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6209)) VARIANT_BOOL ErrorCheckingOptions::GetNumberAsText ( );
__declspec(implementation_key(6210)) void ErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6211)) VARIANT_BOOL ErrorCheckingOptions::GetInconsistentFormula ( );
__declspec(implementation_key(6212)) void ErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6213)) VARIANT_BOOL ErrorCheckingOptions::GetOmittedCells ( );
__declspec(implementation_key(6214)) void ErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6215)) VARIANT_BOOL ErrorCheckingOptions::GetUnlockedFormulaCells ( );
__declspec(implementation_key(6216)) void ErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6217)) VARIANT_BOOL ErrorCheckingOptions::GetEmptyCellReferences ( );
__declspec(implementation_key(6218)) void ErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6219)) VARIANT_BOOL ErrorCheckingOptions::GetListDataValidation ( );
__declspec(implementation_key(6220)) void ErrorCheckingOptions::PutListDataValidation ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6221)) _ApplicationPtr Errors::GetApplication ( );
__declspec(implementation_key(6222)) enum XlCreator Errors::GetCreator ( );
__declspec(implementation_key(6223)) IDispatchPtr Errors::GetParent ( );
__declspec(implementation_key(6224)) ErrorPtr Errors::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6225)) ErrorPtr Errors::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6226)) _ApplicationPtr Error::GetApplication ( );
__declspec(implementation_key(6227)) enum XlCreator Error::GetCreator ( );
__declspec(implementation_key(6228)) IDispatchPtr Error::GetParent ( );
__declspec(implementation_key(6229)) VARIANT_BOOL Error::GetValue ( );
__declspec(implementation_key(6230)) VARIANT_BOOL Error::GetIgnore ( );
__declspec(implementation_key(6231)) void Error::PutIgnore ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6232)) _ApplicationPtr SmartTagAction::GetApplication ( );
__declspec(implementation_key(6233)) enum XlCreator SmartTagAction::GetCreator ( );
__declspec(implementation_key(6234)) IDispatchPtr SmartTagAction::GetParent ( );
__declspec(implementation_key(6235)) _bstr_t SmartTagAction::GetName ( );
__declspec(implementation_key(6236)) HRESULT SmartTagAction::Execute ( );
__declspec(implementation_key(6237)) _bstr_t SmartTagAction::Get_Default ( );
__declspec(implementation_key(6238)) enum XlSmartTagControlType SmartTagAction::GetType ( );
__declspec(implementation_key(6239)) VARIANT_BOOL SmartTagAction::GetPresentInPane ( );
__declspec(implementation_key(6240)) VARIANT_BOOL SmartTagAction::GetExpandHelp ( );
__declspec(implementation_key(6241)) void SmartTagAction::PutExpandHelp ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6242)) VARIANT_BOOL SmartTagAction::GetCheckboxState ( );
__declspec(implementation_key(6243)) void SmartTagAction::PutCheckboxState ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6244)) _bstr_t SmartTagAction::GetTextboxText ( );
__declspec(implementation_key(6245)) void SmartTagAction::PutTextboxText ( _bstr_t _arg1 );
__declspec(implementation_key(6246)) long SmartTagAction::GetListSelection ( );
__declspec(implementation_key(6247)) void SmartTagAction::PutListSelection ( long _arg1 );
__declspec(implementation_key(6248)) long SmartTagAction::GetRadioGroupSelection ( );
__declspec(implementation_key(6249)) void SmartTagAction::PutRadioGroupSelection ( long _arg1 );
__declspec(implementation_key(6250)) IDispatchPtr SmartTagAction::GetActiveXControl ( );
__declspec(implementation_key(6251)) _ApplicationPtr SmartTagActions::GetApplication ( );
__declspec(implementation_key(6252)) enum XlCreator SmartTagActions::GetCreator ( );
__declspec(implementation_key(6253)) IDispatchPtr SmartTagActions::GetParent ( );
__declspec(implementation_key(6254)) long SmartTagActions::GetCount ( );
__declspec(implementation_key(6255)) SmartTagActionPtr SmartTagActions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6256)) SmartTagActionPtr SmartTagActions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6257)) IUnknownPtr SmartTagActions::Get_NewEnum ( );
__declspec(implementation_key(6258)) _ApplicationPtr SmartTag::GetApplication ( );
__declspec(implementation_key(6259)) enum XlCreator SmartTag::GetCreator ( );
__declspec(implementation_key(6260)) IDispatchPtr SmartTag::GetParent ( );
__declspec(implementation_key(6261)) _bstr_t SmartTag::GetDownloadURL ( );
__declspec(implementation_key(6262)) _bstr_t SmartTag::GetName ( );
__declspec(implementation_key(6263)) _bstr_t SmartTag::Get_Default ( );
__declspec(implementation_key(6264)) _bstr_t SmartTag::GetXML ( );
__declspec(implementation_key(6265)) RangePtr SmartTag::GetRange ( );
__declspec(implementation_key(6266)) HRESULT SmartTag::Delete ( );
__declspec(implementation_key(6267)) SmartTagActionsPtr SmartTag::GetSmartTagActions ( );
__declspec(implementation_key(6268)) CustomPropertiesPtr SmartTag::GetProperties ( );
__declspec(implementation_key(6269)) _ApplicationPtr SmartTags::GetApplication ( );
__declspec(implementation_key(6270)) enum XlCreator SmartTags::GetCreator ( );
__declspec(implementation_key(6271)) IDispatchPtr SmartTags::GetParent ( );
__declspec(implementation_key(6272)) SmartTagPtr SmartTags::Add ( _bstr_t SmartTagType );
__declspec(implementation_key(6273)) long SmartTags::GetCount ( );
__declspec(implementation_key(6274)) SmartTagPtr SmartTags::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6275)) IUnknownPtr SmartTags::Get_NewEnum ( );
__declspec(implementation_key(6276)) _ApplicationPtr SmartTagRecognizer::GetApplication ( );
__declspec(implementation_key(6277)) enum XlCreator SmartTagRecognizer::GetCreator ( );
__declspec(implementation_key(6278)) IDispatchPtr SmartTagRecognizer::GetParent ( );
__declspec(implementation_key(6279)) VARIANT_BOOL SmartTagRecognizer::GetEnabled ( );
__declspec(implementation_key(6280)) void SmartTagRecognizer::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6281)) _bstr_t SmartTagRecognizer::GetprogID ( );
__declspec(implementation_key(6282)) _bstr_t SmartTagRecognizer::Get_Default ( );
__declspec(implementation_key(6283)) _bstr_t SmartTagRecognizer::GetFullName ( );
__declspec(implementation_key(6284)) _ApplicationPtr SmartTagRecognizers::GetApplication ( );
__declspec(implementation_key(6285)) enum XlCreator SmartTagRecognizers::GetCreator ( );
__declspec(implementation_key(6286)) IDispatchPtr SmartTagRecognizers::GetParent ( );
__declspec(implementation_key(6287)) long SmartTagRecognizers::GetCount ( );
__declspec(implementation_key(6288)) SmartTagRecognizerPtr SmartTagRecognizers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6289)) SmartTagRecognizerPtr SmartTagRecognizers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6290)) IUnknownPtr SmartTagRecognizers::Get_NewEnum ( );
__declspec(implementation_key(6291)) VARIANT_BOOL SmartTagRecognizers::GetRecognize ( );
__declspec(implementation_key(6292)) void SmartTagRecognizers::PutRecognize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6293)) _ApplicationPtr SmartTagOptions::GetApplication ( );
__declspec(implementation_key(6294)) enum XlCreator SmartTagOptions::GetCreator ( );
__declspec(implementation_key(6295)) IDispatchPtr SmartTagOptions::GetParent ( );
__declspec(implementation_key(6296)) enum XlSmartTagDisplayMode SmartTagOptions::GetDisplaySmartTags ( );
__declspec(implementation_key(6297)) void SmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode _arg1 );
__declspec(implementation_key(6298)) VARIANT_BOOL SmartTagOptions::GetEmbedSmartTags ( );
__declspec(implementation_key(6299)) void SmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6300)) long SpellingOptions::GetDictLang ( );
__declspec(implementation_key(6301)) void SpellingOptions::PutDictLang ( long _arg1 );
__declspec(implementation_key(6302)) _bstr_t SpellingOptions::GetUserDict ( );
__declspec(implementation_key(6303)) void SpellingOptions::PutUserDict ( _bstr_t _arg1 );
__declspec(implementation_key(6304)) VARIANT_BOOL SpellingOptions::GetIgnoreCaps ( );
__declspec(implementation_key(6305)) void SpellingOptions::PutIgnoreCaps ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6306)) VARIANT_BOOL SpellingOptions::GetSuggestMainOnly ( );
__declspec(implementation_key(6307)) void SpellingOptions::PutSuggestMainOnly ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6308)) VARIANT_BOOL SpellingOptions::GetIgnoreMixedDigits ( );
__declspec(implementation_key(6309)) void SpellingOptions::PutIgnoreMixedDigits ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6310)) VARIANT_BOOL SpellingOptions::GetIgnoreFileNames ( );
__declspec(implementation_key(6311)) void SpellingOptions::PutIgnoreFileNames ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6312)) VARIANT_BOOL SpellingOptions::GetGermanPostReform ( );
__declspec(implementation_key(6313)) void SpellingOptions::PutGermanPostReform ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6314)) VARIANT_BOOL SpellingOptions::GetKoreanCombineAux ( );
__declspec(implementation_key(6315)) void SpellingOptions::PutKoreanCombineAux ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6316)) VARIANT_BOOL SpellingOptions::GetKoreanUseAutoChangeList ( );
__declspec(implementation_key(6317)) void SpellingOptions::PutKoreanUseAutoChangeList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6318)) VARIANT_BOOL SpellingOptions::GetKoreanProcessCompound ( );
__declspec(implementation_key(6319)) void SpellingOptions::PutKoreanProcessCompound ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6320)) enum XlHebrewModes SpellingOptions::GetHebrewModes ( );
__declspec(implementation_key(6321)) void SpellingOptions::PutHebrewModes ( enum XlHebrewModes _arg1 );
__declspec(implementation_key(6322)) enum XlArabicModes SpellingOptions::GetArabicModes ( );
__declspec(implementation_key(6323)) void SpellingOptions::PutArabicModes ( enum XlArabicModes _arg1 );
__declspec(implementation_key(6324)) HRESULT Speech::Speak ( _bstr_t Text, const _variant_t & SpeakAsync, const _variant_t & SpeakXML, const _variant_t & Purge );
__declspec(implementation_key(6325)) enum XlSpeakDirection Speech::GetDirection ( );
__declspec(implementation_key(6326)) void Speech::PutDirection ( enum XlSpeakDirection _arg1 );
__declspec(implementation_key(6327)) VARIANT_BOOL Speech::GetSpeakCellOnEnter ( );
__declspec(implementation_key(6328)) void Speech::PutSpeakCellOnEnter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6329)) VARIANT_BOOL Protection::GetAllowFormattingCells ( );
__declspec(implementation_key(6330)) VARIANT_BOOL Protection::GetAllowFormattingColumns ( );
__declspec(implementation_key(6331)) VARIANT_BOOL Protection::GetAllowFormattingRows ( );
__declspec(implementation_key(6332)) VARIANT_BOOL Protection::GetAllowInsertingColumns ( );
__declspec(implementation_key(6333)) VARIANT_BOOL Protection::GetAllowInsertingRows ( );
__declspec(implementation_key(6334)) VARIANT_BOOL Protection::GetAllowInsertingHyperlinks ( );
__declspec(implementation_key(6335)) VARIANT_BOOL Protection::GetAllowDeletingColumns ( );
__declspec(implementation_key(6336)) VARIANT_BOOL Protection::GetAllowDeletingRows ( );
__declspec(implementation_key(6337)) VARIANT_BOOL Protection::GetAllowSorting ( );
__declspec(implementation_key(6338)) VARIANT_BOOL Protection::GetAllowFiltering ( );
__declspec(implementation_key(6339)) VARIANT_BOOL Protection::GetAllowUsingPivotTables ( );
__declspec(implementation_key(6340)) AllowEditRangesPtr Protection::GetAllowEditRanges ( );
__declspec(implementation_key(6341)) _ApplicationPtr PivotItemList::GetApplication ( );
__declspec(implementation_key(6342)) enum XlCreator PivotItemList::GetCreator ( );
__declspec(implementation_key(6343)) IDispatchPtr PivotItemList::GetParent ( );
__declspec(implementation_key(6344)) long PivotItemList::GetCount ( );
__declspec(implementation_key(6345)) PivotItemPtr PivotItemList::Item ( const _variant_t & Index );
__declspec(implementation_key(6346)) PivotItemPtr PivotItemList::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(6347)) IUnknownPtr PivotItemList::_NewEnum ( );
__declspec(implementation_key(6348)) _ApplicationPtr Tab::GetApplication ( );
__declspec(implementation_key(6349)) enum XlCreator Tab::GetCreator ( );
__declspec(implementation_key(6350)) IDispatchPtr Tab::GetParent ( );
__declspec(implementation_key(6351)) _variant_t Tab::GetColor ( );
__declspec(implementation_key(6352)) void Tab::PutColor ( const _variant_t & _arg1 );
__declspec(implementation_key(6353)) enum XlColorIndex Tab::GetColorIndex ( );
__declspec(implementation_key(6354)) void Tab::PutColorIndex ( enum XlColorIndex _arg1 );
__declspec(implementation_key(6355)) long AllowEditRanges::GetCount ( );
__declspec(implementation_key(6356)) AllowEditRangePtr AllowEditRanges::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6357)) AllowEditRangePtr AllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password );
__declspec(implementation_key(6358)) AllowEditRangePtr AllowEditRanges::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6359)) IUnknownPtr AllowEditRanges::Get_NewEnum ( );
__declspec(implementation_key(6360)) VARIANT_BOOL IProtection::GetAllowFormattingCells ( );
__declspec(implementation_key(6361)) VARIANT_BOOL IProtection::GetAllowFormattingColumns ( );
__declspec(implementation_key(6362)) VARIANT_BOOL IProtection::GetAllowFormattingRows ( );
__declspec(implementation_key(6363)) VARIANT_BOOL IProtection::GetAllowInsertingColumns ( );
__declspec(implementation_key(6364)) VARIANT_BOOL IProtection::GetAllowInsertingRows ( );
__declspec(implementation_key(6365)) VARIANT_BOOL IProtection::GetAllowInsertingHyperlinks ( );
__declspec(implementation_key(6366)) VARIANT_BOOL IProtection::GetAllowDeletingColumns ( );
__declspec(implementation_key(6367)) VARIANT_BOOL IProtection::GetAllowDeletingRows ( );
__declspec(implementation_key(6368)) VARIANT_BOOL IProtection::GetAllowSorting ( );
__declspec(implementation_key(6369)) VARIANT_BOOL IProtection::GetAllowFiltering ( );
__declspec(implementation_key(6370)) VARIANT_BOOL IProtection::GetAllowUsingPivotTables ( );
__declspec(implementation_key(6371)) AllowEditRangesPtr IProtection::GetAllowEditRanges ( );
__declspec(implementation_key(6372)) _bstr_t AllowEditRange::GetTitle ( );
__declspec(implementation_key(6373)) void AllowEditRange::PutTitle ( _bstr_t _arg1 );
__declspec(implementation_key(6374)) RangePtr AllowEditRange::GetRange ( );
__declspec(implementation_key(6375)) void AllowEditRange::PutRefRange ( struct Range * _arg1 );
__declspec(implementation_key(6376)) HRESULT AllowEditRange::ChangePassword ( _bstr_t Password );
__declspec(implementation_key(6377)) HRESULT AllowEditRange::Delete ( );
__declspec(implementation_key(6378)) HRESULT AllowEditRange::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(6379)) UserAccessListPtr AllowEditRange::GetUsers ( );
__declspec(implementation_key(6380)) long IAllowEditRanges::GetCount ( );
__declspec(implementation_key(6381)) AllowEditRangePtr IAllowEditRanges::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6382)) AllowEditRangePtr IAllowEditRanges::Add ( _bstr_t Title, struct Range * Range, const _variant_t & Password );
__declspec(implementation_key(6383)) AllowEditRangePtr IAllowEditRanges::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6384)) IUnknownPtr IAllowEditRanges::Get_NewEnum ( );
__declspec(implementation_key(6385)) long UserAccessList::GetCount ( );
__declspec(implementation_key(6386)) UserAccessPtr UserAccessList::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6387)) UserAccessPtr UserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit );
__declspec(implementation_key(6388)) HRESULT UserAccessList::DeleteAll ( );
__declspec(implementation_key(6389)) UserAccessPtr UserAccessList::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6390)) IUnknownPtr UserAccessList::Get_NewEnum ( );
__declspec(implementation_key(6391)) _bstr_t IAllowEditRange::GetTitle ( );
__declspec(implementation_key(6392)) void IAllowEditRange::PutTitle ( _bstr_t RHS );
__declspec(implementation_key(6393)) RangePtr IAllowEditRange::GetRange ( );
__declspec(implementation_key(6394)) void IAllowEditRange::PutRefRange ( struct Range * RHS );
__declspec(implementation_key(6395)) HRESULT IAllowEditRange::ChangePassword ( _bstr_t Password );
__declspec(implementation_key(6396)) HRESULT IAllowEditRange::Delete ( );
__declspec(implementation_key(6397)) HRESULT IAllowEditRange::Unprotect ( const _variant_t & Password );
__declspec(implementation_key(6398)) UserAccessListPtr IAllowEditRange::GetUsers ( );
__declspec(implementation_key(6399)) _bstr_t UserAccess::GetName ( );
__declspec(implementation_key(6400)) VARIANT_BOOL UserAccess::GetAllowEdit ( );
__declspec(implementation_key(6401)) void UserAccess::PutAllowEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6402)) HRESULT UserAccess::Delete ( );
__declspec(implementation_key(6403)) long IUserAccessList::GetCount ( );
__declspec(implementation_key(6404)) UserAccessPtr IUserAccessList::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6405)) UserAccessPtr IUserAccessList::Add ( _bstr_t Name, VARIANT_BOOL AllowEdit );
__declspec(implementation_key(6406)) HRESULT IUserAccessList::DeleteAll ( );
__declspec(implementation_key(6407)) UserAccessPtr IUserAccessList::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6408)) IUnknownPtr IUserAccessList::Get_NewEnum ( );
__declspec(implementation_key(6409)) long RTD::GetThrottleInterval ( );
__declspec(implementation_key(6410)) void RTD::PutThrottleInterval ( long _arg1 );
__declspec(implementation_key(6411)) HRESULT RTD::RefreshData ( );
__declspec(implementation_key(6412)) HRESULT RTD::RestartServers ( );
__declspec(implementation_key(6413)) _ApplicationPtr Diagram::GetApplication ( );
__declspec(implementation_key(6414)) enum XlCreator Diagram::GetCreator ( );
__declspec(implementation_key(6415)) IDispatchPtr Diagram::GetParent ( );
__declspec(implementation_key(6416)) DiagramNodesPtr Diagram::GetNodes ( );
__declspec(implementation_key(6417)) enum Office::MsoDiagramType Diagram::GetType ( );
__declspec(implementation_key(6418)) enum Office::MsoTriState Diagram::GetAutoLayout ( );
__declspec(implementation_key(6419)) void Diagram::PutAutoLayout ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(6420)) enum Office::MsoTriState Diagram::GetReverse ( );
__declspec(implementation_key(6421)) void Diagram::PutReverse ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(6422)) enum Office::MsoTriState Diagram::GetAutoFormat ( );
__declspec(implementation_key(6423)) void Diagram::PutAutoFormat ( enum Office::MsoTriState _arg1 );
__declspec(implementation_key(6424)) HRESULT Diagram::Convert ( enum Office::MsoDiagramType Type );
__declspec(implementation_key(6425)) HRESULT Diagram::FitText ( );
__declspec(implementation_key(6426)) _ApplicationPtr ListObjects::GetApplication ( );
__declspec(implementation_key(6427)) enum XlCreator ListObjects::GetCreator ( );
__declspec(implementation_key(6428)) IDispatchPtr ListObjects::GetParent ( );
__declspec(implementation_key(6429)) ListObjectPtr ListObjects::Add ( enum XlListObjectSourceType SourceType, const _variant_t & Source, const _variant_t & LinkSource, enum XlYesNoGuess XlListObjectHasHeaders, const _variant_t & Destination );
__declspec(implementation_key(6430)) ListObjectPtr ListObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6431)) IUnknownPtr ListObjects::Get_NewEnum ( );
__declspec(implementation_key(6432)) ListObjectPtr ListObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6433)) long ListObjects::GetCount ( );
__declspec(implementation_key(6434)) _ApplicationPtr ListObject::GetApplication ( );
__declspec(implementation_key(6435)) enum XlCreator ListObject::GetCreator ( );
__declspec(implementation_key(6436)) IDispatchPtr ListObject::GetParent ( );
__declspec(implementation_key(6437)) HRESULT ListObject::Delete ( );
__declspec(implementation_key(6438)) _bstr_t ListObject::Publish ( const _variant_t & Target, VARIANT_BOOL LinkSource );
__declspec(implementation_key(6439)) HRESULT ListObject::Refresh ( );
__declspec(implementation_key(6440)) HRESULT ListObject::Unlink ( );
__declspec(implementation_key(6441)) HRESULT ListObject::Unlist ( );
__declspec(implementation_key(6442)) HRESULT ListObject::UpdateChanges ( enum XlListConflict iConflictType );
__declspec(implementation_key(6443)) HRESULT ListObject::Resize ( struct Range * Range );
__declspec(implementation_key(6444)) _bstr_t ListObject::Get_Default ( );
__declspec(implementation_key(6445)) VARIANT_BOOL ListObject::GetActive ( );
__declspec(implementation_key(6446)) RangePtr ListObject::GetDataBodyRange ( );
__declspec(implementation_key(6447)) VARIANT_BOOL ListObject::GetDisplayRightToLeft ( );
__declspec(implementation_key(6448)) RangePtr ListObject::GetHeaderRowRange ( );
__declspec(implementation_key(6449)) RangePtr ListObject::GetInsertRowRange ( );
__declspec(implementation_key(6450)) ListColumnsPtr ListObject::GetListColumns ( );
__declspec(implementation_key(6451)) ListRowsPtr ListObject::GetListRows ( );
__declspec(implementation_key(6452)) _bstr_t ListObject::GetName ( );
__declspec(implementation_key(6453)) void ListObject::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(6454)) _QueryTablePtr ListObject::GetQueryTable ( );
__declspec(implementation_key(6455)) RangePtr ListObject::GetRange ( );
__declspec(implementation_key(6456)) VARIANT_BOOL ListObject::GetShowAutoFilter ( );
__declspec(implementation_key(6457)) void ListObject::PutShowAutoFilter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6458)) VARIANT_BOOL ListObject::GetShowTotals ( );
__declspec(implementation_key(6459)) void ListObject::PutShowTotals ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6460)) enum XlListObjectSourceType ListObject::GetSourceType ( );
__declspec(implementation_key(6461)) RangePtr ListObject::GetTotalsRowRange ( );
__declspec(implementation_key(6462)) _bstr_t ListObject::GetSharePointURL ( );
__declspec(implementation_key(6463)) XmlMapPtr ListObject::GetXmlMap ( );
__declspec(implementation_key(6464)) _ApplicationPtr ListColumns::GetApplication ( );
__declspec(implementation_key(6465)) enum XlCreator ListColumns::GetCreator ( );
__declspec(implementation_key(6466)) IDispatchPtr ListColumns::GetParent ( );
__declspec(implementation_key(6467)) ListColumnPtr ListColumns::Add ( const _variant_t & Position );
__declspec(implementation_key(6468)) ListColumnPtr ListColumns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6469)) IUnknownPtr ListColumns::Get_NewEnum ( );
__declspec(implementation_key(6470)) ListColumnPtr ListColumns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6471)) long ListColumns::GetCount ( );
__declspec(implementation_key(6472)) _ApplicationPtr ListColumn::GetApplication ( );
__declspec(implementation_key(6473)) enum XlCreator ListColumn::GetCreator ( );
__declspec(implementation_key(6474)) IDispatchPtr ListColumn::GetParent ( );
__declspec(implementation_key(6475)) HRESULT ListColumn::Delete ( );
__declspec(implementation_key(6476)) _bstr_t ListColumn::Get_Default ( );
__declspec(implementation_key(6477)) ListDataFormatPtr ListColumn::GetListDataFormat ( );
__declspec(implementation_key(6478)) long ListColumn::GetIndex ( );
__declspec(implementation_key(6479)) _bstr_t ListColumn::GetName ( );
__declspec(implementation_key(6480)) void ListColumn::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(6481)) RangePtr ListColumn::GetRange ( );
__declspec(implementation_key(6482)) enum XlTotalsCalculation ListColumn::GetTotalsCalculation ( );
__declspec(implementation_key(6483)) void ListColumn::PutTotalsCalculation ( enum XlTotalsCalculation _arg1 );
__declspec(implementation_key(6484)) XPathPtr ListColumn::GetXPath ( );
__declspec(implementation_key(6485)) _bstr_t ListColumn::GetSharePointFormula ( );
__declspec(implementation_key(6486)) _ApplicationPtr ListRows::GetApplication ( );
__declspec(implementation_key(6487)) enum XlCreator ListRows::GetCreator ( );
__declspec(implementation_key(6488)) IDispatchPtr ListRows::GetParent ( );
__declspec(implementation_key(6489)) ListRowPtr ListRows::Add ( const _variant_t & Position );
__declspec(implementation_key(6490)) ListRowPtr ListRows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6491)) IUnknownPtr ListRows::Get_NewEnum ( );
__declspec(implementation_key(6492)) ListRowPtr ListRows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6493)) long ListRows::GetCount ( );
__declspec(implementation_key(6494)) _ApplicationPtr ListRow::GetApplication ( );
__declspec(implementation_key(6495)) enum XlCreator ListRow::GetCreator ( );
__declspec(implementation_key(6496)) IDispatchPtr ListRow::GetParent ( );
__declspec(implementation_key(6497)) HRESULT ListRow::Delete ( );
__declspec(implementation_key(6498)) long ListRow::GetIndex ( );
__declspec(implementation_key(6499)) VARIANT_BOOL ListRow::GetInvalidData ( );
__declspec(implementation_key(6500)) RangePtr ListRow::GetRange ( );
__declspec(implementation_key(6501)) _ApplicationPtr XmlNamespace::GetApplication ( );
__declspec(implementation_key(6502)) enum XlCreator XmlNamespace::GetCreator ( );
__declspec(implementation_key(6503)) IDispatchPtr XmlNamespace::GetParent ( );
__declspec(implementation_key(6504)) _bstr_t XmlNamespace::Get_Default ( );
__declspec(implementation_key(6505)) _bstr_t XmlNamespace::GetUri ( );
__declspec(implementation_key(6506)) _bstr_t XmlNamespace::GetPrefix ( );
__declspec(implementation_key(6507)) _ApplicationPtr XmlNamespaces::GetApplication ( );
__declspec(implementation_key(6508)) enum XlCreator XmlNamespaces::GetCreator ( );
__declspec(implementation_key(6509)) IDispatchPtr XmlNamespaces::GetParent ( );
__declspec(implementation_key(6510)) XmlNamespacePtr XmlNamespaces::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6511)) XmlNamespacePtr XmlNamespaces::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6512)) long XmlNamespaces::GetCount ( );
__declspec(implementation_key(6513)) _bstr_t XmlNamespaces::GetValue ( );
__declspec(implementation_key(6514)) IUnknownPtr XmlNamespaces::Get_NewEnum ( );
__declspec(implementation_key(6515)) HRESULT XmlNamespaces::InstallManifest ( _bstr_t Path, const _variant_t & InstallForAllUsers );
__declspec(implementation_key(6516)) _ApplicationPtr XmlDataBinding::GetApplication ( );
__declspec(implementation_key(6517)) enum XlCreator XmlDataBinding::GetCreator ( );
__declspec(implementation_key(6518)) IDispatchPtr XmlDataBinding::GetParent ( );
__declspec(implementation_key(6519)) _bstr_t XmlDataBinding::Get_Default ( );
__declspec(implementation_key(6520)) enum XlXmlImportResult XmlDataBinding::Refresh ( );
__declspec(implementation_key(6521)) HRESULT XmlDataBinding::LoadSettings ( _bstr_t Url );
__declspec(implementation_key(6522)) HRESULT XmlDataBinding::ClearSettings ( );
__declspec(implementation_key(6523)) _bstr_t XmlDataBinding::GetSourceUrl ( );
__declspec(implementation_key(6524)) _ApplicationPtr XmlSchema::GetApplication ( );
__declspec(implementation_key(6525)) enum XlCreator XmlSchema::GetCreator ( );
__declspec(implementation_key(6526)) IDispatchPtr XmlSchema::GetParent ( );
__declspec(implementation_key(6527)) XmlNamespacePtr XmlSchema::GetNamespace ( );
__declspec(implementation_key(6528)) _bstr_t XmlSchema::GetXML ( );
__declspec(implementation_key(6529)) _bstr_t XmlSchema::GetName ( );
__declspec(implementation_key(6530)) _ApplicationPtr XmlSchemas::GetApplication ( );
__declspec(implementation_key(6531)) enum XlCreator XmlSchemas::GetCreator ( );
__declspec(implementation_key(6532)) IDispatchPtr XmlSchemas::GetParent ( );
__declspec(implementation_key(6533)) XmlSchemaPtr XmlSchemas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6534)) XmlSchemaPtr XmlSchemas::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6535)) long XmlSchemas::GetCount ( );
__declspec(implementation_key(6536)) IUnknownPtr XmlSchemas::Get_NewEnum ( );
__declspec(implementation_key(6537)) _ApplicationPtr XmlMap::GetApplication ( );
__declspec(implementation_key(6538)) enum XlCreator XmlMap::GetCreator ( );
__declspec(implementation_key(6539)) IDispatchPtr XmlMap::GetParent ( );
__declspec(implementation_key(6540)) _bstr_t XmlMap::Get_Default ( );
__declspec(implementation_key(6541)) _bstr_t XmlMap::GetName ( );
__declspec(implementation_key(6542)) void XmlMap::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(6543)) VARIANT_BOOL XmlMap::GetIsExportable ( );
__declspec(implementation_key(6544)) VARIANT_BOOL XmlMap::GetShowImportExportValidationErrors ( );
__declspec(implementation_key(6545)) void XmlMap::PutShowImportExportValidationErrors ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6546)) VARIANT_BOOL XmlMap::GetSaveDataSourceDefinition ( );
__declspec(implementation_key(6547)) void XmlMap::PutSaveDataSourceDefinition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6548)) VARIANT_BOOL XmlMap::GetAdjustColumnWidth ( );
__declspec(implementation_key(6549)) void XmlMap::PutAdjustColumnWidth ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6550)) VARIANT_BOOL XmlMap::GetPreserveColumnFilter ( );
__declspec(implementation_key(6551)) void XmlMap::PutPreserveColumnFilter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6552)) VARIANT_BOOL XmlMap::GetPreserveNumberFormatting ( );
__declspec(implementation_key(6553)) void XmlMap::PutPreserveNumberFormatting ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6554)) VARIANT_BOOL XmlMap::GetAppendOnImport ( );
__declspec(implementation_key(6555)) void XmlMap::PutAppendOnImport ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6556)) _bstr_t XmlMap::GetRootElementName ( );
__declspec(implementation_key(6557)) XmlNamespacePtr XmlMap::GetRootElementNamespace ( );
__declspec(implementation_key(6558)) XmlSchemasPtr XmlMap::GetSchemas ( );
__declspec(implementation_key(6559)) XmlDataBindingPtr XmlMap::GetDataBinding ( );
__declspec(implementation_key(6560)) HRESULT XmlMap::Delete ( );
__declspec(implementation_key(6561)) enum XlXmlImportResult XmlMap::Import ( _bstr_t Url, const _variant_t & Overwrite );
__declspec(implementation_key(6562)) enum XlXmlImportResult XmlMap::ImportXml ( _bstr_t XmlData, const _variant_t & Overwrite );
__declspec(implementation_key(6563)) enum XlXmlExportResult XmlMap::Export ( _bstr_t Url, const _variant_t & Overwrite );
__declspec(implementation_key(6564)) enum XlXmlExportResult XmlMap::ExportXml ( BSTR * Data );
__declspec(implementation_key(6565)) HRESULT IWorkbookEvents::Open ( );
__declspec(implementation_key(6566)) HRESULT IWorkbookEvents::Activate ( );
__declspec(implementation_key(6567)) HRESULT IWorkbookEvents::Deactivate ( );
__declspec(implementation_key(6568)) HRESULT IWorkbookEvents::BeforeClose ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(6569)) HRESULT IWorkbookEvents::BeforeSave ( VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(6570)) HRESULT IWorkbookEvents::BeforePrint ( VARIANT_BOOL * Cancel );
__declspec(implementation_key(6571)) HRESULT IWorkbookEvents::NewSheet ( IDispatch * Sh );
__declspec(implementation_key(6572)) HRESULT IWorkbookEvents::AddinInstall ( );
__declspec(implementation_key(6573)) HRESULT IWorkbookEvents::AddinUninstall ( );
__declspec(implementation_key(6574)) HRESULT IWorkbookEvents::WindowResize ( struct Window * Wn );
__declspec(implementation_key(6575)) HRESULT IWorkbookEvents::WindowActivate ( struct Window * Wn );
__declspec(implementation_key(6576)) HRESULT IWorkbookEvents::WindowDeactivate ( struct Window * Wn );
__declspec(implementation_key(6577)) HRESULT IWorkbookEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(6578)) HRESULT IWorkbookEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(6579)) HRESULT IWorkbookEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(6580)) HRESULT IWorkbookEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(6581)) HRESULT IWorkbookEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(6582)) HRESULT IWorkbookEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(6583)) HRESULT IWorkbookEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(6584)) HRESULT IWorkbookEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(6585)) HRESULT IWorkbookEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(6586)) HRESULT IWorkbookEvents::PivotTableCloseConnection ( struct PivotTable * Target );
__declspec(implementation_key(6587)) HRESULT IWorkbookEvents::PivotTableOpenConnection ( struct PivotTable * Target );
__declspec(implementation_key(6588)) HRESULT IWorkbookEvents::Sync ( enum Office::MsoSyncEventType SyncEventType );
__declspec(implementation_key(6589)) HRESULT IWorkbookEvents::BeforeXmlImport ( struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL IsRefresh, VARIANT_BOOL * Cancel );
__declspec(implementation_key(6590)) HRESULT IWorkbookEvents::AfterXmlImport ( struct XmlMap * Map, VARIANT_BOOL IsRefresh, enum XlXmlImportResult Result );
__declspec(implementation_key(6591)) HRESULT IWorkbookEvents::BeforeXmlExport ( struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL * Cancel );
__declspec(implementation_key(6592)) HRESULT IWorkbookEvents::AfterXmlExport ( struct XmlMap * Map, _bstr_t Url, enum XlXmlExportResult Result );
__declspec(implementation_key(6593)) _ApplicationPtr XmlMaps::GetApplication ( );
__declspec(implementation_key(6594)) enum XlCreator XmlMaps::GetCreator ( );
__declspec(implementation_key(6595)) IDispatchPtr XmlMaps::GetParent ( );
__declspec(implementation_key(6596)) XmlMapPtr XmlMaps::Add ( _bstr_t Schema, const _variant_t & RootElementName );
__declspec(implementation_key(6597)) XmlMapPtr XmlMaps::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6598)) XmlMapPtr XmlMaps::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6599)) long XmlMaps::GetCount ( );
__declspec(implementation_key(6600)) IUnknownPtr XmlMaps::Get_NewEnum ( );
__declspec(implementation_key(6601)) _ApplicationPtr ListDataFormat::GetApplication ( );
__declspec(implementation_key(6602)) enum XlCreator ListDataFormat::GetCreator ( );
__declspec(implementation_key(6603)) IDispatchPtr ListDataFormat::GetParent ( );
__declspec(implementation_key(6604)) enum XlListDataType ListDataFormat::Get_Default ( );
__declspec(implementation_key(6605)) _variant_t ListDataFormat::GetChoices ( );
__declspec(implementation_key(6606)) long ListDataFormat::GetDecimalPlaces ( );
__declspec(implementation_key(6607)) _variant_t ListDataFormat::GetDefaultValue ( );
__declspec(implementation_key(6608)) VARIANT_BOOL ListDataFormat::GetIsPercent ( );
__declspec(implementation_key(6609)) long ListDataFormat::Getlcid ( );
__declspec(implementation_key(6610)) long ListDataFormat::GetMaxCharacters ( );
__declspec(implementation_key(6611)) _variant_t ListDataFormat::GetMaxNumber ( );
__declspec(implementation_key(6612)) _variant_t ListDataFormat::GetMinNumber ( );
__declspec(implementation_key(6613)) VARIANT_BOOL ListDataFormat::GetRequired ( );
__declspec(implementation_key(6614)) enum XlListDataType ListDataFormat::GetType ( );
__declspec(implementation_key(6615)) VARIANT_BOOL ListDataFormat::GetReadOnly ( );
__declspec(implementation_key(6616)) VARIANT_BOOL ListDataFormat::GetAllowFillIn ( );
__declspec(implementation_key(6617)) _ApplicationPtr XPath::GetApplication ( );
__declspec(implementation_key(6618)) enum XlCreator XPath::GetCreator ( );
__declspec(implementation_key(6619)) IDispatchPtr XPath::GetParent ( );
__declspec(implementation_key(6620)) _bstr_t XPath::Get_Default ( );
__declspec(implementation_key(6621)) _bstr_t XPath::GetValue ( );
__declspec(implementation_key(6622)) XmlMapPtr XPath::GetMap ( );
__declspec(implementation_key(6623)) HRESULT XPath::SetValue ( struct XmlMap * Map, _bstr_t XPath, const _variant_t & SelectionNamespace, const _variant_t & Repeating );
__declspec(implementation_key(6624)) HRESULT XPath::Clear ( );
__declspec(implementation_key(6625)) VARIANT_BOOL XPath::GetRepeating ( );
__declspec(implementation_key(6626)) HRESULT IDummy::_ActiveSheetOrChart ( );
__declspec(implementation_key(6627)) HRESULT IDummy::RGBEx ( );
__declspec(implementation_key(6628)) HRESULT IDummy::ChDir ( );
__declspec(implementation_key(6629)) HRESULT IDummy::DoScript ( );
__declspec(implementation_key(6630)) HRESULT IDummy::DirectObject ( );
__declspec(implementation_key(6631)) HRESULT IDummy::RefreshDocument ( );
__declspec(implementation_key(6632)) _ApplicationPtr IWindows::GetApplication ( );
__declspec(implementation_key(6633)) enum XlCreator IWindows::GetCreator ( );
__declspec(implementation_key(6634)) IDispatchPtr IWindows::GetParent ( );
__declspec(implementation_key(6635)) _variant_t IWindows::Arrange ( enum XlArrangeStyle ArrangeStyle, const _variant_t & ActiveWorkbook, const _variant_t & SyncHorizontal, const _variant_t & SyncVertical );
__declspec(implementation_key(6636)) long IWindows::GetCount ( );
__declspec(implementation_key(6637)) WindowPtr IWindows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6638)) IUnknownPtr IWindows::Get_NewEnum ( );
__declspec(implementation_key(6639)) WindowPtr IWindows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6640)) VARIANT_BOOL IWindows::CompareSideBySideWith ( const _variant_t & WindowName );
__declspec(implementation_key(6641)) VARIANT_BOOL IWindows::BreakSideBySide ( );
__declspec(implementation_key(6642)) VARIANT_BOOL IWindows::GetSyncScrollingSideBySide ( );
__declspec(implementation_key(6643)) void IWindows::PutSyncScrollingSideBySide ( VARIANT_BOOL RHS );
__declspec(implementation_key(6644)) HRESULT IWindows::ResetPositionsSideBySide ( );
__declspec(implementation_key(6645)) _ApplicationPtr IWorksheetFunction::GetApplication ( );
__declspec(implementation_key(6646)) enum XlCreator IWorksheetFunction::GetCreator ( );
__declspec(implementation_key(6647)) IDispatchPtr IWorksheetFunction::GetParent ( );
__declspec(implementation_key(6648)) _variant_t IWorksheetFunction::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6649)) double IWorksheetFunction::Count ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6650)) VARIANT_BOOL IWorksheetFunction::IsNA ( const _variant_t & Arg1 );
__declspec(implementation_key(6651)) VARIANT_BOOL IWorksheetFunction::IsError ( const _variant_t & Arg1 );
__declspec(implementation_key(6652)) double IWorksheetFunction::Sum ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6653)) double IWorksheetFunction::Average ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6654)) double IWorksheetFunction::Min ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6655)) double IWorksheetFunction::Max ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6656)) double IWorksheetFunction::Npv ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6657)) double IWorksheetFunction::StDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6658)) _bstr_t IWorksheetFunction::Dollar ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6659)) _bstr_t IWorksheetFunction::Fixed ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6660)) double IWorksheetFunction::Pi ( );
__declspec(implementation_key(6661)) double IWorksheetFunction::Ln ( double Arg1 );
__declspec(implementation_key(6662)) double IWorksheetFunction::Log10 ( double Arg1 );
__declspec(implementation_key(6663)) double IWorksheetFunction::Round ( double Arg1, double Arg2 );
__declspec(implementation_key(6664)) _variant_t IWorksheetFunction::Lookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6665)) _variant_t IWorksheetFunction::Index ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6666)) _bstr_t IWorksheetFunction::Rept ( _bstr_t Arg1, double Arg2 );
__declspec(implementation_key(6667)) VARIANT_BOOL IWorksheetFunction::And ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6668)) VARIANT_BOOL IWorksheetFunction::Or ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6669)) double IWorksheetFunction::DCount ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6670)) double IWorksheetFunction::DSum ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6671)) double IWorksheetFunction::DAverage ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6672)) double IWorksheetFunction::DMin ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6673)) double IWorksheetFunction::DMax ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6674)) double IWorksheetFunction::DStDev ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6675)) double IWorksheetFunction::Var ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6676)) double IWorksheetFunction::DVar ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6677)) _bstr_t IWorksheetFunction::Text ( const _variant_t & Arg1, _bstr_t Arg2 );
__declspec(implementation_key(6678)) _variant_t IWorksheetFunction::LinEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6679)) _variant_t IWorksheetFunction::Trend ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6680)) _variant_t IWorksheetFunction::LogEst ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6681)) _variant_t IWorksheetFunction::Growth ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6682)) double IWorksheetFunction::Pv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6683)) double IWorksheetFunction::Fv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6684)) double IWorksheetFunction::NPer ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6685)) double IWorksheetFunction::Pmt ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6686)) double IWorksheetFunction::Rate ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(6687)) double IWorksheetFunction::MIrr ( const _variant_t & Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6688)) double IWorksheetFunction::Irr ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6689)) double IWorksheetFunction::Match ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6690)) double IWorksheetFunction::Weekday ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6691)) double IWorksheetFunction::Search ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6692)) _variant_t IWorksheetFunction::Transpose ( const _variant_t & Arg1 );
__declspec(implementation_key(6693)) double IWorksheetFunction::Atan2 ( double Arg1, double Arg2 );
__declspec(implementation_key(6694)) double IWorksheetFunction::Asin ( double Arg1 );
__declspec(implementation_key(6695)) double IWorksheetFunction::Acos ( double Arg1 );
__declspec(implementation_key(6696)) _variant_t IWorksheetFunction::Choose ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6697)) _variant_t IWorksheetFunction::HLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6698)) _variant_t IWorksheetFunction::VLookup ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6699)) double IWorksheetFunction::Log ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6700)) _bstr_t IWorksheetFunction::Proper ( _bstr_t Arg1 );
__declspec(implementation_key(6701)) _bstr_t IWorksheetFunction::Trim ( _bstr_t Arg1 );
__declspec(implementation_key(6702)) _bstr_t IWorksheetFunction::Replace ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(6703)) _bstr_t IWorksheetFunction::Substitute ( _bstr_t Arg1, _bstr_t Arg2, _bstr_t Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6704)) double IWorksheetFunction::Find ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6705)) VARIANT_BOOL IWorksheetFunction::IsErr ( const _variant_t & Arg1 );
__declspec(implementation_key(6706)) VARIANT_BOOL IWorksheetFunction::IsText ( const _variant_t & Arg1 );
__declspec(implementation_key(6707)) VARIANT_BOOL IWorksheetFunction::IsNumber ( const _variant_t & Arg1 );
__declspec(implementation_key(6708)) double IWorksheetFunction::Sln ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6709)) double IWorksheetFunction::Syd ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(6710)) double IWorksheetFunction::Ddb ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6711)) _bstr_t IWorksheetFunction::Clean ( _bstr_t Arg1 );
__declspec(implementation_key(6712)) double IWorksheetFunction::MDeterm ( const _variant_t & Arg1 );
__declspec(implementation_key(6713)) _variant_t IWorksheetFunction::MInverse ( const _variant_t & Arg1 );
__declspec(implementation_key(6714)) _variant_t IWorksheetFunction::MMult ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6715)) double IWorksheetFunction::Ipmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(6716)) double IWorksheetFunction::Ppmt ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5, const _variant_t & Arg6 );
__declspec(implementation_key(6717)) double IWorksheetFunction::CountA ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6718)) double IWorksheetFunction::Product ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6719)) double IWorksheetFunction::Fact ( double Arg1 );
__declspec(implementation_key(6720)) double IWorksheetFunction::DProduct ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6721)) VARIANT_BOOL IWorksheetFunction::IsNonText ( const _variant_t & Arg1 );
__declspec(implementation_key(6722)) double IWorksheetFunction::StDevP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6723)) double IWorksheetFunction::VarP ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6724)) double IWorksheetFunction::DStDevP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6725)) double IWorksheetFunction::DVarP ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6726)) VARIANT_BOOL IWorksheetFunction::IsLogical ( const _variant_t & Arg1 );
__declspec(implementation_key(6727)) double IWorksheetFunction::DCountA ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6728)) _bstr_t IWorksheetFunction::USDollar ( double Arg1, double Arg2 );
__declspec(implementation_key(6729)) double IWorksheetFunction::FindB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6730)) double IWorksheetFunction::SearchB ( _bstr_t Arg1, _bstr_t Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6731)) _bstr_t IWorksheetFunction::ReplaceB ( _bstr_t Arg1, double Arg2, double Arg3, _bstr_t Arg4 );
__declspec(implementation_key(6732)) double IWorksheetFunction::RoundUp ( double Arg1, double Arg2 );
__declspec(implementation_key(6733)) double IWorksheetFunction::RoundDown ( double Arg1, double Arg2 );
__declspec(implementation_key(6734)) double IWorksheetFunction::Rank ( double Arg1, struct Range * Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6735)) double IWorksheetFunction::Days360 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6736)) double IWorksheetFunction::Vdb ( double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, const _variant_t & Arg6, const _variant_t & Arg7 );
__declspec(implementation_key(6737)) double IWorksheetFunction::Median ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6738)) double IWorksheetFunction::SumProduct ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6739)) double IWorksheetFunction::Sinh ( double Arg1 );
__declspec(implementation_key(6740)) double IWorksheetFunction::Cosh ( double Arg1 );
__declspec(implementation_key(6741)) double IWorksheetFunction::Tanh ( double Arg1 );
__declspec(implementation_key(6742)) double IWorksheetFunction::Asinh ( double Arg1 );
__declspec(implementation_key(6743)) double IWorksheetFunction::Acosh ( double Arg1 );
__declspec(implementation_key(6744)) double IWorksheetFunction::Atanh ( double Arg1 );
__declspec(implementation_key(6745)) _variant_t IWorksheetFunction::DGet ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6746)) double IWorksheetFunction::Db ( double Arg1, double Arg2, double Arg3, double Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6747)) _variant_t IWorksheetFunction::Frequency ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6748)) double IWorksheetFunction::AveDev ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6749)) double IWorksheetFunction::BetaDist ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6750)) double IWorksheetFunction::GammaLn ( double Arg1 );
__declspec(implementation_key(6751)) double IWorksheetFunction::BetaInv ( double Arg1, double Arg2, double Arg3, const _variant_t & Arg4, const _variant_t & Arg5 );
__declspec(implementation_key(6752)) double IWorksheetFunction::BinomDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(6753)) double IWorksheetFunction::ChiDist ( double Arg1, double Arg2 );
__declspec(implementation_key(6754)) double IWorksheetFunction::ChiInv ( double Arg1, double Arg2 );
__declspec(implementation_key(6755)) double IWorksheetFunction::Combin ( double Arg1, double Arg2 );
__declspec(implementation_key(6756)) double IWorksheetFunction::Confidence ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6757)) double IWorksheetFunction::CritBinom ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6758)) double IWorksheetFunction::Even ( double Arg1 );
__declspec(implementation_key(6759)) double IWorksheetFunction::ExponDist ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(6760)) double IWorksheetFunction::FDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6761)) double IWorksheetFunction::FInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6762)) double IWorksheetFunction::Fisher ( double Arg1 );
__declspec(implementation_key(6763)) double IWorksheetFunction::FisherInv ( double Arg1 );
__declspec(implementation_key(6764)) double IWorksheetFunction::Floor ( double Arg1, double Arg2 );
__declspec(implementation_key(6765)) double IWorksheetFunction::GammaDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(6766)) double IWorksheetFunction::GammaInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6767)) double IWorksheetFunction::Ceiling ( double Arg1, double Arg2 );
__declspec(implementation_key(6768)) double IWorksheetFunction::HypGeomDist ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(6769)) double IWorksheetFunction::LogNormDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6770)) double IWorksheetFunction::LogInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6771)) double IWorksheetFunction::NegBinomDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6772)) double IWorksheetFunction::NormDist ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(6773)) double IWorksheetFunction::NormSDist ( double Arg1 );
__declspec(implementation_key(6774)) double IWorksheetFunction::NormInv ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6775)) double IWorksheetFunction::NormSInv ( double Arg1 );
__declspec(implementation_key(6776)) double IWorksheetFunction::Standardize ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6777)) double IWorksheetFunction::Odd ( double Arg1 );
__declspec(implementation_key(6778)) double IWorksheetFunction::Permut ( double Arg1, double Arg2 );
__declspec(implementation_key(6779)) double IWorksheetFunction::Poisson ( double Arg1, double Arg2, VARIANT_BOOL Arg3 );
__declspec(implementation_key(6780)) double IWorksheetFunction::TDist ( double Arg1, double Arg2, double Arg3 );
__declspec(implementation_key(6781)) double IWorksheetFunction::Weibull ( double Arg1, double Arg2, double Arg3, VARIANT_BOOL Arg4 );
__declspec(implementation_key(6782)) double IWorksheetFunction::SumXMY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6783)) double IWorksheetFunction::SumX2MY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6784)) double IWorksheetFunction::SumX2PY2 ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6785)) double IWorksheetFunction::ChiTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6786)) double IWorksheetFunction::Correl ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6787)) double IWorksheetFunction::Covar ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6788)) double IWorksheetFunction::Forecast ( double Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6789)) double IWorksheetFunction::FTest ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6790)) double IWorksheetFunction::Intercept ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6791)) double IWorksheetFunction::Pearson ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6792)) double IWorksheetFunction::RSq ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6793)) double IWorksheetFunction::StEyx ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6794)) double IWorksheetFunction::Slope ( const _variant_t & Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6795)) double IWorksheetFunction::TTest ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(6796)) double IWorksheetFunction::Prob ( const _variant_t & Arg1, const _variant_t & Arg2, double Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(6797)) double IWorksheetFunction::DevSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6798)) double IWorksheetFunction::GeoMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6799)) double IWorksheetFunction::HarMean ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6800)) double IWorksheetFunction::SumSq ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6801)) double IWorksheetFunction::Kurt ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6802)) double IWorksheetFunction::Skew ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6803)) double IWorksheetFunction::ZTest ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6804)) double IWorksheetFunction::Large ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6805)) double IWorksheetFunction::Small ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6806)) double IWorksheetFunction::Quartile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6807)) double IWorksheetFunction::Percentile ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6808)) double IWorksheetFunction::PercentRank ( const _variant_t & Arg1, double Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6809)) double IWorksheetFunction::Mode ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6810)) double IWorksheetFunction::TrimMean ( const _variant_t & Arg1, double Arg2 );
__declspec(implementation_key(6811)) double IWorksheetFunction::TInv ( double Arg1, double Arg2 );
__declspec(implementation_key(6812)) double IWorksheetFunction::Power ( double Arg1, double Arg2 );
__declspec(implementation_key(6813)) double IWorksheetFunction::Radians ( double Arg1 );
__declspec(implementation_key(6814)) double IWorksheetFunction::Degrees ( double Arg1 );
__declspec(implementation_key(6815)) double IWorksheetFunction::Subtotal ( double Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(6816)) double IWorksheetFunction::SumIf ( struct Range * Arg1, const _variant_t & Arg2, const _variant_t & Arg3 );
__declspec(implementation_key(6817)) double IWorksheetFunction::CountIf ( struct Range * Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6818)) double IWorksheetFunction::CountBlank ( struct Range * Arg1 );
__declspec(implementation_key(6819)) double IWorksheetFunction::Ispmt ( double Arg1, double Arg2, double Arg3, double Arg4 );
__declspec(implementation_key(6820)) _bstr_t IWorksheetFunction::Roman ( double Arg1, const _variant_t & Arg2 );
__declspec(implementation_key(6821)) _bstr_t IWorksheetFunction::Asc ( _bstr_t Arg1 );
__declspec(implementation_key(6822)) _bstr_t IWorksheetFunction::Dbcs ( _bstr_t Arg1 );
__declspec(implementation_key(6823)) _bstr_t IWorksheetFunction::Phonetic ( struct Range * Arg1 );
__declspec(implementation_key(6824)) _bstr_t IWorksheetFunction::BahtText ( double Arg1 );
__declspec(implementation_key(6825)) _bstr_t IWorksheetFunction::ThaiDayOfWeek ( double Arg1 );
__declspec(implementation_key(6826)) _bstr_t IWorksheetFunction::ThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(6827)) _bstr_t IWorksheetFunction::ThaiMonthOfYear ( double Arg1 );
__declspec(implementation_key(6828)) _bstr_t IWorksheetFunction::ThaiNumSound ( double Arg1 );
__declspec(implementation_key(6829)) _bstr_t IWorksheetFunction::ThaiNumString ( double Arg1 );
__declspec(implementation_key(6830)) double IWorksheetFunction::ThaiStringLength ( _bstr_t Arg1 );
__declspec(implementation_key(6831)) VARIANT_BOOL IWorksheetFunction::IsThaiDigit ( _bstr_t Arg1 );
__declspec(implementation_key(6832)) double IWorksheetFunction::RoundBahtDown ( double Arg1 );
__declspec(implementation_key(6833)) double IWorksheetFunction::RoundBahtUp ( double Arg1 );
__declspec(implementation_key(6834)) double IWorksheetFunction::ThaiYear ( double Arg1 );
__declspec(implementation_key(6835)) _variant_t IWorksheetFunction::RTD ( const _variant_t & progID, const _variant_t & server, const _variant_t & topic1, const _variant_t & topic2, const _variant_t & topic3, const _variant_t & topic4, const _variant_t & topic5, const _variant_t & topic6, const _variant_t & topic7, const _variant_t & topic8, const _variant_t & topic9, const _variant_t & topic10, const _variant_t & topic11, const _variant_t & topic12, const _variant_t & topic13, const _variant_t & topic14, const _variant_t & topic15, const _variant_t & topic16, const _variant_t & topic17, const _variant_t & topic18, const _variant_t & topic19, const _variant_t & topic20, const _variant_t & topic21, const _variant_t & topic22, const _variant_t & topic23, const _variant_t & topic24, const _variant_t & topic25, const _variant_t & topic26, const _variant_t & topic27, const _variant_t & topic28 );
__declspec(implementation_key(6836)) _ApplicationPtr Sheets::GetApplication ( );
__declspec(implementation_key(6837)) enum XlCreator Sheets::GetCreator ( );
__declspec(implementation_key(6838)) IDispatchPtr Sheets::GetParent ( );
__declspec(implementation_key(6839)) IDispatchPtr Sheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(6840)) HRESULT Sheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6841)) long Sheets::GetCount ( );
__declspec(implementation_key(6842)) HRESULT Sheets::Delete ( long lcid );
__declspec(implementation_key(6843)) HRESULT Sheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(6844)) IDispatchPtr Sheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(6845)) HRESULT Sheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6846)) IUnknownPtr Sheets::Get_NewEnum ( );
__declspec(implementation_key(6847)) HRESULT Sheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(6848)) HRESULT Sheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(6849)) HRESULT Sheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(6850)) HPageBreaksPtr Sheets::GetHPageBreaks ( );
__declspec(implementation_key(6851)) VPageBreaksPtr Sheets::GetVPageBreaks ( );
__declspec(implementation_key(6852)) _variant_t Sheets::GetVisible ( long lcid );
__declspec(implementation_key(6853)) void Sheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(6854)) IDispatchPtr Sheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(6855)) HRESULT Sheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(6856)) _ApplicationPtr IHPageBreaks::GetApplication ( );
__declspec(implementation_key(6857)) enum XlCreator IHPageBreaks::GetCreator ( );
__declspec(implementation_key(6858)) IDispatchPtr IHPageBreaks::GetParent ( );
__declspec(implementation_key(6859)) long IHPageBreaks::GetCount ( );
__declspec(implementation_key(6860)) HPageBreakPtr IHPageBreaks::GetItem ( long Index );
__declspec(implementation_key(6861)) HPageBreakPtr IHPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(6862)) IUnknownPtr IHPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(6863)) HPageBreakPtr IHPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(6864)) _ApplicationPtr IVPageBreaks::GetApplication ( );
__declspec(implementation_key(6865)) enum XlCreator IVPageBreaks::GetCreator ( );
__declspec(implementation_key(6866)) IDispatchPtr IVPageBreaks::GetParent ( );
__declspec(implementation_key(6867)) long IVPageBreaks::GetCount ( );
__declspec(implementation_key(6868)) VPageBreakPtr IVPageBreaks::GetItem ( long Index );
__declspec(implementation_key(6869)) VPageBreakPtr IVPageBreaks::Get_Default ( long Index );
__declspec(implementation_key(6870)) IUnknownPtr IVPageBreaks::Get_NewEnum ( );
__declspec(implementation_key(6871)) VPageBreakPtr IVPageBreaks::Add ( IDispatch * Before );
__declspec(implementation_key(6872)) _ApplicationPtr IRecentFiles::GetApplication ( );
__declspec(implementation_key(6873)) enum XlCreator IRecentFiles::GetCreator ( );
__declspec(implementation_key(6874)) IDispatchPtr IRecentFiles::GetParent ( );
__declspec(implementation_key(6875)) long IRecentFiles::GetMaximum ( );
__declspec(implementation_key(6876)) void IRecentFiles::PutMaximum ( long RHS );
__declspec(implementation_key(6877)) long IRecentFiles::GetCount ( );
__declspec(implementation_key(6878)) RecentFilePtr IRecentFiles::GetItem ( long Index );
__declspec(implementation_key(6879)) RecentFilePtr IRecentFiles::Get_Default ( long Index );
__declspec(implementation_key(6880)) RecentFilePtr IRecentFiles::Add ( _bstr_t Name );
__declspec(implementation_key(6881)) IUnknownPtr IRecentFiles::Get_NewEnum ( );
__declspec(implementation_key(6882)) _ApplicationPtr _Worksheet::GetApplication ( );
__declspec(implementation_key(6883)) enum XlCreator _Worksheet::GetCreator ( );
__declspec(implementation_key(6884)) IDispatchPtr _Worksheet::GetParent ( );
__declspec(implementation_key(6885)) HRESULT _Worksheet::Activate ( long lcid );
__declspec(implementation_key(6886)) HRESULT _Worksheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6887)) HRESULT _Worksheet::Delete ( long lcid );
__declspec(implementation_key(6888)) _bstr_t _Worksheet::GetCodeName ( );
__declspec(implementation_key(6889)) _bstr_t _Worksheet::Get_CodeName ( );
__declspec(implementation_key(6890)) void _Worksheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(6891)) long _Worksheet::GetIndex ( long lcid );
__declspec(implementation_key(6892)) HRESULT _Worksheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(6893)) _bstr_t _Worksheet::GetName ( );
__declspec(implementation_key(6894)) void _Worksheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(6895)) IDispatchPtr _Worksheet::GetNext ( );
__declspec(implementation_key(6896)) _bstr_t _Worksheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(6897)) void _Worksheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6898)) _bstr_t _Worksheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(6899)) void _Worksheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6900)) _bstr_t _Worksheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(6901)) void _Worksheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6902)) PageSetupPtr _Worksheet::GetPageSetup ( );
__declspec(implementation_key(6903)) IDispatchPtr _Worksheet::GetPrevious ( );
__declspec(implementation_key(6904)) HRESULT _Worksheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(6905)) HRESULT _Worksheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(6906)) HRESULT _Worksheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(6907)) VARIANT_BOOL _Worksheet::GetProtectContents ( long lcid );
__declspec(implementation_key(6908)) VARIANT_BOOL _Worksheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(6909)) VARIANT_BOOL _Worksheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(6910)) VARIANT_BOOL _Worksheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(6911)) HRESULT _Worksheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(6912)) HRESULT _Worksheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(6913)) HRESULT _Worksheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(6914)) enum XlSheetVisibility _Worksheet::GetVisible ( long lcid );
__declspec(implementation_key(6915)) void _Worksheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(6916)) ShapesPtr _Worksheet::GetShapes ( );
__declspec(implementation_key(6917)) VARIANT_BOOL _Worksheet::GetTransitionExpEval ( long lcid );
__declspec(implementation_key(6918)) void _Worksheet::PutTransitionExpEval ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6919)) IDispatchPtr _Worksheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6920)) VARIANT_BOOL _Worksheet::GetAutoFilterMode ( long lcid );
__declspec(implementation_key(6921)) void _Worksheet::PutAutoFilterMode ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6922)) HRESULT _Worksheet::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(6923)) IDispatchPtr _Worksheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6924)) HRESULT _Worksheet::Calculate ( long lcid );
__declspec(implementation_key(6925)) VARIANT_BOOL _Worksheet::GetEnableCalculation ( );
__declspec(implementation_key(6926)) void _Worksheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(6927)) RangePtr _Worksheet::GetCells ( );
__declspec(implementation_key(6928)) IDispatchPtr _Worksheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6929)) IDispatchPtr _Worksheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6930)) HRESULT _Worksheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(6931)) RangePtr _Worksheet::GetCircularReference ( long lcid );
__declspec(implementation_key(6932)) HRESULT _Worksheet::ClearArrows ( long lcid );
__declspec(implementation_key(6933)) RangePtr _Worksheet::GetColumns ( );
__declspec(implementation_key(6934)) enum XlConsolidationFunction _Worksheet::GetConsolidationFunction ( long lcid );
__declspec(implementation_key(6935)) _variant_t _Worksheet::GetConsolidationOptions ( long lcid );
__declspec(implementation_key(6936)) _variant_t _Worksheet::GetConsolidationSources ( long lcid );
__declspec(implementation_key(6937)) VARIANT_BOOL _Worksheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(6938)) void _Worksheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6939)) IDispatchPtr _Worksheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6940)) IDispatchPtr _Worksheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6941)) IDispatchPtr _Worksheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6942)) VARIANT_BOOL _Worksheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(6943)) void _Worksheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6944)) enum XlEnableSelection _Worksheet::GetEnableSelection ( );
__declspec(implementation_key(6945)) void _Worksheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(6946)) VARIANT_BOOL _Worksheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(6947)) void _Worksheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6948)) VARIANT_BOOL _Worksheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(6949)) void _Worksheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6950)) _variant_t _Worksheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(6951)) _variant_t _Worksheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(6952)) VARIANT_BOOL _Worksheet::GetFilterMode ( long lcid );
__declspec(implementation_key(6953)) HRESULT _Worksheet::ResetAllPageBreaks ( );
__declspec(implementation_key(6954)) IDispatchPtr _Worksheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6955)) IDispatchPtr _Worksheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6956)) IDispatchPtr _Worksheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6957)) IDispatchPtr _Worksheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6958)) IDispatchPtr _Worksheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6959)) NamesPtr _Worksheet::GetNames ( );
__declspec(implementation_key(6960)) IDispatchPtr _Worksheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6961)) _bstr_t _Worksheet::GetOnCalculate ( long lcid );
__declspec(implementation_key(6962)) void _Worksheet::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6963)) _bstr_t _Worksheet::GetOnData ( long lcid );
__declspec(implementation_key(6964)) void _Worksheet::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6965)) _bstr_t _Worksheet::GetOnEntry ( long lcid );
__declspec(implementation_key(6966)) void _Worksheet::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(6967)) IDispatchPtr _Worksheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6968)) OutlinePtr _Worksheet::GetOutline ( );
__declspec(implementation_key(6969)) IDispatchPtr _Worksheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6970)) HRESULT _Worksheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(6971)) HRESULT _Worksheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(6972)) IDispatchPtr _Worksheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6973)) IDispatchPtr _Worksheet::PivotTables ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6974)) PivotTablePtr _Worksheet::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(6975)) RangePtr _Worksheet::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(6976)) IDispatchPtr _Worksheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6977)) RangePtr _Worksheet::GetRows ( );
__declspec(implementation_key(6978)) IDispatchPtr _Worksheet::Scenarios ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6979)) _bstr_t _Worksheet::GetScrollArea ( );
__declspec(implementation_key(6980)) void _Worksheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(6981)) IDispatchPtr _Worksheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6982)) HRESULT _Worksheet::ShowAllData ( long lcid );
__declspec(implementation_key(6983)) HRESULT _Worksheet::ShowDataForm ( long lcid );
__declspec(implementation_key(6984)) IDispatchPtr _Worksheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6985)) double _Worksheet::GetStandardHeight ( long lcid );
__declspec(implementation_key(6986)) double _Worksheet::GetStandardWidth ( long lcid );
__declspec(implementation_key(6987)) void _Worksheet::PutStandardWidth ( long lcid, double RHS );
__declspec(implementation_key(6988)) IDispatchPtr _Worksheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(6989)) VARIANT_BOOL _Worksheet::GetTransitionFormEntry ( long lcid );
__declspec(implementation_key(6990)) void _Worksheet::PutTransitionFormEntry ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(6991)) enum XlSheetType _Worksheet::GetType ( long lcid );
__declspec(implementation_key(6992)) RangePtr _Worksheet::GetUsedRange ( long lcid );
__declspec(implementation_key(6993)) HPageBreaksPtr _Worksheet::GetHPageBreaks ( );
__declspec(implementation_key(6994)) VPageBreaksPtr _Worksheet::GetVPageBreaks ( );
__declspec(implementation_key(6995)) QueryTablesPtr _Worksheet::GetQueryTables ( );
__declspec(implementation_key(6996)) VARIANT_BOOL _Worksheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(6997)) void _Worksheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(6998)) CommentsPtr _Worksheet::GetComments ( );
__declspec(implementation_key(6999)) HyperlinksPtr _Worksheet::GetHyperlinks ( );
__declspec(implementation_key(7000)) HRESULT _Worksheet::ClearCircles ( );
__declspec(implementation_key(7001)) HRESULT _Worksheet::CircleInvalid ( );
__declspec(implementation_key(7002)) long _Worksheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(7003)) void _Worksheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(7004)) AutoFilterPtr _Worksheet::GetAutoFilter ( );
__declspec(implementation_key(7005)) VARIANT_BOOL _Worksheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(7006)) void _Worksheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(7007)) Office::ScriptsPtr _Worksheet::GetScripts ( );
__declspec(implementation_key(7008)) HRESULT _Worksheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(7009)) HRESULT _Worksheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(7010)) TabPtr _Worksheet::GetTab ( );
__declspec(implementation_key(7011)) Office::IMsoEnvelopeVBPtr _Worksheet::GetMailEnvelope ( );
__declspec(implementation_key(7012)) HRESULT _Worksheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(7013)) CustomPropertiesPtr _Worksheet::GetCustomProperties ( );
__declspec(implementation_key(7014)) SmartTagsPtr _Worksheet::GetSmartTags ( );
__declspec(implementation_key(7015)) ProtectionPtr _Worksheet::GetProtection ( );
__declspec(implementation_key(7016)) HRESULT _Worksheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid );
__declspec(implementation_key(7017)) HRESULT _Worksheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(7018)) ListObjectsPtr _Worksheet::GetListObjects ( );
__declspec(implementation_key(7019)) RangePtr _Worksheet::XmlDataQuery ( _bstr_t XPath, const _variant_t & SelectionNamespaces, const _variant_t & Map );
__declspec(implementation_key(7020)) RangePtr _Worksheet::XmlMapQuery ( _bstr_t XPath, const _variant_t & SelectionNamespaces, const _variant_t & Map );
__declspec(implementation_key(7021)) _ApplicationPtr IStyle::GetApplication ( );
__declspec(implementation_key(7022)) enum XlCreator IStyle::GetCreator ( );
__declspec(implementation_key(7023)) IDispatchPtr IStyle::GetParent ( );
__declspec(implementation_key(7024)) VARIANT_BOOL IStyle::GetAddIndent ( );
__declspec(implementation_key(7025)) void IStyle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(7026)) VARIANT_BOOL IStyle::GetBuiltIn ( );
__declspec(implementation_key(7027)) BordersPtr IStyle::GetBorders ( );
__declspec(implementation_key(7028)) _variant_t IStyle::Delete ( );
__declspec(implementation_key(7029)) FontPtr IStyle::GetFont ( );
__declspec(implementation_key(7030)) VARIANT_BOOL IStyle::GetFormulaHidden ( );
__declspec(implementation_key(7031)) void IStyle::PutFormulaHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(7032)) enum XlHAlign IStyle::GetHorizontalAlignment ( );
__declspec(implementation_key(7033)) void IStyle::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(7034)) VARIANT_BOOL IStyle::GetIncludeAlignment ( );
__declspec(implementation_key(7035)) void IStyle::PutIncludeAlignment ( VARIANT_BOOL RHS );
__declspec(implementation_key(7036)) VARIANT_BOOL IStyle::GetIncludeBorder ( );
__declspec(implementation_key(7037)) void IStyle::PutIncludeBorder ( VARIANT_BOOL RHS );
__declspec(implementation_key(7038)) VARIANT_BOOL IStyle::GetIncludeFont ( );
__declspec(implementation_key(7039)) void IStyle::PutIncludeFont ( VARIANT_BOOL RHS );
__declspec(implementation_key(7040)) VARIANT_BOOL IStyle::GetIncludeNumber ( );
__declspec(implementation_key(7041)) void IStyle::PutIncludeNumber ( VARIANT_BOOL RHS );
__declspec(implementation_key(7042)) VARIANT_BOOL IStyle::GetIncludePatterns ( );
__declspec(implementation_key(7043)) void IStyle::PutIncludePatterns ( VARIANT_BOOL RHS );
__declspec(implementation_key(7044)) VARIANT_BOOL IStyle::GetIncludeProtection ( );
__declspec(implementation_key(7045)) void IStyle::PutIncludeProtection ( VARIANT_BOOL RHS );
__declspec(implementation_key(7046)) long IStyle::GetIndentLevel ( );
__declspec(implementation_key(7047)) void IStyle::PutIndentLevel ( long RHS );
__declspec(implementation_key(7048)) InteriorPtr IStyle::GetInterior ( );
__declspec(implementation_key(7049)) VARIANT_BOOL IStyle::GetLocked ( );
__declspec(implementation_key(7050)) void IStyle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7051)) _variant_t IStyle::GetMergeCells ( );
__declspec(implementation_key(7052)) void IStyle::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(7053)) _bstr_t IStyle::GetName ( long lcid );
__declspec(implementation_key(7054)) _bstr_t IStyle::GetNameLocal ( );
__declspec(implementation_key(7055)) _bstr_t IStyle::GetNumberFormat ( );
__declspec(implementation_key(7056)) void IStyle::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(7057)) _bstr_t IStyle::GetNumberFormatLocal ( );
__declspec(implementation_key(7058)) void IStyle::PutNumberFormatLocal ( _bstr_t RHS );
__declspec(implementation_key(7059)) enum XlOrientation IStyle::GetOrientation ( );
__declspec(implementation_key(7060)) void IStyle::PutOrientation ( enum XlOrientation RHS );
__declspec(implementation_key(7061)) VARIANT_BOOL IStyle::GetShrinkToFit ( );
__declspec(implementation_key(7062)) void IStyle::PutShrinkToFit ( VARIANT_BOOL RHS );
__declspec(implementation_key(7063)) _bstr_t IStyle::GetValue ( long lcid );
__declspec(implementation_key(7064)) enum XlVAlign IStyle::GetVerticalAlignment ( );
__declspec(implementation_key(7065)) void IStyle::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(7066)) VARIANT_BOOL IStyle::GetWrapText ( );
__declspec(implementation_key(7067)) void IStyle::PutWrapText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7068)) _bstr_t IStyle::Get_Default ( long lcid );
__declspec(implementation_key(7069)) long IStyle::GetReadingOrder ( );
__declspec(implementation_key(7070)) void IStyle::PutReadingOrder ( long RHS );
__declspec(implementation_key(7071)) _ApplicationPtr IStyles::GetApplication ( );
__declspec(implementation_key(7072)) enum XlCreator IStyles::GetCreator ( );
__declspec(implementation_key(7073)) IDispatchPtr IStyles::GetParent ( );
__declspec(implementation_key(7074)) StylePtr IStyles::Add ( _bstr_t Name, const _variant_t & BasedOn );
__declspec(implementation_key(7075)) long IStyles::GetCount ( );
__declspec(implementation_key(7076)) StylePtr IStyles::GetItem ( const _variant_t & Index, long lcid );
__declspec(implementation_key(7077)) _variant_t IStyles::Merge ( const _variant_t & Workbook );
__declspec(implementation_key(7078)) IUnknownPtr IStyles::Get_NewEnum ( );
__declspec(implementation_key(7079)) StylePtr IStyles::Get_Default ( const _variant_t & Index, long lcid );
__declspec(implementation_key(7080)) _ApplicationPtr IBorders::GetApplication ( );
__declspec(implementation_key(7081)) enum XlCreator IBorders::GetCreator ( );
__declspec(implementation_key(7082)) IDispatchPtr IBorders::GetParent ( );
__declspec(implementation_key(7083)) _variant_t IBorders::GetColor ( );
__declspec(implementation_key(7084)) void IBorders::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(7085)) _variant_t IBorders::GetColorIndex ( );
__declspec(implementation_key(7086)) void IBorders::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(7087)) long IBorders::GetCount ( );
__declspec(implementation_key(7088)) BorderPtr IBorders::GetItem ( enum XlBordersIndex Index );
__declspec(implementation_key(7089)) _variant_t IBorders::GetLineStyle ( );
__declspec(implementation_key(7090)) void IBorders::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(7091)) IUnknownPtr IBorders::Get_NewEnum ( );
__declspec(implementation_key(7092)) _variant_t IBorders::GetValue ( );
__declspec(implementation_key(7093)) void IBorders::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7094)) _variant_t IBorders::GetWeight ( );
__declspec(implementation_key(7095)) void IBorders::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(7096)) BorderPtr IBorders::Get_Default ( enum XlBordersIndex Index );
__declspec(implementation_key(7097)) _ApplicationPtr IAddIn::GetApplication ( );
__declspec(implementation_key(7098)) enum XlCreator IAddIn::GetCreator ( );
__declspec(implementation_key(7099)) IDispatchPtr IAddIn::GetParent ( );
__declspec(implementation_key(7100)) _bstr_t IAddIn::GetAuthor ( );
__declspec(implementation_key(7101)) _bstr_t IAddIn::GetComments ( );
__declspec(implementation_key(7102)) _bstr_t IAddIn::GetFullName ( );
__declspec(implementation_key(7103)) VARIANT_BOOL IAddIn::GetInstalled ( );
__declspec(implementation_key(7104)) void IAddIn::PutInstalled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7105)) _bstr_t IAddIn::GetKeywords ( );
__declspec(implementation_key(7106)) _bstr_t IAddIn::GetName ( );
__declspec(implementation_key(7107)) _bstr_t IAddIn::GetPath ( );
__declspec(implementation_key(7108)) _bstr_t IAddIn::GetSubject ( );
__declspec(implementation_key(7109)) _bstr_t IAddIn::GetTitle ( );
__declspec(implementation_key(7110)) _bstr_t IAddIn::GetprogID ( );
__declspec(implementation_key(7111)) _bstr_t IAddIn::GetCLSID ( );
__declspec(implementation_key(7112)) _ApplicationPtr IAddIns::GetApplication ( );
__declspec(implementation_key(7113)) enum XlCreator IAddIns::GetCreator ( );
__declspec(implementation_key(7114)) IDispatchPtr IAddIns::GetParent ( );
__declspec(implementation_key(7115)) AddInPtr IAddIns::Add ( _bstr_t Filename, const _variant_t & CopyFile );
__declspec(implementation_key(7116)) long IAddIns::GetCount ( );
__declspec(implementation_key(7117)) AddInPtr IAddIns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7118)) IUnknownPtr IAddIns::Get_NewEnum ( );
__declspec(implementation_key(7119)) AddInPtr IAddIns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7120)) _ApplicationPtr IToolbar::GetApplication ( );
__declspec(implementation_key(7121)) enum XlCreator IToolbar::GetCreator ( );
__declspec(implementation_key(7122)) IDispatchPtr IToolbar::GetParent ( );
__declspec(implementation_key(7123)) VARIANT_BOOL IToolbar::GetBuiltIn ( );
__declspec(implementation_key(7124)) HRESULT IToolbar::Delete ( );
__declspec(implementation_key(7125)) long IToolbar::GetHeight ( );
__declspec(implementation_key(7126)) void IToolbar::PutHeight ( long RHS );
__declspec(implementation_key(7127)) long IToolbar::GetLeft ( );
__declspec(implementation_key(7128)) void IToolbar::PutLeft ( long RHS );
__declspec(implementation_key(7129)) _bstr_t IToolbar::GetName ( );
__declspec(implementation_key(7130)) long IToolbar::GetPosition ( );
__declspec(implementation_key(7131)) void IToolbar::PutPosition ( long RHS );
__declspec(implementation_key(7132)) enum XlToolbarProtection IToolbar::GetProtection ( );
__declspec(implementation_key(7133)) void IToolbar::PutProtection ( enum XlToolbarProtection RHS );
__declspec(implementation_key(7134)) HRESULT IToolbar::Reset ( );
__declspec(implementation_key(7135)) ToolbarButtonsPtr IToolbar::GetToolbarButtons ( );
__declspec(implementation_key(7136)) long IToolbar::GetTop ( );
__declspec(implementation_key(7137)) void IToolbar::PutTop ( long RHS );
__declspec(implementation_key(7138)) VARIANT_BOOL IToolbar::GetVisible ( );
__declspec(implementation_key(7139)) void IToolbar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7140)) long IToolbar::GetWidth ( );
__declspec(implementation_key(7141)) void IToolbar::PutWidth ( long RHS );
__declspec(implementation_key(7142)) _ApplicationPtr IToolbars::GetApplication ( );
__declspec(implementation_key(7143)) enum XlCreator IToolbars::GetCreator ( );
__declspec(implementation_key(7144)) IDispatchPtr IToolbars::GetParent ( );
__declspec(implementation_key(7145)) ToolbarPtr IToolbars::Add ( const _variant_t & Name );
__declspec(implementation_key(7146)) long IToolbars::GetCount ( );
__declspec(implementation_key(7147)) ToolbarPtr IToolbars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7148)) ToolbarPtr IToolbars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7149)) IUnknownPtr IToolbars::Get_NewEnum ( );
__declspec(implementation_key(7150)) _ApplicationPtr IToolbarButton::GetApplication ( );
__declspec(implementation_key(7151)) enum XlCreator IToolbarButton::GetCreator ( );
__declspec(implementation_key(7152)) IDispatchPtr IToolbarButton::GetParent ( );
__declspec(implementation_key(7153)) VARIANT_BOOL IToolbarButton::GetBuiltIn ( );
__declspec(implementation_key(7154)) VARIANT_BOOL IToolbarButton::GetBuiltInFace ( );
__declspec(implementation_key(7155)) void IToolbarButton::PutBuiltInFace ( VARIANT_BOOL RHS );
__declspec(implementation_key(7156)) HRESULT IToolbarButton::Copy ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(7157)) HRESULT IToolbarButton::CopyFace ( );
__declspec(implementation_key(7158)) HRESULT IToolbarButton::Delete ( );
__declspec(implementation_key(7159)) HRESULT IToolbarButton::Edit ( );
__declspec(implementation_key(7160)) VARIANT_BOOL IToolbarButton::GetEnabled ( );
__declspec(implementation_key(7161)) void IToolbarButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7162)) long IToolbarButton::GetHelpContextID ( );
__declspec(implementation_key(7163)) void IToolbarButton::PutHelpContextID ( long RHS );
__declspec(implementation_key(7164)) _bstr_t IToolbarButton::GetHelpFile ( );
__declspec(implementation_key(7165)) void IToolbarButton::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(7166)) long IToolbarButton::GetID ( );
__declspec(implementation_key(7167)) VARIANT_BOOL IToolbarButton::GetIsGap ( );
__declspec(implementation_key(7168)) HRESULT IToolbarButton::Move ( struct Toolbar * Toolbar, long Before );
__declspec(implementation_key(7169)) _bstr_t IToolbarButton::GetName ( );
__declspec(implementation_key(7170)) void IToolbarButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(7171)) _bstr_t IToolbarButton::GetOnAction ( );
__declspec(implementation_key(7172)) void IToolbarButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7173)) HRESULT IToolbarButton::PasteFace ( );
__declspec(implementation_key(7174)) VARIANT_BOOL IToolbarButton::GetPushed ( );
__declspec(implementation_key(7175)) void IToolbarButton::PutPushed ( VARIANT_BOOL RHS );
__declspec(implementation_key(7176)) HRESULT IToolbarButton::Reset ( );
__declspec(implementation_key(7177)) _bstr_t IToolbarButton::GetStatusBar ( );
__declspec(implementation_key(7178)) void IToolbarButton::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(7179)) long IToolbarButton::GetWidth ( );
__declspec(implementation_key(7180)) void IToolbarButton::PutWidth ( long RHS );
__declspec(implementation_key(7181)) _ApplicationPtr IToolbarButtons::GetApplication ( );
__declspec(implementation_key(7182)) enum XlCreator IToolbarButtons::GetCreator ( );
__declspec(implementation_key(7183)) IDispatchPtr IToolbarButtons::GetParent ( );
__declspec(implementation_key(7184)) ToolbarButtonPtr IToolbarButtons::Add ( const _variant_t & Button, const _variant_t & Before, const _variant_t & OnAction, const _variant_t & Pushed, const _variant_t & Enabled, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(7185)) long IToolbarButtons::GetCount ( );
__declspec(implementation_key(7186)) ToolbarButtonPtr IToolbarButtons::GetItem ( long Index );
__declspec(implementation_key(7187)) IUnknownPtr IToolbarButtons::Get_NewEnum ( );
__declspec(implementation_key(7188)) ToolbarButtonPtr IToolbarButtons::Get_Default ( long Index );
__declspec(implementation_key(7189)) _ApplicationPtr IAreas::GetApplication ( );
__declspec(implementation_key(7190)) enum XlCreator IAreas::GetCreator ( );
__declspec(implementation_key(7191)) IDispatchPtr IAreas::GetParent ( );
__declspec(implementation_key(7192)) long IAreas::GetCount ( );
__declspec(implementation_key(7193)) RangePtr IAreas::GetItem ( long Index );
__declspec(implementation_key(7194)) IUnknownPtr IAreas::Get_NewEnum ( );
__declspec(implementation_key(7195)) RangePtr IAreas::Get_Default ( long Index );
__declspec(implementation_key(7196)) _ApplicationPtr IMenuBars::GetApplication ( );
__declspec(implementation_key(7197)) enum XlCreator IMenuBars::GetCreator ( );
__declspec(implementation_key(7198)) IDispatchPtr IMenuBars::GetParent ( );
__declspec(implementation_key(7199)) MenuBarPtr IMenuBars::Add ( const _variant_t & Name );
__declspec(implementation_key(7200)) long IMenuBars::GetCount ( );
__declspec(implementation_key(7201)) MenuBarPtr IMenuBars::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7202)) MenuBarPtr IMenuBars::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7203)) IUnknownPtr IMenuBars::Get_NewEnum ( );
__declspec(implementation_key(7204)) _ApplicationPtr IMenuBar::GetApplication ( );
__declspec(implementation_key(7205)) enum XlCreator IMenuBar::GetCreator ( );
__declspec(implementation_key(7206)) IDispatchPtr IMenuBar::GetParent ( );
__declspec(implementation_key(7207)) HRESULT IMenuBar::Activate ( );
__declspec(implementation_key(7208)) VARIANT_BOOL IMenuBar::GetBuiltIn ( );
__declspec(implementation_key(7209)) _bstr_t IMenuBar::GetCaption ( );
__declspec(implementation_key(7210)) void IMenuBar::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7211)) HRESULT IMenuBar::Delete ( );
__declspec(implementation_key(7212)) long IMenuBar::GetIndex ( );
__declspec(implementation_key(7213)) MenusPtr IMenuBar::GetMenus ( );
__declspec(implementation_key(7214)) HRESULT IMenuBar::Reset ( );
__declspec(implementation_key(7215)) _ApplicationPtr IMenus::GetApplication ( );
__declspec(implementation_key(7216)) enum XlCreator IMenus::GetCreator ( );
__declspec(implementation_key(7217)) IDispatchPtr IMenus::GetParent ( );
__declspec(implementation_key(7218)) MenuPtr IMenus::Add ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(7219)) long IMenus::GetCount ( );
__declspec(implementation_key(7220)) MenuPtr IMenus::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7221)) MenuPtr IMenus::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7222)) IUnknownPtr IMenus::Get_NewEnum ( );
__declspec(implementation_key(7223)) _ApplicationPtr IMenu::GetApplication ( );
__declspec(implementation_key(7224)) enum XlCreator IMenu::GetCreator ( );
__declspec(implementation_key(7225)) IDispatchPtr IMenu::GetParent ( );
__declspec(implementation_key(7226)) _bstr_t IMenu::GetCaption ( );
__declspec(implementation_key(7227)) void IMenu::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7228)) HRESULT IMenu::Delete ( );
__declspec(implementation_key(7229)) VARIANT_BOOL IMenu::GetEnabled ( );
__declspec(implementation_key(7230)) void IMenu::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7231)) long IMenu::GetIndex ( );
__declspec(implementation_key(7232)) MenuItemsPtr IMenu::GetMenuItems ( );
__declspec(implementation_key(7233)) _ApplicationPtr IMenuItems::GetApplication ( );
__declspec(implementation_key(7234)) enum XlCreator IMenuItems::GetCreator ( );
__declspec(implementation_key(7235)) IDispatchPtr IMenuItems::GetParent ( );
__declspec(implementation_key(7236)) MenuItemPtr IMenuItems::Add ( _bstr_t Caption, const _variant_t & OnAction, const _variant_t & ShortcutKey, const _variant_t & Before, const _variant_t & Restore, const _variant_t & StatusBar, const _variant_t & HelpFile, const _variant_t & HelpContextID );
__declspec(implementation_key(7237)) MenuPtr IMenuItems::AddMenu ( _bstr_t Caption, const _variant_t & Before, const _variant_t & Restore );
__declspec(implementation_key(7238)) long IMenuItems::GetCount ( );
__declspec(implementation_key(7239)) IDispatchPtr IMenuItems::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7240)) IDispatchPtr IMenuItems::GetItem ( const _variant_t & Index );
__declspec(implementation_key(7241)) IUnknownPtr IMenuItems::Get_NewEnum ( );
__declspec(implementation_key(7242)) _ApplicationPtr IMenuItem::GetApplication ( );
__declspec(implementation_key(7243)) enum XlCreator IMenuItem::GetCreator ( );
__declspec(implementation_key(7244)) IDispatchPtr IMenuItem::GetParent ( );
__declspec(implementation_key(7245)) _bstr_t IMenuItem::GetCaption ( );
__declspec(implementation_key(7246)) void IMenuItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7247)) VARIANT_BOOL IMenuItem::GetChecked ( );
__declspec(implementation_key(7248)) void IMenuItem::PutChecked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7249)) HRESULT IMenuItem::Delete ( );
__declspec(implementation_key(7250)) VARIANT_BOOL IMenuItem::GetEnabled ( );
__declspec(implementation_key(7251)) void IMenuItem::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7252)) long IMenuItem::GetHelpContextID ( );
__declspec(implementation_key(7253)) void IMenuItem::PutHelpContextID ( long RHS );
__declspec(implementation_key(7254)) _bstr_t IMenuItem::GetHelpFile ( );
__declspec(implementation_key(7255)) void IMenuItem::PutHelpFile ( _bstr_t RHS );
__declspec(implementation_key(7256)) long IMenuItem::GetIndex ( );
__declspec(implementation_key(7257)) _bstr_t IMenuItem::GetOnAction ( );
__declspec(implementation_key(7258)) void IMenuItem::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7259)) _bstr_t IMenuItem::GetStatusBar ( );
__declspec(implementation_key(7260)) void IMenuItem::PutStatusBar ( _bstr_t RHS );
__declspec(implementation_key(7261)) _ApplicationPtr IDrawingObjects::GetApplication ( );
__declspec(implementation_key(7262)) enum XlCreator IDrawingObjects::GetCreator ( );
__declspec(implementation_key(7263)) IDispatchPtr IDrawingObjects::GetParent ( );
__declspec(implementation_key(7264)) _variant_t IDrawingObjects::BringToFront ( );
__declspec(implementation_key(7265)) _variant_t IDrawingObjects::Copy ( );
__declspec(implementation_key(7266)) _variant_t IDrawingObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7267)) _variant_t IDrawingObjects::Cut ( );
__declspec(implementation_key(7268)) _variant_t IDrawingObjects::Delete ( );
__declspec(implementation_key(7269)) IDispatchPtr IDrawingObjects::Duplicate ( );
__declspec(implementation_key(7270)) VARIANT_BOOL IDrawingObjects::GetEnabled ( );
__declspec(implementation_key(7271)) void IDrawingObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7272)) double IDrawingObjects::GetHeight ( );
__declspec(implementation_key(7273)) void IDrawingObjects::PutHeight ( double RHS );
__declspec(implementation_key(7274)) double IDrawingObjects::GetLeft ( );
__declspec(implementation_key(7275)) void IDrawingObjects::PutLeft ( double RHS );
__declspec(implementation_key(7276)) VARIANT_BOOL IDrawingObjects::GetLocked ( );
__declspec(implementation_key(7277)) void IDrawingObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7278)) _bstr_t IDrawingObjects::GetOnAction ( );
__declspec(implementation_key(7279)) void IDrawingObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7280)) _variant_t IDrawingObjects::GetPlacement ( );
__declspec(implementation_key(7281)) void IDrawingObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7282)) VARIANT_BOOL IDrawingObjects::GetPrintObject ( );
__declspec(implementation_key(7283)) void IDrawingObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7284)) _variant_t IDrawingObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(7285)) _variant_t IDrawingObjects::SendToBack ( );
__declspec(implementation_key(7286)) double IDrawingObjects::GetTop ( );
__declspec(implementation_key(7287)) void IDrawingObjects::PutTop ( double RHS );
__declspec(implementation_key(7288)) VARIANT_BOOL IDrawingObjects::GetVisible ( );
__declspec(implementation_key(7289)) void IDrawingObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7290)) double IDrawingObjects::GetWidth ( );
__declspec(implementation_key(7291)) void IDrawingObjects::PutWidth ( double RHS );
__declspec(implementation_key(7292)) long IDrawingObjects::GetZOrder ( );
__declspec(implementation_key(7293)) ShapeRangePtr IDrawingObjects::GetShapeRange ( );
__declspec(implementation_key(7294)) _variant_t IDrawingObjects::GetAccelerator ( );
__declspec(implementation_key(7295)) void IDrawingObjects::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7296)) VARIANT_BOOL IDrawingObjects::GetAddIndent ( );
__declspec(implementation_key(7297)) void IDrawingObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(7298)) _variant_t IDrawingObjects::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(7299)) _variant_t IDrawingObjects::GetArrowHeadLength ( );
__declspec(implementation_key(7300)) void IDrawingObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(7301)) _variant_t IDrawingObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(7302)) void IDrawingObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(7303)) _variant_t IDrawingObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(7304)) void IDrawingObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(7305)) VARIANT_BOOL IDrawingObjects::GetAutoSize ( );
__declspec(implementation_key(7306)) void IDrawingObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(7307)) BorderPtr IDrawingObjects::GetBorder ( );
__declspec(implementation_key(7308)) VARIANT_BOOL IDrawingObjects::GetCancelButton ( );
__declspec(implementation_key(7309)) void IDrawingObjects::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7310)) _bstr_t IDrawingObjects::GetCaption ( );
__declspec(implementation_key(7311)) void IDrawingObjects::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7312)) CharactersPtr IDrawingObjects::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7313)) _variant_t IDrawingObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7314)) long IDrawingObjects::Get_Default ( );
__declspec(implementation_key(7315)) void IDrawingObjects::Put_Default ( long RHS );
__declspec(implementation_key(7316)) VARIANT_BOOL IDrawingObjects::GetDefaultButton ( );
__declspec(implementation_key(7317)) void IDrawingObjects::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7318)) VARIANT_BOOL IDrawingObjects::GetDismissButton ( );
__declspec(implementation_key(7319)) void IDrawingObjects::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7320)) VARIANT_BOOL IDrawingObjects::GetDisplay3DShading ( );
__declspec(implementation_key(7321)) void IDrawingObjects::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7322)) VARIANT_BOOL IDrawingObjects::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(7323)) void IDrawingObjects::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(7324)) long IDrawingObjects::GetDropDownLines ( );
__declspec(implementation_key(7325)) void IDrawingObjects::PutDropDownLines ( long RHS );
__declspec(implementation_key(7326)) FontPtr IDrawingObjects::GetFont ( );
__declspec(implementation_key(7327)) VARIANT_BOOL IDrawingObjects::GetHelpButton ( );
__declspec(implementation_key(7328)) void IDrawingObjects::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7329)) _variant_t IDrawingObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(7330)) void IDrawingObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7331)) long IDrawingObjects::GetInputType ( );
__declspec(implementation_key(7332)) void IDrawingObjects::PutInputType ( long RHS );
__declspec(implementation_key(7333)) InteriorPtr IDrawingObjects::GetInterior ( );
__declspec(implementation_key(7334)) long IDrawingObjects::GetLargeChange ( );
__declspec(implementation_key(7335)) void IDrawingObjects::PutLargeChange ( long RHS );
__declspec(implementation_key(7336)) _bstr_t IDrawingObjects::GetLinkedCell ( );
__declspec(implementation_key(7337)) void IDrawingObjects::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7338)) _variant_t IDrawingObjects::List ( const _variant_t & Index );
__declspec(implementation_key(7339)) _bstr_t IDrawingObjects::GetListFillRange ( );
__declspec(implementation_key(7340)) void IDrawingObjects::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(7341)) long IDrawingObjects::GetListIndex ( );
__declspec(implementation_key(7342)) void IDrawingObjects::PutListIndex ( long RHS );
__declspec(implementation_key(7343)) VARIANT_BOOL IDrawingObjects::GetLockedText ( );
__declspec(implementation_key(7344)) void IDrawingObjects::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7345)) long IDrawingObjects::GetMax ( );
__declspec(implementation_key(7346)) void IDrawingObjects::PutMax ( long RHS );
__declspec(implementation_key(7347)) long IDrawingObjects::GetMin ( );
__declspec(implementation_key(7348)) void IDrawingObjects::PutMin ( long RHS );
__declspec(implementation_key(7349)) VARIANT_BOOL IDrawingObjects::GetMultiLine ( );
__declspec(implementation_key(7350)) void IDrawingObjects::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(7351)) VARIANT_BOOL IDrawingObjects::GetMultiSelect ( );
__declspec(implementation_key(7352)) void IDrawingObjects::PutMultiSelect ( VARIANT_BOOL RHS );
__declspec(implementation_key(7353)) _variant_t IDrawingObjects::GetOrientation ( );
__declspec(implementation_key(7354)) void IDrawingObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(7355)) _variant_t IDrawingObjects::GetPhoneticAccelerator ( );
__declspec(implementation_key(7356)) void IDrawingObjects::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7357)) _variant_t IDrawingObjects::RemoveAllItems ( );
__declspec(implementation_key(7358)) _variant_t IDrawingObjects::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(7359)) _variant_t IDrawingObjects::Reshape ( long Vertex, const _variant_t & Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(7360)) VARIANT_BOOL IDrawingObjects::GetRoundedCorners ( );
__declspec(implementation_key(7361)) void IDrawingObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(7362)) _variant_t IDrawingObjects::Selected ( const _variant_t & Index );
__declspec(implementation_key(7363)) VARIANT_BOOL IDrawingObjects::GetShadow ( );
__declspec(implementation_key(7364)) void IDrawingObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(7365)) long IDrawingObjects::GetSmallChange ( );
__declspec(implementation_key(7366)) void IDrawingObjects::PutSmallChange ( long RHS );
__declspec(implementation_key(7367)) _bstr_t IDrawingObjects::GetText ( );
__declspec(implementation_key(7368)) void IDrawingObjects::PutText ( _bstr_t RHS );
__declspec(implementation_key(7369)) IDispatchPtr IDrawingObjects::Ungroup ( );
__declspec(implementation_key(7370)) long IDrawingObjects::GetValue ( );
__declspec(implementation_key(7371)) void IDrawingObjects::PutValue ( long RHS );
__declspec(implementation_key(7372)) _variant_t IDrawingObjects::GetVerticalAlignment ( );
__declspec(implementation_key(7373)) void IDrawingObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7374)) _variant_t IDrawingObjects::Vertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(7375)) long IDrawingObjects::GetReadingOrder ( );
__declspec(implementation_key(7376)) void IDrawingObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(7377)) long IDrawingObjects::GetCount ( );
__declspec(implementation_key(7378)) IDispatchPtr IDrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(7379)) GroupObjectPtr IDrawingObjects::Group ( );
__declspec(implementation_key(7380)) _variant_t IDrawingObjects::LinkCombo ( const _variant_t & Link );
__declspec(implementation_key(7381)) IUnknownPtr IDrawingObjects::_NewEnum ( );
__declspec(implementation_key(7382)) _ApplicationPtr IPivotCache::GetApplication ( );
__declspec(implementation_key(7383)) enum XlCreator IPivotCache::GetCreator ( );
__declspec(implementation_key(7384)) IDispatchPtr IPivotCache::GetParent ( );
__declspec(implementation_key(7385)) VARIANT_BOOL IPivotCache::GetBackgroundQuery ( );
__declspec(implementation_key(7386)) void IPivotCache::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(7387)) _variant_t IPivotCache::GetConnection ( );
__declspec(implementation_key(7388)) void IPivotCache::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(7389)) VARIANT_BOOL IPivotCache::GetEnableRefresh ( );
__declspec(implementation_key(7390)) void IPivotCache::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(7391)) long IPivotCache::GetIndex ( );
__declspec(implementation_key(7392)) long IPivotCache::GetMemoryUsed ( );
__declspec(implementation_key(7393)) VARIANT_BOOL IPivotCache::GetOptimizeCache ( );
__declspec(implementation_key(7394)) void IPivotCache::PutOptimizeCache ( VARIANT_BOOL RHS );
__declspec(implementation_key(7395)) long IPivotCache::GetRecordCount ( );
__declspec(implementation_key(7396)) HRESULT IPivotCache::Refresh ( );
__declspec(implementation_key(7397)) DATE IPivotCache::GetRefreshDate ( );
__declspec(implementation_key(7398)) _bstr_t IPivotCache::GetRefreshName ( );
__declspec(implementation_key(7399)) VARIANT_BOOL IPivotCache::GetRefreshOnFileOpen ( );
__declspec(implementation_key(7400)) void IPivotCache::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(7401)) _variant_t IPivotCache::GetSql ( );
__declspec(implementation_key(7402)) void IPivotCache::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(7403)) VARIANT_BOOL IPivotCache::GetSavePassword ( );
__declspec(implementation_key(7404)) void IPivotCache::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(7405)) _variant_t IPivotCache::GetSourceData ( );
__declspec(implementation_key(7406)) void IPivotCache::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(7407)) _variant_t IPivotCache::GetCommandText ( );
__declspec(implementation_key(7408)) void IPivotCache::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(7409)) enum XlCmdType IPivotCache::GetCommandType ( );
__declspec(implementation_key(7410)) void IPivotCache::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(7411)) enum XlQueryType IPivotCache::GetQueryType ( );
__declspec(implementation_key(7412)) VARIANT_BOOL IPivotCache::GetMaintainConnection ( );
__declspec(implementation_key(7413)) void IPivotCache::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(7414)) long IPivotCache::GetRefreshPeriod ( );
__declspec(implementation_key(7415)) void IPivotCache::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(7416)) IDispatchPtr IPivotCache::GetRecordset ( );
__declspec(implementation_key(7417)) void IPivotCache::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(7418)) HRESULT IPivotCache::ResetTimer ( );
__declspec(implementation_key(7419)) _variant_t IPivotCache::GetLocalConnection ( );
__declspec(implementation_key(7420)) void IPivotCache::PutLocalConnection ( const _variant_t & RHS );
__declspec(implementation_key(7421)) PivotTablePtr IPivotCache::CreatePivotTable ( const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(7422)) VARIANT_BOOL IPivotCache::GetUseLocalConnection ( );
__declspec(implementation_key(7423)) void IPivotCache::PutUseLocalConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(7424)) IDispatchPtr IPivotCache::GetADOConnection ( );
__declspec(implementation_key(7425)) VARIANT_BOOL IPivotCache::GetIsConnected ( );
__declspec(implementation_key(7426)) HRESULT IPivotCache::MakeConnection ( );
__declspec(implementation_key(7427)) VARIANT_BOOL IPivotCache::GetOLAP ( );
__declspec(implementation_key(7428)) enum XlPivotTableSourceType IPivotCache::GetSourceType ( );
__declspec(implementation_key(7429)) enum XlPivotTableMissingItems IPivotCache::GetMissingItemsLimit ( );
__declspec(implementation_key(7430)) void IPivotCache::PutMissingItemsLimit ( enum XlPivotTableMissingItems RHS );
__declspec(implementation_key(7431)) _bstr_t IPivotCache::GetSourceConnectionFile ( );
__declspec(implementation_key(7432)) void IPivotCache::PutSourceConnectionFile ( _bstr_t RHS );
__declspec(implementation_key(7433)) _bstr_t IPivotCache::GetSourceDataFile ( );
__declspec(implementation_key(7434)) enum XlRobustConnect IPivotCache::GetRobustConnect ( );
__declspec(implementation_key(7435)) void IPivotCache::PutRobustConnect ( enum XlRobustConnect RHS );
__declspec(implementation_key(7436)) HRESULT IPivotCache::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(7437)) _ApplicationPtr IPivotCaches::GetApplication ( );
__declspec(implementation_key(7438)) enum XlCreator IPivotCaches::GetCreator ( );
__declspec(implementation_key(7439)) IDispatchPtr IPivotCaches::GetParent ( );
__declspec(implementation_key(7440)) long IPivotCaches::GetCount ( );
__declspec(implementation_key(7441)) PivotCachePtr IPivotCaches::Item ( const _variant_t & Index );
__declspec(implementation_key(7442)) PivotCachePtr IPivotCaches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7443)) IUnknownPtr IPivotCaches::_NewEnum ( );
__declspec(implementation_key(7444)) PivotCachePtr IPivotCaches::Add ( enum XlPivotTableSourceType SourceType, const _variant_t & SourceData );
__declspec(implementation_key(7445)) _ApplicationPtr IPivotFormula::GetApplication ( );
__declspec(implementation_key(7446)) enum XlCreator IPivotFormula::GetCreator ( );
__declspec(implementation_key(7447)) IDispatchPtr IPivotFormula::GetParent ( );
__declspec(implementation_key(7448)) HRESULT IPivotFormula::Delete ( );
__declspec(implementation_key(7449)) _bstr_t IPivotFormula::Get_Default ( );
__declspec(implementation_key(7450)) void IPivotFormula::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(7451)) _bstr_t IPivotFormula::GetFormula ( );
__declspec(implementation_key(7452)) void IPivotFormula::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(7453)) _bstr_t IPivotFormula::GetValue ( );
__declspec(implementation_key(7454)) void IPivotFormula::PutValue ( _bstr_t RHS );
__declspec(implementation_key(7455)) long IPivotFormula::GetIndex ( );
__declspec(implementation_key(7456)) void IPivotFormula::PutIndex ( long RHS );
__declspec(implementation_key(7457)) _bstr_t IPivotFormula::GetStandardFormula ( );
__declspec(implementation_key(7458)) void IPivotFormula::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(7459)) _ApplicationPtr IPivotFormulas::GetApplication ( );
__declspec(implementation_key(7460)) enum XlCreator IPivotFormulas::GetCreator ( );
__declspec(implementation_key(7461)) IDispatchPtr IPivotFormulas::GetParent ( );
__declspec(implementation_key(7462)) long IPivotFormulas::GetCount ( );
__declspec(implementation_key(7463)) PivotFormulaPtr IPivotFormulas::_Add ( _bstr_t Formula );
__declspec(implementation_key(7464)) PivotFormulaPtr IPivotFormulas::Item ( const _variant_t & Index );
__declspec(implementation_key(7465)) PivotFormulaPtr IPivotFormulas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(7466)) IUnknownPtr IPivotFormulas::_NewEnum ( );
__declspec(implementation_key(7467)) PivotFormulaPtr IPivotFormulas::Add ( _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(7468)) _ApplicationPtr IPivotTables::GetApplication ( );
__declspec(implementation_key(7469)) enum XlCreator IPivotTables::GetCreator ( );
__declspec(implementation_key(7470)) IDispatchPtr IPivotTables::GetParent ( );
__declspec(implementation_key(7471)) long IPivotTables::GetCount ( );
__declspec(implementation_key(7472)) PivotTablePtr IPivotTables::Item ( const _variant_t & Index );
__declspec(implementation_key(7473)) IUnknownPtr IPivotTables::_NewEnum ( );
__declspec(implementation_key(7474)) PivotTablePtr IPivotTables::Add ( struct PivotCache * PivotCache, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & ReadData, const _variant_t & DefaultVersion );
__declspec(implementation_key(7475)) _ApplicationPtr IPivotFields::GetApplication ( );
__declspec(implementation_key(7476)) enum XlCreator IPivotFields::GetCreator ( );
__declspec(implementation_key(7477)) PivotTablePtr IPivotFields::GetParent ( );
__declspec(implementation_key(7478)) long IPivotFields::GetCount ( );
__declspec(implementation_key(7479)) IDispatchPtr IPivotFields::Item ( const _variant_t & Index );
__declspec(implementation_key(7480)) IUnknownPtr IPivotFields::_NewEnum ( );
__declspec(implementation_key(7481)) _ApplicationPtr ICalculatedFields::GetApplication ( );
__declspec(implementation_key(7482)) enum XlCreator ICalculatedFields::GetCreator ( );
__declspec(implementation_key(7483)) IDispatchPtr ICalculatedFields::GetParent ( );
__declspec(implementation_key(7484)) long ICalculatedFields::GetCount ( );
__declspec(implementation_key(7485)) PivotFieldPtr ICalculatedFields::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(7486)) PivotFieldPtr ICalculatedFields::Item ( const _variant_t & Index );
__declspec(implementation_key(7487)) PivotFieldPtr ICalculatedFields::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(7488)) IUnknownPtr ICalculatedFields::_NewEnum ( );
__declspec(implementation_key(7489)) PivotFieldPtr ICalculatedFields::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(7490)) _ApplicationPtr IPivotItem::GetApplication ( );
__declspec(implementation_key(7491)) enum XlCreator IPivotItem::GetCreator ( );
__declspec(implementation_key(7492)) PivotFieldPtr IPivotItem::GetParent ( );
__declspec(implementation_key(7493)) _variant_t IPivotItem::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(7494)) RangePtr IPivotItem::GetDataRange ( );
__declspec(implementation_key(7495)) _bstr_t IPivotItem::Get_Default ( );
__declspec(implementation_key(7496)) void IPivotItem::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(7497)) RangePtr IPivotItem::GetLabelRange ( );
__declspec(implementation_key(7498)) _bstr_t IPivotItem::GetName ( );
__declspec(implementation_key(7499)) void IPivotItem::PutName ( _bstr_t RHS );
__declspec(implementation_key(7500)) PivotItemPtr IPivotItem::GetParentItem ( );
__declspec(implementation_key(7501)) VARIANT_BOOL IPivotItem::GetParentShowDetail ( );
__declspec(implementation_key(7502)) long IPivotItem::GetPosition ( );
__declspec(implementation_key(7503)) void IPivotItem::PutPosition ( long RHS );
__declspec(implementation_key(7504)) VARIANT_BOOL IPivotItem::GetShowDetail ( );
__declspec(implementation_key(7505)) void IPivotItem::PutShowDetail ( VARIANT_BOOL RHS );
__declspec(implementation_key(7506)) _variant_t IPivotItem::GetSourceName ( );
__declspec(implementation_key(7507)) _bstr_t IPivotItem::GetValue ( );
__declspec(implementation_key(7508)) void IPivotItem::PutValue ( _bstr_t RHS );
__declspec(implementation_key(7509)) VARIANT_BOOL IPivotItem::GetVisible ( );
__declspec(implementation_key(7510)) void IPivotItem::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7511)) HRESULT IPivotItem::Delete ( );
__declspec(implementation_key(7512)) VARIANT_BOOL IPivotItem::GetIsCalculated ( );
__declspec(implementation_key(7513)) long IPivotItem::GetRecordCount ( );
__declspec(implementation_key(7514)) _bstr_t IPivotItem::GetFormula ( );
__declspec(implementation_key(7515)) void IPivotItem::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(7516)) _bstr_t IPivotItem::GetCaption ( );
__declspec(implementation_key(7517)) void IPivotItem::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7518)) VARIANT_BOOL IPivotItem::GetDrilledDown ( );
__declspec(implementation_key(7519)) void IPivotItem::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(7520)) _bstr_t IPivotItem::GetStandardFormula ( );
__declspec(implementation_key(7521)) void IPivotItem::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(7522)) _bstr_t IPivotItem::GetSourceNameStandard ( );
__declspec(implementation_key(7523)) _ApplicationPtr IPivotItems::GetApplication ( );
__declspec(implementation_key(7524)) enum XlCreator IPivotItems::GetCreator ( );
__declspec(implementation_key(7525)) PivotFieldPtr IPivotItems::GetParent ( );
__declspec(implementation_key(7526)) HRESULT IPivotItems::Add ( _bstr_t Name );
__declspec(implementation_key(7527)) long IPivotItems::GetCount ( );
__declspec(implementation_key(7528)) IDispatchPtr IPivotItems::Item ( const _variant_t & Index );
__declspec(implementation_key(7529)) IUnknownPtr IPivotItems::_NewEnum ( );
__declspec(implementation_key(7530)) _ApplicationPtr ICalculatedItems::GetApplication ( );
__declspec(implementation_key(7531)) enum XlCreator ICalculatedItems::GetCreator ( );
__declspec(implementation_key(7532)) IDispatchPtr ICalculatedItems::GetParent ( );
__declspec(implementation_key(7533)) long ICalculatedItems::GetCount ( );
__declspec(implementation_key(7534)) PivotItemPtr ICalculatedItems::_Add ( _bstr_t Name, _bstr_t Formula );
__declspec(implementation_key(7535)) PivotItemPtr ICalculatedItems::Item ( const _variant_t & Index );
__declspec(implementation_key(7536)) PivotItemPtr ICalculatedItems::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(7537)) IUnknownPtr ICalculatedItems::_NewEnum ( );
__declspec(implementation_key(7538)) PivotItemPtr ICalculatedItems::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & UseStandardFormula );
__declspec(implementation_key(7539)) _ApplicationPtr ICharacters::GetApplication ( );
__declspec(implementation_key(7540)) enum XlCreator ICharacters::GetCreator ( );
__declspec(implementation_key(7541)) IDispatchPtr ICharacters::GetParent ( );
__declspec(implementation_key(7542)) _bstr_t ICharacters::GetCaption ( );
__declspec(implementation_key(7543)) void ICharacters::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7544)) long ICharacters::GetCount ( );
__declspec(implementation_key(7545)) _variant_t ICharacters::Delete ( );
__declspec(implementation_key(7546)) FontPtr ICharacters::GetFont ( );
__declspec(implementation_key(7547)) _variant_t ICharacters::Insert ( _bstr_t String );
__declspec(implementation_key(7548)) _bstr_t ICharacters::GetText ( );
__declspec(implementation_key(7549)) void ICharacters::PutText ( _bstr_t RHS );
__declspec(implementation_key(7550)) _bstr_t ICharacters::GetPhoneticCharacters ( );
__declspec(implementation_key(7551)) void ICharacters::PutPhoneticCharacters ( _bstr_t RHS );
__declspec(implementation_key(7552)) _ApplicationPtr IDialogs::GetApplication ( );
__declspec(implementation_key(7553)) enum XlCreator IDialogs::GetCreator ( );
__declspec(implementation_key(7554)) IDispatchPtr IDialogs::GetParent ( );
__declspec(implementation_key(7555)) long IDialogs::GetCount ( );
__declspec(implementation_key(7556)) DialogPtr IDialogs::GetItem ( enum XlBuiltInDialog Index );
__declspec(implementation_key(7557)) DialogPtr IDialogs::Get_Default ( enum XlBuiltInDialog Index );
__declspec(implementation_key(7558)) IUnknownPtr IDialogs::Get_NewEnum ( );
__declspec(implementation_key(7559)) _ApplicationPtr IDialog::GetApplication ( );
__declspec(implementation_key(7560)) enum XlCreator IDialog::GetCreator ( );
__declspec(implementation_key(7561)) IDispatchPtr IDialog::GetParent ( );
__declspec(implementation_key(7562)) VARIANT_BOOL IDialog::Show ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(7563)) _ApplicationPtr ISoundNote::GetApplication ( );
__declspec(implementation_key(7564)) enum XlCreator ISoundNote::GetCreator ( );
__declspec(implementation_key(7565)) IDispatchPtr ISoundNote::GetParent ( );
__declspec(implementation_key(7566)) _variant_t ISoundNote::Delete ( );
__declspec(implementation_key(7567)) _variant_t ISoundNote::Import ( _bstr_t Filename );
__declspec(implementation_key(7568)) _variant_t ISoundNote::Play ( );
__declspec(implementation_key(7569)) _variant_t ISoundNote::Record ( );
__declspec(implementation_key(7570)) _ApplicationPtr IButton::GetApplication ( );
__declspec(implementation_key(7571)) enum XlCreator IButton::GetCreator ( );
__declspec(implementation_key(7572)) IDispatchPtr IButton::GetParent ( );
__declspec(implementation_key(7573)) RangePtr IButton::GetBottomRightCell ( );
__declspec(implementation_key(7574)) _variant_t IButton::BringToFront ( );
__declspec(implementation_key(7575)) _variant_t IButton::Copy ( );
__declspec(implementation_key(7576)) _variant_t IButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7577)) _variant_t IButton::Cut ( );
__declspec(implementation_key(7578)) _variant_t IButton::Delete ( );
__declspec(implementation_key(7579)) IDispatchPtr IButton::Duplicate ( );
__declspec(implementation_key(7580)) VARIANT_BOOL IButton::GetEnabled ( );
__declspec(implementation_key(7581)) void IButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7582)) double IButton::GetHeight ( );
__declspec(implementation_key(7583)) void IButton::PutHeight ( double RHS );
__declspec(implementation_key(7584)) long IButton::GetIndex ( );
__declspec(implementation_key(7585)) double IButton::GetLeft ( );
__declspec(implementation_key(7586)) void IButton::PutLeft ( double RHS );
__declspec(implementation_key(7587)) VARIANT_BOOL IButton::GetLocked ( );
__declspec(implementation_key(7588)) void IButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7589)) _bstr_t IButton::GetName ( );
__declspec(implementation_key(7590)) void IButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(7591)) _bstr_t IButton::GetOnAction ( );
__declspec(implementation_key(7592)) void IButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7593)) _variant_t IButton::GetPlacement ( );
__declspec(implementation_key(7594)) void IButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7595)) VARIANT_BOOL IButton::GetPrintObject ( );
__declspec(implementation_key(7596)) void IButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7597)) _variant_t IButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(7598)) _variant_t IButton::SendToBack ( );
__declspec(implementation_key(7599)) double IButton::GetTop ( );
__declspec(implementation_key(7600)) void IButton::PutTop ( double RHS );
__declspec(implementation_key(7601)) RangePtr IButton::GetTopLeftCell ( );
__declspec(implementation_key(7602)) VARIANT_BOOL IButton::GetVisible ( );
__declspec(implementation_key(7603)) void IButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7604)) double IButton::GetWidth ( );
__declspec(implementation_key(7605)) void IButton::PutWidth ( double RHS );
__declspec(implementation_key(7606)) long IButton::GetZOrder ( );
__declspec(implementation_key(7607)) ShapeRangePtr IButton::GetShapeRange ( );
__declspec(implementation_key(7608)) VARIANT_BOOL IButton::GetAddIndent ( );
__declspec(implementation_key(7609)) void IButton::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(7610)) _variant_t IButton::GetAutoScaleFont ( );
__declspec(implementation_key(7611)) void IButton::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(7612)) VARIANT_BOOL IButton::GetAutoSize ( );
__declspec(implementation_key(7613)) void IButton::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(7614)) _bstr_t IButton::GetCaption ( );
__declspec(implementation_key(7615)) void IButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7616)) CharactersPtr IButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7617)) _variant_t IButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7618)) FontPtr IButton::GetFont ( );
__declspec(implementation_key(7619)) _bstr_t IButton::GetFormula ( );
__declspec(implementation_key(7620)) void IButton::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(7621)) _variant_t IButton::GetHorizontalAlignment ( );
__declspec(implementation_key(7622)) void IButton::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7623)) VARIANT_BOOL IButton::GetLockedText ( );
__declspec(implementation_key(7624)) void IButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7625)) _variant_t IButton::GetOrientation ( );
__declspec(implementation_key(7626)) void IButton::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(7627)) _bstr_t IButton::GetText ( );
__declspec(implementation_key(7628)) void IButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(7629)) _variant_t IButton::GetVerticalAlignment ( );
__declspec(implementation_key(7630)) void IButton::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7631)) long IButton::GetReadingOrder ( );
__declspec(implementation_key(7632)) void IButton::PutReadingOrder ( long RHS );
__declspec(implementation_key(7633)) _variant_t IButton::GetAccelerator ( );
__declspec(implementation_key(7634)) void IButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7635)) VARIANT_BOOL IButton::GetCancelButton ( );
__declspec(implementation_key(7636)) void IButton::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7637)) VARIANT_BOOL IButton::GetDefaultButton ( );
__declspec(implementation_key(7638)) void IButton::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7639)) VARIANT_BOOL IButton::GetDismissButton ( );
__declspec(implementation_key(7640)) void IButton::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7641)) VARIANT_BOOL IButton::GetHelpButton ( );
__declspec(implementation_key(7642)) void IButton::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7643)) _variant_t IButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(7644)) void IButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7645)) _ApplicationPtr IButtons::GetApplication ( );
__declspec(implementation_key(7646)) enum XlCreator IButtons::GetCreator ( );
__declspec(implementation_key(7647)) IDispatchPtr IButtons::GetParent ( );
__declspec(implementation_key(7648)) _variant_t IButtons::BringToFront ( );
__declspec(implementation_key(7649)) _variant_t IButtons::Copy ( );
__declspec(implementation_key(7650)) _variant_t IButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7651)) _variant_t IButtons::Cut ( );
__declspec(implementation_key(7652)) _variant_t IButtons::Delete ( );
__declspec(implementation_key(7653)) IDispatchPtr IButtons::Duplicate ( );
__declspec(implementation_key(7654)) VARIANT_BOOL IButtons::GetEnabled ( );
__declspec(implementation_key(7655)) void IButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7656)) double IButtons::GetHeight ( );
__declspec(implementation_key(7657)) void IButtons::PutHeight ( double RHS );
__declspec(implementation_key(7658)) double IButtons::GetLeft ( );
__declspec(implementation_key(7659)) void IButtons::PutLeft ( double RHS );
__declspec(implementation_key(7660)) VARIANT_BOOL IButtons::GetLocked ( );
__declspec(implementation_key(7661)) void IButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7662)) _bstr_t IButtons::GetOnAction ( );
__declspec(implementation_key(7663)) void IButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7664)) _variant_t IButtons::GetPlacement ( );
__declspec(implementation_key(7665)) void IButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7666)) VARIANT_BOOL IButtons::GetPrintObject ( );
__declspec(implementation_key(7667)) void IButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7668)) _variant_t IButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(7669)) _variant_t IButtons::SendToBack ( );
__declspec(implementation_key(7670)) double IButtons::GetTop ( );
__declspec(implementation_key(7671)) void IButtons::PutTop ( double RHS );
__declspec(implementation_key(7672)) VARIANT_BOOL IButtons::GetVisible ( );
__declspec(implementation_key(7673)) void IButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7674)) double IButtons::GetWidth ( );
__declspec(implementation_key(7675)) void IButtons::PutWidth ( double RHS );
__declspec(implementation_key(7676)) long IButtons::GetZOrder ( );
__declspec(implementation_key(7677)) ShapeRangePtr IButtons::GetShapeRange ( );
__declspec(implementation_key(7678)) VARIANT_BOOL IButtons::GetAddIndent ( );
__declspec(implementation_key(7679)) void IButtons::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(7680)) _variant_t IButtons::GetAutoScaleFont ( );
__declspec(implementation_key(7681)) void IButtons::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(7682)) VARIANT_BOOL IButtons::GetAutoSize ( );
__declspec(implementation_key(7683)) void IButtons::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(7684)) _bstr_t IButtons::GetCaption ( );
__declspec(implementation_key(7685)) void IButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7686)) CharactersPtr IButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7687)) _variant_t IButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7688)) FontPtr IButtons::GetFont ( );
__declspec(implementation_key(7689)) _bstr_t IButtons::GetFormula ( );
__declspec(implementation_key(7690)) void IButtons::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(7691)) _variant_t IButtons::GetHorizontalAlignment ( );
__declspec(implementation_key(7692)) void IButtons::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7693)) VARIANT_BOOL IButtons::GetLockedText ( );
__declspec(implementation_key(7694)) void IButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7695)) _variant_t IButtons::GetOrientation ( );
__declspec(implementation_key(7696)) void IButtons::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(7697)) _bstr_t IButtons::GetText ( );
__declspec(implementation_key(7698)) void IButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(7699)) _variant_t IButtons::GetVerticalAlignment ( );
__declspec(implementation_key(7700)) void IButtons::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(7701)) long IButtons::GetReadingOrder ( );
__declspec(implementation_key(7702)) void IButtons::PutReadingOrder ( long RHS );
__declspec(implementation_key(7703)) _variant_t IButtons::GetAccelerator ( );
__declspec(implementation_key(7704)) void IButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7705)) VARIANT_BOOL IButtons::GetCancelButton ( );
__declspec(implementation_key(7706)) void IButtons::PutCancelButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7707)) VARIANT_BOOL IButtons::GetDefaultButton ( );
__declspec(implementation_key(7708)) void IButtons::PutDefaultButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7709)) VARIANT_BOOL IButtons::GetDismissButton ( );
__declspec(implementation_key(7710)) void IButtons::PutDismissButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7711)) VARIANT_BOOL IButtons::GetHelpButton ( );
__declspec(implementation_key(7712)) void IButtons::PutHelpButton ( VARIANT_BOOL RHS );
__declspec(implementation_key(7713)) _variant_t IButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(7714)) void IButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7715)) ButtonPtr IButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7716)) long IButtons::GetCount ( );
__declspec(implementation_key(7717)) GroupObjectPtr IButtons::Group ( );
__declspec(implementation_key(7718)) IDispatchPtr IButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(7719)) IUnknownPtr IButtons::_NewEnum ( );
__declspec(implementation_key(7720)) _ApplicationPtr ICheckBox::GetApplication ( );
__declspec(implementation_key(7721)) enum XlCreator ICheckBox::GetCreator ( );
__declspec(implementation_key(7722)) IDispatchPtr ICheckBox::GetParent ( );
__declspec(implementation_key(7723)) RangePtr ICheckBox::GetBottomRightCell ( );
__declspec(implementation_key(7724)) _variant_t ICheckBox::BringToFront ( );
__declspec(implementation_key(7725)) _variant_t ICheckBox::Copy ( );
__declspec(implementation_key(7726)) _variant_t ICheckBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7727)) _variant_t ICheckBox::Cut ( );
__declspec(implementation_key(7728)) _variant_t ICheckBox::Delete ( );
__declspec(implementation_key(7729)) IDispatchPtr ICheckBox::Duplicate ( );
__declspec(implementation_key(7730)) VARIANT_BOOL ICheckBox::GetEnabled ( );
__declspec(implementation_key(7731)) void ICheckBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7732)) double ICheckBox::GetHeight ( );
__declspec(implementation_key(7733)) void ICheckBox::PutHeight ( double RHS );
__declspec(implementation_key(7734)) long ICheckBox::GetIndex ( );
__declspec(implementation_key(7735)) double ICheckBox::GetLeft ( );
__declspec(implementation_key(7736)) void ICheckBox::PutLeft ( double RHS );
__declspec(implementation_key(7737)) VARIANT_BOOL ICheckBox::GetLocked ( );
__declspec(implementation_key(7738)) void ICheckBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7739)) _bstr_t ICheckBox::GetName ( );
__declspec(implementation_key(7740)) void ICheckBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(7741)) _bstr_t ICheckBox::GetOnAction ( );
__declspec(implementation_key(7742)) void ICheckBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7743)) _variant_t ICheckBox::GetPlacement ( );
__declspec(implementation_key(7744)) void ICheckBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7745)) VARIANT_BOOL ICheckBox::GetPrintObject ( );
__declspec(implementation_key(7746)) void ICheckBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7747)) _variant_t ICheckBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(7748)) _variant_t ICheckBox::SendToBack ( );
__declspec(implementation_key(7749)) double ICheckBox::GetTop ( );
__declspec(implementation_key(7750)) void ICheckBox::PutTop ( double RHS );
__declspec(implementation_key(7751)) RangePtr ICheckBox::GetTopLeftCell ( );
__declspec(implementation_key(7752)) VARIANT_BOOL ICheckBox::GetVisible ( );
__declspec(implementation_key(7753)) void ICheckBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7754)) double ICheckBox::GetWidth ( );
__declspec(implementation_key(7755)) void ICheckBox::PutWidth ( double RHS );
__declspec(implementation_key(7756)) long ICheckBox::GetZOrder ( );
__declspec(implementation_key(7757)) ShapeRangePtr ICheckBox::GetShapeRange ( );
__declspec(implementation_key(7758)) _bstr_t ICheckBox::GetCaption ( );
__declspec(implementation_key(7759)) void ICheckBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7760)) CharactersPtr ICheckBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7761)) _variant_t ICheckBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7762)) VARIANT_BOOL ICheckBox::GetLockedText ( );
__declspec(implementation_key(7763)) void ICheckBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7764)) _bstr_t ICheckBox::GetText ( );
__declspec(implementation_key(7765)) void ICheckBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(7766)) _variant_t ICheckBox::GetAccelerator ( );
__declspec(implementation_key(7767)) void ICheckBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7768)) BorderPtr ICheckBox::GetBorder ( );
__declspec(implementation_key(7769)) long ICheckBox::Get_Default ( );
__declspec(implementation_key(7770)) void ICheckBox::Put_Default ( long RHS );
__declspec(implementation_key(7771)) VARIANT_BOOL ICheckBox::GetDisplay3DShading ( );
__declspec(implementation_key(7772)) void ICheckBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7773)) InteriorPtr ICheckBox::GetInterior ( );
__declspec(implementation_key(7774)) _bstr_t ICheckBox::GetLinkedCell ( );
__declspec(implementation_key(7775)) void ICheckBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7776)) _variant_t ICheckBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(7777)) void ICheckBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7778)) _variant_t ICheckBox::GetValue ( );
__declspec(implementation_key(7779)) void ICheckBox::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7780)) _ApplicationPtr ICheckBoxes::GetApplication ( );
__declspec(implementation_key(7781)) enum XlCreator ICheckBoxes::GetCreator ( );
__declspec(implementation_key(7782)) IDispatchPtr ICheckBoxes::GetParent ( );
__declspec(implementation_key(7783)) _variant_t ICheckBoxes::BringToFront ( );
__declspec(implementation_key(7784)) _variant_t ICheckBoxes::Copy ( );
__declspec(implementation_key(7785)) _variant_t ICheckBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7786)) _variant_t ICheckBoxes::Cut ( );
__declspec(implementation_key(7787)) _variant_t ICheckBoxes::Delete ( );
__declspec(implementation_key(7788)) IDispatchPtr ICheckBoxes::Duplicate ( );
__declspec(implementation_key(7789)) VARIANT_BOOL ICheckBoxes::GetEnabled ( );
__declspec(implementation_key(7790)) void ICheckBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7791)) double ICheckBoxes::GetHeight ( );
__declspec(implementation_key(7792)) void ICheckBoxes::PutHeight ( double RHS );
__declspec(implementation_key(7793)) double ICheckBoxes::GetLeft ( );
__declspec(implementation_key(7794)) void ICheckBoxes::PutLeft ( double RHS );
__declspec(implementation_key(7795)) VARIANT_BOOL ICheckBoxes::GetLocked ( );
__declspec(implementation_key(7796)) void ICheckBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7797)) _bstr_t ICheckBoxes::GetOnAction ( );
__declspec(implementation_key(7798)) void ICheckBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7799)) _variant_t ICheckBoxes::GetPlacement ( );
__declspec(implementation_key(7800)) void ICheckBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7801)) VARIANT_BOOL ICheckBoxes::GetPrintObject ( );
__declspec(implementation_key(7802)) void ICheckBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7803)) _variant_t ICheckBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(7804)) _variant_t ICheckBoxes::SendToBack ( );
__declspec(implementation_key(7805)) double ICheckBoxes::GetTop ( );
__declspec(implementation_key(7806)) void ICheckBoxes::PutTop ( double RHS );
__declspec(implementation_key(7807)) VARIANT_BOOL ICheckBoxes::GetVisible ( );
__declspec(implementation_key(7808)) void ICheckBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7809)) double ICheckBoxes::GetWidth ( );
__declspec(implementation_key(7810)) void ICheckBoxes::PutWidth ( double RHS );
__declspec(implementation_key(7811)) long ICheckBoxes::GetZOrder ( );
__declspec(implementation_key(7812)) ShapeRangePtr ICheckBoxes::GetShapeRange ( );
__declspec(implementation_key(7813)) _bstr_t ICheckBoxes::GetCaption ( );
__declspec(implementation_key(7814)) void ICheckBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7815)) CharactersPtr ICheckBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7816)) _variant_t ICheckBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7817)) VARIANT_BOOL ICheckBoxes::GetLockedText ( );
__declspec(implementation_key(7818)) void ICheckBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7819)) _bstr_t ICheckBoxes::GetText ( );
__declspec(implementation_key(7820)) void ICheckBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(7821)) _variant_t ICheckBoxes::GetAccelerator ( );
__declspec(implementation_key(7822)) void ICheckBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7823)) BorderPtr ICheckBoxes::GetBorder ( );
__declspec(implementation_key(7824)) long ICheckBoxes::Get_Default ( );
__declspec(implementation_key(7825)) void ICheckBoxes::Put_Default ( long RHS );
__declspec(implementation_key(7826)) VARIANT_BOOL ICheckBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(7827)) void ICheckBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7828)) InteriorPtr ICheckBoxes::GetInterior ( );
__declspec(implementation_key(7829)) _bstr_t ICheckBoxes::GetLinkedCell ( );
__declspec(implementation_key(7830)) void ICheckBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7831)) _variant_t ICheckBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(7832)) void ICheckBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7833)) _variant_t ICheckBoxes::GetValue ( );
__declspec(implementation_key(7834)) void ICheckBoxes::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7835)) CheckBoxPtr ICheckBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7836)) long ICheckBoxes::GetCount ( );
__declspec(implementation_key(7837)) GroupObjectPtr ICheckBoxes::Group ( );
__declspec(implementation_key(7838)) IDispatchPtr ICheckBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(7839)) IUnknownPtr ICheckBoxes::_NewEnum ( );
__declspec(implementation_key(7840)) _ApplicationPtr IOptionButton::GetApplication ( );
__declspec(implementation_key(7841)) enum XlCreator IOptionButton::GetCreator ( );
__declspec(implementation_key(7842)) IDispatchPtr IOptionButton::GetParent ( );
__declspec(implementation_key(7843)) RangePtr IOptionButton::GetBottomRightCell ( );
__declspec(implementation_key(7844)) _variant_t IOptionButton::BringToFront ( );
__declspec(implementation_key(7845)) _variant_t IOptionButton::Copy ( );
__declspec(implementation_key(7846)) _variant_t IOptionButton::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7847)) _variant_t IOptionButton::Cut ( );
__declspec(implementation_key(7848)) _variant_t IOptionButton::Delete ( );
__declspec(implementation_key(7849)) IDispatchPtr IOptionButton::Duplicate ( );
__declspec(implementation_key(7850)) VARIANT_BOOL IOptionButton::GetEnabled ( );
__declspec(implementation_key(7851)) void IOptionButton::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7852)) double IOptionButton::GetHeight ( );
__declspec(implementation_key(7853)) void IOptionButton::PutHeight ( double RHS );
__declspec(implementation_key(7854)) long IOptionButton::GetIndex ( );
__declspec(implementation_key(7855)) double IOptionButton::GetLeft ( );
__declspec(implementation_key(7856)) void IOptionButton::PutLeft ( double RHS );
__declspec(implementation_key(7857)) VARIANT_BOOL IOptionButton::GetLocked ( );
__declspec(implementation_key(7858)) void IOptionButton::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7859)) _bstr_t IOptionButton::GetName ( );
__declspec(implementation_key(7860)) void IOptionButton::PutName ( _bstr_t RHS );
__declspec(implementation_key(7861)) _bstr_t IOptionButton::GetOnAction ( );
__declspec(implementation_key(7862)) void IOptionButton::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7863)) _variant_t IOptionButton::GetPlacement ( );
__declspec(implementation_key(7864)) void IOptionButton::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7865)) VARIANT_BOOL IOptionButton::GetPrintObject ( );
__declspec(implementation_key(7866)) void IOptionButton::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7867)) _variant_t IOptionButton::Select ( const _variant_t & Replace );
__declspec(implementation_key(7868)) _variant_t IOptionButton::SendToBack ( );
__declspec(implementation_key(7869)) double IOptionButton::GetTop ( );
__declspec(implementation_key(7870)) void IOptionButton::PutTop ( double RHS );
__declspec(implementation_key(7871)) RangePtr IOptionButton::GetTopLeftCell ( );
__declspec(implementation_key(7872)) VARIANT_BOOL IOptionButton::GetVisible ( );
__declspec(implementation_key(7873)) void IOptionButton::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7874)) double IOptionButton::GetWidth ( );
__declspec(implementation_key(7875)) void IOptionButton::PutWidth ( double RHS );
__declspec(implementation_key(7876)) long IOptionButton::GetZOrder ( );
__declspec(implementation_key(7877)) ShapeRangePtr IOptionButton::GetShapeRange ( );
__declspec(implementation_key(7878)) _bstr_t IOptionButton::GetCaption ( );
__declspec(implementation_key(7879)) void IOptionButton::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7880)) CharactersPtr IOptionButton::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7881)) _variant_t IOptionButton::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7882)) VARIANT_BOOL IOptionButton::GetLockedText ( );
__declspec(implementation_key(7883)) void IOptionButton::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7884)) _bstr_t IOptionButton::GetText ( );
__declspec(implementation_key(7885)) void IOptionButton::PutText ( _bstr_t RHS );
__declspec(implementation_key(7886)) _variant_t IOptionButton::GetAccelerator ( );
__declspec(implementation_key(7887)) void IOptionButton::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7888)) BorderPtr IOptionButton::GetBorder ( );
__declspec(implementation_key(7889)) long IOptionButton::Get_Default ( );
__declspec(implementation_key(7890)) void IOptionButton::Put_Default ( long RHS );
__declspec(implementation_key(7891)) VARIANT_BOOL IOptionButton::GetDisplay3DShading ( );
__declspec(implementation_key(7892)) void IOptionButton::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7893)) InteriorPtr IOptionButton::GetInterior ( );
__declspec(implementation_key(7894)) _bstr_t IOptionButton::GetLinkedCell ( );
__declspec(implementation_key(7895)) void IOptionButton::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7896)) _variant_t IOptionButton::GetPhoneticAccelerator ( );
__declspec(implementation_key(7897)) void IOptionButton::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7898)) _variant_t IOptionButton::GetValue ( );
__declspec(implementation_key(7899)) void IOptionButton::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7900)) GroupBoxPtr IOptionButton::GetGroupBox ( );
__declspec(implementation_key(7901)) _ApplicationPtr IOptionButtons::GetApplication ( );
__declspec(implementation_key(7902)) enum XlCreator IOptionButtons::GetCreator ( );
__declspec(implementation_key(7903)) IDispatchPtr IOptionButtons::GetParent ( );
__declspec(implementation_key(7904)) _variant_t IOptionButtons::BringToFront ( );
__declspec(implementation_key(7905)) _variant_t IOptionButtons::Copy ( );
__declspec(implementation_key(7906)) _variant_t IOptionButtons::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7907)) _variant_t IOptionButtons::Cut ( );
__declspec(implementation_key(7908)) _variant_t IOptionButtons::Delete ( );
__declspec(implementation_key(7909)) IDispatchPtr IOptionButtons::Duplicate ( );
__declspec(implementation_key(7910)) VARIANT_BOOL IOptionButtons::GetEnabled ( );
__declspec(implementation_key(7911)) void IOptionButtons::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7912)) double IOptionButtons::GetHeight ( );
__declspec(implementation_key(7913)) void IOptionButtons::PutHeight ( double RHS );
__declspec(implementation_key(7914)) double IOptionButtons::GetLeft ( );
__declspec(implementation_key(7915)) void IOptionButtons::PutLeft ( double RHS );
__declspec(implementation_key(7916)) VARIANT_BOOL IOptionButtons::GetLocked ( );
__declspec(implementation_key(7917)) void IOptionButtons::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7918)) _bstr_t IOptionButtons::GetOnAction ( );
__declspec(implementation_key(7919)) void IOptionButtons::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7920)) _variant_t IOptionButtons::GetPlacement ( );
__declspec(implementation_key(7921)) void IOptionButtons::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7922)) VARIANT_BOOL IOptionButtons::GetPrintObject ( );
__declspec(implementation_key(7923)) void IOptionButtons::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7924)) _variant_t IOptionButtons::Select ( const _variant_t & Replace );
__declspec(implementation_key(7925)) _variant_t IOptionButtons::SendToBack ( );
__declspec(implementation_key(7926)) double IOptionButtons::GetTop ( );
__declspec(implementation_key(7927)) void IOptionButtons::PutTop ( double RHS );
__declspec(implementation_key(7928)) VARIANT_BOOL IOptionButtons::GetVisible ( );
__declspec(implementation_key(7929)) void IOptionButtons::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7930)) double IOptionButtons::GetWidth ( );
__declspec(implementation_key(7931)) void IOptionButtons::PutWidth ( double RHS );
__declspec(implementation_key(7932)) long IOptionButtons::GetZOrder ( );
__declspec(implementation_key(7933)) ShapeRangePtr IOptionButtons::GetShapeRange ( );
__declspec(implementation_key(7934)) _bstr_t IOptionButtons::GetCaption ( );
__declspec(implementation_key(7935)) void IOptionButtons::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(7936)) CharactersPtr IOptionButtons::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(7937)) _variant_t IOptionButtons::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(7938)) VARIANT_BOOL IOptionButtons::GetLockedText ( );
__declspec(implementation_key(7939)) void IOptionButtons::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(7940)) _bstr_t IOptionButtons::GetText ( );
__declspec(implementation_key(7941)) void IOptionButtons::PutText ( _bstr_t RHS );
__declspec(implementation_key(7942)) _variant_t IOptionButtons::GetAccelerator ( );
__declspec(implementation_key(7943)) void IOptionButtons::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7944)) BorderPtr IOptionButtons::GetBorder ( );
__declspec(implementation_key(7945)) long IOptionButtons::Get_Default ( );
__declspec(implementation_key(7946)) void IOptionButtons::Put_Default ( long RHS );
__declspec(implementation_key(7947)) VARIANT_BOOL IOptionButtons::GetDisplay3DShading ( );
__declspec(implementation_key(7948)) void IOptionButtons::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(7949)) InteriorPtr IOptionButtons::GetInterior ( );
__declspec(implementation_key(7950)) _bstr_t IOptionButtons::GetLinkedCell ( );
__declspec(implementation_key(7951)) void IOptionButtons::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(7952)) _variant_t IOptionButtons::GetPhoneticAccelerator ( );
__declspec(implementation_key(7953)) void IOptionButtons::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(7954)) _variant_t IOptionButtons::GetValue ( );
__declspec(implementation_key(7955)) void IOptionButtons::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(7956)) GroupBoxPtr IOptionButtons::GetGroupBox ( );
__declspec(implementation_key(7957)) OptionButtonPtr IOptionButtons::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(7958)) long IOptionButtons::GetCount ( );
__declspec(implementation_key(7959)) GroupObjectPtr IOptionButtons::Group ( );
__declspec(implementation_key(7960)) IDispatchPtr IOptionButtons::Item ( const _variant_t & Index );
__declspec(implementation_key(7961)) IUnknownPtr IOptionButtons::_NewEnum ( );
__declspec(implementation_key(7962)) _ApplicationPtr IEditBox::GetApplication ( );
__declspec(implementation_key(7963)) enum XlCreator IEditBox::GetCreator ( );
__declspec(implementation_key(7964)) IDispatchPtr IEditBox::GetParent ( );
__declspec(implementation_key(7965)) RangePtr IEditBox::GetBottomRightCell ( );
__declspec(implementation_key(7966)) _variant_t IEditBox::BringToFront ( );
__declspec(implementation_key(7967)) _variant_t IEditBox::Copy ( );
__declspec(implementation_key(7968)) _variant_t IEditBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(7969)) _variant_t IEditBox::Cut ( );
__declspec(implementation_key(7970)) _variant_t IEditBox::Delete ( );
__declspec(implementation_key(7971)) IDispatchPtr IEditBox::Duplicate ( );
__declspec(implementation_key(7972)) VARIANT_BOOL IEditBox::GetEnabled ( );
__declspec(implementation_key(7973)) void IEditBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(7974)) double IEditBox::GetHeight ( );
__declspec(implementation_key(7975)) void IEditBox::PutHeight ( double RHS );
__declspec(implementation_key(7976)) long IEditBox::GetIndex ( );
__declspec(implementation_key(7977)) double IEditBox::GetLeft ( );
__declspec(implementation_key(7978)) void IEditBox::PutLeft ( double RHS );
__declspec(implementation_key(7979)) VARIANT_BOOL IEditBox::GetLocked ( );
__declspec(implementation_key(7980)) void IEditBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(7981)) _bstr_t IEditBox::GetName ( );
__declspec(implementation_key(7982)) void IEditBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(7983)) _bstr_t IEditBox::GetOnAction ( );
__declspec(implementation_key(7984)) void IEditBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(7985)) _variant_t IEditBox::GetPlacement ( );
__declspec(implementation_key(7986)) void IEditBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(7987)) VARIANT_BOOL IEditBox::GetPrintObject ( );
__declspec(implementation_key(7988)) void IEditBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(7989)) _variant_t IEditBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(7990)) _variant_t IEditBox::SendToBack ( );
__declspec(implementation_key(7991)) double IEditBox::GetTop ( );
__declspec(implementation_key(7992)) void IEditBox::PutTop ( double RHS );
__declspec(implementation_key(7993)) RangePtr IEditBox::GetTopLeftCell ( );
__declspec(implementation_key(7994)) VARIANT_BOOL IEditBox::GetVisible ( );
__declspec(implementation_key(7995)) void IEditBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(7996)) double IEditBox::GetWidth ( );
__declspec(implementation_key(7997)) void IEditBox::PutWidth ( double RHS );
__declspec(implementation_key(7998)) long IEditBox::GetZOrder ( );
__declspec(implementation_key(7999)) ShapeRangePtr IEditBox::GetShapeRange ( );
__declspec(implementation_key(8000)) _bstr_t IEditBox::GetCaption ( );
__declspec(implementation_key(8001)) void IEditBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8002)) CharactersPtr IEditBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8003)) _variant_t IEditBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8004)) VARIANT_BOOL IEditBox::GetLockedText ( );
__declspec(implementation_key(8005)) void IEditBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8006)) _bstr_t IEditBox::GetText ( );
__declspec(implementation_key(8007)) void IEditBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(8008)) VARIANT_BOOL IEditBox::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(8009)) void IEditBox::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(8010)) long IEditBox::GetInputType ( );
__declspec(implementation_key(8011)) void IEditBox::PutInputType ( long RHS );
__declspec(implementation_key(8012)) _bstr_t IEditBox::GetLinkedObject ( );
__declspec(implementation_key(8013)) VARIANT_BOOL IEditBox::GetMultiLine ( );
__declspec(implementation_key(8014)) void IEditBox::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(8015)) VARIANT_BOOL IEditBox::GetPasswordEdit ( );
__declspec(implementation_key(8016)) void IEditBox::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(8017)) _ApplicationPtr IEditBoxes::GetApplication ( );
__declspec(implementation_key(8018)) enum XlCreator IEditBoxes::GetCreator ( );
__declspec(implementation_key(8019)) IDispatchPtr IEditBoxes::GetParent ( );
__declspec(implementation_key(8020)) _variant_t IEditBoxes::BringToFront ( );
__declspec(implementation_key(8021)) _variant_t IEditBoxes::Copy ( );
__declspec(implementation_key(8022)) _variant_t IEditBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8023)) _variant_t IEditBoxes::Cut ( );
__declspec(implementation_key(8024)) _variant_t IEditBoxes::Delete ( );
__declspec(implementation_key(8025)) IDispatchPtr IEditBoxes::Duplicate ( );
__declspec(implementation_key(8026)) VARIANT_BOOL IEditBoxes::GetEnabled ( );
__declspec(implementation_key(8027)) void IEditBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8028)) double IEditBoxes::GetHeight ( );
__declspec(implementation_key(8029)) void IEditBoxes::PutHeight ( double RHS );
__declspec(implementation_key(8030)) double IEditBoxes::GetLeft ( );
__declspec(implementation_key(8031)) void IEditBoxes::PutLeft ( double RHS );
__declspec(implementation_key(8032)) VARIANT_BOOL IEditBoxes::GetLocked ( );
__declspec(implementation_key(8033)) void IEditBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8034)) _bstr_t IEditBoxes::GetOnAction ( );
__declspec(implementation_key(8035)) void IEditBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8036)) _variant_t IEditBoxes::GetPlacement ( );
__declspec(implementation_key(8037)) void IEditBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8038)) VARIANT_BOOL IEditBoxes::GetPrintObject ( );
__declspec(implementation_key(8039)) void IEditBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8040)) _variant_t IEditBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(8041)) _variant_t IEditBoxes::SendToBack ( );
__declspec(implementation_key(8042)) double IEditBoxes::GetTop ( );
__declspec(implementation_key(8043)) void IEditBoxes::PutTop ( double RHS );
__declspec(implementation_key(8044)) VARIANT_BOOL IEditBoxes::GetVisible ( );
__declspec(implementation_key(8045)) void IEditBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8046)) double IEditBoxes::GetWidth ( );
__declspec(implementation_key(8047)) void IEditBoxes::PutWidth ( double RHS );
__declspec(implementation_key(8048)) long IEditBoxes::GetZOrder ( );
__declspec(implementation_key(8049)) ShapeRangePtr IEditBoxes::GetShapeRange ( );
__declspec(implementation_key(8050)) _bstr_t IEditBoxes::GetCaption ( );
__declspec(implementation_key(8051)) void IEditBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8052)) CharactersPtr IEditBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8053)) _variant_t IEditBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8054)) VARIANT_BOOL IEditBoxes::GetLockedText ( );
__declspec(implementation_key(8055)) void IEditBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8056)) _bstr_t IEditBoxes::GetText ( );
__declspec(implementation_key(8057)) void IEditBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(8058)) VARIANT_BOOL IEditBoxes::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(8059)) void IEditBoxes::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(8060)) long IEditBoxes::GetInputType ( );
__declspec(implementation_key(8061)) void IEditBoxes::PutInputType ( long RHS );
__declspec(implementation_key(8062)) VARIANT_BOOL IEditBoxes::GetMultiLine ( );
__declspec(implementation_key(8063)) void IEditBoxes::PutMultiLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(8064)) VARIANT_BOOL IEditBoxes::GetPasswordEdit ( );
__declspec(implementation_key(8065)) void IEditBoxes::PutPasswordEdit ( VARIANT_BOOL RHS );
__declspec(implementation_key(8066)) EditBoxPtr IEditBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8067)) long IEditBoxes::GetCount ( );
__declspec(implementation_key(8068)) GroupObjectPtr IEditBoxes::Group ( );
__declspec(implementation_key(8069)) _variant_t IEditBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(8070)) IUnknownPtr IEditBoxes::_NewEnum ( );
__declspec(implementation_key(8071)) _ApplicationPtr IScrollBar::GetApplication ( );
__declspec(implementation_key(8072)) enum XlCreator IScrollBar::GetCreator ( );
__declspec(implementation_key(8073)) IDispatchPtr IScrollBar::GetParent ( );
__declspec(implementation_key(8074)) RangePtr IScrollBar::GetBottomRightCell ( );
__declspec(implementation_key(8075)) _variant_t IScrollBar::BringToFront ( );
__declspec(implementation_key(8076)) _variant_t IScrollBar::Copy ( );
__declspec(implementation_key(8077)) _variant_t IScrollBar::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8078)) _variant_t IScrollBar::Cut ( );
__declspec(implementation_key(8079)) _variant_t IScrollBar::Delete ( );
__declspec(implementation_key(8080)) IDispatchPtr IScrollBar::Duplicate ( );
__declspec(implementation_key(8081)) VARIANT_BOOL IScrollBar::GetEnabled ( );
__declspec(implementation_key(8082)) void IScrollBar::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8083)) double IScrollBar::GetHeight ( );
__declspec(implementation_key(8084)) void IScrollBar::PutHeight ( double RHS );
__declspec(implementation_key(8085)) long IScrollBar::GetIndex ( );
__declspec(implementation_key(8086)) double IScrollBar::GetLeft ( );
__declspec(implementation_key(8087)) void IScrollBar::PutLeft ( double RHS );
__declspec(implementation_key(8088)) VARIANT_BOOL IScrollBar::GetLocked ( );
__declspec(implementation_key(8089)) void IScrollBar::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8090)) _bstr_t IScrollBar::GetName ( );
__declspec(implementation_key(8091)) void IScrollBar::PutName ( _bstr_t RHS );
__declspec(implementation_key(8092)) _bstr_t IScrollBar::GetOnAction ( );
__declspec(implementation_key(8093)) void IScrollBar::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8094)) _variant_t IScrollBar::GetPlacement ( );
__declspec(implementation_key(8095)) void IScrollBar::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8096)) VARIANT_BOOL IScrollBar::GetPrintObject ( );
__declspec(implementation_key(8097)) void IScrollBar::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8098)) _variant_t IScrollBar::Select ( const _variant_t & Replace );
__declspec(implementation_key(8099)) _variant_t IScrollBar::SendToBack ( );
__declspec(implementation_key(8100)) double IScrollBar::GetTop ( );
__declspec(implementation_key(8101)) void IScrollBar::PutTop ( double RHS );
__declspec(implementation_key(8102)) RangePtr IScrollBar::GetTopLeftCell ( );
__declspec(implementation_key(8103)) VARIANT_BOOL IScrollBar::GetVisible ( );
__declspec(implementation_key(8104)) void IScrollBar::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8105)) double IScrollBar::GetWidth ( );
__declspec(implementation_key(8106)) void IScrollBar::PutWidth ( double RHS );
__declspec(implementation_key(8107)) long IScrollBar::GetZOrder ( );
__declspec(implementation_key(8108)) ShapeRangePtr IScrollBar::GetShapeRange ( );
__declspec(implementation_key(8109)) long IScrollBar::Get_Default ( );
__declspec(implementation_key(8110)) void IScrollBar::Put_Default ( long RHS );
__declspec(implementation_key(8111)) VARIANT_BOOL IScrollBar::GetDisplay3DShading ( );
__declspec(implementation_key(8112)) void IScrollBar::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8113)) _bstr_t IScrollBar::GetLinkedCell ( );
__declspec(implementation_key(8114)) void IScrollBar::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8115)) long IScrollBar::GetMax ( );
__declspec(implementation_key(8116)) void IScrollBar::PutMax ( long RHS );
__declspec(implementation_key(8117)) long IScrollBar::GetMin ( );
__declspec(implementation_key(8118)) void IScrollBar::PutMin ( long RHS );
__declspec(implementation_key(8119)) long IScrollBar::GetSmallChange ( );
__declspec(implementation_key(8120)) void IScrollBar::PutSmallChange ( long RHS );
__declspec(implementation_key(8121)) long IScrollBar::GetValue ( );
__declspec(implementation_key(8122)) void IScrollBar::PutValue ( long RHS );
__declspec(implementation_key(8123)) long IScrollBar::GetLargeChange ( );
__declspec(implementation_key(8124)) void IScrollBar::PutLargeChange ( long RHS );
__declspec(implementation_key(8125)) _ApplicationPtr IScrollBars::GetApplication ( );
__declspec(implementation_key(8126)) enum XlCreator IScrollBars::GetCreator ( );
__declspec(implementation_key(8127)) IDispatchPtr IScrollBars::GetParent ( );
__declspec(implementation_key(8128)) _variant_t IScrollBars::BringToFront ( );
__declspec(implementation_key(8129)) _variant_t IScrollBars::Copy ( );
__declspec(implementation_key(8130)) _variant_t IScrollBars::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8131)) _variant_t IScrollBars::Cut ( );
__declspec(implementation_key(8132)) _variant_t IScrollBars::Delete ( );
__declspec(implementation_key(8133)) IDispatchPtr IScrollBars::Duplicate ( );
__declspec(implementation_key(8134)) VARIANT_BOOL IScrollBars::GetEnabled ( );
__declspec(implementation_key(8135)) void IScrollBars::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8136)) double IScrollBars::GetHeight ( );
__declspec(implementation_key(8137)) void IScrollBars::PutHeight ( double RHS );
__declspec(implementation_key(8138)) double IScrollBars::GetLeft ( );
__declspec(implementation_key(8139)) void IScrollBars::PutLeft ( double RHS );
__declspec(implementation_key(8140)) VARIANT_BOOL IScrollBars::GetLocked ( );
__declspec(implementation_key(8141)) void IScrollBars::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8142)) _bstr_t IScrollBars::GetOnAction ( );
__declspec(implementation_key(8143)) void IScrollBars::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8144)) _variant_t IScrollBars::GetPlacement ( );
__declspec(implementation_key(8145)) void IScrollBars::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8146)) VARIANT_BOOL IScrollBars::GetPrintObject ( );
__declspec(implementation_key(8147)) void IScrollBars::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8148)) _variant_t IScrollBars::Select ( const _variant_t & Replace );
__declspec(implementation_key(8149)) _variant_t IScrollBars::SendToBack ( );
__declspec(implementation_key(8150)) double IScrollBars::GetTop ( );
__declspec(implementation_key(8151)) void IScrollBars::PutTop ( double RHS );
__declspec(implementation_key(8152)) VARIANT_BOOL IScrollBars::GetVisible ( );
__declspec(implementation_key(8153)) void IScrollBars::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8154)) double IScrollBars::GetWidth ( );
__declspec(implementation_key(8155)) void IScrollBars::PutWidth ( double RHS );
__declspec(implementation_key(8156)) long IScrollBars::GetZOrder ( );
__declspec(implementation_key(8157)) ShapeRangePtr IScrollBars::GetShapeRange ( );
__declspec(implementation_key(8158)) long IScrollBars::Get_Default ( );
__declspec(implementation_key(8159)) void IScrollBars::Put_Default ( long RHS );
__declspec(implementation_key(8160)) VARIANT_BOOL IScrollBars::GetDisplay3DShading ( );
__declspec(implementation_key(8161)) void IScrollBars::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8162)) _bstr_t IScrollBars::GetLinkedCell ( );
__declspec(implementation_key(8163)) void IScrollBars::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8164)) long IScrollBars::GetMax ( );
__declspec(implementation_key(8165)) void IScrollBars::PutMax ( long RHS );
__declspec(implementation_key(8166)) long IScrollBars::GetMin ( );
__declspec(implementation_key(8167)) void IScrollBars::PutMin ( long RHS );
__declspec(implementation_key(8168)) long IScrollBars::GetSmallChange ( );
__declspec(implementation_key(8169)) void IScrollBars::PutSmallChange ( long RHS );
__declspec(implementation_key(8170)) long IScrollBars::GetValue ( );
__declspec(implementation_key(8171)) void IScrollBars::PutValue ( long RHS );
__declspec(implementation_key(8172)) long IScrollBars::GetLargeChange ( );
__declspec(implementation_key(8173)) void IScrollBars::PutLargeChange ( long RHS );
__declspec(implementation_key(8174)) ScrollBarPtr IScrollBars::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8175)) long IScrollBars::GetCount ( );
__declspec(implementation_key(8176)) GroupObjectPtr IScrollBars::Group ( );
__declspec(implementation_key(8177)) IDispatchPtr IScrollBars::Item ( const _variant_t & Index );
__declspec(implementation_key(8178)) IUnknownPtr IScrollBars::_NewEnum ( );
__declspec(implementation_key(8179)) _ApplicationPtr IListBox::GetApplication ( );
__declspec(implementation_key(8180)) enum XlCreator IListBox::GetCreator ( );
__declspec(implementation_key(8181)) IDispatchPtr IListBox::GetParent ( );
__declspec(implementation_key(8182)) RangePtr IListBox::GetBottomRightCell ( );
__declspec(implementation_key(8183)) _variant_t IListBox::BringToFront ( );
__declspec(implementation_key(8184)) _variant_t IListBox::Copy ( );
__declspec(implementation_key(8185)) _variant_t IListBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8186)) _variant_t IListBox::Cut ( );
__declspec(implementation_key(8187)) _variant_t IListBox::Delete ( );
__declspec(implementation_key(8188)) IDispatchPtr IListBox::Duplicate ( );
__declspec(implementation_key(8189)) VARIANT_BOOL IListBox::GetEnabled ( );
__declspec(implementation_key(8190)) void IListBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8191)) double IListBox::GetHeight ( );
__declspec(implementation_key(8192)) void IListBox::PutHeight ( double RHS );
__declspec(implementation_key(8193)) long IListBox::GetIndex ( );
__declspec(implementation_key(8194)) double IListBox::GetLeft ( );
__declspec(implementation_key(8195)) void IListBox::PutLeft ( double RHS );
__declspec(implementation_key(8196)) VARIANT_BOOL IListBox::GetLocked ( );
__declspec(implementation_key(8197)) void IListBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8198)) _bstr_t IListBox::GetName ( );
__declspec(implementation_key(8199)) void IListBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(8200)) _bstr_t IListBox::GetOnAction ( );
__declspec(implementation_key(8201)) void IListBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8202)) _variant_t IListBox::GetPlacement ( );
__declspec(implementation_key(8203)) void IListBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8204)) VARIANT_BOOL IListBox::GetPrintObject ( );
__declspec(implementation_key(8205)) void IListBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8206)) _variant_t IListBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(8207)) _variant_t IListBox::SendToBack ( );
__declspec(implementation_key(8208)) double IListBox::GetTop ( );
__declspec(implementation_key(8209)) void IListBox::PutTop ( double RHS );
__declspec(implementation_key(8210)) RangePtr IListBox::GetTopLeftCell ( );
__declspec(implementation_key(8211)) VARIANT_BOOL IListBox::GetVisible ( );
__declspec(implementation_key(8212)) void IListBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8213)) double IListBox::GetWidth ( );
__declspec(implementation_key(8214)) void IListBox::PutWidth ( double RHS );
__declspec(implementation_key(8215)) long IListBox::GetZOrder ( );
__declspec(implementation_key(8216)) ShapeRangePtr IListBox::GetShapeRange ( );
__declspec(implementation_key(8217)) _variant_t IListBox::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(8218)) VARIANT_BOOL IListBox::GetDisplay3DShading ( );
__declspec(implementation_key(8219)) void IListBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8220)) long IListBox::Get_Default ( );
__declspec(implementation_key(8221)) void IListBox::Put_Default ( long RHS );
__declspec(implementation_key(8222)) _bstr_t IListBox::GetLinkedCell ( );
__declspec(implementation_key(8223)) void IListBox::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8224)) _variant_t IListBox::GetLinkedObject ( );
__declspec(implementation_key(8225)) _variant_t IListBox::GetList ( const _variant_t & Index );
__declspec(implementation_key(8226)) void IListBox::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8227)) long IListBox::GetListCount ( );
__declspec(implementation_key(8228)) _bstr_t IListBox::GetListFillRange ( );
__declspec(implementation_key(8229)) void IListBox::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(8230)) long IListBox::GetListIndex ( );
__declspec(implementation_key(8231)) void IListBox::PutListIndex ( long RHS );
__declspec(implementation_key(8232)) long IListBox::GetMultiSelect ( );
__declspec(implementation_key(8233)) void IListBox::PutMultiSelect ( long RHS );
__declspec(implementation_key(8234)) _variant_t IListBox::RemoveAllItems ( );
__declspec(implementation_key(8235)) _variant_t IListBox::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(8236)) _variant_t IListBox::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(8237)) void IListBox::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8238)) long IListBox::GetValue ( );
__declspec(implementation_key(8239)) void IListBox::PutValue ( long RHS );
__declspec(implementation_key(8240)) _ApplicationPtr IListBoxes::GetApplication ( );
__declspec(implementation_key(8241)) enum XlCreator IListBoxes::GetCreator ( );
__declspec(implementation_key(8242)) IDispatchPtr IListBoxes::GetParent ( );
__declspec(implementation_key(8243)) _variant_t IListBoxes::BringToFront ( );
__declspec(implementation_key(8244)) _variant_t IListBoxes::Copy ( );
__declspec(implementation_key(8245)) _variant_t IListBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8246)) _variant_t IListBoxes::Cut ( );
__declspec(implementation_key(8247)) _variant_t IListBoxes::Delete ( );
__declspec(implementation_key(8248)) IDispatchPtr IListBoxes::Duplicate ( );
__declspec(implementation_key(8249)) VARIANT_BOOL IListBoxes::GetEnabled ( );
__declspec(implementation_key(8250)) void IListBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8251)) double IListBoxes::GetHeight ( );
__declspec(implementation_key(8252)) void IListBoxes::PutHeight ( double RHS );
__declspec(implementation_key(8253)) double IListBoxes::GetLeft ( );
__declspec(implementation_key(8254)) void IListBoxes::PutLeft ( double RHS );
__declspec(implementation_key(8255)) VARIANT_BOOL IListBoxes::GetLocked ( );
__declspec(implementation_key(8256)) void IListBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8257)) _bstr_t IListBoxes::GetOnAction ( );
__declspec(implementation_key(8258)) void IListBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8259)) _variant_t IListBoxes::GetPlacement ( );
__declspec(implementation_key(8260)) void IListBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8261)) VARIANT_BOOL IListBoxes::GetPrintObject ( );
__declspec(implementation_key(8262)) void IListBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8263)) _variant_t IListBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(8264)) _variant_t IListBoxes::SendToBack ( );
__declspec(implementation_key(8265)) double IListBoxes::GetTop ( );
__declspec(implementation_key(8266)) void IListBoxes::PutTop ( double RHS );
__declspec(implementation_key(8267)) VARIANT_BOOL IListBoxes::GetVisible ( );
__declspec(implementation_key(8268)) void IListBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8269)) double IListBoxes::GetWidth ( );
__declspec(implementation_key(8270)) void IListBoxes::PutWidth ( double RHS );
__declspec(implementation_key(8271)) long IListBoxes::GetZOrder ( );
__declspec(implementation_key(8272)) ShapeRangePtr IListBoxes::GetShapeRange ( );
__declspec(implementation_key(8273)) _variant_t IListBoxes::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(8274)) VARIANT_BOOL IListBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(8275)) void IListBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8276)) long IListBoxes::Get_Default ( );
__declspec(implementation_key(8277)) void IListBoxes::Put_Default ( long RHS );
__declspec(implementation_key(8278)) _bstr_t IListBoxes::GetLinkedCell ( );
__declspec(implementation_key(8279)) void IListBoxes::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8280)) _variant_t IListBoxes::GetList ( const _variant_t & Index );
__declspec(implementation_key(8281)) void IListBoxes::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8282)) _bstr_t IListBoxes::GetListFillRange ( );
__declspec(implementation_key(8283)) void IListBoxes::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(8284)) long IListBoxes::GetListIndex ( );
__declspec(implementation_key(8285)) void IListBoxes::PutListIndex ( long RHS );
__declspec(implementation_key(8286)) long IListBoxes::GetMultiSelect ( );
__declspec(implementation_key(8287)) void IListBoxes::PutMultiSelect ( long RHS );
__declspec(implementation_key(8288)) _variant_t IListBoxes::RemoveAllItems ( );
__declspec(implementation_key(8289)) _variant_t IListBoxes::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(8290)) _variant_t IListBoxes::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(8291)) void IListBoxes::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8292)) long IListBoxes::GetValue ( );
__declspec(implementation_key(8293)) void IListBoxes::PutValue ( long RHS );
__declspec(implementation_key(8294)) ListBoxPtr IListBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8295)) long IListBoxes::GetCount ( );
__declspec(implementation_key(8296)) GroupObjectPtr IListBoxes::Group ( );
__declspec(implementation_key(8297)) IDispatchPtr IListBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(8298)) IUnknownPtr IListBoxes::_NewEnum ( );
__declspec(implementation_key(8299)) _ApplicationPtr IGroupBox::GetApplication ( );
__declspec(implementation_key(8300)) enum XlCreator IGroupBox::GetCreator ( );
__declspec(implementation_key(8301)) IDispatchPtr IGroupBox::GetParent ( );
__declspec(implementation_key(8302)) RangePtr IGroupBox::GetBottomRightCell ( );
__declspec(implementation_key(8303)) _variant_t IGroupBox::BringToFront ( );
__declspec(implementation_key(8304)) _variant_t IGroupBox::Copy ( );
__declspec(implementation_key(8305)) _variant_t IGroupBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8306)) _variant_t IGroupBox::Cut ( );
__declspec(implementation_key(8307)) _variant_t IGroupBox::Delete ( );
__declspec(implementation_key(8308)) IDispatchPtr IGroupBox::Duplicate ( );
__declspec(implementation_key(8309)) VARIANT_BOOL IGroupBox::GetEnabled ( );
__declspec(implementation_key(8310)) void IGroupBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8311)) double IGroupBox::GetHeight ( );
__declspec(implementation_key(8312)) void IGroupBox::PutHeight ( double RHS );
__declspec(implementation_key(8313)) long IGroupBox::GetIndex ( );
__declspec(implementation_key(8314)) double IGroupBox::GetLeft ( );
__declspec(implementation_key(8315)) void IGroupBox::PutLeft ( double RHS );
__declspec(implementation_key(8316)) VARIANT_BOOL IGroupBox::GetLocked ( );
__declspec(implementation_key(8317)) void IGroupBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8318)) _bstr_t IGroupBox::GetName ( );
__declspec(implementation_key(8319)) void IGroupBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(8320)) _bstr_t IGroupBox::GetOnAction ( );
__declspec(implementation_key(8321)) void IGroupBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8322)) _variant_t IGroupBox::GetPlacement ( );
__declspec(implementation_key(8323)) void IGroupBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8324)) VARIANT_BOOL IGroupBox::GetPrintObject ( );
__declspec(implementation_key(8325)) void IGroupBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8326)) _variant_t IGroupBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(8327)) _variant_t IGroupBox::SendToBack ( );
__declspec(implementation_key(8328)) double IGroupBox::GetTop ( );
__declspec(implementation_key(8329)) void IGroupBox::PutTop ( double RHS );
__declspec(implementation_key(8330)) RangePtr IGroupBox::GetTopLeftCell ( );
__declspec(implementation_key(8331)) VARIANT_BOOL IGroupBox::GetVisible ( );
__declspec(implementation_key(8332)) void IGroupBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8333)) double IGroupBox::GetWidth ( );
__declspec(implementation_key(8334)) void IGroupBox::PutWidth ( double RHS );
__declspec(implementation_key(8335)) long IGroupBox::GetZOrder ( );
__declspec(implementation_key(8336)) ShapeRangePtr IGroupBox::GetShapeRange ( );
__declspec(implementation_key(8337)) _bstr_t IGroupBox::GetCaption ( );
__declspec(implementation_key(8338)) void IGroupBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8339)) CharactersPtr IGroupBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8340)) _variant_t IGroupBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8341)) VARIANT_BOOL IGroupBox::GetLockedText ( );
__declspec(implementation_key(8342)) void IGroupBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8343)) _bstr_t IGroupBox::GetText ( );
__declspec(implementation_key(8344)) void IGroupBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(8345)) _variant_t IGroupBox::GetAccelerator ( );
__declspec(implementation_key(8346)) void IGroupBox::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8347)) VARIANT_BOOL IGroupBox::GetDisplay3DShading ( );
__declspec(implementation_key(8348)) void IGroupBox::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8349)) _variant_t IGroupBox::GetPhoneticAccelerator ( );
__declspec(implementation_key(8350)) void IGroupBox::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8351)) _ApplicationPtr IGroupBoxes::GetApplication ( );
__declspec(implementation_key(8352)) enum XlCreator IGroupBoxes::GetCreator ( );
__declspec(implementation_key(8353)) IDispatchPtr IGroupBoxes::GetParent ( );
__declspec(implementation_key(8354)) _variant_t IGroupBoxes::BringToFront ( );
__declspec(implementation_key(8355)) _variant_t IGroupBoxes::Copy ( );
__declspec(implementation_key(8356)) _variant_t IGroupBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8357)) _variant_t IGroupBoxes::Cut ( );
__declspec(implementation_key(8358)) _variant_t IGroupBoxes::Delete ( );
__declspec(implementation_key(8359)) IDispatchPtr IGroupBoxes::Duplicate ( );
__declspec(implementation_key(8360)) VARIANT_BOOL IGroupBoxes::GetEnabled ( );
__declspec(implementation_key(8361)) void IGroupBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8362)) double IGroupBoxes::GetHeight ( );
__declspec(implementation_key(8363)) void IGroupBoxes::PutHeight ( double RHS );
__declspec(implementation_key(8364)) double IGroupBoxes::GetLeft ( );
__declspec(implementation_key(8365)) void IGroupBoxes::PutLeft ( double RHS );
__declspec(implementation_key(8366)) VARIANT_BOOL IGroupBoxes::GetLocked ( );
__declspec(implementation_key(8367)) void IGroupBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8368)) _bstr_t IGroupBoxes::GetOnAction ( );
__declspec(implementation_key(8369)) void IGroupBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8370)) _variant_t IGroupBoxes::GetPlacement ( );
__declspec(implementation_key(8371)) void IGroupBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8372)) VARIANT_BOOL IGroupBoxes::GetPrintObject ( );
__declspec(implementation_key(8373)) void IGroupBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8374)) _variant_t IGroupBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(8375)) _variant_t IGroupBoxes::SendToBack ( );
__declspec(implementation_key(8376)) double IGroupBoxes::GetTop ( );
__declspec(implementation_key(8377)) void IGroupBoxes::PutTop ( double RHS );
__declspec(implementation_key(8378)) VARIANT_BOOL IGroupBoxes::GetVisible ( );
__declspec(implementation_key(8379)) void IGroupBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8380)) double IGroupBoxes::GetWidth ( );
__declspec(implementation_key(8381)) void IGroupBoxes::PutWidth ( double RHS );
__declspec(implementation_key(8382)) long IGroupBoxes::GetZOrder ( );
__declspec(implementation_key(8383)) ShapeRangePtr IGroupBoxes::GetShapeRange ( );
__declspec(implementation_key(8384)) _bstr_t IGroupBoxes::GetCaption ( );
__declspec(implementation_key(8385)) void IGroupBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8386)) CharactersPtr IGroupBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8387)) _variant_t IGroupBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8388)) VARIANT_BOOL IGroupBoxes::GetLockedText ( );
__declspec(implementation_key(8389)) void IGroupBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8390)) _bstr_t IGroupBoxes::GetText ( );
__declspec(implementation_key(8391)) void IGroupBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(8392)) _variant_t IGroupBoxes::GetAccelerator ( );
__declspec(implementation_key(8393)) void IGroupBoxes::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8394)) VARIANT_BOOL IGroupBoxes::GetDisplay3DShading ( );
__declspec(implementation_key(8395)) void IGroupBoxes::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8396)) _variant_t IGroupBoxes::GetPhoneticAccelerator ( );
__declspec(implementation_key(8397)) void IGroupBoxes::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8398)) GroupBoxPtr IGroupBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8399)) long IGroupBoxes::GetCount ( );
__declspec(implementation_key(8400)) GroupObjectPtr IGroupBoxes::Group ( );
__declspec(implementation_key(8401)) IDispatchPtr IGroupBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(8402)) IUnknownPtr IGroupBoxes::_NewEnum ( );
__declspec(implementation_key(8403)) _ApplicationPtr IDropDown::GetApplication ( );
__declspec(implementation_key(8404)) enum XlCreator IDropDown::GetCreator ( );
__declspec(implementation_key(8405)) IDispatchPtr IDropDown::GetParent ( );
__declspec(implementation_key(8406)) RangePtr IDropDown::GetBottomRightCell ( );
__declspec(implementation_key(8407)) _variant_t IDropDown::BringToFront ( );
__declspec(implementation_key(8408)) _variant_t IDropDown::Copy ( );
__declspec(implementation_key(8409)) _variant_t IDropDown::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8410)) _variant_t IDropDown::Cut ( );
__declspec(implementation_key(8411)) _variant_t IDropDown::Delete ( );
__declspec(implementation_key(8412)) IDispatchPtr IDropDown::Duplicate ( );
__declspec(implementation_key(8413)) VARIANT_BOOL IDropDown::GetEnabled ( );
__declspec(implementation_key(8414)) void IDropDown::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8415)) double IDropDown::GetHeight ( );
__declspec(implementation_key(8416)) void IDropDown::PutHeight ( double RHS );
__declspec(implementation_key(8417)) long IDropDown::GetIndex ( );
__declspec(implementation_key(8418)) double IDropDown::GetLeft ( );
__declspec(implementation_key(8419)) void IDropDown::PutLeft ( double RHS );
__declspec(implementation_key(8420)) VARIANT_BOOL IDropDown::GetLocked ( );
__declspec(implementation_key(8421)) void IDropDown::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8422)) _bstr_t IDropDown::GetName ( );
__declspec(implementation_key(8423)) void IDropDown::PutName ( _bstr_t RHS );
__declspec(implementation_key(8424)) _bstr_t IDropDown::GetOnAction ( );
__declspec(implementation_key(8425)) void IDropDown::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8426)) _variant_t IDropDown::GetPlacement ( );
__declspec(implementation_key(8427)) void IDropDown::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8428)) VARIANT_BOOL IDropDown::GetPrintObject ( );
__declspec(implementation_key(8429)) void IDropDown::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8430)) _variant_t IDropDown::Select ( const _variant_t & Replace );
__declspec(implementation_key(8431)) _variant_t IDropDown::SendToBack ( );
__declspec(implementation_key(8432)) double IDropDown::GetTop ( );
__declspec(implementation_key(8433)) void IDropDown::PutTop ( double RHS );
__declspec(implementation_key(8434)) RangePtr IDropDown::GetTopLeftCell ( );
__declspec(implementation_key(8435)) VARIANT_BOOL IDropDown::GetVisible ( );
__declspec(implementation_key(8436)) void IDropDown::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8437)) double IDropDown::GetWidth ( );
__declspec(implementation_key(8438)) void IDropDown::PutWidth ( double RHS );
__declspec(implementation_key(8439)) long IDropDown::GetZOrder ( );
__declspec(implementation_key(8440)) ShapeRangePtr IDropDown::GetShapeRange ( );
__declspec(implementation_key(8441)) _variant_t IDropDown::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(8442)) VARIANT_BOOL IDropDown::GetDisplay3DShading ( );
__declspec(implementation_key(8443)) void IDropDown::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8444)) long IDropDown::Get_Default ( );
__declspec(implementation_key(8445)) void IDropDown::Put_Default ( long RHS );
__declspec(implementation_key(8446)) _bstr_t IDropDown::GetLinkedCell ( );
__declspec(implementation_key(8447)) void IDropDown::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8448)) _variant_t IDropDown::GetLinkedObject ( );
__declspec(implementation_key(8449)) _variant_t IDropDown::GetList ( const _variant_t & Index );
__declspec(implementation_key(8450)) void IDropDown::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8451)) long IDropDown::GetListCount ( );
__declspec(implementation_key(8452)) _bstr_t IDropDown::GetListFillRange ( );
__declspec(implementation_key(8453)) void IDropDown::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(8454)) long IDropDown::GetListIndex ( );
__declspec(implementation_key(8455)) void IDropDown::PutListIndex ( long RHS );
__declspec(implementation_key(8456)) _variant_t IDropDown::RemoveAllItems ( );
__declspec(implementation_key(8457)) _variant_t IDropDown::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(8458)) _variant_t IDropDown::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(8459)) void IDropDown::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8460)) long IDropDown::GetValue ( );
__declspec(implementation_key(8461)) void IDropDown::PutValue ( long RHS );
__declspec(implementation_key(8462)) _bstr_t IDropDown::GetCaption ( );
__declspec(implementation_key(8463)) void IDropDown::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8464)) CharactersPtr IDropDown::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8465)) long IDropDown::GetDropDownLines ( );
__declspec(implementation_key(8466)) void IDropDown::PutDropDownLines ( long RHS );
__declspec(implementation_key(8467)) _bstr_t IDropDown::GetText ( );
__declspec(implementation_key(8468)) void IDropDown::PutText ( _bstr_t RHS );
__declspec(implementation_key(8469)) _ApplicationPtr IDropDowns::GetApplication ( );
__declspec(implementation_key(8470)) enum XlCreator IDropDowns::GetCreator ( );
__declspec(implementation_key(8471)) IDispatchPtr IDropDowns::GetParent ( );
__declspec(implementation_key(8472)) _variant_t IDropDowns::BringToFront ( );
__declspec(implementation_key(8473)) _variant_t IDropDowns::Copy ( );
__declspec(implementation_key(8474)) _variant_t IDropDowns::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8475)) _variant_t IDropDowns::Cut ( );
__declspec(implementation_key(8476)) _variant_t IDropDowns::Delete ( );
__declspec(implementation_key(8477)) IDispatchPtr IDropDowns::Duplicate ( );
__declspec(implementation_key(8478)) VARIANT_BOOL IDropDowns::GetEnabled ( );
__declspec(implementation_key(8479)) void IDropDowns::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8480)) double IDropDowns::GetHeight ( );
__declspec(implementation_key(8481)) void IDropDowns::PutHeight ( double RHS );
__declspec(implementation_key(8482)) double IDropDowns::GetLeft ( );
__declspec(implementation_key(8483)) void IDropDowns::PutLeft ( double RHS );
__declspec(implementation_key(8484)) VARIANT_BOOL IDropDowns::GetLocked ( );
__declspec(implementation_key(8485)) void IDropDowns::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8486)) _bstr_t IDropDowns::GetOnAction ( );
__declspec(implementation_key(8487)) void IDropDowns::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8488)) _variant_t IDropDowns::GetPlacement ( );
__declspec(implementation_key(8489)) void IDropDowns::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8490)) VARIANT_BOOL IDropDowns::GetPrintObject ( );
__declspec(implementation_key(8491)) void IDropDowns::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8492)) _variant_t IDropDowns::Select ( const _variant_t & Replace );
__declspec(implementation_key(8493)) _variant_t IDropDowns::SendToBack ( );
__declspec(implementation_key(8494)) double IDropDowns::GetTop ( );
__declspec(implementation_key(8495)) void IDropDowns::PutTop ( double RHS );
__declspec(implementation_key(8496)) VARIANT_BOOL IDropDowns::GetVisible ( );
__declspec(implementation_key(8497)) void IDropDowns::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8498)) double IDropDowns::GetWidth ( );
__declspec(implementation_key(8499)) void IDropDowns::PutWidth ( double RHS );
__declspec(implementation_key(8500)) long IDropDowns::GetZOrder ( );
__declspec(implementation_key(8501)) ShapeRangePtr IDropDowns::GetShapeRange ( );
__declspec(implementation_key(8502)) _variant_t IDropDowns::AddItem ( const _variant_t & Text, const _variant_t & Index );
__declspec(implementation_key(8503)) VARIANT_BOOL IDropDowns::GetDisplay3DShading ( );
__declspec(implementation_key(8504)) void IDropDowns::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8505)) long IDropDowns::Get_Default ( );
__declspec(implementation_key(8506)) void IDropDowns::Put_Default ( long RHS );
__declspec(implementation_key(8507)) _bstr_t IDropDowns::GetLinkedCell ( );
__declspec(implementation_key(8508)) void IDropDowns::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8509)) _variant_t IDropDowns::GetList ( const _variant_t & Index );
__declspec(implementation_key(8510)) void IDropDowns::PutList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8511)) _bstr_t IDropDowns::GetListFillRange ( );
__declspec(implementation_key(8512)) void IDropDowns::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(8513)) long IDropDowns::GetListIndex ( );
__declspec(implementation_key(8514)) void IDropDowns::PutListIndex ( long RHS );
__declspec(implementation_key(8515)) _variant_t IDropDowns::RemoveAllItems ( );
__declspec(implementation_key(8516)) _variant_t IDropDowns::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(8517)) _variant_t IDropDowns::GetSelected ( const _variant_t & Index );
__declspec(implementation_key(8518)) void IDropDowns::PutSelected ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(8519)) long IDropDowns::GetValue ( );
__declspec(implementation_key(8520)) void IDropDowns::PutValue ( long RHS );
__declspec(implementation_key(8521)) _bstr_t IDropDowns::GetCaption ( );
__declspec(implementation_key(8522)) void IDropDowns::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8523)) CharactersPtr IDropDowns::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8524)) long IDropDowns::GetDropDownLines ( );
__declspec(implementation_key(8525)) void IDropDowns::PutDropDownLines ( long RHS );
__declspec(implementation_key(8526)) _bstr_t IDropDowns::GetText ( );
__declspec(implementation_key(8527)) void IDropDowns::PutText ( _bstr_t RHS );
__declspec(implementation_key(8528)) DropDownPtr IDropDowns::Add ( double Left, double Top, double Width, double Height, const _variant_t & Editable );
__declspec(implementation_key(8529)) long IDropDowns::GetCount ( );
__declspec(implementation_key(8530)) GroupObjectPtr IDropDowns::Group ( );
__declspec(implementation_key(8531)) IDispatchPtr IDropDowns::Item ( const _variant_t & Index );
__declspec(implementation_key(8532)) IUnknownPtr IDropDowns::_NewEnum ( );
__declspec(implementation_key(8533)) _ApplicationPtr ISpinner::GetApplication ( );
__declspec(implementation_key(8534)) enum XlCreator ISpinner::GetCreator ( );
__declspec(implementation_key(8535)) IDispatchPtr ISpinner::GetParent ( );
__declspec(implementation_key(8536)) RangePtr ISpinner::GetBottomRightCell ( );
__declspec(implementation_key(8537)) _variant_t ISpinner::BringToFront ( );
__declspec(implementation_key(8538)) _variant_t ISpinner::Copy ( );
__declspec(implementation_key(8539)) _variant_t ISpinner::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8540)) _variant_t ISpinner::Cut ( );
__declspec(implementation_key(8541)) _variant_t ISpinner::Delete ( );
__declspec(implementation_key(8542)) IDispatchPtr ISpinner::Duplicate ( );
__declspec(implementation_key(8543)) VARIANT_BOOL ISpinner::GetEnabled ( );
__declspec(implementation_key(8544)) void ISpinner::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8545)) double ISpinner::GetHeight ( );
__declspec(implementation_key(8546)) void ISpinner::PutHeight ( double RHS );
__declspec(implementation_key(8547)) long ISpinner::GetIndex ( );
__declspec(implementation_key(8548)) double ISpinner::GetLeft ( );
__declspec(implementation_key(8549)) void ISpinner::PutLeft ( double RHS );
__declspec(implementation_key(8550)) VARIANT_BOOL ISpinner::GetLocked ( );
__declspec(implementation_key(8551)) void ISpinner::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8552)) _bstr_t ISpinner::GetName ( );
__declspec(implementation_key(8553)) void ISpinner::PutName ( _bstr_t RHS );
__declspec(implementation_key(8554)) _bstr_t ISpinner::GetOnAction ( );
__declspec(implementation_key(8555)) void ISpinner::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8556)) _variant_t ISpinner::GetPlacement ( );
__declspec(implementation_key(8557)) void ISpinner::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8558)) VARIANT_BOOL ISpinner::GetPrintObject ( );
__declspec(implementation_key(8559)) void ISpinner::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8560)) _variant_t ISpinner::Select ( const _variant_t & Replace );
__declspec(implementation_key(8561)) _variant_t ISpinner::SendToBack ( );
__declspec(implementation_key(8562)) double ISpinner::GetTop ( );
__declspec(implementation_key(8563)) void ISpinner::PutTop ( double RHS );
__declspec(implementation_key(8564)) RangePtr ISpinner::GetTopLeftCell ( );
__declspec(implementation_key(8565)) VARIANT_BOOL ISpinner::GetVisible ( );
__declspec(implementation_key(8566)) void ISpinner::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8567)) double ISpinner::GetWidth ( );
__declspec(implementation_key(8568)) void ISpinner::PutWidth ( double RHS );
__declspec(implementation_key(8569)) long ISpinner::GetZOrder ( );
__declspec(implementation_key(8570)) ShapeRangePtr ISpinner::GetShapeRange ( );
__declspec(implementation_key(8571)) long ISpinner::Get_Default ( );
__declspec(implementation_key(8572)) void ISpinner::Put_Default ( long RHS );
__declspec(implementation_key(8573)) VARIANT_BOOL ISpinner::GetDisplay3DShading ( );
__declspec(implementation_key(8574)) void ISpinner::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8575)) _bstr_t ISpinner::GetLinkedCell ( );
__declspec(implementation_key(8576)) void ISpinner::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8577)) long ISpinner::GetMax ( );
__declspec(implementation_key(8578)) void ISpinner::PutMax ( long RHS );
__declspec(implementation_key(8579)) long ISpinner::GetMin ( );
__declspec(implementation_key(8580)) void ISpinner::PutMin ( long RHS );
__declspec(implementation_key(8581)) long ISpinner::GetSmallChange ( );
__declspec(implementation_key(8582)) void ISpinner::PutSmallChange ( long RHS );
__declspec(implementation_key(8583)) long ISpinner::GetValue ( );
__declspec(implementation_key(8584)) void ISpinner::PutValue ( long RHS );
__declspec(implementation_key(8585)) _ApplicationPtr ISpinners::GetApplication ( );
__declspec(implementation_key(8586)) enum XlCreator ISpinners::GetCreator ( );
__declspec(implementation_key(8587)) IDispatchPtr ISpinners::GetParent ( );
__declspec(implementation_key(8588)) _variant_t ISpinners::BringToFront ( );
__declspec(implementation_key(8589)) _variant_t ISpinners::Copy ( );
__declspec(implementation_key(8590)) _variant_t ISpinners::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8591)) _variant_t ISpinners::Cut ( );
__declspec(implementation_key(8592)) _variant_t ISpinners::Delete ( );
__declspec(implementation_key(8593)) IDispatchPtr ISpinners::Duplicate ( );
__declspec(implementation_key(8594)) VARIANT_BOOL ISpinners::GetEnabled ( );
__declspec(implementation_key(8595)) void ISpinners::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8596)) double ISpinners::GetHeight ( );
__declspec(implementation_key(8597)) void ISpinners::PutHeight ( double RHS );
__declspec(implementation_key(8598)) double ISpinners::GetLeft ( );
__declspec(implementation_key(8599)) void ISpinners::PutLeft ( double RHS );
__declspec(implementation_key(8600)) VARIANT_BOOL ISpinners::GetLocked ( );
__declspec(implementation_key(8601)) void ISpinners::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8602)) _bstr_t ISpinners::GetOnAction ( );
__declspec(implementation_key(8603)) void ISpinners::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8604)) _variant_t ISpinners::GetPlacement ( );
__declspec(implementation_key(8605)) void ISpinners::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8606)) VARIANT_BOOL ISpinners::GetPrintObject ( );
__declspec(implementation_key(8607)) void ISpinners::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8608)) _variant_t ISpinners::Select ( const _variant_t & Replace );
__declspec(implementation_key(8609)) _variant_t ISpinners::SendToBack ( );
__declspec(implementation_key(8610)) double ISpinners::GetTop ( );
__declspec(implementation_key(8611)) void ISpinners::PutTop ( double RHS );
__declspec(implementation_key(8612)) VARIANT_BOOL ISpinners::GetVisible ( );
__declspec(implementation_key(8613)) void ISpinners::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8614)) double ISpinners::GetWidth ( );
__declspec(implementation_key(8615)) void ISpinners::PutWidth ( double RHS );
__declspec(implementation_key(8616)) long ISpinners::GetZOrder ( );
__declspec(implementation_key(8617)) ShapeRangePtr ISpinners::GetShapeRange ( );
__declspec(implementation_key(8618)) long ISpinners::Get_Default ( );
__declspec(implementation_key(8619)) void ISpinners::Put_Default ( long RHS );
__declspec(implementation_key(8620)) VARIANT_BOOL ISpinners::GetDisplay3DShading ( );
__declspec(implementation_key(8621)) void ISpinners::PutDisplay3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(8622)) _bstr_t ISpinners::GetLinkedCell ( );
__declspec(implementation_key(8623)) void ISpinners::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(8624)) long ISpinners::GetMax ( );
__declspec(implementation_key(8625)) void ISpinners::PutMax ( long RHS );
__declspec(implementation_key(8626)) long ISpinners::GetMin ( );
__declspec(implementation_key(8627)) void ISpinners::PutMin ( long RHS );
__declspec(implementation_key(8628)) long ISpinners::GetSmallChange ( );
__declspec(implementation_key(8629)) void ISpinners::PutSmallChange ( long RHS );
__declspec(implementation_key(8630)) long ISpinners::GetValue ( );
__declspec(implementation_key(8631)) void ISpinners::PutValue ( long RHS );
__declspec(implementation_key(8632)) SpinnerPtr ISpinners::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8633)) long ISpinners::GetCount ( );
__declspec(implementation_key(8634)) GroupObjectPtr ISpinners::Group ( );
__declspec(implementation_key(8635)) IDispatchPtr ISpinners::Item ( const _variant_t & Index );
__declspec(implementation_key(8636)) IUnknownPtr ISpinners::_NewEnum ( );
__declspec(implementation_key(8637)) _ApplicationPtr IDialogFrame::GetApplication ( );
__declspec(implementation_key(8638)) enum XlCreator IDialogFrame::GetCreator ( );
__declspec(implementation_key(8639)) IDispatchPtr IDialogFrame::GetParent ( );
__declspec(implementation_key(8640)) _variant_t IDialogFrame::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8641)) double IDialogFrame::GetHeight ( );
__declspec(implementation_key(8642)) void IDialogFrame::PutHeight ( double RHS );
__declspec(implementation_key(8643)) double IDialogFrame::GetLeft ( );
__declspec(implementation_key(8644)) void IDialogFrame::PutLeft ( double RHS );
__declspec(implementation_key(8645)) VARIANT_BOOL IDialogFrame::GetLocked ( );
__declspec(implementation_key(8646)) void IDialogFrame::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8647)) _bstr_t IDialogFrame::GetName ( );
__declspec(implementation_key(8648)) void IDialogFrame::PutName ( _bstr_t RHS );
__declspec(implementation_key(8649)) _bstr_t IDialogFrame::GetOnAction ( );
__declspec(implementation_key(8650)) void IDialogFrame::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8651)) _variant_t IDialogFrame::Select ( const _variant_t & Replace );
__declspec(implementation_key(8652)) double IDialogFrame::GetTop ( );
__declspec(implementation_key(8653)) void IDialogFrame::PutTop ( double RHS );
__declspec(implementation_key(8654)) double IDialogFrame::GetWidth ( );
__declspec(implementation_key(8655)) void IDialogFrame::PutWidth ( double RHS );
__declspec(implementation_key(8656)) ShapeRangePtr IDialogFrame::GetShapeRange ( );
__declspec(implementation_key(8657)) _bstr_t IDialogFrame::GetCaption ( );
__declspec(implementation_key(8658)) void IDialogFrame::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8659)) CharactersPtr IDialogFrame::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8660)) _variant_t IDialogFrame::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8661)) VARIANT_BOOL IDialogFrame::GetLockedText ( );
__declspec(implementation_key(8662)) void IDialogFrame::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8663)) _bstr_t IDialogFrame::GetText ( );
__declspec(implementation_key(8664)) void IDialogFrame::PutText ( _bstr_t RHS );
__declspec(implementation_key(8665)) _ApplicationPtr ILabel::GetApplication ( );
__declspec(implementation_key(8666)) enum XlCreator ILabel::GetCreator ( );
__declspec(implementation_key(8667)) IDispatchPtr ILabel::GetParent ( );
__declspec(implementation_key(8668)) RangePtr ILabel::GetBottomRightCell ( );
__declspec(implementation_key(8669)) _variant_t ILabel::BringToFront ( );
__declspec(implementation_key(8670)) _variant_t ILabel::Copy ( );
__declspec(implementation_key(8671)) _variant_t ILabel::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8672)) _variant_t ILabel::Cut ( );
__declspec(implementation_key(8673)) _variant_t ILabel::Delete ( );
__declspec(implementation_key(8674)) IDispatchPtr ILabel::Duplicate ( );
__declspec(implementation_key(8675)) VARIANT_BOOL ILabel::GetEnabled ( );
__declspec(implementation_key(8676)) void ILabel::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8677)) double ILabel::GetHeight ( );
__declspec(implementation_key(8678)) void ILabel::PutHeight ( double RHS );
__declspec(implementation_key(8679)) long ILabel::GetIndex ( );
__declspec(implementation_key(8680)) double ILabel::GetLeft ( );
__declspec(implementation_key(8681)) void ILabel::PutLeft ( double RHS );
__declspec(implementation_key(8682)) VARIANT_BOOL ILabel::GetLocked ( );
__declspec(implementation_key(8683)) void ILabel::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8684)) _bstr_t ILabel::GetName ( );
__declspec(implementation_key(8685)) void ILabel::PutName ( _bstr_t RHS );
__declspec(implementation_key(8686)) _bstr_t ILabel::GetOnAction ( );
__declspec(implementation_key(8687)) void ILabel::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8688)) _variant_t ILabel::GetPlacement ( );
__declspec(implementation_key(8689)) void ILabel::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8690)) VARIANT_BOOL ILabel::GetPrintObject ( );
__declspec(implementation_key(8691)) void ILabel::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8692)) _variant_t ILabel::Select ( const _variant_t & Replace );
__declspec(implementation_key(8693)) _variant_t ILabel::SendToBack ( );
__declspec(implementation_key(8694)) double ILabel::GetTop ( );
__declspec(implementation_key(8695)) void ILabel::PutTop ( double RHS );
__declspec(implementation_key(8696)) RangePtr ILabel::GetTopLeftCell ( );
__declspec(implementation_key(8697)) VARIANT_BOOL ILabel::GetVisible ( );
__declspec(implementation_key(8698)) void ILabel::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8699)) double ILabel::GetWidth ( );
__declspec(implementation_key(8700)) void ILabel::PutWidth ( double RHS );
__declspec(implementation_key(8701)) long ILabel::GetZOrder ( );
__declspec(implementation_key(8702)) ShapeRangePtr ILabel::GetShapeRange ( );
__declspec(implementation_key(8703)) _bstr_t ILabel::GetCaption ( );
__declspec(implementation_key(8704)) void ILabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8705)) CharactersPtr ILabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8706)) _variant_t ILabel::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8707)) VARIANT_BOOL ILabel::GetLockedText ( );
__declspec(implementation_key(8708)) void ILabel::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8709)) _bstr_t ILabel::GetText ( );
__declspec(implementation_key(8710)) void ILabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(8711)) _variant_t ILabel::GetAccelerator ( );
__declspec(implementation_key(8712)) void ILabel::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8713)) _variant_t ILabel::GetPhoneticAccelerator ( );
__declspec(implementation_key(8714)) void ILabel::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8715)) _ApplicationPtr ILabels::GetApplication ( );
__declspec(implementation_key(8716)) enum XlCreator ILabels::GetCreator ( );
__declspec(implementation_key(8717)) IDispatchPtr ILabels::GetParent ( );
__declspec(implementation_key(8718)) _variant_t ILabels::BringToFront ( );
__declspec(implementation_key(8719)) _variant_t ILabels::Copy ( );
__declspec(implementation_key(8720)) _variant_t ILabels::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8721)) _variant_t ILabels::Cut ( );
__declspec(implementation_key(8722)) _variant_t ILabels::Delete ( );
__declspec(implementation_key(8723)) IDispatchPtr ILabels::Duplicate ( );
__declspec(implementation_key(8724)) VARIANT_BOOL ILabels::GetEnabled ( );
__declspec(implementation_key(8725)) void ILabels::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8726)) double ILabels::GetHeight ( );
__declspec(implementation_key(8727)) void ILabels::PutHeight ( double RHS );
__declspec(implementation_key(8728)) double ILabels::GetLeft ( );
__declspec(implementation_key(8729)) void ILabels::PutLeft ( double RHS );
__declspec(implementation_key(8730)) VARIANT_BOOL ILabels::GetLocked ( );
__declspec(implementation_key(8731)) void ILabels::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8732)) _bstr_t ILabels::GetOnAction ( );
__declspec(implementation_key(8733)) void ILabels::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8734)) _variant_t ILabels::GetPlacement ( );
__declspec(implementation_key(8735)) void ILabels::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8736)) VARIANT_BOOL ILabels::GetPrintObject ( );
__declspec(implementation_key(8737)) void ILabels::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8738)) _variant_t ILabels::Select ( const _variant_t & Replace );
__declspec(implementation_key(8739)) _variant_t ILabels::SendToBack ( );
__declspec(implementation_key(8740)) double ILabels::GetTop ( );
__declspec(implementation_key(8741)) void ILabels::PutTop ( double RHS );
__declspec(implementation_key(8742)) VARIANT_BOOL ILabels::GetVisible ( );
__declspec(implementation_key(8743)) void ILabels::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8744)) double ILabels::GetWidth ( );
__declspec(implementation_key(8745)) void ILabels::PutWidth ( double RHS );
__declspec(implementation_key(8746)) long ILabels::GetZOrder ( );
__declspec(implementation_key(8747)) ShapeRangePtr ILabels::GetShapeRange ( );
__declspec(implementation_key(8748)) _bstr_t ILabels::GetCaption ( );
__declspec(implementation_key(8749)) void ILabels::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(8750)) CharactersPtr ILabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(8751)) _variant_t ILabels::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8752)) VARIANT_BOOL ILabels::GetLockedText ( );
__declspec(implementation_key(8753)) void ILabels::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(8754)) _bstr_t ILabels::GetText ( );
__declspec(implementation_key(8755)) void ILabels::PutText ( _bstr_t RHS );
__declspec(implementation_key(8756)) _variant_t ILabels::GetAccelerator ( );
__declspec(implementation_key(8757)) void ILabels::PutAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8758)) _variant_t ILabels::GetPhoneticAccelerator ( );
__declspec(implementation_key(8759)) void ILabels::PutPhoneticAccelerator ( const _variant_t & RHS );
__declspec(implementation_key(8760)) LabelPtr ILabels::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(8761)) long ILabels::GetCount ( );
__declspec(implementation_key(8762)) GroupObjectPtr ILabels::Group ( );
__declspec(implementation_key(8763)) IDispatchPtr ILabels::Item ( const _variant_t & Index );
__declspec(implementation_key(8764)) IUnknownPtr ILabels::_NewEnum ( );
__declspec(implementation_key(8765)) _ApplicationPtr IPanes::GetApplication ( );
__declspec(implementation_key(8766)) enum XlCreator IPanes::GetCreator ( );
__declspec(implementation_key(8767)) IDispatchPtr IPanes::GetParent ( );
__declspec(implementation_key(8768)) long IPanes::GetCount ( );
__declspec(implementation_key(8769)) PanePtr IPanes::GetItem ( long Index );
__declspec(implementation_key(8770)) PanePtr IPanes::Get_Default ( long Index );
__declspec(implementation_key(8771)) _ApplicationPtr IPane::GetApplication ( );
__declspec(implementation_key(8772)) enum XlCreator IPane::GetCreator ( );
__declspec(implementation_key(8773)) IDispatchPtr IPane::GetParent ( );
__declspec(implementation_key(8774)) VARIANT_BOOL IPane::Activate ( );
__declspec(implementation_key(8775)) long IPane::GetIndex ( );
__declspec(implementation_key(8776)) _variant_t IPane::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(8777)) long IPane::GetScrollColumn ( );
__declspec(implementation_key(8778)) void IPane::PutScrollColumn ( long RHS );
__declspec(implementation_key(8779)) long IPane::GetScrollRow ( );
__declspec(implementation_key(8780)) void IPane::PutScrollRow ( long RHS );
__declspec(implementation_key(8781)) _variant_t IPane::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(8782)) RangePtr IPane::GetVisibleRange ( );
__declspec(implementation_key(8783)) HRESULT IPane::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(8784)) _ApplicationPtr IScenarios::GetApplication ( );
__declspec(implementation_key(8785)) enum XlCreator IScenarios::GetCreator ( );
__declspec(implementation_key(8786)) IDispatchPtr IScenarios::GetParent ( );
__declspec(implementation_key(8787)) ScenarioPtr IScenarios::Add ( _bstr_t Name, const _variant_t & ChangingCells, const _variant_t & Values, const _variant_t & Comment, const _variant_t & Locked, const _variant_t & Hidden );
__declspec(implementation_key(8788)) long IScenarios::GetCount ( );
__declspec(implementation_key(8789)) _variant_t IScenarios::CreateSummary ( enum XlSummaryReportType ReportType, const _variant_t & ResultCells );
__declspec(implementation_key(8790)) ScenarioPtr IScenarios::Item ( const _variant_t & Index );
__declspec(implementation_key(8791)) _variant_t IScenarios::Merge ( const _variant_t & Source );
__declspec(implementation_key(8792)) IUnknownPtr IScenarios::_NewEnum ( );
__declspec(implementation_key(8793)) _ApplicationPtr IScenario::GetApplication ( );
__declspec(implementation_key(8794)) enum XlCreator IScenario::GetCreator ( );
__declspec(implementation_key(8795)) IDispatchPtr IScenario::GetParent ( );
__declspec(implementation_key(8796)) _variant_t IScenario::ChangeScenario ( const _variant_t & ChangingCells, const _variant_t & Values );
__declspec(implementation_key(8797)) RangePtr IScenario::GetChangingCells ( );
__declspec(implementation_key(8798)) _bstr_t IScenario::GetComment ( );
__declspec(implementation_key(8799)) void IScenario::PutComment ( _bstr_t RHS );
__declspec(implementation_key(8800)) _variant_t IScenario::Delete ( );
__declspec(implementation_key(8801)) VARIANT_BOOL IScenario::GetHidden ( );
__declspec(implementation_key(8802)) void IScenario::PutHidden ( VARIANT_BOOL RHS );
__declspec(implementation_key(8803)) long IScenario::GetIndex ( );
__declspec(implementation_key(8804)) VARIANT_BOOL IScenario::GetLocked ( );
__declspec(implementation_key(8805)) void IScenario::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8806)) _bstr_t IScenario::GetName ( );
__declspec(implementation_key(8807)) void IScenario::PutName ( _bstr_t RHS );
__declspec(implementation_key(8808)) _variant_t IScenario::Show ( );
__declspec(implementation_key(8809)) _variant_t IScenario::GetValues ( const _variant_t & Index );
__declspec(implementation_key(8810)) _ApplicationPtr IGroupObject::GetApplication ( );
__declspec(implementation_key(8811)) enum XlCreator IGroupObject::GetCreator ( );
__declspec(implementation_key(8812)) IDispatchPtr IGroupObject::GetParent ( );
__declspec(implementation_key(8813)) RangePtr IGroupObject::GetBottomRightCell ( );
__declspec(implementation_key(8814)) _variant_t IGroupObject::BringToFront ( );
__declspec(implementation_key(8815)) _variant_t IGroupObject::Copy ( );
__declspec(implementation_key(8816)) _variant_t IGroupObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8817)) _variant_t IGroupObject::Cut ( );
__declspec(implementation_key(8818)) _variant_t IGroupObject::Delete ( );
__declspec(implementation_key(8819)) IDispatchPtr IGroupObject::Duplicate ( );
__declspec(implementation_key(8820)) VARIANT_BOOL IGroupObject::GetEnabled ( );
__declspec(implementation_key(8821)) void IGroupObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8822)) double IGroupObject::GetHeight ( );
__declspec(implementation_key(8823)) void IGroupObject::PutHeight ( double RHS );
__declspec(implementation_key(8824)) long IGroupObject::GetIndex ( );
__declspec(implementation_key(8825)) double IGroupObject::GetLeft ( );
__declspec(implementation_key(8826)) void IGroupObject::PutLeft ( double RHS );
__declspec(implementation_key(8827)) VARIANT_BOOL IGroupObject::GetLocked ( );
__declspec(implementation_key(8828)) void IGroupObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8829)) _bstr_t IGroupObject::GetName ( );
__declspec(implementation_key(8830)) void IGroupObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(8831)) _bstr_t IGroupObject::GetOnAction ( );
__declspec(implementation_key(8832)) void IGroupObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8833)) _variant_t IGroupObject::GetPlacement ( );
__declspec(implementation_key(8834)) void IGroupObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8835)) VARIANT_BOOL IGroupObject::GetPrintObject ( );
__declspec(implementation_key(8836)) void IGroupObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8837)) _variant_t IGroupObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(8838)) _variant_t IGroupObject::SendToBack ( );
__declspec(implementation_key(8839)) double IGroupObject::GetTop ( );
__declspec(implementation_key(8840)) void IGroupObject::PutTop ( double RHS );
__declspec(implementation_key(8841)) RangePtr IGroupObject::GetTopLeftCell ( );
__declspec(implementation_key(8842)) VARIANT_BOOL IGroupObject::GetVisible ( );
__declspec(implementation_key(8843)) void IGroupObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8844)) double IGroupObject::GetWidth ( );
__declspec(implementation_key(8845)) void IGroupObject::PutWidth ( double RHS );
__declspec(implementation_key(8846)) long IGroupObject::GetZOrder ( );
__declspec(implementation_key(8847)) ShapeRangePtr IGroupObject::GetShapeRange ( );
__declspec(implementation_key(8848)) VARIANT_BOOL IGroupObject::GetAddIndent ( );
__declspec(implementation_key(8849)) void IGroupObject::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8850)) _variant_t IGroupObject::GetArrowHeadLength ( );
__declspec(implementation_key(8851)) void IGroupObject::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8852)) _variant_t IGroupObject::GetArrowHeadStyle ( );
__declspec(implementation_key(8853)) void IGroupObject::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8854)) _variant_t IGroupObject::GetArrowHeadWidth ( );
__declspec(implementation_key(8855)) void IGroupObject::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8856)) VARIANT_BOOL IGroupObject::GetAutoSize ( );
__declspec(implementation_key(8857)) void IGroupObject::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8858)) BorderPtr IGroupObject::GetBorder ( );
__declspec(implementation_key(8859)) _variant_t IGroupObject::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8860)) long IGroupObject::Get_Default ( );
__declspec(implementation_key(8861)) void IGroupObject::Put_Default ( long RHS );
__declspec(implementation_key(8862)) FontPtr IGroupObject::GetFont ( );
__declspec(implementation_key(8863)) _variant_t IGroupObject::GetHorizontalAlignment ( );
__declspec(implementation_key(8864)) void IGroupObject::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8865)) InteriorPtr IGroupObject::GetInterior ( );
__declspec(implementation_key(8866)) _variant_t IGroupObject::GetOrientation ( );
__declspec(implementation_key(8867)) void IGroupObject::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8868)) VARIANT_BOOL IGroupObject::GetRoundedCorners ( );
__declspec(implementation_key(8869)) void IGroupObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8870)) VARIANT_BOOL IGroupObject::GetShadow ( );
__declspec(implementation_key(8871)) void IGroupObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8872)) IDispatchPtr IGroupObject::Ungroup ( );
__declspec(implementation_key(8873)) _variant_t IGroupObject::GetVerticalAlignment ( );
__declspec(implementation_key(8874)) void IGroupObject::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8875)) long IGroupObject::GetReadingOrder ( );
__declspec(implementation_key(8876)) void IGroupObject::PutReadingOrder ( long RHS );
__declspec(implementation_key(8877)) _ApplicationPtr IGroupObjects::GetApplication ( );
__declspec(implementation_key(8878)) enum XlCreator IGroupObjects::GetCreator ( );
__declspec(implementation_key(8879)) IDispatchPtr IGroupObjects::GetParent ( );
__declspec(implementation_key(8880)) _variant_t IGroupObjects::BringToFront ( );
__declspec(implementation_key(8881)) _variant_t IGroupObjects::Copy ( );
__declspec(implementation_key(8882)) _variant_t IGroupObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8883)) _variant_t IGroupObjects::Cut ( );
__declspec(implementation_key(8884)) _variant_t IGroupObjects::Delete ( );
__declspec(implementation_key(8885)) IDispatchPtr IGroupObjects::Duplicate ( );
__declspec(implementation_key(8886)) VARIANT_BOOL IGroupObjects::GetEnabled ( );
__declspec(implementation_key(8887)) void IGroupObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8888)) double IGroupObjects::GetHeight ( );
__declspec(implementation_key(8889)) void IGroupObjects::PutHeight ( double RHS );
__declspec(implementation_key(8890)) double IGroupObjects::GetLeft ( );
__declspec(implementation_key(8891)) void IGroupObjects::PutLeft ( double RHS );
__declspec(implementation_key(8892)) VARIANT_BOOL IGroupObjects::GetLocked ( );
__declspec(implementation_key(8893)) void IGroupObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8894)) _bstr_t IGroupObjects::GetOnAction ( );
__declspec(implementation_key(8895)) void IGroupObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8896)) _variant_t IGroupObjects::GetPlacement ( );
__declspec(implementation_key(8897)) void IGroupObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8898)) VARIANT_BOOL IGroupObjects::GetPrintObject ( );
__declspec(implementation_key(8899)) void IGroupObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8900)) _variant_t IGroupObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(8901)) _variant_t IGroupObjects::SendToBack ( );
__declspec(implementation_key(8902)) double IGroupObjects::GetTop ( );
__declspec(implementation_key(8903)) void IGroupObjects::PutTop ( double RHS );
__declspec(implementation_key(8904)) VARIANT_BOOL IGroupObjects::GetVisible ( );
__declspec(implementation_key(8905)) void IGroupObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8906)) double IGroupObjects::GetWidth ( );
__declspec(implementation_key(8907)) void IGroupObjects::PutWidth ( double RHS );
__declspec(implementation_key(8908)) long IGroupObjects::GetZOrder ( );
__declspec(implementation_key(8909)) ShapeRangePtr IGroupObjects::GetShapeRange ( );
__declspec(implementation_key(8910)) VARIANT_BOOL IGroupObjects::GetAddIndent ( );
__declspec(implementation_key(8911)) void IGroupObjects::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(8912)) _variant_t IGroupObjects::GetArrowHeadLength ( );
__declspec(implementation_key(8913)) void IGroupObjects::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8914)) _variant_t IGroupObjects::GetArrowHeadStyle ( );
__declspec(implementation_key(8915)) void IGroupObjects::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8916)) _variant_t IGroupObjects::GetArrowHeadWidth ( );
__declspec(implementation_key(8917)) void IGroupObjects::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8918)) VARIANT_BOOL IGroupObjects::GetAutoSize ( );
__declspec(implementation_key(8919)) void IGroupObjects::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(8920)) BorderPtr IGroupObjects::GetBorder ( );
__declspec(implementation_key(8921)) _variant_t IGroupObjects::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(8922)) long IGroupObjects::Get_Default ( );
__declspec(implementation_key(8923)) void IGroupObjects::Put_Default ( long RHS );
__declspec(implementation_key(8924)) FontPtr IGroupObjects::GetFont ( );
__declspec(implementation_key(8925)) _variant_t IGroupObjects::GetHorizontalAlignment ( );
__declspec(implementation_key(8926)) void IGroupObjects::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8927)) InteriorPtr IGroupObjects::GetInterior ( );
__declspec(implementation_key(8928)) _variant_t IGroupObjects::GetOrientation ( );
__declspec(implementation_key(8929)) void IGroupObjects::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(8930)) VARIANT_BOOL IGroupObjects::GetRoundedCorners ( );
__declspec(implementation_key(8931)) void IGroupObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(8932)) VARIANT_BOOL IGroupObjects::GetShadow ( );
__declspec(implementation_key(8933)) void IGroupObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(8934)) IDispatchPtr IGroupObjects::Ungroup ( );
__declspec(implementation_key(8935)) _variant_t IGroupObjects::GetVerticalAlignment ( );
__declspec(implementation_key(8936)) void IGroupObjects::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(8937)) long IGroupObjects::GetReadingOrder ( );
__declspec(implementation_key(8938)) void IGroupObjects::PutReadingOrder ( long RHS );
__declspec(implementation_key(8939)) long IGroupObjects::GetCount ( );
__declspec(implementation_key(8940)) GroupObjectPtr IGroupObjects::Group ( );
__declspec(implementation_key(8941)) IDispatchPtr IGroupObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(8942)) IUnknownPtr IGroupObjects::_NewEnum ( );
__declspec(implementation_key(8943)) _ApplicationPtr ILine::GetApplication ( );
__declspec(implementation_key(8944)) enum XlCreator ILine::GetCreator ( );
__declspec(implementation_key(8945)) IDispatchPtr ILine::GetParent ( );
__declspec(implementation_key(8946)) RangePtr ILine::GetBottomRightCell ( );
__declspec(implementation_key(8947)) _variant_t ILine::BringToFront ( );
__declspec(implementation_key(8948)) _variant_t ILine::Copy ( );
__declspec(implementation_key(8949)) _variant_t ILine::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8950)) _variant_t ILine::Cut ( );
__declspec(implementation_key(8951)) _variant_t ILine::Delete ( );
__declspec(implementation_key(8952)) IDispatchPtr ILine::Duplicate ( );
__declspec(implementation_key(8953)) VARIANT_BOOL ILine::GetEnabled ( );
__declspec(implementation_key(8954)) void ILine::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8955)) double ILine::GetHeight ( );
__declspec(implementation_key(8956)) void ILine::PutHeight ( double RHS );
__declspec(implementation_key(8957)) long ILine::GetIndex ( );
__declspec(implementation_key(8958)) double ILine::GetLeft ( );
__declspec(implementation_key(8959)) void ILine::PutLeft ( double RHS );
__declspec(implementation_key(8960)) VARIANT_BOOL ILine::GetLocked ( );
__declspec(implementation_key(8961)) void ILine::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(8962)) _bstr_t ILine::GetName ( );
__declspec(implementation_key(8963)) void ILine::PutName ( _bstr_t RHS );
__declspec(implementation_key(8964)) _bstr_t ILine::GetOnAction ( );
__declspec(implementation_key(8965)) void ILine::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(8966)) _variant_t ILine::GetPlacement ( );
__declspec(implementation_key(8967)) void ILine::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(8968)) VARIANT_BOOL ILine::GetPrintObject ( );
__declspec(implementation_key(8969)) void ILine::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(8970)) _variant_t ILine::Select ( const _variant_t & Replace );
__declspec(implementation_key(8971)) _variant_t ILine::SendToBack ( );
__declspec(implementation_key(8972)) double ILine::GetTop ( );
__declspec(implementation_key(8973)) void ILine::PutTop ( double RHS );
__declspec(implementation_key(8974)) RangePtr ILine::GetTopLeftCell ( );
__declspec(implementation_key(8975)) VARIANT_BOOL ILine::GetVisible ( );
__declspec(implementation_key(8976)) void ILine::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(8977)) double ILine::GetWidth ( );
__declspec(implementation_key(8978)) void ILine::PutWidth ( double RHS );
__declspec(implementation_key(8979)) long ILine::GetZOrder ( );
__declspec(implementation_key(8980)) ShapeRangePtr ILine::GetShapeRange ( );
__declspec(implementation_key(8981)) _variant_t ILine::GetArrowHeadLength ( );
__declspec(implementation_key(8982)) void ILine::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(8983)) _variant_t ILine::GetArrowHeadStyle ( );
__declspec(implementation_key(8984)) void ILine::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(8985)) _variant_t ILine::GetArrowHeadWidth ( );
__declspec(implementation_key(8986)) void ILine::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(8987)) BorderPtr ILine::GetBorder ( );
__declspec(implementation_key(8988)) _ApplicationPtr ILines::GetApplication ( );
__declspec(implementation_key(8989)) enum XlCreator ILines::GetCreator ( );
__declspec(implementation_key(8990)) IDispatchPtr ILines::GetParent ( );
__declspec(implementation_key(8991)) _variant_t ILines::BringToFront ( );
__declspec(implementation_key(8992)) _variant_t ILines::Copy ( );
__declspec(implementation_key(8993)) _variant_t ILines::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(8994)) _variant_t ILines::Cut ( );
__declspec(implementation_key(8995)) _variant_t ILines::Delete ( );
__declspec(implementation_key(8996)) IDispatchPtr ILines::Duplicate ( );
__declspec(implementation_key(8997)) VARIANT_BOOL ILines::GetEnabled ( );
__declspec(implementation_key(8998)) void ILines::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(8999)) double ILines::GetHeight ( );
__declspec(implementation_key(9000)) void ILines::PutHeight ( double RHS );
__declspec(implementation_key(9001)) double ILines::GetLeft ( );
__declspec(implementation_key(9002)) void ILines::PutLeft ( double RHS );
__declspec(implementation_key(9003)) VARIANT_BOOL ILines::GetLocked ( );
__declspec(implementation_key(9004)) void ILines::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9005)) _bstr_t ILines::GetOnAction ( );
__declspec(implementation_key(9006)) void ILines::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9007)) _variant_t ILines::GetPlacement ( );
__declspec(implementation_key(9008)) void ILines::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9009)) VARIANT_BOOL ILines::GetPrintObject ( );
__declspec(implementation_key(9010)) void ILines::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9011)) _variant_t ILines::Select ( const _variant_t & Replace );
__declspec(implementation_key(9012)) _variant_t ILines::SendToBack ( );
__declspec(implementation_key(9013)) double ILines::GetTop ( );
__declspec(implementation_key(9014)) void ILines::PutTop ( double RHS );
__declspec(implementation_key(9015)) VARIANT_BOOL ILines::GetVisible ( );
__declspec(implementation_key(9016)) void ILines::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9017)) double ILines::GetWidth ( );
__declspec(implementation_key(9018)) void ILines::PutWidth ( double RHS );
__declspec(implementation_key(9019)) long ILines::GetZOrder ( );
__declspec(implementation_key(9020)) ShapeRangePtr ILines::GetShapeRange ( );
__declspec(implementation_key(9021)) _variant_t ILines::GetArrowHeadLength ( );
__declspec(implementation_key(9022)) void ILines::PutArrowHeadLength ( const _variant_t & RHS );
__declspec(implementation_key(9023)) _variant_t ILines::GetArrowHeadStyle ( );
__declspec(implementation_key(9024)) void ILines::PutArrowHeadStyle ( const _variant_t & RHS );
__declspec(implementation_key(9025)) _variant_t ILines::GetArrowHeadWidth ( );
__declspec(implementation_key(9026)) void ILines::PutArrowHeadWidth ( const _variant_t & RHS );
__declspec(implementation_key(9027)) BorderPtr ILines::GetBorder ( );
__declspec(implementation_key(9028)) LinePtr ILines::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(9029)) long ILines::GetCount ( );
__declspec(implementation_key(9030)) GroupObjectPtr ILines::Group ( );
__declspec(implementation_key(9031)) IDispatchPtr ILines::Item ( const _variant_t & Index );
__declspec(implementation_key(9032)) IUnknownPtr ILines::_NewEnum ( );
__declspec(implementation_key(9033)) _ApplicationPtr IRectangle::GetApplication ( );
__declspec(implementation_key(9034)) enum XlCreator IRectangle::GetCreator ( );
__declspec(implementation_key(9035)) IDispatchPtr IRectangle::GetParent ( );
__declspec(implementation_key(9036)) RangePtr IRectangle::GetBottomRightCell ( );
__declspec(implementation_key(9037)) _variant_t IRectangle::BringToFront ( );
__declspec(implementation_key(9038)) _variant_t IRectangle::Copy ( );
__declspec(implementation_key(9039)) _variant_t IRectangle::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9040)) _variant_t IRectangle::Cut ( );
__declspec(implementation_key(9041)) _variant_t IRectangle::Delete ( );
__declspec(implementation_key(9042)) IDispatchPtr IRectangle::Duplicate ( );
__declspec(implementation_key(9043)) VARIANT_BOOL IRectangle::GetEnabled ( );
__declspec(implementation_key(9044)) void IRectangle::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9045)) double IRectangle::GetHeight ( );
__declspec(implementation_key(9046)) void IRectangle::PutHeight ( double RHS );
__declspec(implementation_key(9047)) long IRectangle::GetIndex ( );
__declspec(implementation_key(9048)) double IRectangle::GetLeft ( );
__declspec(implementation_key(9049)) void IRectangle::PutLeft ( double RHS );
__declspec(implementation_key(9050)) VARIANT_BOOL IRectangle::GetLocked ( );
__declspec(implementation_key(9051)) void IRectangle::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9052)) _bstr_t IRectangle::GetName ( );
__declspec(implementation_key(9053)) void IRectangle::PutName ( _bstr_t RHS );
__declspec(implementation_key(9054)) _bstr_t IRectangle::GetOnAction ( );
__declspec(implementation_key(9055)) void IRectangle::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9056)) _variant_t IRectangle::GetPlacement ( );
__declspec(implementation_key(9057)) void IRectangle::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9058)) VARIANT_BOOL IRectangle::GetPrintObject ( );
__declspec(implementation_key(9059)) void IRectangle::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9060)) _variant_t IRectangle::Select ( const _variant_t & Replace );
__declspec(implementation_key(9061)) _variant_t IRectangle::SendToBack ( );
__declspec(implementation_key(9062)) double IRectangle::GetTop ( );
__declspec(implementation_key(9063)) void IRectangle::PutTop ( double RHS );
__declspec(implementation_key(9064)) RangePtr IRectangle::GetTopLeftCell ( );
__declspec(implementation_key(9065)) VARIANT_BOOL IRectangle::GetVisible ( );
__declspec(implementation_key(9066)) void IRectangle::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9067)) double IRectangle::GetWidth ( );
__declspec(implementation_key(9068)) void IRectangle::PutWidth ( double RHS );
__declspec(implementation_key(9069)) long IRectangle::GetZOrder ( );
__declspec(implementation_key(9070)) ShapeRangePtr IRectangle::GetShapeRange ( );
__declspec(implementation_key(9071)) VARIANT_BOOL IRectangle::GetAddIndent ( );
__declspec(implementation_key(9072)) void IRectangle::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9073)) _variant_t IRectangle::GetAutoScaleFont ( );
__declspec(implementation_key(9074)) void IRectangle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9075)) VARIANT_BOOL IRectangle::GetAutoSize ( );
__declspec(implementation_key(9076)) void IRectangle::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9077)) _bstr_t IRectangle::GetCaption ( );
__declspec(implementation_key(9078)) void IRectangle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9079)) CharactersPtr IRectangle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9080)) _variant_t IRectangle::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9081)) FontPtr IRectangle::GetFont ( );
__declspec(implementation_key(9082)) _bstr_t IRectangle::GetFormula ( );
__declspec(implementation_key(9083)) void IRectangle::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9084)) _variant_t IRectangle::GetHorizontalAlignment ( );
__declspec(implementation_key(9085)) void IRectangle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9086)) VARIANT_BOOL IRectangle::GetLockedText ( );
__declspec(implementation_key(9087)) void IRectangle::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9088)) _variant_t IRectangle::GetOrientation ( );
__declspec(implementation_key(9089)) void IRectangle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9090)) _bstr_t IRectangle::GetText ( );
__declspec(implementation_key(9091)) void IRectangle::PutText ( _bstr_t RHS );
__declspec(implementation_key(9092)) _variant_t IRectangle::GetVerticalAlignment ( );
__declspec(implementation_key(9093)) void IRectangle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9094)) long IRectangle::GetReadingOrder ( );
__declspec(implementation_key(9095)) void IRectangle::PutReadingOrder ( long RHS );
__declspec(implementation_key(9096)) BorderPtr IRectangle::GetBorder ( );
__declspec(implementation_key(9097)) InteriorPtr IRectangle::GetInterior ( );
__declspec(implementation_key(9098)) VARIANT_BOOL IRectangle::GetShadow ( );
__declspec(implementation_key(9099)) void IRectangle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9100)) VARIANT_BOOL IRectangle::GetRoundedCorners ( );
__declspec(implementation_key(9101)) void IRectangle::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(9102)) _ApplicationPtr IRectangles::GetApplication ( );
__declspec(implementation_key(9103)) enum XlCreator IRectangles::GetCreator ( );
__declspec(implementation_key(9104)) IDispatchPtr IRectangles::GetParent ( );
__declspec(implementation_key(9105)) _variant_t IRectangles::BringToFront ( );
__declspec(implementation_key(9106)) _variant_t IRectangles::Copy ( );
__declspec(implementation_key(9107)) _variant_t IRectangles::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9108)) _variant_t IRectangles::Cut ( );
__declspec(implementation_key(9109)) _variant_t IRectangles::Delete ( );
__declspec(implementation_key(9110)) IDispatchPtr IRectangles::Duplicate ( );
__declspec(implementation_key(9111)) VARIANT_BOOL IRectangles::GetEnabled ( );
__declspec(implementation_key(9112)) void IRectangles::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9113)) double IRectangles::GetHeight ( );
__declspec(implementation_key(9114)) void IRectangles::PutHeight ( double RHS );
__declspec(implementation_key(9115)) double IRectangles::GetLeft ( );
__declspec(implementation_key(9116)) void IRectangles::PutLeft ( double RHS );
__declspec(implementation_key(9117)) VARIANT_BOOL IRectangles::GetLocked ( );
__declspec(implementation_key(9118)) void IRectangles::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9119)) _bstr_t IRectangles::GetOnAction ( );
__declspec(implementation_key(9120)) void IRectangles::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9121)) _variant_t IRectangles::GetPlacement ( );
__declspec(implementation_key(9122)) void IRectangles::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9123)) VARIANT_BOOL IRectangles::GetPrintObject ( );
__declspec(implementation_key(9124)) void IRectangles::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9125)) _variant_t IRectangles::Select ( const _variant_t & Replace );
__declspec(implementation_key(9126)) _variant_t IRectangles::SendToBack ( );
__declspec(implementation_key(9127)) double IRectangles::GetTop ( );
__declspec(implementation_key(9128)) void IRectangles::PutTop ( double RHS );
__declspec(implementation_key(9129)) VARIANT_BOOL IRectangles::GetVisible ( );
__declspec(implementation_key(9130)) void IRectangles::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9131)) double IRectangles::GetWidth ( );
__declspec(implementation_key(9132)) void IRectangles::PutWidth ( double RHS );
__declspec(implementation_key(9133)) long IRectangles::GetZOrder ( );
__declspec(implementation_key(9134)) ShapeRangePtr IRectangles::GetShapeRange ( );
__declspec(implementation_key(9135)) VARIANT_BOOL IRectangles::GetAddIndent ( );
__declspec(implementation_key(9136)) void IRectangles::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9137)) _variant_t IRectangles::GetAutoScaleFont ( );
__declspec(implementation_key(9138)) void IRectangles::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9139)) VARIANT_BOOL IRectangles::GetAutoSize ( );
__declspec(implementation_key(9140)) void IRectangles::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9141)) _bstr_t IRectangles::GetCaption ( );
__declspec(implementation_key(9142)) void IRectangles::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9143)) CharactersPtr IRectangles::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9144)) _variant_t IRectangles::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9145)) FontPtr IRectangles::GetFont ( );
__declspec(implementation_key(9146)) _bstr_t IRectangles::GetFormula ( );
__declspec(implementation_key(9147)) void IRectangles::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9148)) _variant_t IRectangles::GetHorizontalAlignment ( );
__declspec(implementation_key(9149)) void IRectangles::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9150)) VARIANT_BOOL IRectangles::GetLockedText ( );
__declspec(implementation_key(9151)) void IRectangles::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9152)) _variant_t IRectangles::GetOrientation ( );
__declspec(implementation_key(9153)) void IRectangles::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9154)) _bstr_t IRectangles::GetText ( );
__declspec(implementation_key(9155)) void IRectangles::PutText ( _bstr_t RHS );
__declspec(implementation_key(9156)) _variant_t IRectangles::GetVerticalAlignment ( );
__declspec(implementation_key(9157)) void IRectangles::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9158)) long IRectangles::GetReadingOrder ( );
__declspec(implementation_key(9159)) void IRectangles::PutReadingOrder ( long RHS );
__declspec(implementation_key(9160)) BorderPtr IRectangles::GetBorder ( );
__declspec(implementation_key(9161)) InteriorPtr IRectangles::GetInterior ( );
__declspec(implementation_key(9162)) VARIANT_BOOL IRectangles::GetShadow ( );
__declspec(implementation_key(9163)) void IRectangles::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9164)) VARIANT_BOOL IRectangles::GetRoundedCorners ( );
__declspec(implementation_key(9165)) void IRectangles::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(9166)) RectanglePtr IRectangles::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9167)) long IRectangles::GetCount ( );
__declspec(implementation_key(9168)) GroupObjectPtr IRectangles::Group ( );
__declspec(implementation_key(9169)) IDispatchPtr IRectangles::Item ( const _variant_t & Index );
__declspec(implementation_key(9170)) IUnknownPtr IRectangles::_NewEnum ( );
__declspec(implementation_key(9171)) _ApplicationPtr IOval::GetApplication ( );
__declspec(implementation_key(9172)) enum XlCreator IOval::GetCreator ( );
__declspec(implementation_key(9173)) IDispatchPtr IOval::GetParent ( );
__declspec(implementation_key(9174)) RangePtr IOval::GetBottomRightCell ( );
__declspec(implementation_key(9175)) _variant_t IOval::BringToFront ( );
__declspec(implementation_key(9176)) _variant_t IOval::Copy ( );
__declspec(implementation_key(9177)) _variant_t IOval::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9178)) _variant_t IOval::Cut ( );
__declspec(implementation_key(9179)) _variant_t IOval::Delete ( );
__declspec(implementation_key(9180)) IDispatchPtr IOval::Duplicate ( );
__declspec(implementation_key(9181)) VARIANT_BOOL IOval::GetEnabled ( );
__declspec(implementation_key(9182)) void IOval::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9183)) double IOval::GetHeight ( );
__declspec(implementation_key(9184)) void IOval::PutHeight ( double RHS );
__declspec(implementation_key(9185)) long IOval::GetIndex ( );
__declspec(implementation_key(9186)) double IOval::GetLeft ( );
__declspec(implementation_key(9187)) void IOval::PutLeft ( double RHS );
__declspec(implementation_key(9188)) VARIANT_BOOL IOval::GetLocked ( );
__declspec(implementation_key(9189)) void IOval::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9190)) _bstr_t IOval::GetName ( );
__declspec(implementation_key(9191)) void IOval::PutName ( _bstr_t RHS );
__declspec(implementation_key(9192)) _bstr_t IOval::GetOnAction ( );
__declspec(implementation_key(9193)) void IOval::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9194)) _variant_t IOval::GetPlacement ( );
__declspec(implementation_key(9195)) void IOval::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9196)) VARIANT_BOOL IOval::GetPrintObject ( );
__declspec(implementation_key(9197)) void IOval::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9198)) _variant_t IOval::Select ( const _variant_t & Replace );
__declspec(implementation_key(9199)) _variant_t IOval::SendToBack ( );
__declspec(implementation_key(9200)) double IOval::GetTop ( );
__declspec(implementation_key(9201)) void IOval::PutTop ( double RHS );
__declspec(implementation_key(9202)) RangePtr IOval::GetTopLeftCell ( );
__declspec(implementation_key(9203)) VARIANT_BOOL IOval::GetVisible ( );
__declspec(implementation_key(9204)) void IOval::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9205)) double IOval::GetWidth ( );
__declspec(implementation_key(9206)) void IOval::PutWidth ( double RHS );
__declspec(implementation_key(9207)) long IOval::GetZOrder ( );
__declspec(implementation_key(9208)) ShapeRangePtr IOval::GetShapeRange ( );
__declspec(implementation_key(9209)) VARIANT_BOOL IOval::GetAddIndent ( );
__declspec(implementation_key(9210)) void IOval::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9211)) _variant_t IOval::GetAutoScaleFont ( );
__declspec(implementation_key(9212)) void IOval::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9213)) VARIANT_BOOL IOval::GetAutoSize ( );
__declspec(implementation_key(9214)) void IOval::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9215)) _bstr_t IOval::GetCaption ( );
__declspec(implementation_key(9216)) void IOval::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9217)) CharactersPtr IOval::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9218)) _variant_t IOval::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9219)) FontPtr IOval::GetFont ( );
__declspec(implementation_key(9220)) _bstr_t IOval::GetFormula ( );
__declspec(implementation_key(9221)) void IOval::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9222)) _variant_t IOval::GetHorizontalAlignment ( );
__declspec(implementation_key(9223)) void IOval::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9224)) VARIANT_BOOL IOval::GetLockedText ( );
__declspec(implementation_key(9225)) void IOval::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9226)) _variant_t IOval::GetOrientation ( );
__declspec(implementation_key(9227)) void IOval::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9228)) _bstr_t IOval::GetText ( );
__declspec(implementation_key(9229)) void IOval::PutText ( _bstr_t RHS );
__declspec(implementation_key(9230)) _variant_t IOval::GetVerticalAlignment ( );
__declspec(implementation_key(9231)) void IOval::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9232)) long IOval::GetReadingOrder ( );
__declspec(implementation_key(9233)) void IOval::PutReadingOrder ( long RHS );
__declspec(implementation_key(9234)) BorderPtr IOval::GetBorder ( );
__declspec(implementation_key(9235)) InteriorPtr IOval::GetInterior ( );
__declspec(implementation_key(9236)) VARIANT_BOOL IOval::GetShadow ( );
__declspec(implementation_key(9237)) void IOval::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9238)) _ApplicationPtr IOvals::GetApplication ( );
__declspec(implementation_key(9239)) enum XlCreator IOvals::GetCreator ( );
__declspec(implementation_key(9240)) IDispatchPtr IOvals::GetParent ( );
__declspec(implementation_key(9241)) _variant_t IOvals::BringToFront ( );
__declspec(implementation_key(9242)) _variant_t IOvals::Copy ( );
__declspec(implementation_key(9243)) _variant_t IOvals::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9244)) _variant_t IOvals::Cut ( );
__declspec(implementation_key(9245)) _variant_t IOvals::Delete ( );
__declspec(implementation_key(9246)) IDispatchPtr IOvals::Duplicate ( );
__declspec(implementation_key(9247)) VARIANT_BOOL IOvals::GetEnabled ( );
__declspec(implementation_key(9248)) void IOvals::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9249)) double IOvals::GetHeight ( );
__declspec(implementation_key(9250)) void IOvals::PutHeight ( double RHS );
__declspec(implementation_key(9251)) double IOvals::GetLeft ( );
__declspec(implementation_key(9252)) void IOvals::PutLeft ( double RHS );
__declspec(implementation_key(9253)) VARIANT_BOOL IOvals::GetLocked ( );
__declspec(implementation_key(9254)) void IOvals::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9255)) _bstr_t IOvals::GetOnAction ( );
__declspec(implementation_key(9256)) void IOvals::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9257)) _variant_t IOvals::GetPlacement ( );
__declspec(implementation_key(9258)) void IOvals::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9259)) VARIANT_BOOL IOvals::GetPrintObject ( );
__declspec(implementation_key(9260)) void IOvals::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9261)) _variant_t IOvals::Select ( const _variant_t & Replace );
__declspec(implementation_key(9262)) _variant_t IOvals::SendToBack ( );
__declspec(implementation_key(9263)) double IOvals::GetTop ( );
__declspec(implementation_key(9264)) void IOvals::PutTop ( double RHS );
__declspec(implementation_key(9265)) VARIANT_BOOL IOvals::GetVisible ( );
__declspec(implementation_key(9266)) void IOvals::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9267)) double IOvals::GetWidth ( );
__declspec(implementation_key(9268)) void IOvals::PutWidth ( double RHS );
__declspec(implementation_key(9269)) long IOvals::GetZOrder ( );
__declspec(implementation_key(9270)) ShapeRangePtr IOvals::GetShapeRange ( );
__declspec(implementation_key(9271)) VARIANT_BOOL IOvals::GetAddIndent ( );
__declspec(implementation_key(9272)) void IOvals::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9273)) _variant_t IOvals::GetAutoScaleFont ( );
__declspec(implementation_key(9274)) void IOvals::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9275)) VARIANT_BOOL IOvals::GetAutoSize ( );
__declspec(implementation_key(9276)) void IOvals::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9277)) _bstr_t IOvals::GetCaption ( );
__declspec(implementation_key(9278)) void IOvals::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9279)) CharactersPtr IOvals::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9280)) _variant_t IOvals::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9281)) FontPtr IOvals::GetFont ( );
__declspec(implementation_key(9282)) _bstr_t IOvals::GetFormula ( );
__declspec(implementation_key(9283)) void IOvals::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9284)) _variant_t IOvals::GetHorizontalAlignment ( );
__declspec(implementation_key(9285)) void IOvals::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9286)) VARIANT_BOOL IOvals::GetLockedText ( );
__declspec(implementation_key(9287)) void IOvals::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9288)) _variant_t IOvals::GetOrientation ( );
__declspec(implementation_key(9289)) void IOvals::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9290)) _bstr_t IOvals::GetText ( );
__declspec(implementation_key(9291)) void IOvals::PutText ( _bstr_t RHS );
__declspec(implementation_key(9292)) _variant_t IOvals::GetVerticalAlignment ( );
__declspec(implementation_key(9293)) void IOvals::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9294)) long IOvals::GetReadingOrder ( );
__declspec(implementation_key(9295)) void IOvals::PutReadingOrder ( long RHS );
__declspec(implementation_key(9296)) BorderPtr IOvals::GetBorder ( );
__declspec(implementation_key(9297)) InteriorPtr IOvals::GetInterior ( );
__declspec(implementation_key(9298)) VARIANT_BOOL IOvals::GetShadow ( );
__declspec(implementation_key(9299)) void IOvals::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9300)) OvalPtr IOvals::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9301)) long IOvals::GetCount ( );
__declspec(implementation_key(9302)) GroupObjectPtr IOvals::Group ( );
__declspec(implementation_key(9303)) IDispatchPtr IOvals::Item ( const _variant_t & Index );
__declspec(implementation_key(9304)) IUnknownPtr IOvals::_NewEnum ( );
__declspec(implementation_key(9305)) _ApplicationPtr IArc::GetApplication ( );
__declspec(implementation_key(9306)) enum XlCreator IArc::GetCreator ( );
__declspec(implementation_key(9307)) IDispatchPtr IArc::GetParent ( );
__declspec(implementation_key(9308)) RangePtr IArc::GetBottomRightCell ( );
__declspec(implementation_key(9309)) _variant_t IArc::BringToFront ( );
__declspec(implementation_key(9310)) _variant_t IArc::Copy ( );
__declspec(implementation_key(9311)) _variant_t IArc::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9312)) _variant_t IArc::Cut ( );
__declspec(implementation_key(9313)) _variant_t IArc::Delete ( );
__declspec(implementation_key(9314)) IDispatchPtr IArc::Duplicate ( );
__declspec(implementation_key(9315)) VARIANT_BOOL IArc::GetEnabled ( );
__declspec(implementation_key(9316)) void IArc::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9317)) double IArc::GetHeight ( );
__declspec(implementation_key(9318)) void IArc::PutHeight ( double RHS );
__declspec(implementation_key(9319)) long IArc::GetIndex ( );
__declspec(implementation_key(9320)) double IArc::GetLeft ( );
__declspec(implementation_key(9321)) void IArc::PutLeft ( double RHS );
__declspec(implementation_key(9322)) VARIANT_BOOL IArc::GetLocked ( );
__declspec(implementation_key(9323)) void IArc::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9324)) _bstr_t IArc::GetName ( );
__declspec(implementation_key(9325)) void IArc::PutName ( _bstr_t RHS );
__declspec(implementation_key(9326)) _bstr_t IArc::GetOnAction ( );
__declspec(implementation_key(9327)) void IArc::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9328)) _variant_t IArc::GetPlacement ( );
__declspec(implementation_key(9329)) void IArc::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9330)) VARIANT_BOOL IArc::GetPrintObject ( );
__declspec(implementation_key(9331)) void IArc::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9332)) _variant_t IArc::Select ( const _variant_t & Replace );
__declspec(implementation_key(9333)) _variant_t IArc::SendToBack ( );
__declspec(implementation_key(9334)) double IArc::GetTop ( );
__declspec(implementation_key(9335)) void IArc::PutTop ( double RHS );
__declspec(implementation_key(9336)) RangePtr IArc::GetTopLeftCell ( );
__declspec(implementation_key(9337)) VARIANT_BOOL IArc::GetVisible ( );
__declspec(implementation_key(9338)) void IArc::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9339)) double IArc::GetWidth ( );
__declspec(implementation_key(9340)) void IArc::PutWidth ( double RHS );
__declspec(implementation_key(9341)) long IArc::GetZOrder ( );
__declspec(implementation_key(9342)) ShapeRangePtr IArc::GetShapeRange ( );
__declspec(implementation_key(9343)) VARIANT_BOOL IArc::GetAddIndent ( );
__declspec(implementation_key(9344)) void IArc::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9345)) _variant_t IArc::GetAutoScaleFont ( );
__declspec(implementation_key(9346)) void IArc::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9347)) VARIANT_BOOL IArc::GetAutoSize ( );
__declspec(implementation_key(9348)) void IArc::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9349)) _bstr_t IArc::GetCaption ( );
__declspec(implementation_key(9350)) void IArc::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9351)) CharactersPtr IArc::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9352)) _variant_t IArc::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9353)) FontPtr IArc::GetFont ( );
__declspec(implementation_key(9354)) _bstr_t IArc::GetFormula ( );
__declspec(implementation_key(9355)) void IArc::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9356)) _variant_t IArc::GetHorizontalAlignment ( );
__declspec(implementation_key(9357)) void IArc::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9358)) VARIANT_BOOL IArc::GetLockedText ( );
__declspec(implementation_key(9359)) void IArc::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9360)) _variant_t IArc::GetOrientation ( );
__declspec(implementation_key(9361)) void IArc::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9362)) _bstr_t IArc::GetText ( );
__declspec(implementation_key(9363)) void IArc::PutText ( _bstr_t RHS );
__declspec(implementation_key(9364)) _variant_t IArc::GetVerticalAlignment ( );
__declspec(implementation_key(9365)) void IArc::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9366)) long IArc::GetReadingOrder ( );
__declspec(implementation_key(9367)) void IArc::PutReadingOrder ( long RHS );
__declspec(implementation_key(9368)) BorderPtr IArc::GetBorder ( );
__declspec(implementation_key(9369)) InteriorPtr IArc::GetInterior ( );
__declspec(implementation_key(9370)) _ApplicationPtr IArcs::GetApplication ( );
__declspec(implementation_key(9371)) enum XlCreator IArcs::GetCreator ( );
__declspec(implementation_key(9372)) IDispatchPtr IArcs::GetParent ( );
__declspec(implementation_key(9373)) _variant_t IArcs::BringToFront ( );
__declspec(implementation_key(9374)) _variant_t IArcs::Copy ( );
__declspec(implementation_key(9375)) _variant_t IArcs::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9376)) _variant_t IArcs::Cut ( );
__declspec(implementation_key(9377)) _variant_t IArcs::Delete ( );
__declspec(implementation_key(9378)) IDispatchPtr IArcs::Duplicate ( );
__declspec(implementation_key(9379)) VARIANT_BOOL IArcs::GetEnabled ( );
__declspec(implementation_key(9380)) void IArcs::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9381)) double IArcs::GetHeight ( );
__declspec(implementation_key(9382)) void IArcs::PutHeight ( double RHS );
__declspec(implementation_key(9383)) double IArcs::GetLeft ( );
__declspec(implementation_key(9384)) void IArcs::PutLeft ( double RHS );
__declspec(implementation_key(9385)) VARIANT_BOOL IArcs::GetLocked ( );
__declspec(implementation_key(9386)) void IArcs::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9387)) _bstr_t IArcs::GetOnAction ( );
__declspec(implementation_key(9388)) void IArcs::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9389)) _variant_t IArcs::GetPlacement ( );
__declspec(implementation_key(9390)) void IArcs::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9391)) VARIANT_BOOL IArcs::GetPrintObject ( );
__declspec(implementation_key(9392)) void IArcs::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9393)) _variant_t IArcs::Select ( const _variant_t & Replace );
__declspec(implementation_key(9394)) _variant_t IArcs::SendToBack ( );
__declspec(implementation_key(9395)) double IArcs::GetTop ( );
__declspec(implementation_key(9396)) void IArcs::PutTop ( double RHS );
__declspec(implementation_key(9397)) VARIANT_BOOL IArcs::GetVisible ( );
__declspec(implementation_key(9398)) void IArcs::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9399)) double IArcs::GetWidth ( );
__declspec(implementation_key(9400)) void IArcs::PutWidth ( double RHS );
__declspec(implementation_key(9401)) long IArcs::GetZOrder ( );
__declspec(implementation_key(9402)) ShapeRangePtr IArcs::GetShapeRange ( );
__declspec(implementation_key(9403)) VARIANT_BOOL IArcs::GetAddIndent ( );
__declspec(implementation_key(9404)) void IArcs::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9405)) _variant_t IArcs::GetAutoScaleFont ( );
__declspec(implementation_key(9406)) void IArcs::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9407)) VARIANT_BOOL IArcs::GetAutoSize ( );
__declspec(implementation_key(9408)) void IArcs::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9409)) _bstr_t IArcs::GetCaption ( );
__declspec(implementation_key(9410)) void IArcs::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9411)) CharactersPtr IArcs::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9412)) _variant_t IArcs::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9413)) FontPtr IArcs::GetFont ( );
__declspec(implementation_key(9414)) _bstr_t IArcs::GetFormula ( );
__declspec(implementation_key(9415)) void IArcs::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9416)) _variant_t IArcs::GetHorizontalAlignment ( );
__declspec(implementation_key(9417)) void IArcs::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9418)) VARIANT_BOOL IArcs::GetLockedText ( );
__declspec(implementation_key(9419)) void IArcs::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9420)) _variant_t IArcs::GetOrientation ( );
__declspec(implementation_key(9421)) void IArcs::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9422)) _bstr_t IArcs::GetText ( );
__declspec(implementation_key(9423)) void IArcs::PutText ( _bstr_t RHS );
__declspec(implementation_key(9424)) _variant_t IArcs::GetVerticalAlignment ( );
__declspec(implementation_key(9425)) void IArcs::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9426)) long IArcs::GetReadingOrder ( );
__declspec(implementation_key(9427)) void IArcs::PutReadingOrder ( long RHS );
__declspec(implementation_key(9428)) BorderPtr IArcs::GetBorder ( );
__declspec(implementation_key(9429)) InteriorPtr IArcs::GetInterior ( );
__declspec(implementation_key(9430)) ArcPtr IArcs::Add ( double X1, double Y1, double X2, double Y2 );
__declspec(implementation_key(9431)) long IArcs::GetCount ( );
__declspec(implementation_key(9432)) GroupObjectPtr IArcs::Group ( );
__declspec(implementation_key(9433)) IDispatchPtr IArcs::Item ( const _variant_t & Index );
__declspec(implementation_key(9434)) IUnknownPtr IArcs::_NewEnum ( );
__declspec(implementation_key(9435)) _ApplicationPtr _IOLEObject::GetApplication ( );
__declspec(implementation_key(9436)) enum XlCreator _IOLEObject::GetCreator ( );
__declspec(implementation_key(9437)) IDispatchPtr _IOLEObject::GetParent ( );
__declspec(implementation_key(9438)) RangePtr _IOLEObject::GetBottomRightCell ( );
__declspec(implementation_key(9439)) _variant_t _IOLEObject::BringToFront ( );
__declspec(implementation_key(9440)) _variant_t _IOLEObject::Copy ( );
__declspec(implementation_key(9441)) _variant_t _IOLEObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9442)) _variant_t _IOLEObject::Cut ( );
__declspec(implementation_key(9443)) _variant_t _IOLEObject::Delete ( );
__declspec(implementation_key(9444)) IDispatchPtr _IOLEObject::Duplicate ( );
__declspec(implementation_key(9445)) VARIANT_BOOL _IOLEObject::GetEnabled ( );
__declspec(implementation_key(9446)) void _IOLEObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9447)) double _IOLEObject::GetHeight ( );
__declspec(implementation_key(9448)) void _IOLEObject::PutHeight ( double RHS );
__declspec(implementation_key(9449)) long _IOLEObject::GetIndex ( );
__declspec(implementation_key(9450)) double _IOLEObject::GetLeft ( );
__declspec(implementation_key(9451)) void _IOLEObject::PutLeft ( double RHS );
__declspec(implementation_key(9452)) VARIANT_BOOL _IOLEObject::GetLocked ( );
__declspec(implementation_key(9453)) void _IOLEObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9454)) _bstr_t _IOLEObject::GetName ( );
__declspec(implementation_key(9455)) void _IOLEObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(9456)) _bstr_t _IOLEObject::GetOnAction ( );
__declspec(implementation_key(9457)) void _IOLEObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9458)) _variant_t _IOLEObject::GetPlacement ( );
__declspec(implementation_key(9459)) void _IOLEObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9460)) VARIANT_BOOL _IOLEObject::GetPrintObject ( );
__declspec(implementation_key(9461)) void _IOLEObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9462)) _variant_t _IOLEObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(9463)) _variant_t _IOLEObject::SendToBack ( );
__declspec(implementation_key(9464)) double _IOLEObject::GetTop ( );
__declspec(implementation_key(9465)) void _IOLEObject::PutTop ( double RHS );
__declspec(implementation_key(9466)) RangePtr _IOLEObject::GetTopLeftCell ( );
__declspec(implementation_key(9467)) VARIANT_BOOL _IOLEObject::GetVisible ( );
__declspec(implementation_key(9468)) void _IOLEObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9469)) double _IOLEObject::GetWidth ( );
__declspec(implementation_key(9470)) void _IOLEObject::PutWidth ( double RHS );
__declspec(implementation_key(9471)) long _IOLEObject::GetZOrder ( );
__declspec(implementation_key(9472)) ShapeRangePtr _IOLEObject::GetShapeRange ( );
__declspec(implementation_key(9473)) BorderPtr _IOLEObject::GetBorder ( );
__declspec(implementation_key(9474)) InteriorPtr _IOLEObject::GetInterior ( );
__declspec(implementation_key(9475)) VARIANT_BOOL _IOLEObject::GetShadow ( );
__declspec(implementation_key(9476)) void _IOLEObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9477)) _variant_t _IOLEObject::Activate ( );
__declspec(implementation_key(9478)) VARIANT_BOOL _IOLEObject::GetAutoLoad ( );
__declspec(implementation_key(9479)) void _IOLEObject::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(9480)) VARIANT_BOOL _IOLEObject::GetAutoUpdate ( );
__declspec(implementation_key(9481)) void _IOLEObject::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(9482)) IDispatchPtr _IOLEObject::GetObject ( );
__declspec(implementation_key(9483)) _variant_t _IOLEObject::GetOLEType ( );
__declspec(implementation_key(9484)) _bstr_t _IOLEObject::GetSourceName ( );
__declspec(implementation_key(9485)) void _IOLEObject::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(9486)) _variant_t _IOLEObject::Update ( );
__declspec(implementation_key(9487)) _variant_t _IOLEObject::Verb ( enum XlOLEVerb Verb );
__declspec(implementation_key(9488)) _bstr_t _IOLEObject::GetLinkedCell ( );
__declspec(implementation_key(9489)) void _IOLEObject::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(9490)) _bstr_t _IOLEObject::GetListFillRange ( );
__declspec(implementation_key(9491)) void _IOLEObject::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(9492)) _bstr_t _IOLEObject::GetprogID ( );
__declspec(implementation_key(9493)) _bstr_t _IOLEObject::GetAltHTML ( );
__declspec(implementation_key(9494)) void _IOLEObject::PutAltHTML ( _bstr_t RHS );
__declspec(implementation_key(9495)) _ApplicationPtr ITextBox::GetApplication ( );
__declspec(implementation_key(9496)) enum XlCreator ITextBox::GetCreator ( );
__declspec(implementation_key(9497)) IDispatchPtr ITextBox::GetParent ( );
__declspec(implementation_key(9498)) RangePtr ITextBox::GetBottomRightCell ( );
__declspec(implementation_key(9499)) _variant_t ITextBox::BringToFront ( );
__declspec(implementation_key(9500)) _variant_t ITextBox::Copy ( );
__declspec(implementation_key(9501)) _variant_t ITextBox::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9502)) _variant_t ITextBox::Cut ( );
__declspec(implementation_key(9503)) _variant_t ITextBox::Delete ( );
__declspec(implementation_key(9504)) IDispatchPtr ITextBox::Duplicate ( );
__declspec(implementation_key(9505)) VARIANT_BOOL ITextBox::GetEnabled ( );
__declspec(implementation_key(9506)) void ITextBox::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9507)) double ITextBox::GetHeight ( );
__declspec(implementation_key(9508)) void ITextBox::PutHeight ( double RHS );
__declspec(implementation_key(9509)) long ITextBox::GetIndex ( );
__declspec(implementation_key(9510)) double ITextBox::GetLeft ( );
__declspec(implementation_key(9511)) void ITextBox::PutLeft ( double RHS );
__declspec(implementation_key(9512)) VARIANT_BOOL ITextBox::GetLocked ( );
__declspec(implementation_key(9513)) void ITextBox::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9514)) _bstr_t ITextBox::GetName ( );
__declspec(implementation_key(9515)) void ITextBox::PutName ( _bstr_t RHS );
__declspec(implementation_key(9516)) _bstr_t ITextBox::GetOnAction ( );
__declspec(implementation_key(9517)) void ITextBox::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9518)) _variant_t ITextBox::GetPlacement ( );
__declspec(implementation_key(9519)) void ITextBox::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9520)) VARIANT_BOOL ITextBox::GetPrintObject ( );
__declspec(implementation_key(9521)) void ITextBox::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9522)) _variant_t ITextBox::Select ( const _variant_t & Replace );
__declspec(implementation_key(9523)) _variant_t ITextBox::SendToBack ( );
__declspec(implementation_key(9524)) double ITextBox::GetTop ( );
__declspec(implementation_key(9525)) void ITextBox::PutTop ( double RHS );
__declspec(implementation_key(9526)) RangePtr ITextBox::GetTopLeftCell ( );
__declspec(implementation_key(9527)) VARIANT_BOOL ITextBox::GetVisible ( );
__declspec(implementation_key(9528)) void ITextBox::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9529)) double ITextBox::GetWidth ( );
__declspec(implementation_key(9530)) void ITextBox::PutWidth ( double RHS );
__declspec(implementation_key(9531)) long ITextBox::GetZOrder ( );
__declspec(implementation_key(9532)) ShapeRangePtr ITextBox::GetShapeRange ( );
__declspec(implementation_key(9533)) VARIANT_BOOL ITextBox::GetAddIndent ( );
__declspec(implementation_key(9534)) void ITextBox::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9535)) _variant_t ITextBox::GetAutoScaleFont ( );
__declspec(implementation_key(9536)) void ITextBox::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9537)) VARIANT_BOOL ITextBox::GetAutoSize ( );
__declspec(implementation_key(9538)) void ITextBox::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9539)) _bstr_t ITextBox::GetCaption ( );
__declspec(implementation_key(9540)) void ITextBox::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9541)) CharactersPtr ITextBox::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9542)) _variant_t ITextBox::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9543)) FontPtr ITextBox::GetFont ( );
__declspec(implementation_key(9544)) _bstr_t ITextBox::GetFormula ( );
__declspec(implementation_key(9545)) void ITextBox::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9546)) _variant_t ITextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(9547)) void ITextBox::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9548)) VARIANT_BOOL ITextBox::GetLockedText ( );
__declspec(implementation_key(9549)) void ITextBox::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9550)) _variant_t ITextBox::GetOrientation ( );
__declspec(implementation_key(9551)) void ITextBox::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9552)) _bstr_t ITextBox::GetText ( );
__declspec(implementation_key(9553)) void ITextBox::PutText ( _bstr_t RHS );
__declspec(implementation_key(9554)) _variant_t ITextBox::GetVerticalAlignment ( );
__declspec(implementation_key(9555)) void ITextBox::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9556)) long ITextBox::GetReadingOrder ( );
__declspec(implementation_key(9557)) void ITextBox::PutReadingOrder ( long RHS );
__declspec(implementation_key(9558)) BorderPtr ITextBox::GetBorder ( );
__declspec(implementation_key(9559)) InteriorPtr ITextBox::GetInterior ( );
__declspec(implementation_key(9560)) VARIANT_BOOL ITextBox::GetRoundedCorners ( );
__declspec(implementation_key(9561)) void ITextBox::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(9562)) VARIANT_BOOL ITextBox::GetShadow ( );
__declspec(implementation_key(9563)) void ITextBox::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9564)) _ApplicationPtr ITextBoxes::GetApplication ( );
__declspec(implementation_key(9565)) enum XlCreator ITextBoxes::GetCreator ( );
__declspec(implementation_key(9566)) IDispatchPtr ITextBoxes::GetParent ( );
__declspec(implementation_key(9567)) _variant_t ITextBoxes::BringToFront ( );
__declspec(implementation_key(9568)) _variant_t ITextBoxes::Copy ( );
__declspec(implementation_key(9569)) _variant_t ITextBoxes::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9570)) _variant_t ITextBoxes::Cut ( );
__declspec(implementation_key(9571)) _variant_t ITextBoxes::Delete ( );
__declspec(implementation_key(9572)) IDispatchPtr ITextBoxes::Duplicate ( );
__declspec(implementation_key(9573)) VARIANT_BOOL ITextBoxes::GetEnabled ( );
__declspec(implementation_key(9574)) void ITextBoxes::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9575)) double ITextBoxes::GetHeight ( );
__declspec(implementation_key(9576)) void ITextBoxes::PutHeight ( double RHS );
__declspec(implementation_key(9577)) double ITextBoxes::GetLeft ( );
__declspec(implementation_key(9578)) void ITextBoxes::PutLeft ( double RHS );
__declspec(implementation_key(9579)) VARIANT_BOOL ITextBoxes::GetLocked ( );
__declspec(implementation_key(9580)) void ITextBoxes::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9581)) _bstr_t ITextBoxes::GetOnAction ( );
__declspec(implementation_key(9582)) void ITextBoxes::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9583)) _variant_t ITextBoxes::GetPlacement ( );
__declspec(implementation_key(9584)) void ITextBoxes::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9585)) VARIANT_BOOL ITextBoxes::GetPrintObject ( );
__declspec(implementation_key(9586)) void ITextBoxes::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9587)) _variant_t ITextBoxes::Select ( const _variant_t & Replace );
__declspec(implementation_key(9588)) _variant_t ITextBoxes::SendToBack ( );
__declspec(implementation_key(9589)) double ITextBoxes::GetTop ( );
__declspec(implementation_key(9590)) void ITextBoxes::PutTop ( double RHS );
__declspec(implementation_key(9591)) VARIANT_BOOL ITextBoxes::GetVisible ( );
__declspec(implementation_key(9592)) void ITextBoxes::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9593)) double ITextBoxes::GetWidth ( );
__declspec(implementation_key(9594)) void ITextBoxes::PutWidth ( double RHS );
__declspec(implementation_key(9595)) long ITextBoxes::GetZOrder ( );
__declspec(implementation_key(9596)) ShapeRangePtr ITextBoxes::GetShapeRange ( );
__declspec(implementation_key(9597)) VARIANT_BOOL ITextBoxes::GetAddIndent ( );
__declspec(implementation_key(9598)) void ITextBoxes::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9599)) _variant_t ITextBoxes::GetAutoScaleFont ( );
__declspec(implementation_key(9600)) void ITextBoxes::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9601)) VARIANT_BOOL ITextBoxes::GetAutoSize ( );
__declspec(implementation_key(9602)) void ITextBoxes::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9603)) _bstr_t ITextBoxes::GetCaption ( );
__declspec(implementation_key(9604)) void ITextBoxes::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9605)) CharactersPtr ITextBoxes::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9606)) _variant_t ITextBoxes::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9607)) FontPtr ITextBoxes::GetFont ( );
__declspec(implementation_key(9608)) _bstr_t ITextBoxes::GetFormula ( );
__declspec(implementation_key(9609)) void ITextBoxes::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9610)) _variant_t ITextBoxes::GetHorizontalAlignment ( );
__declspec(implementation_key(9611)) void ITextBoxes::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9612)) VARIANT_BOOL ITextBoxes::GetLockedText ( );
__declspec(implementation_key(9613)) void ITextBoxes::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9614)) _variant_t ITextBoxes::GetOrientation ( );
__declspec(implementation_key(9615)) void ITextBoxes::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9616)) _bstr_t ITextBoxes::GetText ( );
__declspec(implementation_key(9617)) void ITextBoxes::PutText ( _bstr_t RHS );
__declspec(implementation_key(9618)) _variant_t ITextBoxes::GetVerticalAlignment ( );
__declspec(implementation_key(9619)) void ITextBoxes::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9620)) long ITextBoxes::GetReadingOrder ( );
__declspec(implementation_key(9621)) void ITextBoxes::PutReadingOrder ( long RHS );
__declspec(implementation_key(9622)) BorderPtr ITextBoxes::GetBorder ( );
__declspec(implementation_key(9623)) InteriorPtr ITextBoxes::GetInterior ( );
__declspec(implementation_key(9624)) VARIANT_BOOL ITextBoxes::GetRoundedCorners ( );
__declspec(implementation_key(9625)) void ITextBoxes::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(9626)) VARIANT_BOOL ITextBoxes::GetShadow ( );
__declspec(implementation_key(9627)) void ITextBoxes::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9628)) TextBoxPtr ITextBoxes::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9629)) long ITextBoxes::GetCount ( );
__declspec(implementation_key(9630)) GroupObjectPtr ITextBoxes::Group ( );
__declspec(implementation_key(9631)) IDispatchPtr ITextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(9632)) IUnknownPtr ITextBoxes::_NewEnum ( );
__declspec(implementation_key(9633)) _ApplicationPtr IPictures::GetApplication ( );
__declspec(implementation_key(9634)) enum XlCreator IPictures::GetCreator ( );
__declspec(implementation_key(9635)) IDispatchPtr IPictures::GetParent ( );
__declspec(implementation_key(9636)) _variant_t IPictures::BringToFront ( );
__declspec(implementation_key(9637)) _variant_t IPictures::Copy ( );
__declspec(implementation_key(9638)) _variant_t IPictures::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9639)) _variant_t IPictures::Cut ( );
__declspec(implementation_key(9640)) _variant_t IPictures::Delete ( );
__declspec(implementation_key(9641)) IDispatchPtr IPictures::Duplicate ( );
__declspec(implementation_key(9642)) VARIANT_BOOL IPictures::GetEnabled ( );
__declspec(implementation_key(9643)) void IPictures::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9644)) double IPictures::GetHeight ( );
__declspec(implementation_key(9645)) void IPictures::PutHeight ( double RHS );
__declspec(implementation_key(9646)) double IPictures::GetLeft ( );
__declspec(implementation_key(9647)) void IPictures::PutLeft ( double RHS );
__declspec(implementation_key(9648)) VARIANT_BOOL IPictures::GetLocked ( );
__declspec(implementation_key(9649)) void IPictures::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9650)) _bstr_t IPictures::GetOnAction ( );
__declspec(implementation_key(9651)) void IPictures::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9652)) _variant_t IPictures::GetPlacement ( );
__declspec(implementation_key(9653)) void IPictures::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9654)) VARIANT_BOOL IPictures::GetPrintObject ( );
__declspec(implementation_key(9655)) void IPictures::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9656)) _variant_t IPictures::Select ( const _variant_t & Replace );
__declspec(implementation_key(9657)) _variant_t IPictures::SendToBack ( );
__declspec(implementation_key(9658)) double IPictures::GetTop ( );
__declspec(implementation_key(9659)) void IPictures::PutTop ( double RHS );
__declspec(implementation_key(9660)) VARIANT_BOOL IPictures::GetVisible ( );
__declspec(implementation_key(9661)) void IPictures::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9662)) double IPictures::GetWidth ( );
__declspec(implementation_key(9663)) void IPictures::PutWidth ( double RHS );
__declspec(implementation_key(9664)) long IPictures::GetZOrder ( );
__declspec(implementation_key(9665)) ShapeRangePtr IPictures::GetShapeRange ( );
__declspec(implementation_key(9666)) BorderPtr IPictures::GetBorder ( );
__declspec(implementation_key(9667)) InteriorPtr IPictures::GetInterior ( );
__declspec(implementation_key(9668)) VARIANT_BOOL IPictures::GetShadow ( );
__declspec(implementation_key(9669)) void IPictures::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9670)) _bstr_t IPictures::GetFormula ( );
__declspec(implementation_key(9671)) void IPictures::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9672)) PicturePtr IPictures::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(9673)) long IPictures::GetCount ( );
__declspec(implementation_key(9674)) GroupObjectPtr IPictures::Group ( );
__declspec(implementation_key(9675)) PicturePtr IPictures::Insert ( _bstr_t Filename, const _variant_t & Converter );
__declspec(implementation_key(9676)) IDispatchPtr IPictures::Item ( const _variant_t & Index );
__declspec(implementation_key(9677)) IUnknownPtr IPictures::_NewEnum ( );
__declspec(implementation_key(9678)) PicturePtr IPictures::Paste ( const _variant_t & Link );
__declspec(implementation_key(9679)) _ApplicationPtr IDrawing::GetApplication ( );
__declspec(implementation_key(9680)) enum XlCreator IDrawing::GetCreator ( );
__declspec(implementation_key(9681)) IDispatchPtr IDrawing::GetParent ( );
__declspec(implementation_key(9682)) RangePtr IDrawing::GetBottomRightCell ( );
__declspec(implementation_key(9683)) _variant_t IDrawing::BringToFront ( );
__declspec(implementation_key(9684)) _variant_t IDrawing::Copy ( );
__declspec(implementation_key(9685)) _variant_t IDrawing::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9686)) _variant_t IDrawing::Cut ( );
__declspec(implementation_key(9687)) _variant_t IDrawing::Delete ( );
__declspec(implementation_key(9688)) IDispatchPtr IDrawing::Duplicate ( );
__declspec(implementation_key(9689)) VARIANT_BOOL IDrawing::GetEnabled ( );
__declspec(implementation_key(9690)) void IDrawing::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9691)) double IDrawing::GetHeight ( );
__declspec(implementation_key(9692)) void IDrawing::PutHeight ( double RHS );
__declspec(implementation_key(9693)) long IDrawing::GetIndex ( );
__declspec(implementation_key(9694)) double IDrawing::GetLeft ( );
__declspec(implementation_key(9695)) void IDrawing::PutLeft ( double RHS );
__declspec(implementation_key(9696)) VARIANT_BOOL IDrawing::GetLocked ( );
__declspec(implementation_key(9697)) void IDrawing::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9698)) _bstr_t IDrawing::GetName ( );
__declspec(implementation_key(9699)) void IDrawing::PutName ( _bstr_t RHS );
__declspec(implementation_key(9700)) _bstr_t IDrawing::GetOnAction ( );
__declspec(implementation_key(9701)) void IDrawing::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9702)) _variant_t IDrawing::GetPlacement ( );
__declspec(implementation_key(9703)) void IDrawing::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9704)) VARIANT_BOOL IDrawing::GetPrintObject ( );
__declspec(implementation_key(9705)) void IDrawing::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9706)) _variant_t IDrawing::Select ( const _variant_t & Replace );
__declspec(implementation_key(9707)) _variant_t IDrawing::SendToBack ( );
__declspec(implementation_key(9708)) double IDrawing::GetTop ( );
__declspec(implementation_key(9709)) void IDrawing::PutTop ( double RHS );
__declspec(implementation_key(9710)) RangePtr IDrawing::GetTopLeftCell ( );
__declspec(implementation_key(9711)) VARIANT_BOOL IDrawing::GetVisible ( );
__declspec(implementation_key(9712)) void IDrawing::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9713)) double IDrawing::GetWidth ( );
__declspec(implementation_key(9714)) void IDrawing::PutWidth ( double RHS );
__declspec(implementation_key(9715)) long IDrawing::GetZOrder ( );
__declspec(implementation_key(9716)) ShapeRangePtr IDrawing::GetShapeRange ( );
__declspec(implementation_key(9717)) VARIANT_BOOL IDrawing::GetAddIndent ( );
__declspec(implementation_key(9718)) void IDrawing::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9719)) _variant_t IDrawing::GetAutoScaleFont ( );
__declspec(implementation_key(9720)) void IDrawing::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9721)) VARIANT_BOOL IDrawing::GetAutoSize ( );
__declspec(implementation_key(9722)) void IDrawing::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9723)) _bstr_t IDrawing::GetCaption ( );
__declspec(implementation_key(9724)) void IDrawing::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9725)) CharactersPtr IDrawing::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9726)) _variant_t IDrawing::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9727)) FontPtr IDrawing::GetFont ( );
__declspec(implementation_key(9728)) _bstr_t IDrawing::GetFormula ( );
__declspec(implementation_key(9729)) void IDrawing::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9730)) _variant_t IDrawing::GetHorizontalAlignment ( );
__declspec(implementation_key(9731)) void IDrawing::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9732)) VARIANT_BOOL IDrawing::GetLockedText ( );
__declspec(implementation_key(9733)) void IDrawing::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9734)) _variant_t IDrawing::GetOrientation ( );
__declspec(implementation_key(9735)) void IDrawing::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9736)) _bstr_t IDrawing::GetText ( );
__declspec(implementation_key(9737)) void IDrawing::PutText ( _bstr_t RHS );
__declspec(implementation_key(9738)) _variant_t IDrawing::GetVerticalAlignment ( );
__declspec(implementation_key(9739)) void IDrawing::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9740)) long IDrawing::GetReadingOrder ( );
__declspec(implementation_key(9741)) void IDrawing::PutReadingOrder ( long RHS );
__declspec(implementation_key(9742)) BorderPtr IDrawing::GetBorder ( );
__declspec(implementation_key(9743)) InteriorPtr IDrawing::GetInterior ( );
__declspec(implementation_key(9744)) VARIANT_BOOL IDrawing::GetShadow ( );
__declspec(implementation_key(9745)) void IDrawing::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9746)) _variant_t IDrawing::AddVertex ( double Left, double Top );
__declspec(implementation_key(9747)) _variant_t IDrawing::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(9748)) _variant_t IDrawing::GetVertices ( const _variant_t & Index1, const _variant_t & Index2 );
__declspec(implementation_key(9749)) _ApplicationPtr IDrawings::GetApplication ( );
__declspec(implementation_key(9750)) enum XlCreator IDrawings::GetCreator ( );
__declspec(implementation_key(9751)) IDispatchPtr IDrawings::GetParent ( );
__declspec(implementation_key(9752)) _variant_t IDrawings::BringToFront ( );
__declspec(implementation_key(9753)) _variant_t IDrawings::Copy ( );
__declspec(implementation_key(9754)) _variant_t IDrawings::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(9755)) _variant_t IDrawings::Cut ( );
__declspec(implementation_key(9756)) _variant_t IDrawings::Delete ( );
__declspec(implementation_key(9757)) IDispatchPtr IDrawings::Duplicate ( );
__declspec(implementation_key(9758)) VARIANT_BOOL IDrawings::GetEnabled ( );
__declspec(implementation_key(9759)) void IDrawings::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(9760)) double IDrawings::GetHeight ( );
__declspec(implementation_key(9761)) void IDrawings::PutHeight ( double RHS );
__declspec(implementation_key(9762)) double IDrawings::GetLeft ( );
__declspec(implementation_key(9763)) void IDrawings::PutLeft ( double RHS );
__declspec(implementation_key(9764)) VARIANT_BOOL IDrawings::GetLocked ( );
__declspec(implementation_key(9765)) void IDrawings::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(9766)) _bstr_t IDrawings::GetOnAction ( );
__declspec(implementation_key(9767)) void IDrawings::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(9768)) _variant_t IDrawings::GetPlacement ( );
__declspec(implementation_key(9769)) void IDrawings::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(9770)) VARIANT_BOOL IDrawings::GetPrintObject ( );
__declspec(implementation_key(9771)) void IDrawings::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(9772)) _variant_t IDrawings::Select ( const _variant_t & Replace );
__declspec(implementation_key(9773)) _variant_t IDrawings::SendToBack ( );
__declspec(implementation_key(9774)) double IDrawings::GetTop ( );
__declspec(implementation_key(9775)) void IDrawings::PutTop ( double RHS );
__declspec(implementation_key(9776)) VARIANT_BOOL IDrawings::GetVisible ( );
__declspec(implementation_key(9777)) void IDrawings::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(9778)) double IDrawings::GetWidth ( );
__declspec(implementation_key(9779)) void IDrawings::PutWidth ( double RHS );
__declspec(implementation_key(9780)) long IDrawings::GetZOrder ( );
__declspec(implementation_key(9781)) ShapeRangePtr IDrawings::GetShapeRange ( );
__declspec(implementation_key(9782)) VARIANT_BOOL IDrawings::GetAddIndent ( );
__declspec(implementation_key(9783)) void IDrawings::PutAddIndent ( VARIANT_BOOL RHS );
__declspec(implementation_key(9784)) _variant_t IDrawings::GetAutoScaleFont ( );
__declspec(implementation_key(9785)) void IDrawings::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(9786)) VARIANT_BOOL IDrawings::GetAutoSize ( );
__declspec(implementation_key(9787)) void IDrawings::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(9788)) _bstr_t IDrawings::GetCaption ( );
__declspec(implementation_key(9789)) void IDrawings::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(9790)) CharactersPtr IDrawings::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(9791)) _variant_t IDrawings::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(9792)) FontPtr IDrawings::GetFont ( );
__declspec(implementation_key(9793)) _bstr_t IDrawings::GetFormula ( );
__declspec(implementation_key(9794)) void IDrawings::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(9795)) _variant_t IDrawings::GetHorizontalAlignment ( );
__declspec(implementation_key(9796)) void IDrawings::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9797)) VARIANT_BOOL IDrawings::GetLockedText ( );
__declspec(implementation_key(9798)) void IDrawings::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(9799)) _variant_t IDrawings::GetOrientation ( );
__declspec(implementation_key(9800)) void IDrawings::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(9801)) _bstr_t IDrawings::GetText ( );
__declspec(implementation_key(9802)) void IDrawings::PutText ( _bstr_t RHS );
__declspec(implementation_key(9803)) _variant_t IDrawings::GetVerticalAlignment ( );
__declspec(implementation_key(9804)) void IDrawings::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(9805)) long IDrawings::GetReadingOrder ( );
__declspec(implementation_key(9806)) void IDrawings::PutReadingOrder ( long RHS );
__declspec(implementation_key(9807)) BorderPtr IDrawings::GetBorder ( );
__declspec(implementation_key(9808)) InteriorPtr IDrawings::GetInterior ( );
__declspec(implementation_key(9809)) VARIANT_BOOL IDrawings::GetShadow ( );
__declspec(implementation_key(9810)) void IDrawings::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(9811)) _variant_t IDrawings::Reshape ( long Vertex, VARIANT_BOOL Insert, const _variant_t & Left, const _variant_t & Top );
__declspec(implementation_key(9812)) DrawingPtr IDrawings::Add ( double X1, double Y1, double X2, double Y2, VARIANT_BOOL Closed );
__declspec(implementation_key(9813)) long IDrawings::GetCount ( );
__declspec(implementation_key(9814)) GroupObjectPtr IDrawings::Group ( );
__declspec(implementation_key(9815)) IDispatchPtr IDrawings::Item ( const _variant_t & Index );
__declspec(implementation_key(9816)) IUnknownPtr IDrawings::_NewEnum ( );
__declspec(implementation_key(9817)) _ApplicationPtr IRoutingSlip::GetApplication ( );
__declspec(implementation_key(9818)) enum XlCreator IRoutingSlip::GetCreator ( );
__declspec(implementation_key(9819)) IDispatchPtr IRoutingSlip::GetParent ( );
__declspec(implementation_key(9820)) enum XlRoutingSlipDelivery IRoutingSlip::GetDelivery ( );
__declspec(implementation_key(9821)) void IRoutingSlip::PutDelivery ( enum XlRoutingSlipDelivery RHS );
__declspec(implementation_key(9822)) _variant_t IRoutingSlip::GetMessage ( );
__declspec(implementation_key(9823)) void IRoutingSlip::PutMessage ( const _variant_t & RHS );
__declspec(implementation_key(9824)) _variant_t IRoutingSlip::GetRecipients ( const _variant_t & Index );
__declspec(implementation_key(9825)) void IRoutingSlip::PutRecipients ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(9826)) _variant_t IRoutingSlip::Reset ( );
__declspec(implementation_key(9827)) VARIANT_BOOL IRoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(9828)) void IRoutingSlip::PutReturnWhenDone ( VARIANT_BOOL RHS );
__declspec(implementation_key(9829)) enum XlRoutingSlipStatus IRoutingSlip::GetStatus ( );
__declspec(implementation_key(9830)) _variant_t IRoutingSlip::GetSubject ( );
__declspec(implementation_key(9831)) void IRoutingSlip::PutSubject ( const _variant_t & RHS );
__declspec(implementation_key(9832)) VARIANT_BOOL IRoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(9833)) void IRoutingSlip::PutTrackStatus ( VARIANT_BOOL RHS );
__declspec(implementation_key(9834)) _ApplicationPtr IOutline::GetApplication ( );
__declspec(implementation_key(9835)) enum XlCreator IOutline::GetCreator ( );
__declspec(implementation_key(9836)) IDispatchPtr IOutline::GetParent ( );
__declspec(implementation_key(9837)) VARIANT_BOOL IOutline::GetAutomaticStyles ( );
__declspec(implementation_key(9838)) void IOutline::PutAutomaticStyles ( VARIANT_BOOL RHS );
__declspec(implementation_key(9839)) _variant_t IOutline::ShowLevels ( const _variant_t & RowLevels, const _variant_t & ColumnLevels );
__declspec(implementation_key(9840)) enum XlSummaryColumn IOutline::GetSummaryColumn ( );
__declspec(implementation_key(9841)) void IOutline::PutSummaryColumn ( enum XlSummaryColumn RHS );
__declspec(implementation_key(9842)) enum XlSummaryRow IOutline::GetSummaryRow ( );
__declspec(implementation_key(9843)) void IOutline::PutSummaryRow ( enum XlSummaryRow RHS );
__declspec(implementation_key(9844)) _ApplicationPtr IModule::GetApplication ( );
__declspec(implementation_key(9845)) enum XlCreator IModule::GetCreator ( );
__declspec(implementation_key(9846)) IDispatchPtr IModule::GetParent ( );
__declspec(implementation_key(9847)) HRESULT IModule::Activate ( long lcid );
__declspec(implementation_key(9848)) HRESULT IModule::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9849)) HRESULT IModule::Delete ( long lcid );
__declspec(implementation_key(9850)) _bstr_t IModule::GetCodeName ( );
__declspec(implementation_key(9851)) _bstr_t IModule::Get_CodeName ( );
__declspec(implementation_key(9852)) void IModule::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(9853)) long IModule::GetIndex ( long lcid );
__declspec(implementation_key(9854)) HRESULT IModule::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9855)) _bstr_t IModule::GetName ( );
__declspec(implementation_key(9856)) void IModule::PutName ( _bstr_t RHS );
__declspec(implementation_key(9857)) IDispatchPtr IModule::GetNext ( );
__declspec(implementation_key(9858)) _bstr_t IModule::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(9859)) void IModule::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9860)) _bstr_t IModule::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(9861)) void IModule::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9862)) _bstr_t IModule::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(9863)) void IModule::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9864)) PageSetupPtr IModule::GetPageSetup ( );
__declspec(implementation_key(9865)) IDispatchPtr IModule::GetPrevious ( );
__declspec(implementation_key(9866)) HRESULT IModule::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9867)) HRESULT IModule::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(9868)) VARIANT_BOOL IModule::GetProtectContents ( long lcid );
__declspec(implementation_key(9869)) VARIANT_BOOL IModule::GetProtectionMode ( long lcid );
__declspec(implementation_key(9870)) HRESULT IModule::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(9871)) HRESULT IModule::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9872)) HRESULT IModule::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(9873)) enum XlSheetVisibility IModule::GetVisible ( long lcid );
__declspec(implementation_key(9874)) void IModule::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(9875)) ShapesPtr IModule::GetShapes ( );
__declspec(implementation_key(9876)) _variant_t IModule::InsertFile ( const _variant_t & Filename, const _variant_t & Merge );
__declspec(implementation_key(9877)) HRESULT IModule::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout );
__declspec(implementation_key(9878)) HRESULT IModule::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(9879)) _ApplicationPtr IModules::GetApplication ( );
__declspec(implementation_key(9880)) enum XlCreator IModules::GetCreator ( );
__declspec(implementation_key(9881)) IDispatchPtr IModules::GetParent ( );
__declspec(implementation_key(9882)) ModulePtr IModules::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(9883)) HRESULT IModules::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9884)) long IModules::GetCount ( );
__declspec(implementation_key(9885)) HRESULT IModules::Delete ( long lcid );
__declspec(implementation_key(9886)) IDispatchPtr IModules::GetItem ( const _variant_t & Index );
__declspec(implementation_key(9887)) HRESULT IModules::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9888)) IUnknownPtr IModules::Get_NewEnum ( );
__declspec(implementation_key(9889)) HRESULT IModules::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9890)) HRESULT IModules::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9891)) HPageBreaksPtr IModules::GetHPageBreaks ( );
__declspec(implementation_key(9892)) VPageBreaksPtr IModules::GetVPageBreaks ( );
__declspec(implementation_key(9893)) _variant_t IModules::GetVisible ( long lcid );
__declspec(implementation_key(9894)) void IModules::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(9895)) IDispatchPtr IModules::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(9896)) HRESULT IModules::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9897)) _ApplicationPtr IDialogSheet::GetApplication ( );
__declspec(implementation_key(9898)) enum XlCreator IDialogSheet::GetCreator ( );
__declspec(implementation_key(9899)) IDispatchPtr IDialogSheet::GetParent ( );
__declspec(implementation_key(9900)) HRESULT IDialogSheet::Activate ( long lcid );
__declspec(implementation_key(9901)) HRESULT IDialogSheet::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9902)) HRESULT IDialogSheet::Delete ( long lcid );
__declspec(implementation_key(9903)) _bstr_t IDialogSheet::GetCodeName ( );
__declspec(implementation_key(9904)) _bstr_t IDialogSheet::Get_CodeName ( );
__declspec(implementation_key(9905)) void IDialogSheet::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(9906)) long IDialogSheet::GetIndex ( long lcid );
__declspec(implementation_key(9907)) HRESULT IDialogSheet::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(9908)) _bstr_t IDialogSheet::GetName ( );
__declspec(implementation_key(9909)) void IDialogSheet::PutName ( _bstr_t RHS );
__declspec(implementation_key(9910)) IDispatchPtr IDialogSheet::GetNext ( );
__declspec(implementation_key(9911)) _bstr_t IDialogSheet::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(9912)) void IDialogSheet::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9913)) _bstr_t IDialogSheet::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(9914)) void IDialogSheet::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9915)) _bstr_t IDialogSheet::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(9916)) void IDialogSheet::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(9917)) PageSetupPtr IDialogSheet::GetPageSetup ( );
__declspec(implementation_key(9918)) IDispatchPtr IDialogSheet::GetPrevious ( );
__declspec(implementation_key(9919)) HRESULT IDialogSheet::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(9920)) HRESULT IDialogSheet::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(9921)) HRESULT IDialogSheet::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(9922)) VARIANT_BOOL IDialogSheet::GetProtectContents ( long lcid );
__declspec(implementation_key(9923)) VARIANT_BOOL IDialogSheet::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(9924)) VARIANT_BOOL IDialogSheet::GetProtectionMode ( long lcid );
__declspec(implementation_key(9925)) VARIANT_BOOL IDialogSheet::GetProtectScenarios ( long lcid );
__declspec(implementation_key(9926)) HRESULT IDialogSheet::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(9927)) HRESULT IDialogSheet::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(9928)) HRESULT IDialogSheet::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(9929)) enum XlSheetVisibility IDialogSheet::GetVisible ( long lcid );
__declspec(implementation_key(9930)) void IDialogSheet::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(9931)) ShapesPtr IDialogSheet::GetShapes ( );
__declspec(implementation_key(9932)) IDispatchPtr IDialogSheet::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9933)) IDispatchPtr IDialogSheet::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9934)) VARIANT_BOOL IDialogSheet::GetEnableCalculation ( );
__declspec(implementation_key(9935)) void IDialogSheet::PutEnableCalculation ( VARIANT_BOOL RHS );
__declspec(implementation_key(9936)) IDispatchPtr IDialogSheet::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9937)) IDispatchPtr IDialogSheet::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9938)) HRESULT IDialogSheet::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(9939)) VARIANT_BOOL IDialogSheet::GetDisplayAutomaticPageBreaks ( long lcid );
__declspec(implementation_key(9940)) void IDialogSheet::PutDisplayAutomaticPageBreaks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9941)) IDispatchPtr IDialogSheet::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9942)) IDispatchPtr IDialogSheet::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9943)) IDispatchPtr IDialogSheet::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9944)) VARIANT_BOOL IDialogSheet::GetEnableAutoFilter ( long lcid );
__declspec(implementation_key(9945)) void IDialogSheet::PutEnableAutoFilter ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9946)) enum XlEnableSelection IDialogSheet::GetEnableSelection ( );
__declspec(implementation_key(9947)) void IDialogSheet::PutEnableSelection ( enum XlEnableSelection RHS );
__declspec(implementation_key(9948)) VARIANT_BOOL IDialogSheet::GetEnableOutlining ( long lcid );
__declspec(implementation_key(9949)) void IDialogSheet::PutEnableOutlining ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9950)) VARIANT_BOOL IDialogSheet::GetEnablePivotTable ( long lcid );
__declspec(implementation_key(9951)) void IDialogSheet::PutEnablePivotTable ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9952)) _variant_t IDialogSheet::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(9953)) _variant_t IDialogSheet::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(9954)) HRESULT IDialogSheet::ResetAllPageBreaks ( );
__declspec(implementation_key(9955)) IDispatchPtr IDialogSheet::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9956)) IDispatchPtr IDialogSheet::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9957)) IDispatchPtr IDialogSheet::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9958)) IDispatchPtr IDialogSheet::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9959)) IDispatchPtr IDialogSheet::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9960)) NamesPtr IDialogSheet::GetNames ( );
__declspec(implementation_key(9961)) IDispatchPtr IDialogSheet::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9962)) IDispatchPtr IDialogSheet::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9963)) IDispatchPtr IDialogSheet::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9964)) HRESULT IDialogSheet::Paste ( const _variant_t & Destination, const _variant_t & Link, long lcid );
__declspec(implementation_key(9965)) HRESULT IDialogSheet::_PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, long lcid );
__declspec(implementation_key(9966)) IDispatchPtr IDialogSheet::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9967)) IDispatchPtr IDialogSheet::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9968)) _bstr_t IDialogSheet::GetScrollArea ( );
__declspec(implementation_key(9969)) void IDialogSheet::PutScrollArea ( _bstr_t RHS );
__declspec(implementation_key(9970)) IDispatchPtr IDialogSheet::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9971)) IDispatchPtr IDialogSheet::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9972)) IDispatchPtr IDialogSheet::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(9973)) HPageBreaksPtr IDialogSheet::GetHPageBreaks ( );
__declspec(implementation_key(9974)) VPageBreaksPtr IDialogSheet::GetVPageBreaks ( );
__declspec(implementation_key(9975)) QueryTablesPtr IDialogSheet::GetQueryTables ( );
__declspec(implementation_key(9976)) VARIANT_BOOL IDialogSheet::GetDisplayPageBreaks ( );
__declspec(implementation_key(9977)) void IDialogSheet::PutDisplayPageBreaks ( VARIANT_BOOL RHS );
__declspec(implementation_key(9978)) CommentsPtr IDialogSheet::GetComments ( );
__declspec(implementation_key(9979)) HyperlinksPtr IDialogSheet::GetHyperlinks ( );
__declspec(implementation_key(9980)) HRESULT IDialogSheet::ClearCircles ( );
__declspec(implementation_key(9981)) HRESULT IDialogSheet::CircleInvalid ( );
__declspec(implementation_key(9982)) long IDialogSheet::Get_DisplayRightToLeft ( long lcid );
__declspec(implementation_key(9983)) void IDialogSheet::Put_DisplayRightToLeft ( long lcid, long RHS );
__declspec(implementation_key(9984)) AutoFilterPtr IDialogSheet::GetAutoFilter ( );
__declspec(implementation_key(9985)) VARIANT_BOOL IDialogSheet::GetDisplayRightToLeft ( long lcid );
__declspec(implementation_key(9986)) void IDialogSheet::PutDisplayRightToLeft ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(9987)) Office::ScriptsPtr IDialogSheet::GetScripts ( );
__declspec(implementation_key(9988)) HRESULT IDialogSheet::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(9989)) HRESULT IDialogSheet::_CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, const _variant_t & IgnoreFinalYaa, const _variant_t & SpellScript, long lcid );
__declspec(implementation_key(9990)) TabPtr IDialogSheet::GetTab ( );
__declspec(implementation_key(9991)) Office::IMsoEnvelopeVBPtr IDialogSheet::GetMailEnvelope ( );
__declspec(implementation_key(9992)) HRESULT IDialogSheet::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(9993)) CustomPropertiesPtr IDialogSheet::GetCustomProperties ( );
__declspec(implementation_key(9994)) SmartTagsPtr IDialogSheet::GetSmartTags ( );
__declspec(implementation_key(9995)) ProtectionPtr IDialogSheet::GetProtection ( );
__declspec(implementation_key(9996)) HRESULT IDialogSheet::PasteSpecial ( const _variant_t & Format, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & NoHTMLFormatting, long lcid );
__declspec(implementation_key(9997)) HRESULT IDialogSheet::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, const _variant_t & AllowFormattingCells, const _variant_t & AllowFormattingColumns, const _variant_t & AllowFormattingRows, const _variant_t & AllowInsertingColumns, const _variant_t & AllowInsertingRows, const _variant_t & AllowInsertingHyperlinks, const _variant_t & AllowDeletingColumns, const _variant_t & AllowDeletingRows, const _variant_t & AllowSorting, const _variant_t & AllowFiltering, const _variant_t & AllowUsingPivotTables );
__declspec(implementation_key(9998)) _variant_t IDialogSheet::GetDefaultButton ( );
__declspec(implementation_key(9999)) void IDialogSheet::PutDefaultButton ( const _variant_t & RHS );
__declspec(implementation_key(10000)) DialogFramePtr IDialogSheet::GetDialogFrame ( );
__declspec(implementation_key(10001)) IDispatchPtr IDialogSheet::EditBoxes ( const _variant_t & Index );
__declspec(implementation_key(10002)) _variant_t IDialogSheet::GetFocus ( );
__declspec(implementation_key(10003)) void IDialogSheet::PutFocus ( const _variant_t & RHS );
__declspec(implementation_key(10004)) VARIANT_BOOL IDialogSheet::Hide ( const _variant_t & Cancel );
__declspec(implementation_key(10005)) VARIANT_BOOL IDialogSheet::Show ( );
__declspec(implementation_key(10006)) _ApplicationPtr IDialogSheets::GetApplication ( );
__declspec(implementation_key(10007)) enum XlCreator IDialogSheets::GetCreator ( );
__declspec(implementation_key(10008)) IDispatchPtr IDialogSheets::GetParent ( );
__declspec(implementation_key(10009)) DialogSheetPtr IDialogSheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(10010)) HRESULT IDialogSheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(10011)) long IDialogSheets::GetCount ( );
__declspec(implementation_key(10012)) HRESULT IDialogSheets::Delete ( long lcid );
__declspec(implementation_key(10013)) IDispatchPtr IDialogSheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(10014)) HRESULT IDialogSheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(10015)) IUnknownPtr IDialogSheets::Get_NewEnum ( );
__declspec(implementation_key(10016)) HRESULT IDialogSheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(10017)) HRESULT IDialogSheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(10018)) HRESULT IDialogSheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(10019)) HPageBreaksPtr IDialogSheets::GetHPageBreaks ( );
__declspec(implementation_key(10020)) VPageBreaksPtr IDialogSheets::GetVPageBreaks ( );
__declspec(implementation_key(10021)) _variant_t IDialogSheets::GetVisible ( long lcid );
__declspec(implementation_key(10022)) void IDialogSheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(10023)) IDispatchPtr IDialogSheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10024)) HRESULT IDialogSheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(10025)) _ApplicationPtr IWorksheets::GetApplication ( );
__declspec(implementation_key(10026)) enum XlCreator IWorksheets::GetCreator ( );
__declspec(implementation_key(10027)) IDispatchPtr IWorksheets::GetParent ( );
__declspec(implementation_key(10028)) IDispatchPtr IWorksheets::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count, const _variant_t & Type, long lcid );
__declspec(implementation_key(10029)) HRESULT IWorksheets::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(10030)) long IWorksheets::GetCount ( );
__declspec(implementation_key(10031)) HRESULT IWorksheets::Delete ( long lcid );
__declspec(implementation_key(10032)) HRESULT IWorksheets::FillAcrossSheets ( struct Range * Range, enum XlFillWith Type, long lcid );
__declspec(implementation_key(10033)) IDispatchPtr IWorksheets::GetItem ( const _variant_t & Index );
__declspec(implementation_key(10034)) HRESULT IWorksheets::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(10035)) IUnknownPtr IWorksheets::Get_NewEnum ( );
__declspec(implementation_key(10036)) HRESULT IWorksheets::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(10037)) HRESULT IWorksheets::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(10038)) HRESULT IWorksheets::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(10039)) HPageBreaksPtr IWorksheets::GetHPageBreaks ( );
__declspec(implementation_key(10040)) VPageBreaksPtr IWorksheets::GetVPageBreaks ( );
__declspec(implementation_key(10041)) _variant_t IWorksheets::GetVisible ( long lcid );
__declspec(implementation_key(10042)) void IWorksheets::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(10043)) IDispatchPtr IWorksheets::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10044)) HRESULT IWorksheets::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(10045)) _ApplicationPtr IPageSetup::GetApplication ( );
__declspec(implementation_key(10046)) enum XlCreator IPageSetup::GetCreator ( );
__declspec(implementation_key(10047)) IDispatchPtr IPageSetup::GetParent ( );
__declspec(implementation_key(10048)) VARIANT_BOOL IPageSetup::GetBlackAndWhite ( );
__declspec(implementation_key(10049)) void IPageSetup::PutBlackAndWhite ( VARIANT_BOOL RHS );
__declspec(implementation_key(10050)) double IPageSetup::GetBottomMargin ( );
__declspec(implementation_key(10051)) void IPageSetup::PutBottomMargin ( double RHS );
__declspec(implementation_key(10052)) _bstr_t IPageSetup::GetCenterFooter ( );
__declspec(implementation_key(10053)) void IPageSetup::PutCenterFooter ( _bstr_t RHS );
__declspec(implementation_key(10054)) _bstr_t IPageSetup::GetCenterHeader ( );
__declspec(implementation_key(10055)) void IPageSetup::PutCenterHeader ( _bstr_t RHS );
__declspec(implementation_key(10056)) VARIANT_BOOL IPageSetup::GetCenterHorizontally ( );
__declspec(implementation_key(10057)) void IPageSetup::PutCenterHorizontally ( VARIANT_BOOL RHS );
__declspec(implementation_key(10058)) VARIANT_BOOL IPageSetup::GetCenterVertically ( );
__declspec(implementation_key(10059)) void IPageSetup::PutCenterVertically ( VARIANT_BOOL RHS );
__declspec(implementation_key(10060)) enum XlObjectSize IPageSetup::GetChartSize ( );
__declspec(implementation_key(10061)) void IPageSetup::PutChartSize ( enum XlObjectSize RHS );
__declspec(implementation_key(10062)) VARIANT_BOOL IPageSetup::GetDraft ( );
__declspec(implementation_key(10063)) void IPageSetup::PutDraft ( VARIANT_BOOL RHS );
__declspec(implementation_key(10064)) long IPageSetup::GetFirstPageNumber ( );
__declspec(implementation_key(10065)) void IPageSetup::PutFirstPageNumber ( long RHS );
__declspec(implementation_key(10066)) _variant_t IPageSetup::GetFitToPagesTall ( );
__declspec(implementation_key(10067)) void IPageSetup::PutFitToPagesTall ( const _variant_t & RHS );
__declspec(implementation_key(10068)) _variant_t IPageSetup::GetFitToPagesWide ( );
__declspec(implementation_key(10069)) void IPageSetup::PutFitToPagesWide ( const _variant_t & RHS );
__declspec(implementation_key(10070)) double IPageSetup::GetFooterMargin ( );
__declspec(implementation_key(10071)) void IPageSetup::PutFooterMargin ( double RHS );
__declspec(implementation_key(10072)) double IPageSetup::GetHeaderMargin ( );
__declspec(implementation_key(10073)) void IPageSetup::PutHeaderMargin ( double RHS );
__declspec(implementation_key(10074)) _bstr_t IPageSetup::GetLeftFooter ( );
__declspec(implementation_key(10075)) void IPageSetup::PutLeftFooter ( _bstr_t RHS );
__declspec(implementation_key(10076)) _bstr_t IPageSetup::GetLeftHeader ( );
__declspec(implementation_key(10077)) void IPageSetup::PutLeftHeader ( _bstr_t RHS );
__declspec(implementation_key(10078)) double IPageSetup::GetLeftMargin ( );
__declspec(implementation_key(10079)) void IPageSetup::PutLeftMargin ( double RHS );
__declspec(implementation_key(10080)) enum XlOrder IPageSetup::GetOrder ( );
__declspec(implementation_key(10081)) void IPageSetup::PutOrder ( enum XlOrder RHS );
__declspec(implementation_key(10082)) enum XlPageOrientation IPageSetup::GetOrientation ( );
__declspec(implementation_key(10083)) void IPageSetup::PutOrientation ( enum XlPageOrientation RHS );
__declspec(implementation_key(10084)) enum XlPaperSize IPageSetup::GetPaperSize ( );
__declspec(implementation_key(10085)) void IPageSetup::PutPaperSize ( enum XlPaperSize RHS );
__declspec(implementation_key(10086)) _bstr_t IPageSetup::GetPrintArea ( );
__declspec(implementation_key(10087)) void IPageSetup::PutPrintArea ( _bstr_t RHS );
__declspec(implementation_key(10088)) VARIANT_BOOL IPageSetup::GetPrintGridlines ( );
__declspec(implementation_key(10089)) void IPageSetup::PutPrintGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10090)) VARIANT_BOOL IPageSetup::GetPrintHeadings ( );
__declspec(implementation_key(10091)) void IPageSetup::PutPrintHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(10092)) VARIANT_BOOL IPageSetup::GetPrintNotes ( );
__declspec(implementation_key(10093)) void IPageSetup::PutPrintNotes ( VARIANT_BOOL RHS );
__declspec(implementation_key(10094)) _variant_t IPageSetup::GetPrintQuality ( const _variant_t & Index );
__declspec(implementation_key(10095)) void IPageSetup::PutPrintQuality ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(10096)) _bstr_t IPageSetup::GetPrintTitleColumns ( );
__declspec(implementation_key(10097)) void IPageSetup::PutPrintTitleColumns ( _bstr_t RHS );
__declspec(implementation_key(10098)) _bstr_t IPageSetup::GetPrintTitleRows ( );
__declspec(implementation_key(10099)) void IPageSetup::PutPrintTitleRows ( _bstr_t RHS );
__declspec(implementation_key(10100)) _bstr_t IPageSetup::GetRightFooter ( );
__declspec(implementation_key(10101)) void IPageSetup::PutRightFooter ( _bstr_t RHS );
__declspec(implementation_key(10102)) _bstr_t IPageSetup::GetRightHeader ( );
__declspec(implementation_key(10103)) void IPageSetup::PutRightHeader ( _bstr_t RHS );
__declspec(implementation_key(10104)) double IPageSetup::GetRightMargin ( );
__declspec(implementation_key(10105)) void IPageSetup::PutRightMargin ( double RHS );
__declspec(implementation_key(10106)) double IPageSetup::GetTopMargin ( );
__declspec(implementation_key(10107)) void IPageSetup::PutTopMargin ( double RHS );
__declspec(implementation_key(10108)) _variant_t IPageSetup::GetZoom ( );
__declspec(implementation_key(10109)) void IPageSetup::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(10110)) enum XlPrintLocation IPageSetup::GetPrintComments ( );
__declspec(implementation_key(10111)) void IPageSetup::PutPrintComments ( enum XlPrintLocation RHS );
__declspec(implementation_key(10112)) enum XlPrintErrors IPageSetup::GetPrintErrors ( );
__declspec(implementation_key(10113)) void IPageSetup::PutPrintErrors ( enum XlPrintErrors RHS );
__declspec(implementation_key(10114)) GraphicPtr IPageSetup::GetCenterHeaderPicture ( );
__declspec(implementation_key(10115)) GraphicPtr IPageSetup::GetCenterFooterPicture ( );
__declspec(implementation_key(10116)) GraphicPtr IPageSetup::GetLeftHeaderPicture ( );
__declspec(implementation_key(10117)) GraphicPtr IPageSetup::GetLeftFooterPicture ( );
__declspec(implementation_key(10118)) GraphicPtr IPageSetup::GetRightHeaderPicture ( );
__declspec(implementation_key(10119)) GraphicPtr IPageSetup::GetRightFooterPicture ( );
__declspec(implementation_key(10120)) _ApplicationPtr INames::GetApplication ( );
__declspec(implementation_key(10121)) enum XlCreator INames::GetCreator ( );
__declspec(implementation_key(10122)) IDispatchPtr INames::GetParent ( );
__declspec(implementation_key(10123)) NamePtr INames::Add ( const _variant_t & Name, const _variant_t & RefersTo, const _variant_t & Visible, const _variant_t & MacroType, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & NameLocal, const _variant_t & RefersToLocal, const _variant_t & CategoryLocal, const _variant_t & RefersToR1C1, const _variant_t & RefersToR1C1Local );
__declspec(implementation_key(10124)) NamePtr INames::Item ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(10125)) NamePtr INames::_Default ( const _variant_t & Index, const _variant_t & IndexLocal, const _variant_t & RefersTo, long lcid );
__declspec(implementation_key(10126)) long INames::GetCount ( );
__declspec(implementation_key(10127)) IUnknownPtr INames::Get_NewEnum ( );
__declspec(implementation_key(10128)) _ApplicationPtr IName::GetApplication ( );
__declspec(implementation_key(10129)) enum XlCreator IName::GetCreator ( );
__declspec(implementation_key(10130)) IDispatchPtr IName::GetParent ( );
__declspec(implementation_key(10131)) _bstr_t IName::Get_Default ( );
__declspec(implementation_key(10132)) long IName::GetIndex ( );
__declspec(implementation_key(10133)) _bstr_t IName::GetCategory ( long lcidIn );
__declspec(implementation_key(10134)) void IName::PutCategory ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(10135)) _bstr_t IName::GetCategoryLocal ( );
__declspec(implementation_key(10136)) void IName::PutCategoryLocal ( _bstr_t RHS );
__declspec(implementation_key(10137)) HRESULT IName::Delete ( );
__declspec(implementation_key(10138)) enum XlXLMMacroType IName::GetMacroType ( );
__declspec(implementation_key(10139)) void IName::PutMacroType ( enum XlXLMMacroType RHS );
__declspec(implementation_key(10140)) _bstr_t IName::GetName ( long lcidIn );
__declspec(implementation_key(10141)) void IName::PutName ( long lcidIn, _bstr_t RHS );
__declspec(implementation_key(10142)) _variant_t IName::GetRefersTo ( long lcidIn );
__declspec(implementation_key(10143)) void IName::PutRefersTo ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(10144)) _bstr_t IName::GetShortcutKey ( );
__declspec(implementation_key(10145)) void IName::PutShortcutKey ( _bstr_t RHS );
__declspec(implementation_key(10146)) _bstr_t IName::GetValue ( );
__declspec(implementation_key(10147)) void IName::PutValue ( _bstr_t RHS );
__declspec(implementation_key(10148)) VARIANT_BOOL IName::GetVisible ( );
__declspec(implementation_key(10149)) void IName::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(10150)) _bstr_t IName::GetNameLocal ( );
__declspec(implementation_key(10151)) void IName::PutNameLocal ( _bstr_t RHS );
__declspec(implementation_key(10152)) _variant_t IName::GetRefersToLocal ( );
__declspec(implementation_key(10153)) void IName::PutRefersToLocal ( const _variant_t & RHS );
__declspec(implementation_key(10154)) _variant_t IName::GetRefersToR1C1 ( long lcidIn );
__declspec(implementation_key(10155)) void IName::PutRefersToR1C1 ( long lcidIn, const _variant_t & RHS );
__declspec(implementation_key(10156)) _variant_t IName::GetRefersToR1C1Local ( );
__declspec(implementation_key(10157)) void IName::PutRefersToR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(10158)) RangePtr IName::GetRefersToRange ( );
__declspec(implementation_key(10159)) _ApplicationPtr IChartObjects::GetApplication ( );
__declspec(implementation_key(10160)) enum XlCreator IChartObjects::GetCreator ( );
__declspec(implementation_key(10161)) IDispatchPtr IChartObjects::GetParent ( );
__declspec(implementation_key(10162)) _variant_t IChartObjects::BringToFront ( );
__declspec(implementation_key(10163)) _variant_t IChartObjects::Copy ( );
__declspec(implementation_key(10164)) _variant_t IChartObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(10165)) _variant_t IChartObjects::Cut ( );
__declspec(implementation_key(10166)) _variant_t IChartObjects::Delete ( );
__declspec(implementation_key(10167)) IDispatchPtr IChartObjects::Duplicate ( );
__declspec(implementation_key(10168)) VARIANT_BOOL IChartObjects::GetEnabled ( );
__declspec(implementation_key(10169)) void IChartObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(10170)) double IChartObjects::GetHeight ( );
__declspec(implementation_key(10171)) void IChartObjects::PutHeight ( double RHS );
__declspec(implementation_key(10172)) double IChartObjects::GetLeft ( );
__declspec(implementation_key(10173)) void IChartObjects::PutLeft ( double RHS );
__declspec(implementation_key(10174)) VARIANT_BOOL IChartObjects::GetLocked ( );
__declspec(implementation_key(10175)) void IChartObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10176)) _bstr_t IChartObjects::GetOnAction ( );
__declspec(implementation_key(10177)) void IChartObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(10178)) _variant_t IChartObjects::GetPlacement ( );
__declspec(implementation_key(10179)) void IChartObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(10180)) VARIANT_BOOL IChartObjects::GetPrintObject ( );
__declspec(implementation_key(10181)) void IChartObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(10182)) _variant_t IChartObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(10183)) _variant_t IChartObjects::SendToBack ( );
__declspec(implementation_key(10184)) double IChartObjects::GetTop ( );
__declspec(implementation_key(10185)) void IChartObjects::PutTop ( double RHS );
__declspec(implementation_key(10186)) VARIANT_BOOL IChartObjects::GetVisible ( );
__declspec(implementation_key(10187)) void IChartObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(10188)) double IChartObjects::GetWidth ( );
__declspec(implementation_key(10189)) void IChartObjects::PutWidth ( double RHS );
__declspec(implementation_key(10190)) ShapeRangePtr IChartObjects::GetShapeRange ( );
__declspec(implementation_key(10191)) VARIANT_BOOL IChartObjects::GetRoundedCorners ( );
__declspec(implementation_key(10192)) void IChartObjects::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(10193)) BorderPtr IChartObjects::GetBorder ( );
__declspec(implementation_key(10194)) InteriorPtr IChartObjects::GetInterior ( );
__declspec(implementation_key(10195)) VARIANT_BOOL IChartObjects::GetShadow ( );
__declspec(implementation_key(10196)) void IChartObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10197)) ChartObjectPtr IChartObjects::Add ( double Left, double Top, double Width, double Height );
__declspec(implementation_key(10198)) long IChartObjects::GetCount ( );
__declspec(implementation_key(10199)) GroupObjectPtr IChartObjects::Group ( );
__declspec(implementation_key(10200)) IDispatchPtr IChartObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(10201)) IUnknownPtr IChartObjects::_NewEnum ( );
__declspec(implementation_key(10202)) _ApplicationPtr IMailer::GetApplication ( );
__declspec(implementation_key(10203)) enum XlCreator IMailer::GetCreator ( );
__declspec(implementation_key(10204)) IDispatchPtr IMailer::GetParent ( );
__declspec(implementation_key(10205)) _variant_t IMailer::GetBCCRecipients ( );
__declspec(implementation_key(10206)) void IMailer::PutBCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(10207)) _variant_t IMailer::GetCCRecipients ( );
__declspec(implementation_key(10208)) void IMailer::PutCCRecipients ( const _variant_t & RHS );
__declspec(implementation_key(10209)) _variant_t IMailer::GetEnclosures ( );
__declspec(implementation_key(10210)) void IMailer::PutEnclosures ( const _variant_t & RHS );
__declspec(implementation_key(10211)) VARIANT_BOOL IMailer::GetReceived ( );
__declspec(implementation_key(10212)) DATE IMailer::GetSendDateTime ( );
__declspec(implementation_key(10213)) _bstr_t IMailer::GetSender ( );
__declspec(implementation_key(10214)) _bstr_t IMailer::GetSubject ( );
__declspec(implementation_key(10215)) void IMailer::PutSubject ( _bstr_t RHS );
__declspec(implementation_key(10216)) _variant_t IMailer::GetToRecipients ( );
__declspec(implementation_key(10217)) void IMailer::PutToRecipients ( const _variant_t & RHS );
__declspec(implementation_key(10218)) _variant_t IMailer::GetWhichAddress ( );
__declspec(implementation_key(10219)) void IMailer::PutWhichAddress ( const _variant_t & RHS );
__declspec(implementation_key(10220)) _ApplicationPtr ICustomViews::GetApplication ( );
__declspec(implementation_key(10221)) enum XlCreator ICustomViews::GetCreator ( );
__declspec(implementation_key(10222)) IDispatchPtr ICustomViews::GetParent ( );
__declspec(implementation_key(10223)) long ICustomViews::GetCount ( );
__declspec(implementation_key(10224)) CustomViewPtr ICustomViews::Item ( const _variant_t & ViewName );
__declspec(implementation_key(10225)) CustomViewPtr ICustomViews::Add ( _bstr_t ViewName, const _variant_t & PrintSettings, const _variant_t & RowColSettings );
__declspec(implementation_key(10226)) CustomViewPtr ICustomViews::Get_Default ( const _variant_t & ViewName );
__declspec(implementation_key(10227)) IUnknownPtr ICustomViews::Get_NewEnum ( );
__declspec(implementation_key(10228)) _ApplicationPtr ICustomView::GetApplication ( );
__declspec(implementation_key(10229)) enum XlCreator ICustomView::GetCreator ( );
__declspec(implementation_key(10230)) IDispatchPtr ICustomView::GetParent ( );
__declspec(implementation_key(10231)) _bstr_t ICustomView::GetName ( );
__declspec(implementation_key(10232)) VARIANT_BOOL ICustomView::GetPrintSettings ( );
__declspec(implementation_key(10233)) VARIANT_BOOL ICustomView::GetRowColSettings ( );
__declspec(implementation_key(10234)) HRESULT ICustomView::Show ( );
__declspec(implementation_key(10235)) HRESULT ICustomView::Delete ( );
__declspec(implementation_key(10236)) _ApplicationPtr IFormatConditions::GetApplication ( );
__declspec(implementation_key(10237)) enum XlCreator IFormatConditions::GetCreator ( );
__declspec(implementation_key(10238)) IDispatchPtr IFormatConditions::GetParent ( );
__declspec(implementation_key(10239)) long IFormatConditions::GetCount ( );
__declspec(implementation_key(10240)) FormatConditionPtr IFormatConditions::Item ( const _variant_t & Index );
__declspec(implementation_key(10241)) FormatConditionPtr IFormatConditions::Add ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(10242)) FormatConditionPtr IFormatConditions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10243)) IUnknownPtr IFormatConditions::Get_NewEnum ( );
__declspec(implementation_key(10244)) HRESULT IFormatConditions::Delete ( );
__declspec(implementation_key(10245)) _ApplicationPtr IFormatCondition::GetApplication ( );
__declspec(implementation_key(10246)) enum XlCreator IFormatCondition::GetCreator ( );
__declspec(implementation_key(10247)) IDispatchPtr IFormatCondition::GetParent ( );
__declspec(implementation_key(10248)) HRESULT IFormatCondition::Modify ( enum XlFormatConditionType Type, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(10249)) long IFormatCondition::GetType ( );
__declspec(implementation_key(10250)) long IFormatCondition::GetOperator ( );
__declspec(implementation_key(10251)) _bstr_t IFormatCondition::GetFormula1 ( );
__declspec(implementation_key(10252)) _bstr_t IFormatCondition::GetFormula2 ( );
__declspec(implementation_key(10253)) InteriorPtr IFormatCondition::GetInterior ( );
__declspec(implementation_key(10254)) BordersPtr IFormatCondition::GetBorders ( );
__declspec(implementation_key(10255)) FontPtr IFormatCondition::GetFont ( );
__declspec(implementation_key(10256)) HRESULT IFormatCondition::Delete ( );
__declspec(implementation_key(10257)) _ApplicationPtr IComments::GetApplication ( );
__declspec(implementation_key(10258)) enum XlCreator IComments::GetCreator ( );
__declspec(implementation_key(10259)) IDispatchPtr IComments::GetParent ( );
__declspec(implementation_key(10260)) long IComments::GetCount ( );
__declspec(implementation_key(10261)) CommentPtr IComments::Item ( long Index );
__declspec(implementation_key(10262)) CommentPtr IComments::Get_Default ( long Index );
__declspec(implementation_key(10263)) IUnknownPtr IComments::Get_NewEnum ( );
__declspec(implementation_key(10264)) _ApplicationPtr IComment::GetApplication ( );
__declspec(implementation_key(10265)) enum XlCreator IComment::GetCreator ( );
__declspec(implementation_key(10266)) IDispatchPtr IComment::GetParent ( );
__declspec(implementation_key(10267)) _bstr_t IComment::GetAuthor ( );
__declspec(implementation_key(10268)) ShapePtr IComment::GetShape ( );
__declspec(implementation_key(10269)) VARIANT_BOOL IComment::GetVisible ( );
__declspec(implementation_key(10270)) void IComment::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(10271)) _bstr_t IComment::Text ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Overwrite );
__declspec(implementation_key(10272)) HRESULT IComment::Delete ( );
__declspec(implementation_key(10273)) CommentPtr IComment::Next ( );
__declspec(implementation_key(10274)) CommentPtr IComment::Previous ( );
__declspec(implementation_key(10275)) _ApplicationPtr _IQueryTable::GetApplication ( );
__declspec(implementation_key(10276)) enum XlCreator _IQueryTable::GetCreator ( );
__declspec(implementation_key(10277)) IDispatchPtr _IQueryTable::GetParent ( );
__declspec(implementation_key(10278)) _bstr_t _IQueryTable::GetName ( );
__declspec(implementation_key(10279)) void _IQueryTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(10280)) VARIANT_BOOL _IQueryTable::GetFieldNames ( );
__declspec(implementation_key(10281)) void _IQueryTable::PutFieldNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(10282)) VARIANT_BOOL _IQueryTable::GetRowNumbers ( );
__declspec(implementation_key(10283)) void _IQueryTable::PutRowNumbers ( VARIANT_BOOL RHS );
__declspec(implementation_key(10284)) VARIANT_BOOL _IQueryTable::GetFillAdjacentFormulas ( );
__declspec(implementation_key(10285)) void _IQueryTable::PutFillAdjacentFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(10286)) VARIANT_BOOL _IQueryTable::GetHasAutoFormat ( );
__declspec(implementation_key(10287)) void _IQueryTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(10288)) VARIANT_BOOL _IQueryTable::GetRefreshOnFileOpen ( );
__declspec(implementation_key(10289)) void _IQueryTable::PutRefreshOnFileOpen ( VARIANT_BOOL RHS );
__declspec(implementation_key(10290)) VARIANT_BOOL _IQueryTable::GetRefreshing ( );
__declspec(implementation_key(10291)) VARIANT_BOOL _IQueryTable::GetFetchedRowOverflow ( );
__declspec(implementation_key(10292)) VARIANT_BOOL _IQueryTable::GetBackgroundQuery ( );
__declspec(implementation_key(10293)) void _IQueryTable::PutBackgroundQuery ( VARIANT_BOOL RHS );
__declspec(implementation_key(10294)) HRESULT _IQueryTable::CancelRefresh ( );
__declspec(implementation_key(10295)) enum XlCellInsertionMode _IQueryTable::GetRefreshStyle ( );
__declspec(implementation_key(10296)) void _IQueryTable::PutRefreshStyle ( enum XlCellInsertionMode RHS );
__declspec(implementation_key(10297)) VARIANT_BOOL _IQueryTable::GetEnableRefresh ( );
__declspec(implementation_key(10298)) void _IQueryTable::PutEnableRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(10299)) VARIANT_BOOL _IQueryTable::GetSavePassword ( );
__declspec(implementation_key(10300)) void _IQueryTable::PutSavePassword ( VARIANT_BOOL RHS );
__declspec(implementation_key(10301)) RangePtr _IQueryTable::GetDestination ( );
__declspec(implementation_key(10302)) _variant_t _IQueryTable::GetConnection ( );
__declspec(implementation_key(10303)) void _IQueryTable::PutConnection ( const _variant_t & RHS );
__declspec(implementation_key(10304)) _variant_t _IQueryTable::GetSql ( );
__declspec(implementation_key(10305)) void _IQueryTable::PutSql ( const _variant_t & RHS );
__declspec(implementation_key(10306)) _bstr_t _IQueryTable::GetPostText ( );
__declspec(implementation_key(10307)) void _IQueryTable::PutPostText ( _bstr_t RHS );
__declspec(implementation_key(10308)) RangePtr _IQueryTable::GetResultRange ( );
__declspec(implementation_key(10309)) HRESULT _IQueryTable::Delete ( );
__declspec(implementation_key(10310)) VARIANT_BOOL _IQueryTable::Refresh ( const _variant_t & BackgroundQuery );
__declspec(implementation_key(10311)) ParametersPtr _IQueryTable::GetParameters ( );
__declspec(implementation_key(10312)) IDispatchPtr _IQueryTable::GetRecordset ( );
__declspec(implementation_key(10313)) void _IQueryTable::PutRefRecordset ( IDispatch * RHS );
__declspec(implementation_key(10314)) VARIANT_BOOL _IQueryTable::GetSaveData ( );
__declspec(implementation_key(10315)) void _IQueryTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(10316)) VARIANT_BOOL _IQueryTable::GetTablesOnlyFromHTML ( );
__declspec(implementation_key(10317)) void _IQueryTable::PutTablesOnlyFromHTML ( VARIANT_BOOL RHS );
__declspec(implementation_key(10318)) VARIANT_BOOL _IQueryTable::GetEnableEditing ( );
__declspec(implementation_key(10319)) void _IQueryTable::PutEnableEditing ( VARIANT_BOOL RHS );
__declspec(implementation_key(10320)) long _IQueryTable::GetTextFilePlatform ( );
__declspec(implementation_key(10321)) void _IQueryTable::PutTextFilePlatform ( long RHS );
__declspec(implementation_key(10322)) long _IQueryTable::GetTextFileStartRow ( );
__declspec(implementation_key(10323)) void _IQueryTable::PutTextFileStartRow ( long RHS );
__declspec(implementation_key(10324)) enum XlTextParsingType _IQueryTable::GetTextFileParseType ( );
__declspec(implementation_key(10325)) void _IQueryTable::PutTextFileParseType ( enum XlTextParsingType RHS );
__declspec(implementation_key(10326)) enum XlTextQualifier _IQueryTable::GetTextFileTextQualifier ( );
__declspec(implementation_key(10327)) void _IQueryTable::PutTextFileTextQualifier ( enum XlTextQualifier RHS );
__declspec(implementation_key(10328)) VARIANT_BOOL _IQueryTable::GetTextFileConsecutiveDelimiter ( );
__declspec(implementation_key(10329)) void _IQueryTable::PutTextFileConsecutiveDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(10330)) VARIANT_BOOL _IQueryTable::GetTextFileTabDelimiter ( );
__declspec(implementation_key(10331)) void _IQueryTable::PutTextFileTabDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(10332)) VARIANT_BOOL _IQueryTable::GetTextFileSemicolonDelimiter ( );
__declspec(implementation_key(10333)) void _IQueryTable::PutTextFileSemicolonDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(10334)) VARIANT_BOOL _IQueryTable::GetTextFileCommaDelimiter ( );
__declspec(implementation_key(10335)) void _IQueryTable::PutTextFileCommaDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(10336)) VARIANT_BOOL _IQueryTable::GetTextFileSpaceDelimiter ( );
__declspec(implementation_key(10337)) void _IQueryTable::PutTextFileSpaceDelimiter ( VARIANT_BOOL RHS );
__declspec(implementation_key(10338)) _bstr_t _IQueryTable::GetTextFileOtherDelimiter ( );
__declspec(implementation_key(10339)) void _IQueryTable::PutTextFileOtherDelimiter ( _bstr_t RHS );
__declspec(implementation_key(10340)) _variant_t _IQueryTable::GetTextFileColumnDataTypes ( );
__declspec(implementation_key(10341)) void _IQueryTable::PutTextFileColumnDataTypes ( const _variant_t & RHS );
__declspec(implementation_key(10342)) _variant_t _IQueryTable::GetTextFileFixedColumnWidths ( );
__declspec(implementation_key(10343)) void _IQueryTable::PutTextFileFixedColumnWidths ( const _variant_t & RHS );
__declspec(implementation_key(10344)) VARIANT_BOOL _IQueryTable::GetPreserveColumnInfo ( );
__declspec(implementation_key(10345)) void _IQueryTable::PutPreserveColumnInfo ( VARIANT_BOOL RHS );
__declspec(implementation_key(10346)) VARIANT_BOOL _IQueryTable::GetPreserveFormatting ( );
__declspec(implementation_key(10347)) void _IQueryTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(10348)) VARIANT_BOOL _IQueryTable::GetAdjustColumnWidth ( );
__declspec(implementation_key(10349)) void _IQueryTable::PutAdjustColumnWidth ( VARIANT_BOOL RHS );
__declspec(implementation_key(10350)) _variant_t _IQueryTable::GetCommandText ( );
__declspec(implementation_key(10351)) void _IQueryTable::PutCommandText ( const _variant_t & RHS );
__declspec(implementation_key(10352)) enum XlCmdType _IQueryTable::GetCommandType ( );
__declspec(implementation_key(10353)) void _IQueryTable::PutCommandType ( enum XlCmdType RHS );
__declspec(implementation_key(10354)) VARIANT_BOOL _IQueryTable::GetTextFilePromptOnRefresh ( );
__declspec(implementation_key(10355)) void _IQueryTable::PutTextFilePromptOnRefresh ( VARIANT_BOOL RHS );
__declspec(implementation_key(10356)) enum XlQueryType _IQueryTable::GetQueryType ( );
__declspec(implementation_key(10357)) VARIANT_BOOL _IQueryTable::GetMaintainConnection ( );
__declspec(implementation_key(10358)) void _IQueryTable::PutMaintainConnection ( VARIANT_BOOL RHS );
__declspec(implementation_key(10359)) _bstr_t _IQueryTable::GetTextFileDecimalSeparator ( );
__declspec(implementation_key(10360)) void _IQueryTable::PutTextFileDecimalSeparator ( _bstr_t RHS );
__declspec(implementation_key(10361)) _bstr_t _IQueryTable::GetTextFileThousandsSeparator ( );
__declspec(implementation_key(10362)) void _IQueryTable::PutTextFileThousandsSeparator ( _bstr_t RHS );
__declspec(implementation_key(10363)) long _IQueryTable::GetRefreshPeriod ( );
__declspec(implementation_key(10364)) void _IQueryTable::PutRefreshPeriod ( long RHS );
__declspec(implementation_key(10365)) HRESULT _IQueryTable::ResetTimer ( );
__declspec(implementation_key(10366)) enum XlWebSelectionType _IQueryTable::GetWebSelectionType ( );
__declspec(implementation_key(10367)) void _IQueryTable::PutWebSelectionType ( enum XlWebSelectionType RHS );
__declspec(implementation_key(10368)) enum XlWebFormatting _IQueryTable::GetWebFormatting ( );
__declspec(implementation_key(10369)) void _IQueryTable::PutWebFormatting ( enum XlWebFormatting RHS );
__declspec(implementation_key(10370)) _bstr_t _IQueryTable::GetWebTables ( );
__declspec(implementation_key(10371)) void _IQueryTable::PutWebTables ( _bstr_t RHS );
__declspec(implementation_key(10372)) VARIANT_BOOL _IQueryTable::GetWebPreFormattedTextToColumns ( );
__declspec(implementation_key(10373)) void _IQueryTable::PutWebPreFormattedTextToColumns ( VARIANT_BOOL RHS );
__declspec(implementation_key(10374)) VARIANT_BOOL _IQueryTable::GetWebSingleBlockTextImport ( );
__declspec(implementation_key(10375)) void _IQueryTable::PutWebSingleBlockTextImport ( VARIANT_BOOL RHS );
__declspec(implementation_key(10376)) VARIANT_BOOL _IQueryTable::GetWebDisableDateRecognition ( );
__declspec(implementation_key(10377)) void _IQueryTable::PutWebDisableDateRecognition ( VARIANT_BOOL RHS );
__declspec(implementation_key(10378)) VARIANT_BOOL _IQueryTable::GetWebConsecutiveDelimitersAsOne ( );
__declspec(implementation_key(10379)) void _IQueryTable::PutWebConsecutiveDelimitersAsOne ( VARIANT_BOOL RHS );
__declspec(implementation_key(10380)) VARIANT_BOOL _IQueryTable::GetWebDisableRedirections ( );
__declspec(implementation_key(10381)) void _IQueryTable::PutWebDisableRedirections ( VARIANT_BOOL RHS );
__declspec(implementation_key(10382)) _variant_t _IQueryTable::GetEditWebPage ( );
__declspec(implementation_key(10383)) void _IQueryTable::PutEditWebPage ( const _variant_t & RHS );
__declspec(implementation_key(10384)) _bstr_t _IQueryTable::GetSourceConnectionFile ( );
__declspec(implementation_key(10385)) void _IQueryTable::PutSourceConnectionFile ( _bstr_t RHS );
__declspec(implementation_key(10386)) _bstr_t _IQueryTable::GetSourceDataFile ( );
__declspec(implementation_key(10387)) void _IQueryTable::PutSourceDataFile ( _bstr_t RHS );
__declspec(implementation_key(10388)) enum XlRobustConnect _IQueryTable::GetRobustConnect ( );
__declspec(implementation_key(10389)) void _IQueryTable::PutRobustConnect ( enum XlRobustConnect RHS );
__declspec(implementation_key(10390)) VARIANT_BOOL _IQueryTable::GetTextFileTrailingMinusNumbers ( );
__declspec(implementation_key(10391)) void _IQueryTable::PutTextFileTrailingMinusNumbers ( VARIANT_BOOL RHS );
__declspec(implementation_key(10392)) HRESULT _IQueryTable::SaveAsODC ( _bstr_t ODCFileName, const _variant_t & Description, const _variant_t & Keywords );
__declspec(implementation_key(10393)) ListObjectPtr _IQueryTable::GetListObject ( );
__declspec(implementation_key(10394)) enum XlTextVisualLayoutType _IQueryTable::GetTextFileVisualLayout ( );
__declspec(implementation_key(10395)) void _IQueryTable::PutTextFileVisualLayout ( enum XlTextVisualLayoutType RHS );
__declspec(implementation_key(10396)) _ApplicationPtr IQueryTables::GetApplication ( );
__declspec(implementation_key(10397)) enum XlCreator IQueryTables::GetCreator ( );
__declspec(implementation_key(10398)) IDispatchPtr IQueryTables::GetParent ( );
__declspec(implementation_key(10399)) long IQueryTables::GetCount ( );
__declspec(implementation_key(10400)) _QueryTablePtr IQueryTables::Add ( const _variant_t & Connection, struct Range * Destination, const _variant_t & Sql );
__declspec(implementation_key(10401)) _QueryTablePtr IQueryTables::Item ( const _variant_t & Index );
__declspec(implementation_key(10402)) _QueryTablePtr IQueryTables::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10403)) IUnknownPtr IQueryTables::_NewEnum ( );
__declspec(implementation_key(10404)) _ApplicationPtr IParameter::GetApplication ( );
__declspec(implementation_key(10405)) enum XlCreator IParameter::GetCreator ( );
__declspec(implementation_key(10406)) IDispatchPtr IParameter::GetParent ( );
__declspec(implementation_key(10407)) enum XlParameterDataType IParameter::GetDataType ( );
__declspec(implementation_key(10408)) void IParameter::PutDataType ( enum XlParameterDataType RHS );
__declspec(implementation_key(10409)) enum XlParameterType IParameter::GetType ( );
__declspec(implementation_key(10410)) _bstr_t IParameter::GetPromptString ( );
__declspec(implementation_key(10411)) _variant_t IParameter::GetValue ( );
__declspec(implementation_key(10412)) RangePtr IParameter::GetSourceRange ( );
__declspec(implementation_key(10413)) _bstr_t IParameter::GetName ( );
__declspec(implementation_key(10414)) void IParameter::PutName ( _bstr_t RHS );
__declspec(implementation_key(10415)) HRESULT IParameter::SetParam ( enum XlParameterType Type, const _variant_t & Value );
__declspec(implementation_key(10416)) VARIANT_BOOL IParameter::GetRefreshOnChange ( );
__declspec(implementation_key(10417)) void IParameter::PutRefreshOnChange ( VARIANT_BOOL RHS );
__declspec(implementation_key(10418)) _ApplicationPtr IParameters::GetApplication ( );
__declspec(implementation_key(10419)) enum XlCreator IParameters::GetCreator ( );
__declspec(implementation_key(10420)) IDispatchPtr IParameters::GetParent ( );
__declspec(implementation_key(10421)) ParameterPtr IParameters::Add ( _bstr_t Name, const _variant_t & iDataType );
__declspec(implementation_key(10422)) long IParameters::GetCount ( );
__declspec(implementation_key(10423)) ParameterPtr IParameters::Item ( const _variant_t & Index );
__declspec(implementation_key(10424)) ParameterPtr IParameters::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10425)) HRESULT IParameters::Delete ( );
__declspec(implementation_key(10426)) IUnknownPtr IParameters::_NewEnum ( );
__declspec(implementation_key(10427)) _ApplicationPtr IODBCError::GetApplication ( );
__declspec(implementation_key(10428)) enum XlCreator IODBCError::GetCreator ( );
__declspec(implementation_key(10429)) IDispatchPtr IODBCError::GetParent ( );
__declspec(implementation_key(10430)) _bstr_t IODBCError::GetSqlState ( );
__declspec(implementation_key(10431)) _bstr_t IODBCError::GetErrorString ( );
__declspec(implementation_key(10432)) _ApplicationPtr IODBCErrors::GetApplication ( );
__declspec(implementation_key(10433)) enum XlCreator IODBCErrors::GetCreator ( );
__declspec(implementation_key(10434)) IDispatchPtr IODBCErrors::GetParent ( );
__declspec(implementation_key(10435)) long IODBCErrors::GetCount ( );
__declspec(implementation_key(10436)) ODBCErrorPtr IODBCErrors::Item ( long Index );
__declspec(implementation_key(10437)) ODBCErrorPtr IODBCErrors::Get_Default ( long Index );
__declspec(implementation_key(10438)) IUnknownPtr IODBCErrors::_NewEnum ( );
__declspec(implementation_key(10439)) _ApplicationPtr IValidation::GetApplication ( );
__declspec(implementation_key(10440)) enum XlCreator IValidation::GetCreator ( );
__declspec(implementation_key(10441)) IDispatchPtr IValidation::GetParent ( );
__declspec(implementation_key(10442)) HRESULT IValidation::Add ( enum XlDVType Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(10443)) long IValidation::GetAlertStyle ( );
__declspec(implementation_key(10444)) VARIANT_BOOL IValidation::GetIgnoreBlank ( );
__declspec(implementation_key(10445)) void IValidation::PutIgnoreBlank ( VARIANT_BOOL RHS );
__declspec(implementation_key(10446)) long IValidation::GetIMEMode ( );
__declspec(implementation_key(10447)) void IValidation::PutIMEMode ( long RHS );
__declspec(implementation_key(10448)) VARIANT_BOOL IValidation::GetInCellDropdown ( );
__declspec(implementation_key(10449)) void IValidation::PutInCellDropdown ( VARIANT_BOOL RHS );
__declspec(implementation_key(10450)) HRESULT IValidation::Delete ( );
__declspec(implementation_key(10451)) _bstr_t IValidation::GetErrorMessage ( );
__declspec(implementation_key(10452)) void IValidation::PutErrorMessage ( _bstr_t RHS );
__declspec(implementation_key(10453)) _bstr_t IValidation::GetErrorTitle ( );
__declspec(implementation_key(10454)) void IValidation::PutErrorTitle ( _bstr_t RHS );
__declspec(implementation_key(10455)) _bstr_t IValidation::GetInputMessage ( );
__declspec(implementation_key(10456)) void IValidation::PutInputMessage ( _bstr_t RHS );
__declspec(implementation_key(10457)) _bstr_t IValidation::GetInputTitle ( );
__declspec(implementation_key(10458)) void IValidation::PutInputTitle ( _bstr_t RHS );
__declspec(implementation_key(10459)) _bstr_t IValidation::GetFormula1 ( );
__declspec(implementation_key(10460)) _bstr_t IValidation::GetFormula2 ( );
__declspec(implementation_key(10461)) HRESULT IValidation::Modify ( const _variant_t & Type, const _variant_t & AlertStyle, const _variant_t & Operator, const _variant_t & Formula1, const _variant_t & Formula2 );
__declspec(implementation_key(10462)) long IValidation::GetOperator ( );
__declspec(implementation_key(10463)) VARIANT_BOOL IValidation::GetShowError ( );
__declspec(implementation_key(10464)) void IValidation::PutShowError ( VARIANT_BOOL RHS );
__declspec(implementation_key(10465)) VARIANT_BOOL IValidation::GetShowInput ( );
__declspec(implementation_key(10466)) void IValidation::PutShowInput ( VARIANT_BOOL RHS );
__declspec(implementation_key(10467)) long IValidation::GetType ( );
__declspec(implementation_key(10468)) VARIANT_BOOL IValidation::GetValue ( );
__declspec(implementation_key(10469)) _ApplicationPtr IHyperlinks::GetApplication ( );
__declspec(implementation_key(10470)) enum XlCreator IHyperlinks::GetCreator ( );
__declspec(implementation_key(10471)) IDispatchPtr IHyperlinks::GetParent ( );
__declspec(implementation_key(10472)) IDispatchPtr IHyperlinks::Add ( IDispatch * Anchor, _bstr_t Address, const _variant_t & SubAddress, const _variant_t & ScreenTip, const _variant_t & TextToDisplay );
__declspec(implementation_key(10473)) long IHyperlinks::GetCount ( );
__declspec(implementation_key(10474)) HyperlinkPtr IHyperlinks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(10475)) HyperlinkPtr IHyperlinks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(10476)) IUnknownPtr IHyperlinks::Get_NewEnum ( );
__declspec(implementation_key(10477)) HRESULT IHyperlinks::Delete ( );
__declspec(implementation_key(10478)) _ApplicationPtr IHyperlink::GetApplication ( );
__declspec(implementation_key(10479)) enum XlCreator IHyperlink::GetCreator ( );
__declspec(implementation_key(10480)) IDispatchPtr IHyperlink::GetParent ( );
__declspec(implementation_key(10481)) _bstr_t IHyperlink::GetName ( );
__declspec(implementation_key(10482)) RangePtr IHyperlink::GetRange ( );
__declspec(implementation_key(10483)) ShapePtr IHyperlink::GetShape ( );
__declspec(implementation_key(10484)) _bstr_t IHyperlink::GetSubAddress ( );
__declspec(implementation_key(10485)) void IHyperlink::PutSubAddress ( _bstr_t RHS );
__declspec(implementation_key(10486)) _bstr_t IHyperlink::GetAddress ( );
__declspec(implementation_key(10487)) void IHyperlink::PutAddress ( _bstr_t RHS );
__declspec(implementation_key(10488)) long IHyperlink::GetType ( );
__declspec(implementation_key(10489)) HRESULT IHyperlink::AddToFavorites ( );
__declspec(implementation_key(10490)) HRESULT IHyperlink::Delete ( );
__declspec(implementation_key(10491)) HRESULT IHyperlink::Follow ( const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(10492)) _bstr_t IHyperlink::GetEmailSubject ( );
__declspec(implementation_key(10493)) void IHyperlink::PutEmailSubject ( _bstr_t RHS );
__declspec(implementation_key(10494)) _bstr_t IHyperlink::GetScreenTip ( );
__declspec(implementation_key(10495)) void IHyperlink::PutScreenTip ( _bstr_t RHS );
__declspec(implementation_key(10496)) _bstr_t IHyperlink::GetTextToDisplay ( );
__declspec(implementation_key(10497)) void IHyperlink::PutTextToDisplay ( _bstr_t RHS );
__declspec(implementation_key(10498)) HRESULT IHyperlink::CreateNewDocument ( _bstr_t Filename, VARIANT_BOOL EditNow, VARIANT_BOOL Overwrite );
__declspec(implementation_key(10499)) _ApplicationPtr IAutoFilter::GetApplication ( );
__declspec(implementation_key(10500)) enum XlCreator IAutoFilter::GetCreator ( );
__declspec(implementation_key(10501)) IDispatchPtr IAutoFilter::GetParent ( );
__declspec(implementation_key(10502)) RangePtr IAutoFilter::GetRange ( );
__declspec(implementation_key(10503)) FiltersPtr IAutoFilter::GetFilters ( );
__declspec(implementation_key(10504)) _ApplicationPtr IFilters::GetApplication ( );
__declspec(implementation_key(10505)) enum XlCreator IFilters::GetCreator ( );
__declspec(implementation_key(10506)) IDispatchPtr IFilters::GetParent ( );
__declspec(implementation_key(10507)) long IFilters::GetCount ( );
__declspec(implementation_key(10508)) FilterPtr IFilters::Get_Default ( long Index );
__declspec(implementation_key(10509)) FilterPtr IFilters::GetItem ( long Index );
__declspec(implementation_key(10510)) IUnknownPtr IFilters::Get_NewEnum ( );
__declspec(implementation_key(10511)) _ApplicationPtr IFilter::GetApplication ( );
__declspec(implementation_key(10512)) enum XlCreator IFilter::GetCreator ( );
__declspec(implementation_key(10513)) IDispatchPtr IFilter::GetParent ( );
__declspec(implementation_key(10514)) VARIANT_BOOL IFilter::GetOn ( );
__declspec(implementation_key(10515)) _variant_t IFilter::GetCriteria1 ( );
__declspec(implementation_key(10516)) enum XlAutoFilterOperator IFilter::GetOperator ( );
__declspec(implementation_key(10517)) _variant_t IFilter::GetCriteria2 ( );
__declspec(implementation_key(10518)) _ApplicationPtr IAutoCorrect::GetApplication ( );
__declspec(implementation_key(10519)) enum XlCreator IAutoCorrect::GetCreator ( );
__declspec(implementation_key(10520)) IDispatchPtr IAutoCorrect::GetParent ( );
__declspec(implementation_key(10521)) _variant_t IAutoCorrect::AddReplacement ( _bstr_t What, _bstr_t Replacement );
__declspec(implementation_key(10522)) VARIANT_BOOL IAutoCorrect::GetCapitalizeNamesOfDays ( );
__declspec(implementation_key(10523)) void IAutoCorrect::PutCapitalizeNamesOfDays ( VARIANT_BOOL RHS );
__declspec(implementation_key(10524)) _variant_t IAutoCorrect::DeleteReplacement ( _bstr_t What );
__declspec(implementation_key(10525)) _variant_t IAutoCorrect::GetReplacementList ( const _variant_t & Index );
__declspec(implementation_key(10526)) void IAutoCorrect::PutReplacementList ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(10527)) VARIANT_BOOL IAutoCorrect::GetReplaceText ( );
__declspec(implementation_key(10528)) void IAutoCorrect::PutReplaceText ( VARIANT_BOOL RHS );
__declspec(implementation_key(10529)) VARIANT_BOOL IAutoCorrect::GetTwoInitialCapitals ( );
__declspec(implementation_key(10530)) void IAutoCorrect::PutTwoInitialCapitals ( VARIANT_BOOL RHS );
__declspec(implementation_key(10531)) VARIANT_BOOL IAutoCorrect::GetCorrectSentenceCap ( );
__declspec(implementation_key(10532)) void IAutoCorrect::PutCorrectSentenceCap ( VARIANT_BOOL RHS );
__declspec(implementation_key(10533)) VARIANT_BOOL IAutoCorrect::GetCorrectCapsLock ( );
__declspec(implementation_key(10534)) void IAutoCorrect::PutCorrectCapsLock ( VARIANT_BOOL RHS );
__declspec(implementation_key(10535)) VARIANT_BOOL IAutoCorrect::GetDisplayAutoCorrectOptions ( );
__declspec(implementation_key(10536)) void IAutoCorrect::PutDisplayAutoCorrectOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(10537)) VARIANT_BOOL IAutoCorrect::GetAutoExpandListRange ( );
__declspec(implementation_key(10538)) void IAutoCorrect::PutAutoExpandListRange ( VARIANT_BOOL RHS );
__declspec(implementation_key(10539)) _ApplicationPtr IBorder::GetApplication ( );
__declspec(implementation_key(10540)) enum XlCreator IBorder::GetCreator ( );
__declspec(implementation_key(10541)) IDispatchPtr IBorder::GetParent ( );
__declspec(implementation_key(10542)) _variant_t IBorder::GetColor ( );
__declspec(implementation_key(10543)) void IBorder::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(10544)) _variant_t IBorder::GetColorIndex ( );
__declspec(implementation_key(10545)) void IBorder::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(10546)) _variant_t IBorder::GetLineStyle ( );
__declspec(implementation_key(10547)) void IBorder::PutLineStyle ( const _variant_t & RHS );
__declspec(implementation_key(10548)) _variant_t IBorder::GetWeight ( );
__declspec(implementation_key(10549)) void IBorder::PutWeight ( const _variant_t & RHS );
__declspec(implementation_key(10550)) _ApplicationPtr IInterior::GetApplication ( );
__declspec(implementation_key(10551)) enum XlCreator IInterior::GetCreator ( );
__declspec(implementation_key(10552)) IDispatchPtr IInterior::GetParent ( );
__declspec(implementation_key(10553)) _variant_t IInterior::GetColor ( );
__declspec(implementation_key(10554)) void IInterior::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(10555)) _variant_t IInterior::GetColorIndex ( );
__declspec(implementation_key(10556)) void IInterior::PutColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(10557)) _variant_t IInterior::GetInvertIfNegative ( );
__declspec(implementation_key(10558)) void IInterior::PutInvertIfNegative ( const _variant_t & RHS );
__declspec(implementation_key(10559)) _variant_t IInterior::GetPattern ( );
__declspec(implementation_key(10560)) void IInterior::PutPattern ( const _variant_t & RHS );
__declspec(implementation_key(10561)) _variant_t IInterior::GetPatternColor ( );
__declspec(implementation_key(10562)) void IInterior::PutPatternColor ( const _variant_t & RHS );
__declspec(implementation_key(10563)) _variant_t IInterior::GetPatternColorIndex ( );
__declspec(implementation_key(10564)) void IInterior::PutPatternColorIndex ( const _variant_t & RHS );
__declspec(implementation_key(10565)) _ApplicationPtr IChartFillFormat::GetApplication ( );
__declspec(implementation_key(10566)) enum XlCreator IChartFillFormat::GetCreator ( );
__declspec(implementation_key(10567)) IDispatchPtr IChartFillFormat::GetParent ( );
__declspec(implementation_key(10568)) HRESULT IChartFillFormat::OneColorGradient ( enum Office::MsoGradientStyle Style, long Variant, float Degree );
__declspec(implementation_key(10569)) HRESULT IChartFillFormat::TwoColorGradient ( enum Office::MsoGradientStyle Style, long Variant );
__declspec(implementation_key(10570)) HRESULT IChartFillFormat::PresetTextured ( enum Office::MsoPresetTexture PresetTexture );
__declspec(implementation_key(10571)) HRESULT IChartFillFormat::Solid ( );
__declspec(implementation_key(10572)) HRESULT IChartFillFormat::Patterned ( enum Office::MsoPatternType Pattern );
__declspec(implementation_key(10573)) HRESULT IChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement );
__declspec(implementation_key(10574)) HRESULT IChartFillFormat::UserTextured ( _bstr_t TextureFile );
__declspec(implementation_key(10575)) HRESULT IChartFillFormat::PresetGradient ( enum Office::MsoGradientStyle Style, long Variant, enum Office::MsoPresetGradientType PresetGradientType );
__declspec(implementation_key(10576)) ChartColorFormatPtr IChartFillFormat::GetBackColor ( );
__declspec(implementation_key(10577)) ChartColorFormatPtr IChartFillFormat::GetForeColor ( );
__declspec(implementation_key(10578)) enum Office::MsoGradientColorType IChartFillFormat::GetGradientColorType ( );
__declspec(implementation_key(10579)) float IChartFillFormat::GetGradientDegree ( );
__declspec(implementation_key(10580)) enum Office::MsoGradientStyle IChartFillFormat::GetGradientStyle ( );
__declspec(implementation_key(10581)) long IChartFillFormat::GetGradientVariant ( );
__declspec(implementation_key(10582)) enum Office::MsoPatternType IChartFillFormat::GetPattern ( );
__declspec(implementation_key(10583)) enum Office::MsoPresetGradientType IChartFillFormat::GetPresetGradientType ( );
__declspec(implementation_key(10584)) enum Office::MsoPresetTexture IChartFillFormat::GetPresetTexture ( );
__declspec(implementation_key(10585)) _bstr_t IChartFillFormat::GetTextureName ( );
__declspec(implementation_key(10586)) enum Office::MsoTextureType IChartFillFormat::GetTextureType ( );
__declspec(implementation_key(10587)) enum Office::MsoFillType IChartFillFormat::GetType ( );
__declspec(implementation_key(10588)) enum Office::MsoTriState IChartFillFormat::GetVisible ( );
__declspec(implementation_key(10589)) void IChartFillFormat::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(10590)) _ApplicationPtr IChartColorFormat::GetApplication ( );
__declspec(implementation_key(10591)) enum XlCreator IChartColorFormat::GetCreator ( );
__declspec(implementation_key(10592)) IDispatchPtr IChartColorFormat::GetParent ( );
__declspec(implementation_key(10593)) long IChartColorFormat::GetSchemeColor ( );
__declspec(implementation_key(10594)) void IChartColorFormat::PutSchemeColor ( long RHS );
__declspec(implementation_key(10595)) long IChartColorFormat::GetRGBEx ( );
__declspec(implementation_key(10596)) long IChartColorFormat::Get_Default ( );
__declspec(implementation_key(10597)) long IChartColorFormat::GetType ( );
__declspec(implementation_key(10598)) _ApplicationPtr IAxis::GetApplication ( );
__declspec(implementation_key(10599)) enum XlCreator IAxis::GetCreator ( );
__declspec(implementation_key(10600)) IDispatchPtr IAxis::GetParent ( );
__declspec(implementation_key(10601)) VARIANT_BOOL IAxis::GetAxisBetweenCategories ( );
__declspec(implementation_key(10602)) void IAxis::PutAxisBetweenCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(10603)) enum XlAxisGroup IAxis::GetAxisGroup ( );
__declspec(implementation_key(10604)) AxisTitlePtr IAxis::GetAxisTitle ( );
__declspec(implementation_key(10605)) BorderPtr IAxis::GetBorder ( );
__declspec(implementation_key(10606)) _variant_t IAxis::GetCategoryNames ( );
__declspec(implementation_key(10607)) void IAxis::PutCategoryNames ( const _variant_t & RHS );
__declspec(implementation_key(10608)) enum XlAxisCrosses IAxis::GetCrosses ( );
__declspec(implementation_key(10609)) void IAxis::PutCrosses ( enum XlAxisCrosses RHS );
__declspec(implementation_key(10610)) double IAxis::GetCrossesAt ( );
__declspec(implementation_key(10611)) void IAxis::PutCrossesAt ( double RHS );
__declspec(implementation_key(10612)) _variant_t IAxis::Delete ( );
__declspec(implementation_key(10613)) VARIANT_BOOL IAxis::GetHasMajorGridlines ( );
__declspec(implementation_key(10614)) void IAxis::PutHasMajorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10615)) VARIANT_BOOL IAxis::GetHasMinorGridlines ( );
__declspec(implementation_key(10616)) void IAxis::PutHasMinorGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10617)) VARIANT_BOOL IAxis::GetHasTitle ( );
__declspec(implementation_key(10618)) void IAxis::PutHasTitle ( VARIANT_BOOL RHS );
__declspec(implementation_key(10619)) GridlinesPtr IAxis::GetMajorGridlines ( );
__declspec(implementation_key(10620)) enum XlTickMark IAxis::GetMajorTickMark ( );
__declspec(implementation_key(10621)) void IAxis::PutMajorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(10622)) double IAxis::GetMajorUnit ( );
__declspec(implementation_key(10623)) void IAxis::PutMajorUnit ( double RHS );
__declspec(implementation_key(10624)) VARIANT_BOOL IAxis::GetMajorUnitIsAuto ( );
__declspec(implementation_key(10625)) void IAxis::PutMajorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10626)) double IAxis::GetMaximumScale ( );
__declspec(implementation_key(10627)) void IAxis::PutMaximumScale ( double RHS );
__declspec(implementation_key(10628)) VARIANT_BOOL IAxis::GetMaximumScaleIsAuto ( );
__declspec(implementation_key(10629)) void IAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10630)) double IAxis::GetMinimumScale ( );
__declspec(implementation_key(10631)) void IAxis::PutMinimumScale ( double RHS );
__declspec(implementation_key(10632)) VARIANT_BOOL IAxis::GetMinimumScaleIsAuto ( );
__declspec(implementation_key(10633)) void IAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10634)) GridlinesPtr IAxis::GetMinorGridlines ( );
__declspec(implementation_key(10635)) enum XlTickMark IAxis::GetMinorTickMark ( );
__declspec(implementation_key(10636)) void IAxis::PutMinorTickMark ( enum XlTickMark RHS );
__declspec(implementation_key(10637)) double IAxis::GetMinorUnit ( );
__declspec(implementation_key(10638)) void IAxis::PutMinorUnit ( double RHS );
__declspec(implementation_key(10639)) VARIANT_BOOL IAxis::GetMinorUnitIsAuto ( );
__declspec(implementation_key(10640)) void IAxis::PutMinorUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10641)) VARIANT_BOOL IAxis::GetReversePlotOrder ( );
__declspec(implementation_key(10642)) void IAxis::PutReversePlotOrder ( VARIANT_BOOL RHS );
__declspec(implementation_key(10643)) enum XlScaleType IAxis::GetScaleType ( );
__declspec(implementation_key(10644)) void IAxis::PutScaleType ( enum XlScaleType RHS );
__declspec(implementation_key(10645)) _variant_t IAxis::Select ( );
__declspec(implementation_key(10646)) enum XlTickLabelPosition IAxis::GetTickLabelPosition ( );
__declspec(implementation_key(10647)) void IAxis::PutTickLabelPosition ( enum XlTickLabelPosition RHS );
__declspec(implementation_key(10648)) TickLabelsPtr IAxis::GetTickLabels ( );
__declspec(implementation_key(10649)) long IAxis::GetTickLabelSpacing ( );
__declspec(implementation_key(10650)) void IAxis::PutTickLabelSpacing ( long RHS );
__declspec(implementation_key(10651)) long IAxis::GetTickMarkSpacing ( );
__declspec(implementation_key(10652)) void IAxis::PutTickMarkSpacing ( long RHS );
__declspec(implementation_key(10653)) enum XlAxisType IAxis::GetType ( );
__declspec(implementation_key(10654)) void IAxis::PutType ( enum XlAxisType RHS );
__declspec(implementation_key(10655)) enum XlTimeUnit IAxis::GetBaseUnit ( );
__declspec(implementation_key(10656)) void IAxis::PutBaseUnit ( enum XlTimeUnit RHS );
__declspec(implementation_key(10657)) VARIANT_BOOL IAxis::GetBaseUnitIsAuto ( );
__declspec(implementation_key(10658)) void IAxis::PutBaseUnitIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(10659)) enum XlTimeUnit IAxis::GetMajorUnitScale ( );
__declspec(implementation_key(10660)) void IAxis::PutMajorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(10661)) enum XlTimeUnit IAxis::GetMinorUnitScale ( );
__declspec(implementation_key(10662)) void IAxis::PutMinorUnitScale ( enum XlTimeUnit RHS );
__declspec(implementation_key(10663)) enum XlCategoryType IAxis::GetCategoryType ( );
__declspec(implementation_key(10664)) void IAxis::PutCategoryType ( enum XlCategoryType RHS );
__declspec(implementation_key(10665)) double IAxis::GetLeft ( );
__declspec(implementation_key(10666)) double IAxis::GetTop ( );
__declspec(implementation_key(10667)) double IAxis::GetWidth ( );
__declspec(implementation_key(10668)) double IAxis::GetHeight ( );
__declspec(implementation_key(10669)) enum XlDisplayUnit IAxis::GetDisplayUnit ( );
__declspec(implementation_key(10670)) void IAxis::PutDisplayUnit ( enum XlDisplayUnit RHS );
__declspec(implementation_key(10671)) double IAxis::GetDisplayUnitCustom ( );
__declspec(implementation_key(10672)) void IAxis::PutDisplayUnitCustom ( double RHS );
__declspec(implementation_key(10673)) VARIANT_BOOL IAxis::GetHasDisplayUnitLabel ( );
__declspec(implementation_key(10674)) void IAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(10675)) DisplayUnitLabelPtr IAxis::GetDisplayUnitLabel ( );
__declspec(implementation_key(10676)) _ApplicationPtr IChartTitle::GetApplication ( );
__declspec(implementation_key(10677)) enum XlCreator IChartTitle::GetCreator ( );
__declspec(implementation_key(10678)) IDispatchPtr IChartTitle::GetParent ( );
__declspec(implementation_key(10679)) _bstr_t IChartTitle::GetName ( );
__declspec(implementation_key(10680)) _variant_t IChartTitle::Select ( );
__declspec(implementation_key(10681)) BorderPtr IChartTitle::GetBorder ( );
__declspec(implementation_key(10682)) _variant_t IChartTitle::Delete ( );
__declspec(implementation_key(10683)) InteriorPtr IChartTitle::GetInterior ( );
__declspec(implementation_key(10684)) ChartFillFormatPtr IChartTitle::GetFill ( );
__declspec(implementation_key(10685)) _bstr_t IChartTitle::GetCaption ( );
__declspec(implementation_key(10686)) void IChartTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(10687)) CharactersPtr IChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10688)) FontPtr IChartTitle::GetFont ( );
__declspec(implementation_key(10689)) _variant_t IChartTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(10690)) void IChartTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10691)) double IChartTitle::GetLeft ( );
__declspec(implementation_key(10692)) void IChartTitle::PutLeft ( double RHS );
__declspec(implementation_key(10693)) _variant_t IChartTitle::GetOrientation ( );
__declspec(implementation_key(10694)) void IChartTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(10695)) VARIANT_BOOL IChartTitle::GetShadow ( );
__declspec(implementation_key(10696)) void IChartTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10697)) _bstr_t IChartTitle::GetText ( );
__declspec(implementation_key(10698)) void IChartTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(10699)) double IChartTitle::GetTop ( );
__declspec(implementation_key(10700)) void IChartTitle::PutTop ( double RHS );
__declspec(implementation_key(10701)) _variant_t IChartTitle::GetVerticalAlignment ( );
__declspec(implementation_key(10702)) void IChartTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10703)) long IChartTitle::GetReadingOrder ( );
__declspec(implementation_key(10704)) void IChartTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(10705)) _variant_t IChartTitle::GetAutoScaleFont ( );
__declspec(implementation_key(10706)) void IChartTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10707)) _ApplicationPtr IAxisTitle::GetApplication ( );
__declspec(implementation_key(10708)) enum XlCreator IAxisTitle::GetCreator ( );
__declspec(implementation_key(10709)) IDispatchPtr IAxisTitle::GetParent ( );
__declspec(implementation_key(10710)) _bstr_t IAxisTitle::GetName ( );
__declspec(implementation_key(10711)) _variant_t IAxisTitle::Select ( );
__declspec(implementation_key(10712)) BorderPtr IAxisTitle::GetBorder ( );
__declspec(implementation_key(10713)) _variant_t IAxisTitle::Delete ( );
__declspec(implementation_key(10714)) InteriorPtr IAxisTitle::GetInterior ( );
__declspec(implementation_key(10715)) ChartFillFormatPtr IAxisTitle::GetFill ( );
__declspec(implementation_key(10716)) _bstr_t IAxisTitle::GetCaption ( );
__declspec(implementation_key(10717)) void IAxisTitle::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(10718)) CharactersPtr IAxisTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10719)) FontPtr IAxisTitle::GetFont ( );
__declspec(implementation_key(10720)) _variant_t IAxisTitle::GetHorizontalAlignment ( );
__declspec(implementation_key(10721)) void IAxisTitle::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10722)) double IAxisTitle::GetLeft ( );
__declspec(implementation_key(10723)) void IAxisTitle::PutLeft ( double RHS );
__declspec(implementation_key(10724)) _variant_t IAxisTitle::GetOrientation ( );
__declspec(implementation_key(10725)) void IAxisTitle::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(10726)) VARIANT_BOOL IAxisTitle::GetShadow ( );
__declspec(implementation_key(10727)) void IAxisTitle::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10728)) _bstr_t IAxisTitle::GetText ( );
__declspec(implementation_key(10729)) void IAxisTitle::PutText ( _bstr_t RHS );
__declspec(implementation_key(10730)) double IAxisTitle::GetTop ( );
__declspec(implementation_key(10731)) void IAxisTitle::PutTop ( double RHS );
__declspec(implementation_key(10732)) _variant_t IAxisTitle::GetVerticalAlignment ( );
__declspec(implementation_key(10733)) void IAxisTitle::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10734)) long IAxisTitle::GetReadingOrder ( );
__declspec(implementation_key(10735)) void IAxisTitle::PutReadingOrder ( long RHS );
__declspec(implementation_key(10736)) _variant_t IAxisTitle::GetAutoScaleFont ( );
__declspec(implementation_key(10737)) void IAxisTitle::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10738)) _ApplicationPtr IChartGroup::GetApplication ( );
__declspec(implementation_key(10739)) enum XlCreator IChartGroup::GetCreator ( );
__declspec(implementation_key(10740)) IDispatchPtr IChartGroup::GetParent ( );
__declspec(implementation_key(10741)) enum XlAxisGroup IChartGroup::GetAxisGroup ( );
__declspec(implementation_key(10742)) void IChartGroup::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(10743)) long IChartGroup::GetDoughnutHoleSize ( );
__declspec(implementation_key(10744)) void IChartGroup::PutDoughnutHoleSize ( long RHS );
__declspec(implementation_key(10745)) DownBarsPtr IChartGroup::GetDownBars ( );
__declspec(implementation_key(10746)) DropLinesPtr IChartGroup::GetDropLines ( );
__declspec(implementation_key(10747)) long IChartGroup::GetFirstSliceAngle ( );
__declspec(implementation_key(10748)) void IChartGroup::PutFirstSliceAngle ( long RHS );
__declspec(implementation_key(10749)) long IChartGroup::GetGapWidth ( );
__declspec(implementation_key(10750)) void IChartGroup::PutGapWidth ( long RHS );
__declspec(implementation_key(10751)) VARIANT_BOOL IChartGroup::GetHasDropLines ( );
__declspec(implementation_key(10752)) void IChartGroup::PutHasDropLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10753)) VARIANT_BOOL IChartGroup::GetHasHiLoLines ( );
__declspec(implementation_key(10754)) void IChartGroup::PutHasHiLoLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10755)) VARIANT_BOOL IChartGroup::GetHasRadarAxisLabels ( );
__declspec(implementation_key(10756)) void IChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(10757)) VARIANT_BOOL IChartGroup::GetHasSeriesLines ( );
__declspec(implementation_key(10758)) void IChartGroup::PutHasSeriesLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10759)) VARIANT_BOOL IChartGroup::GetHasUpDownBars ( );
__declspec(implementation_key(10760)) void IChartGroup::PutHasUpDownBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(10761)) HiLoLinesPtr IChartGroup::GetHiLoLines ( );
__declspec(implementation_key(10762)) long IChartGroup::GetIndex ( );
__declspec(implementation_key(10763)) long IChartGroup::GetOverlap ( );
__declspec(implementation_key(10764)) void IChartGroup::PutOverlap ( long RHS );
__declspec(implementation_key(10765)) TickLabelsPtr IChartGroup::GetRadarAxisLabels ( );
__declspec(implementation_key(10766)) IDispatchPtr IChartGroup::SeriesCollection ( const _variant_t & Index );
__declspec(implementation_key(10767)) SeriesLinesPtr IChartGroup::GetSeriesLines ( );
__declspec(implementation_key(10768)) long IChartGroup::GetSubType ( );
__declspec(implementation_key(10769)) void IChartGroup::PutSubType ( long RHS );
__declspec(implementation_key(10770)) long IChartGroup::GetType ( );
__declspec(implementation_key(10771)) void IChartGroup::PutType ( long RHS );
__declspec(implementation_key(10772)) UpBarsPtr IChartGroup::GetUpBars ( );
__declspec(implementation_key(10773)) VARIANT_BOOL IChartGroup::GetVaryByCategories ( );
__declspec(implementation_key(10774)) void IChartGroup::PutVaryByCategories ( VARIANT_BOOL RHS );
__declspec(implementation_key(10775)) enum XlSizeRepresents IChartGroup::GetSizeRepresents ( );
__declspec(implementation_key(10776)) void IChartGroup::PutSizeRepresents ( enum XlSizeRepresents RHS );
__declspec(implementation_key(10777)) long IChartGroup::GetBubbleScale ( );
__declspec(implementation_key(10778)) void IChartGroup::PutBubbleScale ( long RHS );
__declspec(implementation_key(10779)) VARIANT_BOOL IChartGroup::GetShowNegativeBubbles ( );
__declspec(implementation_key(10780)) void IChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL RHS );
__declspec(implementation_key(10781)) enum XlChartSplitType IChartGroup::GetSplitType ( );
__declspec(implementation_key(10782)) void IChartGroup::PutSplitType ( enum XlChartSplitType RHS );
__declspec(implementation_key(10783)) _variant_t IChartGroup::GetSplitValue ( );
__declspec(implementation_key(10784)) void IChartGroup::PutSplitValue ( const _variant_t & RHS );
__declspec(implementation_key(10785)) long IChartGroup::GetSecondPlotSize ( );
__declspec(implementation_key(10786)) void IChartGroup::PutSecondPlotSize ( long RHS );
__declspec(implementation_key(10787)) VARIANT_BOOL IChartGroup::GetHas3DShading ( );
__declspec(implementation_key(10788)) void IChartGroup::PutHas3DShading ( VARIANT_BOOL RHS );
__declspec(implementation_key(10789)) _ApplicationPtr IChartGroups::GetApplication ( );
__declspec(implementation_key(10790)) enum XlCreator IChartGroups::GetCreator ( );
__declspec(implementation_key(10791)) IDispatchPtr IChartGroups::GetParent ( );
__declspec(implementation_key(10792)) long IChartGroups::GetCount ( );
__declspec(implementation_key(10793)) ChartGroupPtr IChartGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(10794)) IUnknownPtr IChartGroups::_NewEnum ( );
__declspec(implementation_key(10795)) _ApplicationPtr IAxes::GetApplication ( );
__declspec(implementation_key(10796)) enum XlCreator IAxes::GetCreator ( );
__declspec(implementation_key(10797)) IDispatchPtr IAxes::GetParent ( );
__declspec(implementation_key(10798)) long IAxes::GetCount ( );
__declspec(implementation_key(10799)) AxisPtr IAxes::Item ( enum XlAxisType Type, enum XlAxisGroup AxisGroup );
__declspec(implementation_key(10800)) IUnknownPtr IAxes::_NewEnum ( );
__declspec(implementation_key(10801)) _ApplicationPtr IPoints::GetApplication ( );
__declspec(implementation_key(10802)) enum XlCreator IPoints::GetCreator ( );
__declspec(implementation_key(10803)) IDispatchPtr IPoints::GetParent ( );
__declspec(implementation_key(10804)) long IPoints::GetCount ( );
__declspec(implementation_key(10805)) PointPtr IPoints::Item ( long Index );
__declspec(implementation_key(10806)) IUnknownPtr IPoints::_NewEnum ( );
__declspec(implementation_key(10807)) _ApplicationPtr IPoint::GetApplication ( );
__declspec(implementation_key(10808)) enum XlCreator IPoint::GetCreator ( );
__declspec(implementation_key(10809)) IDispatchPtr IPoint::GetParent ( );
__declspec(implementation_key(10810)) _variant_t IPoint::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(10811)) BorderPtr IPoint::GetBorder ( );
__declspec(implementation_key(10812)) _variant_t IPoint::ClearFormats ( );
__declspec(implementation_key(10813)) _variant_t IPoint::Copy ( );
__declspec(implementation_key(10814)) DataLabelPtr IPoint::GetDataLabel ( );
__declspec(implementation_key(10815)) _variant_t IPoint::Delete ( );
__declspec(implementation_key(10816)) long IPoint::GetExplosion ( );
__declspec(implementation_key(10817)) void IPoint::PutExplosion ( long RHS );
__declspec(implementation_key(10818)) VARIANT_BOOL IPoint::GetHasDataLabel ( );
__declspec(implementation_key(10819)) void IPoint::PutHasDataLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(10820)) InteriorPtr IPoint::GetInterior ( );
__declspec(implementation_key(10821)) VARIANT_BOOL IPoint::GetInvertIfNegative ( );
__declspec(implementation_key(10822)) void IPoint::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(10823)) long IPoint::GetMarkerBackgroundColor ( );
__declspec(implementation_key(10824)) void IPoint::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(10825)) enum XlColorIndex IPoint::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(10826)) void IPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10827)) long IPoint::GetMarkerForegroundColor ( );
__declspec(implementation_key(10828)) void IPoint::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(10829)) enum XlColorIndex IPoint::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(10830)) void IPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10831)) long IPoint::GetMarkerSize ( );
__declspec(implementation_key(10832)) void IPoint::PutMarkerSize ( long RHS );
__declspec(implementation_key(10833)) enum XlMarkerStyle IPoint::GetMarkerStyle ( );
__declspec(implementation_key(10834)) void IPoint::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(10835)) _variant_t IPoint::Paste ( );
__declspec(implementation_key(10836)) enum XlChartPictureType IPoint::GetPictureType ( );
__declspec(implementation_key(10837)) void IPoint::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(10838)) long IPoint::GetPictureUnit ( );
__declspec(implementation_key(10839)) void IPoint::PutPictureUnit ( long RHS );
__declspec(implementation_key(10840)) _variant_t IPoint::Select ( );
__declspec(implementation_key(10841)) VARIANT_BOOL IPoint::GetApplyPictToSides ( );
__declspec(implementation_key(10842)) void IPoint::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(10843)) VARIANT_BOOL IPoint::GetApplyPictToFront ( );
__declspec(implementation_key(10844)) void IPoint::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(10845)) VARIANT_BOOL IPoint::GetApplyPictToEnd ( );
__declspec(implementation_key(10846)) void IPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(10847)) VARIANT_BOOL IPoint::GetShadow ( );
__declspec(implementation_key(10848)) void IPoint::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10849)) VARIANT_BOOL IPoint::GetSecondaryPlot ( );
__declspec(implementation_key(10850)) void IPoint::PutSecondaryPlot ( VARIANT_BOOL RHS );
__declspec(implementation_key(10851)) ChartFillFormatPtr IPoint::GetFill ( );
__declspec(implementation_key(10852)) _variant_t IPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(10853)) _ApplicationPtr ISeries::GetApplication ( );
__declspec(implementation_key(10854)) enum XlCreator ISeries::GetCreator ( );
__declspec(implementation_key(10855)) IDispatchPtr ISeries::GetParent ( );
__declspec(implementation_key(10856)) _variant_t ISeries::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines );
__declspec(implementation_key(10857)) enum XlAxisGroup ISeries::GetAxisGroup ( );
__declspec(implementation_key(10858)) void ISeries::PutAxisGroup ( enum XlAxisGroup RHS );
__declspec(implementation_key(10859)) BorderPtr ISeries::GetBorder ( );
__declspec(implementation_key(10860)) _variant_t ISeries::ClearFormats ( );
__declspec(implementation_key(10861)) _variant_t ISeries::Copy ( );
__declspec(implementation_key(10862)) IDispatchPtr ISeries::DataLabels ( const _variant_t & Index );
__declspec(implementation_key(10863)) _variant_t ISeries::Delete ( );
__declspec(implementation_key(10864)) _variant_t ISeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues );
__declspec(implementation_key(10865)) ErrorBarsPtr ISeries::GetErrorBars ( );
__declspec(implementation_key(10866)) long ISeries::GetExplosion ( );
__declspec(implementation_key(10867)) void ISeries::PutExplosion ( long RHS );
__declspec(implementation_key(10868)) _bstr_t ISeries::GetFormula ( );
__declspec(implementation_key(10869)) void ISeries::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(10870)) _bstr_t ISeries::GetFormulaLocal ( );
__declspec(implementation_key(10871)) void ISeries::PutFormulaLocal ( _bstr_t RHS );
__declspec(implementation_key(10872)) _bstr_t ISeries::GetFormulaR1C1 ( );
__declspec(implementation_key(10873)) void ISeries::PutFormulaR1C1 ( _bstr_t RHS );
__declspec(implementation_key(10874)) _bstr_t ISeries::GetFormulaR1C1Local ( );
__declspec(implementation_key(10875)) void ISeries::PutFormulaR1C1Local ( _bstr_t RHS );
__declspec(implementation_key(10876)) VARIANT_BOOL ISeries::GetHasDataLabels ( );
__declspec(implementation_key(10877)) void ISeries::PutHasDataLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(10878)) VARIANT_BOOL ISeries::GetHasErrorBars ( );
__declspec(implementation_key(10879)) void ISeries::PutHasErrorBars ( VARIANT_BOOL RHS );
__declspec(implementation_key(10880)) InteriorPtr ISeries::GetInterior ( );
__declspec(implementation_key(10881)) ChartFillFormatPtr ISeries::GetFill ( );
__declspec(implementation_key(10882)) VARIANT_BOOL ISeries::GetInvertIfNegative ( );
__declspec(implementation_key(10883)) void ISeries::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(10884)) long ISeries::GetMarkerBackgroundColor ( );
__declspec(implementation_key(10885)) void ISeries::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(10886)) enum XlColorIndex ISeries::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(10887)) void ISeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10888)) long ISeries::GetMarkerForegroundColor ( );
__declspec(implementation_key(10889)) void ISeries::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(10890)) enum XlColorIndex ISeries::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(10891)) void ISeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(10892)) long ISeries::GetMarkerSize ( );
__declspec(implementation_key(10893)) void ISeries::PutMarkerSize ( long RHS );
__declspec(implementation_key(10894)) enum XlMarkerStyle ISeries::GetMarkerStyle ( );
__declspec(implementation_key(10895)) void ISeries::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(10896)) _bstr_t ISeries::GetName ( );
__declspec(implementation_key(10897)) void ISeries::PutName ( _bstr_t RHS );
__declspec(implementation_key(10898)) _variant_t ISeries::Paste ( );
__declspec(implementation_key(10899)) enum XlChartPictureType ISeries::GetPictureType ( );
__declspec(implementation_key(10900)) void ISeries::PutPictureType ( enum XlChartPictureType RHS );
__declspec(implementation_key(10901)) long ISeries::GetPictureUnit ( );
__declspec(implementation_key(10902)) void ISeries::PutPictureUnit ( long RHS );
__declspec(implementation_key(10903)) long ISeries::GetPlotOrder ( );
__declspec(implementation_key(10904)) void ISeries::PutPlotOrder ( long RHS );
__declspec(implementation_key(10905)) IDispatchPtr ISeries::Points ( const _variant_t & Index );
__declspec(implementation_key(10906)) _variant_t ISeries::Select ( );
__declspec(implementation_key(10907)) VARIANT_BOOL ISeries::GetSmooth ( );
__declspec(implementation_key(10908)) void ISeries::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(10909)) IDispatchPtr ISeries::Trendlines ( const _variant_t & Index );
__declspec(implementation_key(10910)) long ISeries::GetType ( );
__declspec(implementation_key(10911)) void ISeries::PutType ( long RHS );
__declspec(implementation_key(10912)) enum XlChartType ISeries::GetChartType ( );
__declspec(implementation_key(10913)) void ISeries::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(10914)) HRESULT ISeries::ApplyCustomType ( enum XlChartType ChartType );
__declspec(implementation_key(10915)) _variant_t ISeries::GetValues ( );
__declspec(implementation_key(10916)) void ISeries::PutValues ( const _variant_t & RHS );
__declspec(implementation_key(10917)) _variant_t ISeries::GetXValues ( );
__declspec(implementation_key(10918)) void ISeries::PutXValues ( const _variant_t & RHS );
__declspec(implementation_key(10919)) _variant_t ISeries::GetBubbleSizes ( );
__declspec(implementation_key(10920)) void ISeries::PutBubbleSizes ( const _variant_t & RHS );
__declspec(implementation_key(10921)) enum XlBarShape ISeries::GetBarShape ( );
__declspec(implementation_key(10922)) void ISeries::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(10923)) VARIANT_BOOL ISeries::GetApplyPictToSides ( );
__declspec(implementation_key(10924)) void ISeries::PutApplyPictToSides ( VARIANT_BOOL RHS );
__declspec(implementation_key(10925)) VARIANT_BOOL ISeries::GetApplyPictToFront ( );
__declspec(implementation_key(10926)) void ISeries::PutApplyPictToFront ( VARIANT_BOOL RHS );
__declspec(implementation_key(10927)) VARIANT_BOOL ISeries::GetApplyPictToEnd ( );
__declspec(implementation_key(10928)) void ISeries::PutApplyPictToEnd ( VARIANT_BOOL RHS );
__declspec(implementation_key(10929)) VARIANT_BOOL ISeries::GetHas3DEffect ( );
__declspec(implementation_key(10930)) void ISeries::PutHas3DEffect ( VARIANT_BOOL RHS );
__declspec(implementation_key(10931)) VARIANT_BOOL ISeries::GetShadow ( );
__declspec(implementation_key(10932)) void ISeries::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10933)) VARIANT_BOOL ISeries::GetHasLeaderLines ( );
__declspec(implementation_key(10934)) void ISeries::PutHasLeaderLines ( VARIANT_BOOL RHS );
__declspec(implementation_key(10935)) LeaderLinesPtr ISeries::GetLeaderLines ( );
__declspec(implementation_key(10936)) _variant_t ISeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator );
__declspec(implementation_key(10937)) _ApplicationPtr ISeriesCollection::GetApplication ( );
__declspec(implementation_key(10938)) enum XlCreator ISeriesCollection::GetCreator ( );
__declspec(implementation_key(10939)) IDispatchPtr ISeriesCollection::GetParent ( );
__declspec(implementation_key(10940)) SeriesPtr ISeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace );
__declspec(implementation_key(10941)) long ISeriesCollection::GetCount ( );
__declspec(implementation_key(10942)) _variant_t ISeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels );
__declspec(implementation_key(10943)) SeriesPtr ISeriesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(10944)) IUnknownPtr ISeriesCollection::_NewEnum ( );
__declspec(implementation_key(10945)) _variant_t ISeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries );
__declspec(implementation_key(10946)) SeriesPtr ISeriesCollection::NewSeries ( );
__declspec(implementation_key(10947)) _ApplicationPtr IDataLabel::GetApplication ( );
__declspec(implementation_key(10948)) enum XlCreator IDataLabel::GetCreator ( );
__declspec(implementation_key(10949)) IDispatchPtr IDataLabel::GetParent ( );
__declspec(implementation_key(10950)) _bstr_t IDataLabel::GetName ( );
__declspec(implementation_key(10951)) _variant_t IDataLabel::Select ( );
__declspec(implementation_key(10952)) BorderPtr IDataLabel::GetBorder ( );
__declspec(implementation_key(10953)) _variant_t IDataLabel::Delete ( );
__declspec(implementation_key(10954)) InteriorPtr IDataLabel::GetInterior ( );
__declspec(implementation_key(10955)) ChartFillFormatPtr IDataLabel::GetFill ( );
__declspec(implementation_key(10956)) _bstr_t IDataLabel::GetCaption ( );
__declspec(implementation_key(10957)) void IDataLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(10958)) CharactersPtr IDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(10959)) FontPtr IDataLabel::GetFont ( );
__declspec(implementation_key(10960)) _variant_t IDataLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(10961)) void IDataLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10962)) double IDataLabel::GetLeft ( );
__declspec(implementation_key(10963)) void IDataLabel::PutLeft ( double RHS );
__declspec(implementation_key(10964)) _variant_t IDataLabel::GetOrientation ( );
__declspec(implementation_key(10965)) void IDataLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(10966)) VARIANT_BOOL IDataLabel::GetShadow ( );
__declspec(implementation_key(10967)) void IDataLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(10968)) _bstr_t IDataLabel::GetText ( );
__declspec(implementation_key(10969)) void IDataLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(10970)) double IDataLabel::GetTop ( );
__declspec(implementation_key(10971)) void IDataLabel::PutTop ( double RHS );
__declspec(implementation_key(10972)) _variant_t IDataLabel::GetVerticalAlignment ( );
__declspec(implementation_key(10973)) void IDataLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(10974)) long IDataLabel::GetReadingOrder ( );
__declspec(implementation_key(10975)) void IDataLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(10976)) _variant_t IDataLabel::GetAutoScaleFont ( );
__declspec(implementation_key(10977)) void IDataLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(10978)) VARIANT_BOOL IDataLabel::GetAutoText ( );
__declspec(implementation_key(10979)) void IDataLabel::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(10980)) _bstr_t IDataLabel::GetNumberFormat ( );
__declspec(implementation_key(10981)) void IDataLabel::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(10982)) VARIANT_BOOL IDataLabel::GetNumberFormatLinked ( );
__declspec(implementation_key(10983)) void IDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(10984)) _variant_t IDataLabel::GetNumberFormatLocal ( );
__declspec(implementation_key(10985)) void IDataLabel::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(10986)) VARIANT_BOOL IDataLabel::GetShowLegendKey ( );
__declspec(implementation_key(10987)) void IDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(10988)) _variant_t IDataLabel::GetType ( );
__declspec(implementation_key(10989)) void IDataLabel::PutType ( const _variant_t & RHS );
__declspec(implementation_key(10990)) enum XlDataLabelPosition IDataLabel::GetPosition ( );
__declspec(implementation_key(10991)) void IDataLabel::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(10992)) VARIANT_BOOL IDataLabel::GetShowSeriesName ( );
__declspec(implementation_key(10993)) void IDataLabel::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(10994)) VARIANT_BOOL IDataLabel::GetShowCategoryName ( );
__declspec(implementation_key(10995)) void IDataLabel::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(10996)) VARIANT_BOOL IDataLabel::GetShowValue ( );
__declspec(implementation_key(10997)) void IDataLabel::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(10998)) VARIANT_BOOL IDataLabel::GetShowPercentage ( );
__declspec(implementation_key(10999)) void IDataLabel::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11000)) VARIANT_BOOL IDataLabel::GetShowBubbleSize ( );
__declspec(implementation_key(11001)) void IDataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(11002)) _variant_t IDataLabel::GetSeparator ( );
__declspec(implementation_key(11003)) void IDataLabel::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(11004)) _ApplicationPtr IDataLabels::GetApplication ( );
__declspec(implementation_key(11005)) enum XlCreator IDataLabels::GetCreator ( );
__declspec(implementation_key(11006)) IDispatchPtr IDataLabels::GetParent ( );
__declspec(implementation_key(11007)) _bstr_t IDataLabels::GetName ( );
__declspec(implementation_key(11008)) _variant_t IDataLabels::Select ( );
__declspec(implementation_key(11009)) BorderPtr IDataLabels::GetBorder ( );
__declspec(implementation_key(11010)) _variant_t IDataLabels::Delete ( );
__declspec(implementation_key(11011)) InteriorPtr IDataLabels::GetInterior ( );
__declspec(implementation_key(11012)) ChartFillFormatPtr IDataLabels::GetFill ( );
__declspec(implementation_key(11013)) FontPtr IDataLabels::GetFont ( );
__declspec(implementation_key(11014)) _variant_t IDataLabels::GetHorizontalAlignment ( );
__declspec(implementation_key(11015)) void IDataLabels::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11016)) _variant_t IDataLabels::GetOrientation ( );
__declspec(implementation_key(11017)) void IDataLabels::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(11018)) VARIANT_BOOL IDataLabels::GetShadow ( );
__declspec(implementation_key(11019)) void IDataLabels::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11020)) _variant_t IDataLabels::GetVerticalAlignment ( );
__declspec(implementation_key(11021)) void IDataLabels::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11022)) long IDataLabels::GetReadingOrder ( );
__declspec(implementation_key(11023)) void IDataLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(11024)) _variant_t IDataLabels::GetAutoScaleFont ( );
__declspec(implementation_key(11025)) void IDataLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11026)) VARIANT_BOOL IDataLabels::GetAutoText ( );
__declspec(implementation_key(11027)) void IDataLabels::PutAutoText ( VARIANT_BOOL RHS );
__declspec(implementation_key(11028)) _bstr_t IDataLabels::GetNumberFormat ( );
__declspec(implementation_key(11029)) void IDataLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(11030)) VARIANT_BOOL IDataLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(11031)) void IDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(11032)) _variant_t IDataLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(11033)) void IDataLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(11034)) VARIANT_BOOL IDataLabels::GetShowLegendKey ( );
__declspec(implementation_key(11035)) void IDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(11036)) _variant_t IDataLabels::GetType ( );
__declspec(implementation_key(11037)) void IDataLabels::PutType ( const _variant_t & RHS );
__declspec(implementation_key(11038)) enum XlDataLabelPosition IDataLabels::GetPosition ( );
__declspec(implementation_key(11039)) void IDataLabels::PutPosition ( enum XlDataLabelPosition RHS );
__declspec(implementation_key(11040)) VARIANT_BOOL IDataLabels::GetShowSeriesName ( );
__declspec(implementation_key(11041)) void IDataLabels::PutShowSeriesName ( VARIANT_BOOL RHS );
__declspec(implementation_key(11042)) VARIANT_BOOL IDataLabels::GetShowCategoryName ( );
__declspec(implementation_key(11043)) void IDataLabels::PutShowCategoryName ( VARIANT_BOOL RHS );
__declspec(implementation_key(11044)) VARIANT_BOOL IDataLabels::GetShowValue ( );
__declspec(implementation_key(11045)) void IDataLabels::PutShowValue ( VARIANT_BOOL RHS );
__declspec(implementation_key(11046)) VARIANT_BOOL IDataLabels::GetShowPercentage ( );
__declspec(implementation_key(11047)) void IDataLabels::PutShowPercentage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11048)) VARIANT_BOOL IDataLabels::GetShowBubbleSize ( );
__declspec(implementation_key(11049)) void IDataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(11050)) _variant_t IDataLabels::GetSeparator ( );
__declspec(implementation_key(11051)) void IDataLabels::PutSeparator ( const _variant_t & RHS );
__declspec(implementation_key(11052)) long IDataLabels::GetCount ( );
__declspec(implementation_key(11053)) DataLabelPtr IDataLabels::Item ( const _variant_t & Index );
__declspec(implementation_key(11054)) IUnknownPtr IDataLabels::_NewEnum ( );
__declspec(implementation_key(11055)) _ApplicationPtr ILegendEntry::GetApplication ( );
__declspec(implementation_key(11056)) enum XlCreator ILegendEntry::GetCreator ( );
__declspec(implementation_key(11057)) IDispatchPtr ILegendEntry::GetParent ( );
__declspec(implementation_key(11058)) _variant_t ILegendEntry::Delete ( );
__declspec(implementation_key(11059)) FontPtr ILegendEntry::GetFont ( );
__declspec(implementation_key(11060)) long ILegendEntry::GetIndex ( );
__declspec(implementation_key(11061)) LegendKeyPtr ILegendEntry::GetLegendKey ( );
__declspec(implementation_key(11062)) _variant_t ILegendEntry::Select ( );
__declspec(implementation_key(11063)) _variant_t ILegendEntry::GetAutoScaleFont ( );
__declspec(implementation_key(11064)) void ILegendEntry::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11065)) double ILegendEntry::GetLeft ( );
__declspec(implementation_key(11066)) double ILegendEntry::GetTop ( );
__declspec(implementation_key(11067)) double ILegendEntry::GetWidth ( );
__declspec(implementation_key(11068)) double ILegendEntry::GetHeight ( );
__declspec(implementation_key(11069)) _ApplicationPtr ILegendEntries::GetApplication ( );
__declspec(implementation_key(11070)) enum XlCreator ILegendEntries::GetCreator ( );
__declspec(implementation_key(11071)) IDispatchPtr ILegendEntries::GetParent ( );
__declspec(implementation_key(11072)) long ILegendEntries::GetCount ( );
__declspec(implementation_key(11073)) LegendEntryPtr ILegendEntries::Item ( const _variant_t & Index );
__declspec(implementation_key(11074)) IUnknownPtr ILegendEntries::_NewEnum ( );
__declspec(implementation_key(11075)) _ApplicationPtr ILegendKey::GetApplication ( );
__declspec(implementation_key(11076)) enum XlCreator ILegendKey::GetCreator ( );
__declspec(implementation_key(11077)) IDispatchPtr ILegendKey::GetParent ( );
__declspec(implementation_key(11078)) BorderPtr ILegendKey::GetBorder ( );
__declspec(implementation_key(11079)) _variant_t ILegendKey::ClearFormats ( );
__declspec(implementation_key(11080)) _variant_t ILegendKey::Delete ( );
__declspec(implementation_key(11081)) InteriorPtr ILegendKey::GetInterior ( );
__declspec(implementation_key(11082)) ChartFillFormatPtr ILegendKey::GetFill ( );
__declspec(implementation_key(11083)) VARIANT_BOOL ILegendKey::GetInvertIfNegative ( );
__declspec(implementation_key(11084)) void ILegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS );
__declspec(implementation_key(11085)) long ILegendKey::GetMarkerBackgroundColor ( );
__declspec(implementation_key(11086)) void ILegendKey::PutMarkerBackgroundColor ( long RHS );
__declspec(implementation_key(11087)) enum XlColorIndex ILegendKey::GetMarkerBackgroundColorIndex ( );
__declspec(implementation_key(11088)) void ILegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(11089)) long ILegendKey::GetMarkerForegroundColor ( );
__declspec(implementation_key(11090)) void ILegendKey::PutMarkerForegroundColor ( long RHS );
__declspec(implementation_key(11091)) enum XlColorIndex ILegendKey::GetMarkerForegroundColorIndex ( );
__declspec(implementation_key(11092)) void ILegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(11093)) long ILegendKey::GetMarkerSize ( );
__declspec(implementation_key(11094)) void ILegendKey::PutMarkerSize ( long RHS );
__declspec(implementation_key(11095)) enum XlMarkerStyle ILegendKey::GetMarkerStyle ( );
__declspec(implementation_key(11096)) void ILegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS );
__declspec(implementation_key(11097)) long ILegendKey::GetPictureType ( );
__declspec(implementation_key(11098)) void ILegendKey::PutPictureType ( long RHS );
__declspec(implementation_key(11099)) long ILegendKey::GetPictureUnit ( );
__declspec(implementation_key(11100)) void ILegendKey::PutPictureUnit ( long RHS );
__declspec(implementation_key(11101)) _variant_t ILegendKey::Select ( );
__declspec(implementation_key(11102)) VARIANT_BOOL ILegendKey::GetSmooth ( );
__declspec(implementation_key(11103)) void ILegendKey::PutSmooth ( VARIANT_BOOL RHS );
__declspec(implementation_key(11104)) double ILegendKey::GetLeft ( );
__declspec(implementation_key(11105)) double ILegendKey::GetTop ( );
__declspec(implementation_key(11106)) double ILegendKey::GetWidth ( );
__declspec(implementation_key(11107)) double ILegendKey::GetHeight ( );
__declspec(implementation_key(11108)) VARIANT_BOOL ILegendKey::GetShadow ( );
__declspec(implementation_key(11109)) void ILegendKey::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11110)) _ApplicationPtr ITrendlines::GetApplication ( );
__declspec(implementation_key(11111)) enum XlCreator ITrendlines::GetCreator ( );
__declspec(implementation_key(11112)) IDispatchPtr ITrendlines::GetParent ( );
__declspec(implementation_key(11113)) TrendlinePtr ITrendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name );
__declspec(implementation_key(11114)) long ITrendlines::GetCount ( );
__declspec(implementation_key(11115)) TrendlinePtr ITrendlines::Item ( const _variant_t & Index );
__declspec(implementation_key(11116)) IUnknownPtr ITrendlines::_NewEnum ( );
__declspec(implementation_key(11117)) _ApplicationPtr ITrendline::GetApplication ( );
__declspec(implementation_key(11118)) enum XlCreator ITrendline::GetCreator ( );
__declspec(implementation_key(11119)) IDispatchPtr ITrendline::GetParent ( );
__declspec(implementation_key(11120)) long ITrendline::GetBackward ( );
__declspec(implementation_key(11121)) void ITrendline::PutBackward ( long RHS );
__declspec(implementation_key(11122)) BorderPtr ITrendline::GetBorder ( );
__declspec(implementation_key(11123)) _variant_t ITrendline::ClearFormats ( );
__declspec(implementation_key(11124)) DataLabelPtr ITrendline::GetDataLabel ( );
__declspec(implementation_key(11125)) _variant_t ITrendline::Delete ( );
__declspec(implementation_key(11126)) VARIANT_BOOL ITrendline::GetDisplayEquation ( );
__declspec(implementation_key(11127)) void ITrendline::PutDisplayEquation ( VARIANT_BOOL RHS );
__declspec(implementation_key(11128)) VARIANT_BOOL ITrendline::GetDisplayRSquared ( );
__declspec(implementation_key(11129)) void ITrendline::PutDisplayRSquared ( VARIANT_BOOL RHS );
__declspec(implementation_key(11130)) long ITrendline::GetForward ( );
__declspec(implementation_key(11131)) void ITrendline::PutForward ( long RHS );
__declspec(implementation_key(11132)) long ITrendline::GetIndex ( );
__declspec(implementation_key(11133)) double ITrendline::GetIntercept ( );
__declspec(implementation_key(11134)) void ITrendline::PutIntercept ( double RHS );
__declspec(implementation_key(11135)) VARIANT_BOOL ITrendline::GetInterceptIsAuto ( );
__declspec(implementation_key(11136)) void ITrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(11137)) _bstr_t ITrendline::GetName ( );
__declspec(implementation_key(11138)) void ITrendline::PutName ( _bstr_t RHS );
__declspec(implementation_key(11139)) VARIANT_BOOL ITrendline::GetNameIsAuto ( );
__declspec(implementation_key(11140)) void ITrendline::PutNameIsAuto ( VARIANT_BOOL RHS );
__declspec(implementation_key(11141)) long ITrendline::GetOrder ( );
__declspec(implementation_key(11142)) void ITrendline::PutOrder ( long RHS );
__declspec(implementation_key(11143)) long ITrendline::GetPeriod ( );
__declspec(implementation_key(11144)) void ITrendline::PutPeriod ( long RHS );
__declspec(implementation_key(11145)) _variant_t ITrendline::Select ( );
__declspec(implementation_key(11146)) enum XlTrendlineType ITrendline::GetType ( );
__declspec(implementation_key(11147)) void ITrendline::PutType ( enum XlTrendlineType RHS );
__declspec(implementation_key(11148)) _ApplicationPtr ICorners::GetApplication ( );
__declspec(implementation_key(11149)) enum XlCreator ICorners::GetCreator ( );
__declspec(implementation_key(11150)) IDispatchPtr ICorners::GetParent ( );
__declspec(implementation_key(11151)) _bstr_t ICorners::GetName ( );
__declspec(implementation_key(11152)) _variant_t ICorners::Select ( );
__declspec(implementation_key(11153)) _ApplicationPtr ISeriesLines::GetApplication ( );
__declspec(implementation_key(11154)) enum XlCreator ISeriesLines::GetCreator ( );
__declspec(implementation_key(11155)) IDispatchPtr ISeriesLines::GetParent ( );
__declspec(implementation_key(11156)) _bstr_t ISeriesLines::GetName ( );
__declspec(implementation_key(11157)) _variant_t ISeriesLines::Select ( );
__declspec(implementation_key(11158)) BorderPtr ISeriesLines::GetBorder ( );
__declspec(implementation_key(11159)) _variant_t ISeriesLines::Delete ( );
__declspec(implementation_key(11160)) _ApplicationPtr IHiLoLines::GetApplication ( );
__declspec(implementation_key(11161)) enum XlCreator IHiLoLines::GetCreator ( );
__declspec(implementation_key(11162)) IDispatchPtr IHiLoLines::GetParent ( );
__declspec(implementation_key(11163)) _bstr_t IHiLoLines::GetName ( );
__declspec(implementation_key(11164)) _variant_t IHiLoLines::Select ( );
__declspec(implementation_key(11165)) BorderPtr IHiLoLines::GetBorder ( );
__declspec(implementation_key(11166)) _variant_t IHiLoLines::Delete ( );
__declspec(implementation_key(11167)) _ApplicationPtr IGridlines::GetApplication ( );
__declspec(implementation_key(11168)) enum XlCreator IGridlines::GetCreator ( );
__declspec(implementation_key(11169)) IDispatchPtr IGridlines::GetParent ( );
__declspec(implementation_key(11170)) _bstr_t IGridlines::GetName ( );
__declspec(implementation_key(11171)) _variant_t IGridlines::Select ( );
__declspec(implementation_key(11172)) BorderPtr IGridlines::GetBorder ( );
__declspec(implementation_key(11173)) _variant_t IGridlines::Delete ( );
__declspec(implementation_key(11174)) _ApplicationPtr IDropLines::GetApplication ( );
__declspec(implementation_key(11175)) enum XlCreator IDropLines::GetCreator ( );
__declspec(implementation_key(11176)) IDispatchPtr IDropLines::GetParent ( );
__declspec(implementation_key(11177)) _bstr_t IDropLines::GetName ( );
__declspec(implementation_key(11178)) _variant_t IDropLines::Select ( );
__declspec(implementation_key(11179)) BorderPtr IDropLines::GetBorder ( );
__declspec(implementation_key(11180)) _variant_t IDropLines::Delete ( );
__declspec(implementation_key(11181)) _ApplicationPtr ILeaderLines::GetApplication ( );
__declspec(implementation_key(11182)) enum XlCreator ILeaderLines::GetCreator ( );
__declspec(implementation_key(11183)) IDispatchPtr ILeaderLines::GetParent ( );
__declspec(implementation_key(11184)) BorderPtr ILeaderLines::GetBorder ( );
__declspec(implementation_key(11185)) HRESULT ILeaderLines::Delete ( );
__declspec(implementation_key(11186)) HRESULT ILeaderLines::Select ( );
__declspec(implementation_key(11187)) _ApplicationPtr IUpBars::GetApplication ( );
__declspec(implementation_key(11188)) enum XlCreator IUpBars::GetCreator ( );
__declspec(implementation_key(11189)) IDispatchPtr IUpBars::GetParent ( );
__declspec(implementation_key(11190)) _bstr_t IUpBars::GetName ( );
__declspec(implementation_key(11191)) _variant_t IUpBars::Select ( );
__declspec(implementation_key(11192)) BorderPtr IUpBars::GetBorder ( );
__declspec(implementation_key(11193)) _variant_t IUpBars::Delete ( );
__declspec(implementation_key(11194)) InteriorPtr IUpBars::GetInterior ( );
__declspec(implementation_key(11195)) ChartFillFormatPtr IUpBars::GetFill ( );
__declspec(implementation_key(11196)) _ApplicationPtr IDownBars::GetApplication ( );
__declspec(implementation_key(11197)) enum XlCreator IDownBars::GetCreator ( );
__declspec(implementation_key(11198)) IDispatchPtr IDownBars::GetParent ( );
__declspec(implementation_key(11199)) _bstr_t IDownBars::GetName ( );
__declspec(implementation_key(11200)) _variant_t IDownBars::Select ( );
__declspec(implementation_key(11201)) BorderPtr IDownBars::GetBorder ( );
__declspec(implementation_key(11202)) _variant_t IDownBars::Delete ( );
__declspec(implementation_key(11203)) InteriorPtr IDownBars::GetInterior ( );
__declspec(implementation_key(11204)) ChartFillFormatPtr IDownBars::GetFill ( );
__declspec(implementation_key(11205)) _ApplicationPtr IFloor::GetApplication ( );
__declspec(implementation_key(11206)) enum XlCreator IFloor::GetCreator ( );
__declspec(implementation_key(11207)) IDispatchPtr IFloor::GetParent ( );
__declspec(implementation_key(11208)) _bstr_t IFloor::GetName ( );
__declspec(implementation_key(11209)) _variant_t IFloor::Select ( );
__declspec(implementation_key(11210)) BorderPtr IFloor::GetBorder ( );
__declspec(implementation_key(11211)) _variant_t IFloor::ClearFormats ( );
__declspec(implementation_key(11212)) InteriorPtr IFloor::GetInterior ( );
__declspec(implementation_key(11213)) ChartFillFormatPtr IFloor::GetFill ( );
__declspec(implementation_key(11214)) _variant_t IFloor::GetPictureType ( );
__declspec(implementation_key(11215)) void IFloor::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(11216)) HRESULT IFloor::Paste ( );
__declspec(implementation_key(11217)) _ApplicationPtr IWalls::GetApplication ( );
__declspec(implementation_key(11218)) enum XlCreator IWalls::GetCreator ( );
__declspec(implementation_key(11219)) IDispatchPtr IWalls::GetParent ( );
__declspec(implementation_key(11220)) _bstr_t IWalls::GetName ( );
__declspec(implementation_key(11221)) _variant_t IWalls::Select ( );
__declspec(implementation_key(11222)) BorderPtr IWalls::GetBorder ( );
__declspec(implementation_key(11223)) _variant_t IWalls::ClearFormats ( );
__declspec(implementation_key(11224)) InteriorPtr IWalls::GetInterior ( );
__declspec(implementation_key(11225)) ChartFillFormatPtr IWalls::GetFill ( );
__declspec(implementation_key(11226)) _variant_t IWalls::GetPictureType ( );
__declspec(implementation_key(11227)) void IWalls::PutPictureType ( const _variant_t & RHS );
__declspec(implementation_key(11228)) HRESULT IWalls::Paste ( );
__declspec(implementation_key(11229)) _variant_t IWalls::GetPictureUnit ( );
__declspec(implementation_key(11230)) void IWalls::PutPictureUnit ( const _variant_t & RHS );
__declspec(implementation_key(11231)) _ApplicationPtr ITickLabels::GetApplication ( );
__declspec(implementation_key(11232)) enum XlCreator ITickLabels::GetCreator ( );
__declspec(implementation_key(11233)) IDispatchPtr ITickLabels::GetParent ( );
__declspec(implementation_key(11234)) _variant_t ITickLabels::Delete ( );
__declspec(implementation_key(11235)) FontPtr ITickLabels::GetFont ( );
__declspec(implementation_key(11236)) _bstr_t ITickLabels::GetName ( );
__declspec(implementation_key(11237)) _bstr_t ITickLabels::GetNumberFormat ( );
__declspec(implementation_key(11238)) void ITickLabels::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(11239)) VARIANT_BOOL ITickLabels::GetNumberFormatLinked ( );
__declspec(implementation_key(11240)) void ITickLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS );
__declspec(implementation_key(11241)) _variant_t ITickLabels::GetNumberFormatLocal ( );
__declspec(implementation_key(11242)) void ITickLabels::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(11243)) enum XlTickLabelOrientation ITickLabels::GetOrientation ( );
__declspec(implementation_key(11244)) void ITickLabels::PutOrientation ( enum XlTickLabelOrientation RHS );
__declspec(implementation_key(11245)) _variant_t ITickLabels::Select ( );
__declspec(implementation_key(11246)) long ITickLabels::GetReadingOrder ( );
__declspec(implementation_key(11247)) void ITickLabels::PutReadingOrder ( long RHS );
__declspec(implementation_key(11248)) _variant_t ITickLabels::GetAutoScaleFont ( );
__declspec(implementation_key(11249)) void ITickLabels::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11250)) long ITickLabels::GetDepth ( );
__declspec(implementation_key(11251)) long ITickLabels::GetOffset ( );
__declspec(implementation_key(11252)) void ITickLabels::PutOffset ( long RHS );
__declspec(implementation_key(11253)) long ITickLabels::GetAlignment ( );
__declspec(implementation_key(11254)) void ITickLabels::PutAlignment ( long RHS );
__declspec(implementation_key(11255)) _ApplicationPtr IPlotArea::GetApplication ( );
__declspec(implementation_key(11256)) enum XlCreator IPlotArea::GetCreator ( );
__declspec(implementation_key(11257)) IDispatchPtr IPlotArea::GetParent ( );
__declspec(implementation_key(11258)) _bstr_t IPlotArea::GetName ( );
__declspec(implementation_key(11259)) _variant_t IPlotArea::Select ( );
__declspec(implementation_key(11260)) BorderPtr IPlotArea::GetBorder ( );
__declspec(implementation_key(11261)) _variant_t IPlotArea::ClearFormats ( );
__declspec(implementation_key(11262)) double IPlotArea::GetHeight ( );
__declspec(implementation_key(11263)) void IPlotArea::PutHeight ( double RHS );
__declspec(implementation_key(11264)) InteriorPtr IPlotArea::GetInterior ( );
__declspec(implementation_key(11265)) ChartFillFormatPtr IPlotArea::GetFill ( );
__declspec(implementation_key(11266)) double IPlotArea::GetLeft ( );
__declspec(implementation_key(11267)) void IPlotArea::PutLeft ( double RHS );
__declspec(implementation_key(11268)) double IPlotArea::GetTop ( );
__declspec(implementation_key(11269)) void IPlotArea::PutTop ( double RHS );
__declspec(implementation_key(11270)) double IPlotArea::GetWidth ( );
__declspec(implementation_key(11271)) void IPlotArea::PutWidth ( double RHS );
__declspec(implementation_key(11272)) double IPlotArea::GetInsideLeft ( );
__declspec(implementation_key(11273)) double IPlotArea::GetInsideTop ( );
__declspec(implementation_key(11274)) double IPlotArea::GetInsideWidth ( );
__declspec(implementation_key(11275)) double IPlotArea::GetInsideHeight ( );
__declspec(implementation_key(11276)) _ApplicationPtr IChartArea::GetApplication ( );
__declspec(implementation_key(11277)) enum XlCreator IChartArea::GetCreator ( );
__declspec(implementation_key(11278)) IDispatchPtr IChartArea::GetParent ( );
__declspec(implementation_key(11279)) _bstr_t IChartArea::GetName ( );
__declspec(implementation_key(11280)) _variant_t IChartArea::Select ( );
__declspec(implementation_key(11281)) BorderPtr IChartArea::GetBorder ( );
__declspec(implementation_key(11282)) _variant_t IChartArea::Clear ( );
__declspec(implementation_key(11283)) _variant_t IChartArea::ClearContents ( );
__declspec(implementation_key(11284)) _variant_t IChartArea::Copy ( );
__declspec(implementation_key(11285)) FontPtr IChartArea::GetFont ( );
__declspec(implementation_key(11286)) VARIANT_BOOL IChartArea::GetShadow ( );
__declspec(implementation_key(11287)) void IChartArea::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11288)) _variant_t IChartArea::ClearFormats ( );
__declspec(implementation_key(11289)) double IChartArea::GetHeight ( );
__declspec(implementation_key(11290)) void IChartArea::PutHeight ( double RHS );
__declspec(implementation_key(11291)) InteriorPtr IChartArea::GetInterior ( );
__declspec(implementation_key(11292)) ChartFillFormatPtr IChartArea::GetFill ( );
__declspec(implementation_key(11293)) double IChartArea::GetLeft ( );
__declspec(implementation_key(11294)) void IChartArea::PutLeft ( double RHS );
__declspec(implementation_key(11295)) double IChartArea::GetTop ( );
__declspec(implementation_key(11296)) void IChartArea::PutTop ( double RHS );
__declspec(implementation_key(11297)) double IChartArea::GetWidth ( );
__declspec(implementation_key(11298)) void IChartArea::PutWidth ( double RHS );
__declspec(implementation_key(11299)) _variant_t IChartArea::GetAutoScaleFont ( );
__declspec(implementation_key(11300)) void IChartArea::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11301)) _ApplicationPtr ILegend::GetApplication ( );
__declspec(implementation_key(11302)) enum XlCreator ILegend::GetCreator ( );
__declspec(implementation_key(11303)) IDispatchPtr ILegend::GetParent ( );
__declspec(implementation_key(11304)) _bstr_t ILegend::GetName ( );
__declspec(implementation_key(11305)) _variant_t ILegend::Select ( );
__declspec(implementation_key(11306)) BorderPtr ILegend::GetBorder ( );
__declspec(implementation_key(11307)) _variant_t ILegend::Delete ( );
__declspec(implementation_key(11308)) FontPtr ILegend::GetFont ( );
__declspec(implementation_key(11309)) IDispatchPtr ILegend::LegendEntries ( const _variant_t & Index );
__declspec(implementation_key(11310)) enum XlLegendPosition ILegend::GetPosition ( );
__declspec(implementation_key(11311)) void ILegend::PutPosition ( enum XlLegendPosition RHS );
__declspec(implementation_key(11312)) VARIANT_BOOL ILegend::GetShadow ( );
__declspec(implementation_key(11313)) void ILegend::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11314)) _variant_t ILegend::Clear ( );
__declspec(implementation_key(11315)) double ILegend::GetHeight ( );
__declspec(implementation_key(11316)) void ILegend::PutHeight ( double RHS );
__declspec(implementation_key(11317)) InteriorPtr ILegend::GetInterior ( );
__declspec(implementation_key(11318)) ChartFillFormatPtr ILegend::GetFill ( );
__declspec(implementation_key(11319)) double ILegend::GetLeft ( );
__declspec(implementation_key(11320)) void ILegend::PutLeft ( double RHS );
__declspec(implementation_key(11321)) double ILegend::GetTop ( );
__declspec(implementation_key(11322)) void ILegend::PutTop ( double RHS );
__declspec(implementation_key(11323)) double ILegend::GetWidth ( );
__declspec(implementation_key(11324)) void ILegend::PutWidth ( double RHS );
__declspec(implementation_key(11325)) _variant_t ILegend::GetAutoScaleFont ( );
__declspec(implementation_key(11326)) void ILegend::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11327)) _ApplicationPtr IErrorBars::GetApplication ( );
__declspec(implementation_key(11328)) enum XlCreator IErrorBars::GetCreator ( );
__declspec(implementation_key(11329)) IDispatchPtr IErrorBars::GetParent ( );
__declspec(implementation_key(11330)) _bstr_t IErrorBars::GetName ( );
__declspec(implementation_key(11331)) _variant_t IErrorBars::Select ( );
__declspec(implementation_key(11332)) BorderPtr IErrorBars::GetBorder ( );
__declspec(implementation_key(11333)) _variant_t IErrorBars::Delete ( );
__declspec(implementation_key(11334)) _variant_t IErrorBars::ClearFormats ( );
__declspec(implementation_key(11335)) enum XlEndStyleCap IErrorBars::GetEndStyle ( );
__declspec(implementation_key(11336)) void IErrorBars::PutEndStyle ( enum XlEndStyleCap RHS );
__declspec(implementation_key(11337)) _ApplicationPtr IDataTable::GetApplication ( );
__declspec(implementation_key(11338)) enum XlCreator IDataTable::GetCreator ( );
__declspec(implementation_key(11339)) IDispatchPtr IDataTable::GetParent ( );
__declspec(implementation_key(11340)) VARIANT_BOOL IDataTable::GetShowLegendKey ( );
__declspec(implementation_key(11341)) void IDataTable::PutShowLegendKey ( VARIANT_BOOL RHS );
__declspec(implementation_key(11342)) VARIANT_BOOL IDataTable::GetHasBorderHorizontal ( );
__declspec(implementation_key(11343)) void IDataTable::PutHasBorderHorizontal ( VARIANT_BOOL RHS );
__declspec(implementation_key(11344)) VARIANT_BOOL IDataTable::GetHasBorderVertical ( );
__declspec(implementation_key(11345)) void IDataTable::PutHasBorderVertical ( VARIANT_BOOL RHS );
__declspec(implementation_key(11346)) VARIANT_BOOL IDataTable::GetHasBorderOutline ( );
__declspec(implementation_key(11347)) void IDataTable::PutHasBorderOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(11348)) BorderPtr IDataTable::GetBorder ( );
__declspec(implementation_key(11349)) FontPtr IDataTable::GetFont ( );
__declspec(implementation_key(11350)) HRESULT IDataTable::Select ( );
__declspec(implementation_key(11351)) HRESULT IDataTable::Delete ( );
__declspec(implementation_key(11352)) _variant_t IDataTable::GetAutoScaleFont ( );
__declspec(implementation_key(11353)) void IDataTable::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11354)) _ApplicationPtr IPhonetic::GetApplication ( );
__declspec(implementation_key(11355)) enum XlCreator IPhonetic::GetCreator ( );
__declspec(implementation_key(11356)) IDispatchPtr IPhonetic::GetParent ( );
__declspec(implementation_key(11357)) VARIANT_BOOL IPhonetic::GetVisible ( );
__declspec(implementation_key(11358)) void IPhonetic::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(11359)) long IPhonetic::GetCharacterType ( );
__declspec(implementation_key(11360)) void IPhonetic::PutCharacterType ( long RHS );
__declspec(implementation_key(11361)) long IPhonetic::GetAlignment ( );
__declspec(implementation_key(11362)) void IPhonetic::PutAlignment ( long RHS );
__declspec(implementation_key(11363)) FontPtr IPhonetic::GetFont ( );
__declspec(implementation_key(11364)) _bstr_t IPhonetic::GetText ( );
__declspec(implementation_key(11365)) void IPhonetic::PutText ( _bstr_t RHS );
__declspec(implementation_key(11366)) _ApplicationPtr IShapes::GetApplication ( );
__declspec(implementation_key(11367)) enum XlCreator IShapes::GetCreator ( );
__declspec(implementation_key(11368)) IDispatchPtr IShapes::GetParent ( );
__declspec(implementation_key(11369)) long IShapes::GetCount ( );
__declspec(implementation_key(11370)) ShapePtr IShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(11371)) ShapePtr IShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(11372)) IUnknownPtr IShapes::Get_NewEnum ( );
__declspec(implementation_key(11373)) ShapePtr IShapes::AddCallout ( enum Office::MsoCalloutType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11374)) ShapePtr IShapes::AddConnector ( enum Office::MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(11375)) ShapePtr IShapes::AddCurve ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(11376)) ShapePtr IShapes::AddLabel ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11377)) ShapePtr IShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY );
__declspec(implementation_key(11378)) ShapePtr IShapes::AddPicture ( _bstr_t Filename, enum Office::MsoTriState LinkToFile, enum Office::MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11379)) ShapePtr IShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints );
__declspec(implementation_key(11380)) ShapePtr IShapes::AddShape ( enum Office::MsoAutoShapeType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11381)) ShapePtr IShapes::AddTextEffect ( enum Office::MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum Office::MsoTriState FontBold, enum Office::MsoTriState FontItalic, float Left, float Top );
__declspec(implementation_key(11382)) ShapePtr IShapes::AddTextbox ( enum Office::MsoTextOrientation Orientation, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11383)) FreeformBuilderPtr IShapes::BuildFreeform ( enum Office::MsoEditingType EditingType, float X1, float Y1 );
__declspec(implementation_key(11384)) ShapeRangePtr IShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(11385)) HRESULT IShapes::SelectAll ( );
__declspec(implementation_key(11386)) ShapePtr IShapes::AddFormControl ( enum XlFormControl Type, long Left, long Top, long Width, long Height );
__declspec(implementation_key(11387)) ShapePtr IShapes::AddOLEObject ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(11388)) ShapePtr IShapes::AddDiagram ( enum Office::MsoDiagramType Type, float Left, float Top, float Width, float Height );
__declspec(implementation_key(11389)) ShapePtr IShapes::AddCanvas ( float Left, float Top, float Width, float Height );
__declspec(implementation_key(11390)) _ApplicationPtr IGroupShapes::GetApplication ( );
__declspec(implementation_key(11391)) enum XlCreator IGroupShapes::GetCreator ( );
__declspec(implementation_key(11392)) IDispatchPtr IGroupShapes::GetParent ( );
__declspec(implementation_key(11393)) long IGroupShapes::GetCount ( );
__declspec(implementation_key(11394)) ShapePtr IGroupShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(11395)) ShapePtr IGroupShapes::_Default ( const _variant_t & Index );
__declspec(implementation_key(11396)) IUnknownPtr IGroupShapes::Get_NewEnum ( );
__declspec(implementation_key(11397)) ShapeRangePtr IGroupShapes::GetRange ( const _variant_t & Index );
__declspec(implementation_key(11398)) _ApplicationPtr ITextFrame::GetApplication ( );
__declspec(implementation_key(11399)) enum XlCreator ITextFrame::GetCreator ( );
__declspec(implementation_key(11400)) IDispatchPtr ITextFrame::GetParent ( );
__declspec(implementation_key(11401)) float ITextFrame::GetMarginBottom ( );
__declspec(implementation_key(11402)) void ITextFrame::PutMarginBottom ( float RHS );
__declspec(implementation_key(11403)) float ITextFrame::GetMarginLeft ( );
__declspec(implementation_key(11404)) void ITextFrame::PutMarginLeft ( float RHS );
__declspec(implementation_key(11405)) float ITextFrame::GetMarginRight ( );
__declspec(implementation_key(11406)) void ITextFrame::PutMarginRight ( float RHS );
__declspec(implementation_key(11407)) float ITextFrame::GetMarginTop ( );
__declspec(implementation_key(11408)) void ITextFrame::PutMarginTop ( float RHS );
__declspec(implementation_key(11409)) enum Office::MsoTextOrientation ITextFrame::GetOrientation ( );
__declspec(implementation_key(11410)) void ITextFrame::PutOrientation ( enum Office::MsoTextOrientation RHS );
__declspec(implementation_key(11411)) CharactersPtr ITextFrame::Characters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11412)) enum XlHAlign ITextFrame::GetHorizontalAlignment ( );
__declspec(implementation_key(11413)) void ITextFrame::PutHorizontalAlignment ( enum XlHAlign RHS );
__declspec(implementation_key(11414)) enum XlVAlign ITextFrame::GetVerticalAlignment ( );
__declspec(implementation_key(11415)) void ITextFrame::PutVerticalAlignment ( enum XlVAlign RHS );
__declspec(implementation_key(11416)) VARIANT_BOOL ITextFrame::GetAutoSize ( );
__declspec(implementation_key(11417)) void ITextFrame::PutAutoSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(11418)) long ITextFrame::GetReadingOrder ( );
__declspec(implementation_key(11419)) void ITextFrame::PutReadingOrder ( long RHS );
__declspec(implementation_key(11420)) VARIANT_BOOL ITextFrame::GetAutoMargins ( );
__declspec(implementation_key(11421)) void ITextFrame::PutAutoMargins ( VARIANT_BOOL RHS );
__declspec(implementation_key(11422)) _ApplicationPtr IConnectorFormat::GetApplication ( );
__declspec(implementation_key(11423)) enum XlCreator IConnectorFormat::GetCreator ( );
__declspec(implementation_key(11424)) IDispatchPtr IConnectorFormat::GetParent ( );
__declspec(implementation_key(11425)) HRESULT IConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(11426)) HRESULT IConnectorFormat::BeginDisconnect ( );
__declspec(implementation_key(11427)) HRESULT IConnectorFormat::EndConnect ( struct Shape * ConnectedShape, long ConnectionSite );
__declspec(implementation_key(11428)) HRESULT IConnectorFormat::EndDisconnect ( );
__declspec(implementation_key(11429)) enum Office::MsoTriState IConnectorFormat::GetBeginConnected ( );
__declspec(implementation_key(11430)) ShapePtr IConnectorFormat::GetBeginConnectedShape ( );
__declspec(implementation_key(11431)) long IConnectorFormat::GetBeginConnectionSite ( );
__declspec(implementation_key(11432)) enum Office::MsoTriState IConnectorFormat::GetEndConnected ( );
__declspec(implementation_key(11433)) ShapePtr IConnectorFormat::GetEndConnectedShape ( );
__declspec(implementation_key(11434)) long IConnectorFormat::GetEndConnectionSite ( );
__declspec(implementation_key(11435)) enum Office::MsoConnectorType IConnectorFormat::GetType ( );
__declspec(implementation_key(11436)) void IConnectorFormat::PutType ( enum Office::MsoConnectorType RHS );
__declspec(implementation_key(11437)) _ApplicationPtr IFreeformBuilder::GetApplication ( );
__declspec(implementation_key(11438)) enum XlCreator IFreeformBuilder::GetCreator ( );
__declspec(implementation_key(11439)) IDispatchPtr IFreeformBuilder::GetParent ( );
__declspec(implementation_key(11440)) HRESULT IFreeformBuilder::AddNodes ( enum Office::MsoSegmentType SegmentType, enum Office::MsoEditingType EditingType, float X1, float Y1, const _variant_t & X2, const _variant_t & Y2, const _variant_t & X3, const _variant_t & Y3 );
__declspec(implementation_key(11441)) ShapePtr IFreeformBuilder::ConvertToShape ( );
__declspec(implementation_key(11442)) _ApplicationPtr IControlFormat::GetApplication ( );
__declspec(implementation_key(11443)) enum XlCreator IControlFormat::GetCreator ( );
__declspec(implementation_key(11444)) IDispatchPtr IControlFormat::GetParent ( );
__declspec(implementation_key(11445)) HRESULT IControlFormat::AddItem ( _bstr_t Text, const _variant_t & Index );
__declspec(implementation_key(11446)) HRESULT IControlFormat::RemoveAllItems ( );
__declspec(implementation_key(11447)) HRESULT IControlFormat::RemoveItem ( long Index, const _variant_t & Count );
__declspec(implementation_key(11448)) long IControlFormat::GetDropDownLines ( );
__declspec(implementation_key(11449)) void IControlFormat::PutDropDownLines ( long RHS );
__declspec(implementation_key(11450)) VARIANT_BOOL IControlFormat::GetEnabled ( );
__declspec(implementation_key(11451)) void IControlFormat::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(11452)) long IControlFormat::GetLargeChange ( );
__declspec(implementation_key(11453)) void IControlFormat::PutLargeChange ( long RHS );
__declspec(implementation_key(11454)) _bstr_t IControlFormat::GetLinkedCell ( );
__declspec(implementation_key(11455)) void IControlFormat::PutLinkedCell ( _bstr_t RHS );
__declspec(implementation_key(11456)) _variant_t IControlFormat::List ( const _variant_t & Index );
__declspec(implementation_key(11457)) long IControlFormat::GetListCount ( );
__declspec(implementation_key(11458)) void IControlFormat::PutListCount ( long RHS );
__declspec(implementation_key(11459)) _bstr_t IControlFormat::GetListFillRange ( );
__declspec(implementation_key(11460)) void IControlFormat::PutListFillRange ( _bstr_t RHS );
__declspec(implementation_key(11461)) long IControlFormat::GetListIndex ( );
__declspec(implementation_key(11462)) void IControlFormat::PutListIndex ( long RHS );
__declspec(implementation_key(11463)) VARIANT_BOOL IControlFormat::GetLockedText ( );
__declspec(implementation_key(11464)) void IControlFormat::PutLockedText ( VARIANT_BOOL RHS );
__declspec(implementation_key(11465)) long IControlFormat::GetMax ( );
__declspec(implementation_key(11466)) void IControlFormat::PutMax ( long RHS );
__declspec(implementation_key(11467)) long IControlFormat::GetMin ( );
__declspec(implementation_key(11468)) void IControlFormat::PutMin ( long RHS );
__declspec(implementation_key(11469)) long IControlFormat::GetMultiSelect ( );
__declspec(implementation_key(11470)) void IControlFormat::PutMultiSelect ( long RHS );
__declspec(implementation_key(11471)) VARIANT_BOOL IControlFormat::GetPrintObject ( );
__declspec(implementation_key(11472)) void IControlFormat::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(11473)) long IControlFormat::GetSmallChange ( );
__declspec(implementation_key(11474)) void IControlFormat::PutSmallChange ( long RHS );
__declspec(implementation_key(11475)) long IControlFormat::Get_Default ( );
__declspec(implementation_key(11476)) void IControlFormat::Put_Default ( long RHS );
__declspec(implementation_key(11477)) long IControlFormat::GetValue ( );
__declspec(implementation_key(11478)) void IControlFormat::PutValue ( long RHS );
__declspec(implementation_key(11479)) _ApplicationPtr IOLEFormat::GetApplication ( );
__declspec(implementation_key(11480)) enum XlCreator IOLEFormat::GetCreator ( );
__declspec(implementation_key(11481)) IDispatchPtr IOLEFormat::GetParent ( );
__declspec(implementation_key(11482)) HRESULT IOLEFormat::Activate ( );
__declspec(implementation_key(11483)) IDispatchPtr IOLEFormat::GetObject ( );
__declspec(implementation_key(11484)) _bstr_t IOLEFormat::GetprogID ( );
__declspec(implementation_key(11485)) HRESULT IOLEFormat::Verb ( const _variant_t & Verb );
__declspec(implementation_key(11486)) _ApplicationPtr ILinkFormat::GetApplication ( );
__declspec(implementation_key(11487)) enum XlCreator ILinkFormat::GetCreator ( );
__declspec(implementation_key(11488)) IDispatchPtr ILinkFormat::GetParent ( );
__declspec(implementation_key(11489)) VARIANT_BOOL ILinkFormat::GetAutoUpdate ( );
__declspec(implementation_key(11490)) void ILinkFormat::PutAutoUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(11491)) VARIANT_BOOL ILinkFormat::GetLocked ( );
__declspec(implementation_key(11492)) void ILinkFormat::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(11493)) HRESULT ILinkFormat::Update ( );
__declspec(implementation_key(11494)) _ApplicationPtr PublishObject::GetApplication ( );
__declspec(implementation_key(11495)) enum XlCreator PublishObject::GetCreator ( );
__declspec(implementation_key(11496)) IDispatchPtr PublishObject::GetParent ( );
__declspec(implementation_key(11497)) HRESULT PublishObject::Delete ( );
__declspec(implementation_key(11498)) HRESULT PublishObject::Publish ( const _variant_t & Create );
__declspec(implementation_key(11499)) _bstr_t PublishObject::GetDivID ( );
__declspec(implementation_key(11500)) _bstr_t PublishObject::GetSheet ( );
__declspec(implementation_key(11501)) enum XlSourceType PublishObject::GetSourceType ( );
__declspec(implementation_key(11502)) _bstr_t PublishObject::GetSource ( );
__declspec(implementation_key(11503)) enum XlHtmlType PublishObject::GetHtmlType ( );
__declspec(implementation_key(11504)) void PublishObject::PutHtmlType ( enum XlHtmlType RHS );
__declspec(implementation_key(11505)) _bstr_t PublishObject::GetTitle ( );
__declspec(implementation_key(11506)) void PublishObject::PutTitle ( _bstr_t RHS );
__declspec(implementation_key(11507)) _bstr_t PublishObject::GetFilename ( );
__declspec(implementation_key(11508)) void PublishObject::PutFilename ( _bstr_t RHS );
__declspec(implementation_key(11509)) VARIANT_BOOL PublishObject::GetAutoRepublish ( );
__declspec(implementation_key(11510)) void PublishObject::PutAutoRepublish ( VARIANT_BOOL RHS );
__declspec(implementation_key(11511)) _ApplicationPtr IPublishObjects::GetApplication ( );
__declspec(implementation_key(11512)) enum XlCreator IPublishObjects::GetCreator ( );
__declspec(implementation_key(11513)) IDispatchPtr IPublishObjects::GetParent ( );
__declspec(implementation_key(11514)) PublishObjectPtr IPublishObjects::Add ( enum XlSourceType SourceType, _bstr_t Filename, const _variant_t & Sheet, const _variant_t & Source, const _variant_t & HtmlType, const _variant_t & DivID, const _variant_t & Title );
__declspec(implementation_key(11515)) long IPublishObjects::GetCount ( );
__declspec(implementation_key(11516)) PublishObjectPtr IPublishObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11517)) PublishObjectPtr IPublishObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11518)) IUnknownPtr IPublishObjects::Get_NewEnum ( );
__declspec(implementation_key(11519)) HRESULT IPublishObjects::Delete ( );
__declspec(implementation_key(11520)) HRESULT IPublishObjects::Publish ( );
__declspec(implementation_key(11521)) _ApplicationPtr IOLEDBError::GetApplication ( );
__declspec(implementation_key(11522)) enum XlCreator IOLEDBError::GetCreator ( );
__declspec(implementation_key(11523)) IDispatchPtr IOLEDBError::GetParent ( );
__declspec(implementation_key(11524)) _bstr_t IOLEDBError::GetSqlState ( );
__declspec(implementation_key(11525)) _bstr_t IOLEDBError::GetErrorString ( );
__declspec(implementation_key(11526)) long IOLEDBError::GetNative ( );
__declspec(implementation_key(11527)) long IOLEDBError::GetNumber ( );
__declspec(implementation_key(11528)) long IOLEDBError::GetStage ( );
__declspec(implementation_key(11529)) _ApplicationPtr IOLEDBErrors::GetApplication ( );
__declspec(implementation_key(11530)) enum XlCreator IOLEDBErrors::GetCreator ( );
__declspec(implementation_key(11531)) IDispatchPtr IOLEDBErrors::GetParent ( );
__declspec(implementation_key(11532)) long IOLEDBErrors::GetCount ( );
__declspec(implementation_key(11533)) OLEDBErrorPtr IOLEDBErrors::Item ( long Index );
__declspec(implementation_key(11534)) OLEDBErrorPtr IOLEDBErrors::Get_Default ( long Index );
__declspec(implementation_key(11535)) IUnknownPtr IOLEDBErrors::_NewEnum ( );
__declspec(implementation_key(11536)) _ApplicationPtr IPhonetics::GetApplication ( );
__declspec(implementation_key(11537)) enum XlCreator IPhonetics::GetCreator ( );
__declspec(implementation_key(11538)) IDispatchPtr IPhonetics::GetParent ( );
__declspec(implementation_key(11539)) long IPhonetics::GetCount ( );
__declspec(implementation_key(11540)) long IPhonetics::GetStart ( );
__declspec(implementation_key(11541)) long IPhonetics::GetLength ( );
__declspec(implementation_key(11542)) VARIANT_BOOL IPhonetics::GetVisible ( );
__declspec(implementation_key(11543)) void IPhonetics::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(11544)) long IPhonetics::GetCharacterType ( );
__declspec(implementation_key(11545)) void IPhonetics::PutCharacterType ( long RHS );
__declspec(implementation_key(11546)) long IPhonetics::GetAlignment ( );
__declspec(implementation_key(11547)) void IPhonetics::PutAlignment ( long RHS );
__declspec(implementation_key(11548)) FontPtr IPhonetics::GetFont ( );
__declspec(implementation_key(11549)) IDispatchPtr IPhonetics::GetItem ( long Index );
__declspec(implementation_key(11550)) HRESULT IPhonetics::Delete ( );
__declspec(implementation_key(11551)) HRESULT IPhonetics::Add ( long Start, long Length, _bstr_t Text );
__declspec(implementation_key(11552)) _bstr_t IPhonetics::GetText ( );
__declspec(implementation_key(11553)) void IPhonetics::PutText ( _bstr_t RHS );
__declspec(implementation_key(11554)) IDispatchPtr IPhonetics::Get_Default ( long Index );
__declspec(implementation_key(11555)) IUnknownPtr IPhonetics::Get_NewEnum ( );
__declspec(implementation_key(11556)) _ApplicationPtr DefaultWebOptions::GetApplication ( );
__declspec(implementation_key(11557)) enum XlCreator DefaultWebOptions::GetCreator ( );
__declspec(implementation_key(11558)) IDispatchPtr DefaultWebOptions::GetParent ( );
__declspec(implementation_key(11559)) VARIANT_BOOL DefaultWebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(11560)) void DefaultWebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(11561)) VARIANT_BOOL DefaultWebOptions::GetSaveHiddenData ( );
__declspec(implementation_key(11562)) void DefaultWebOptions::PutSaveHiddenData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11563)) VARIANT_BOOL DefaultWebOptions::GetLoadPictures ( );
__declspec(implementation_key(11564)) void DefaultWebOptions::PutLoadPictures ( VARIANT_BOOL RHS );
__declspec(implementation_key(11565)) VARIANT_BOOL DefaultWebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(11566)) void DefaultWebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(11567)) VARIANT_BOOL DefaultWebOptions::GetUpdateLinksOnSave ( );
__declspec(implementation_key(11568)) void DefaultWebOptions::PutUpdateLinksOnSave ( VARIANT_BOOL RHS );
__declspec(implementation_key(11569)) VARIANT_BOOL DefaultWebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(11570)) void DefaultWebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(11571)) VARIANT_BOOL DefaultWebOptions::GetCheckIfOfficeIsHTMLEditor ( );
__declspec(implementation_key(11572)) void DefaultWebOptions::PutCheckIfOfficeIsHTMLEditor ( VARIANT_BOOL RHS );
__declspec(implementation_key(11573)) VARIANT_BOOL DefaultWebOptions::GetDownloadComponents ( );
__declspec(implementation_key(11574)) void DefaultWebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(11575)) VARIANT_BOOL DefaultWebOptions::GetRelyOnVML ( );
__declspec(implementation_key(11576)) void DefaultWebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(11577)) VARIANT_BOOL DefaultWebOptions::GetAllowPNG ( );
__declspec(implementation_key(11578)) void DefaultWebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(11579)) enum Office::MsoScreenSize DefaultWebOptions::GetScreenSize ( );
__declspec(implementation_key(11580)) void DefaultWebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(11581)) long DefaultWebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(11582)) void DefaultWebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(11583)) _bstr_t DefaultWebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(11584)) void DefaultWebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(11585)) enum Office::MsoEncoding DefaultWebOptions::GetEncoding ( );
__declspec(implementation_key(11586)) void DefaultWebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(11587)) VARIANT_BOOL DefaultWebOptions::GetAlwaysSaveInDefaultEncoding ( );
__declspec(implementation_key(11588)) void DefaultWebOptions::PutAlwaysSaveInDefaultEncoding ( VARIANT_BOOL RHS );
__declspec(implementation_key(11589)) Office::WebPageFontsPtr DefaultWebOptions::GetFonts ( );
__declspec(implementation_key(11590)) _bstr_t DefaultWebOptions::GetFolderSuffix ( );
__declspec(implementation_key(11591)) enum Office::MsoTargetBrowser DefaultWebOptions::GetTargetBrowser ( );
__declspec(implementation_key(11592)) void DefaultWebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS );
__declspec(implementation_key(11593)) VARIANT_BOOL DefaultWebOptions::GetSaveNewWebPagesAsWebArchives ( );
__declspec(implementation_key(11594)) void DefaultWebOptions::PutSaveNewWebPagesAsWebArchives ( VARIANT_BOOL RHS );
__declspec(implementation_key(11595)) _ApplicationPtr WebOptions::GetApplication ( );
__declspec(implementation_key(11596)) enum XlCreator WebOptions::GetCreator ( );
__declspec(implementation_key(11597)) IDispatchPtr WebOptions::GetParent ( );
__declspec(implementation_key(11598)) VARIANT_BOOL WebOptions::GetRelyOnCSS ( );
__declspec(implementation_key(11599)) void WebOptions::PutRelyOnCSS ( VARIANT_BOOL RHS );
__declspec(implementation_key(11600)) VARIANT_BOOL WebOptions::GetOrganizeInFolder ( );
__declspec(implementation_key(11601)) void WebOptions::PutOrganizeInFolder ( VARIANT_BOOL RHS );
__declspec(implementation_key(11602)) VARIANT_BOOL WebOptions::GetUseLongFileNames ( );
__declspec(implementation_key(11603)) void WebOptions::PutUseLongFileNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(11604)) VARIANT_BOOL WebOptions::GetDownloadComponents ( );
__declspec(implementation_key(11605)) void WebOptions::PutDownloadComponents ( VARIANT_BOOL RHS );
__declspec(implementation_key(11606)) VARIANT_BOOL WebOptions::GetRelyOnVML ( );
__declspec(implementation_key(11607)) void WebOptions::PutRelyOnVML ( VARIANT_BOOL RHS );
__declspec(implementation_key(11608)) VARIANT_BOOL WebOptions::GetAllowPNG ( );
__declspec(implementation_key(11609)) void WebOptions::PutAllowPNG ( VARIANT_BOOL RHS );
__declspec(implementation_key(11610)) enum Office::MsoScreenSize WebOptions::GetScreenSize ( );
__declspec(implementation_key(11611)) void WebOptions::PutScreenSize ( enum Office::MsoScreenSize RHS );
__declspec(implementation_key(11612)) long WebOptions::GetPixelsPerInch ( );
__declspec(implementation_key(11613)) void WebOptions::PutPixelsPerInch ( long RHS );
__declspec(implementation_key(11614)) _bstr_t WebOptions::GetLocationOfComponents ( );
__declspec(implementation_key(11615)) void WebOptions::PutLocationOfComponents ( _bstr_t RHS );
__declspec(implementation_key(11616)) enum Office::MsoEncoding WebOptions::GetEncoding ( );
__declspec(implementation_key(11617)) void WebOptions::PutEncoding ( enum Office::MsoEncoding RHS );
__declspec(implementation_key(11618)) _bstr_t WebOptions::GetFolderSuffix ( );
__declspec(implementation_key(11619)) HRESULT WebOptions::UseDefaultFolderSuffix ( );
__declspec(implementation_key(11620)) enum Office::MsoTargetBrowser WebOptions::GetTargetBrowser ( );
__declspec(implementation_key(11621)) void WebOptions::PutTargetBrowser ( enum Office::MsoTargetBrowser RHS );
__declspec(implementation_key(11622)) _ApplicationPtr TreeviewControl::GetApplication ( );
__declspec(implementation_key(11623)) enum XlCreator TreeviewControl::GetCreator ( );
__declspec(implementation_key(11624)) IDispatchPtr TreeviewControl::GetParent ( );
__declspec(implementation_key(11625)) _variant_t TreeviewControl::GetHidden ( );
__declspec(implementation_key(11626)) void TreeviewControl::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(11627)) _variant_t TreeviewControl::GetDrilled ( );
__declspec(implementation_key(11628)) void TreeviewControl::PutDrilled ( const _variant_t & RHS );
__declspec(implementation_key(11629)) _ApplicationPtr CubeField::GetApplication ( );
__declspec(implementation_key(11630)) enum XlCreator CubeField::GetCreator ( );
__declspec(implementation_key(11631)) IDispatchPtr CubeField::GetParent ( );
__declspec(implementation_key(11632)) enum XlCubeFieldType CubeField::GetCubeFieldType ( );
__declspec(implementation_key(11633)) _bstr_t CubeField::GetCaption ( );
__declspec(implementation_key(11634)) _bstr_t CubeField::GetName ( );
__declspec(implementation_key(11635)) _bstr_t CubeField::GetValue ( );
__declspec(implementation_key(11636)) enum XlPivotFieldOrientation CubeField::GetOrientation ( );
__declspec(implementation_key(11637)) void CubeField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(11638)) long CubeField::GetPosition ( );
__declspec(implementation_key(11639)) void CubeField::PutPosition ( long RHS );
__declspec(implementation_key(11640)) TreeviewControlPtr CubeField::GetTreeviewControl ( );
__declspec(implementation_key(11641)) VARIANT_BOOL CubeField::GetDragToColumn ( );
__declspec(implementation_key(11642)) void CubeField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(11643)) VARIANT_BOOL CubeField::GetDragToHide ( );
__declspec(implementation_key(11644)) void CubeField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(11645)) VARIANT_BOOL CubeField::GetDragToPage ( );
__declspec(implementation_key(11646)) void CubeField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11647)) VARIANT_BOOL CubeField::GetDragToRow ( );
__declspec(implementation_key(11648)) void CubeField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11649)) VARIANT_BOOL CubeField::GetDragToData ( );
__declspec(implementation_key(11650)) void CubeField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11651)) long CubeField::GetHiddenLevels ( );
__declspec(implementation_key(11652)) void CubeField::PutHiddenLevels ( long RHS );
__declspec(implementation_key(11653)) VARIANT_BOOL CubeField::GetHasMemberProperties ( );
__declspec(implementation_key(11654)) enum XlLayoutFormType CubeField::GetLayoutForm ( );
__declspec(implementation_key(11655)) void CubeField::PutLayoutForm ( enum XlLayoutFormType RHS );
__declspec(implementation_key(11656)) PivotFieldsPtr CubeField::GetPivotFields ( );
__declspec(implementation_key(11657)) HRESULT CubeField::AddMemberPropertyField ( _bstr_t Property, const _variant_t & PropertyOrder );
__declspec(implementation_key(11658)) VARIANT_BOOL CubeField::GetEnableMultiplePageItems ( );
__declspec(implementation_key(11659)) void CubeField::PutEnableMultiplePageItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(11660)) enum XlSubtototalLocationType CubeField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(11661)) void CubeField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS );
__declspec(implementation_key(11662)) VARIANT_BOOL CubeField::GetShowInFieldList ( );
__declspec(implementation_key(11663)) void CubeField::PutShowInFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(11664)) HRESULT CubeField::Delete ( );
__declspec(implementation_key(11665)) _ApplicationPtr IPivotField::GetApplication ( );
__declspec(implementation_key(11666)) enum XlCreator IPivotField::GetCreator ( );
__declspec(implementation_key(11667)) IDispatchPtr IPivotField::GetParent ( );
__declspec(implementation_key(11668)) enum XlPivotFieldCalculation IPivotField::GetCalculation ( );
__declspec(implementation_key(11669)) void IPivotField::PutCalculation ( enum XlPivotFieldCalculation RHS );
__declspec(implementation_key(11670)) PivotFieldPtr IPivotField::GetChildField ( );
__declspec(implementation_key(11671)) _variant_t IPivotField::GetChildItems ( const _variant_t & Index );
__declspec(implementation_key(11672)) _variant_t IPivotField::GetCurrentPage ( );
__declspec(implementation_key(11673)) void IPivotField::PutCurrentPage ( const _variant_t & RHS );
__declspec(implementation_key(11674)) RangePtr IPivotField::GetDataRange ( );
__declspec(implementation_key(11675)) enum XlPivotFieldDataType IPivotField::GetDataType ( );
__declspec(implementation_key(11676)) _bstr_t IPivotField::Get_Default ( );
__declspec(implementation_key(11677)) void IPivotField::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(11678)) enum XlConsolidationFunction IPivotField::GetFunction ( );
__declspec(implementation_key(11679)) void IPivotField::PutFunction ( enum XlConsolidationFunction RHS );
__declspec(implementation_key(11680)) _variant_t IPivotField::GetGroupLevel ( );
__declspec(implementation_key(11681)) _variant_t IPivotField::GetHiddenItems ( const _variant_t & Index );
__declspec(implementation_key(11682)) RangePtr IPivotField::GetLabelRange ( );
__declspec(implementation_key(11683)) _bstr_t IPivotField::GetName ( );
__declspec(implementation_key(11684)) void IPivotField::PutName ( _bstr_t RHS );
__declspec(implementation_key(11685)) _bstr_t IPivotField::GetNumberFormat ( );
__declspec(implementation_key(11686)) void IPivotField::PutNumberFormat ( _bstr_t RHS );
__declspec(implementation_key(11687)) enum XlPivotFieldOrientation IPivotField::GetOrientation ( );
__declspec(implementation_key(11688)) void IPivotField::PutOrientation ( enum XlPivotFieldOrientation RHS );
__declspec(implementation_key(11689)) VARIANT_BOOL IPivotField::GetShowAllItems ( );
__declspec(implementation_key(11690)) void IPivotField::PutShowAllItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(11691)) PivotFieldPtr IPivotField::GetParentField ( );
__declspec(implementation_key(11692)) _variant_t IPivotField::GetParentItems ( const _variant_t & Index );
__declspec(implementation_key(11693)) _variant_t IPivotField::PivotItems ( const _variant_t & Index );
__declspec(implementation_key(11694)) _variant_t IPivotField::GetPosition ( );
__declspec(implementation_key(11695)) void IPivotField::PutPosition ( const _variant_t & RHS );
__declspec(implementation_key(11696)) _bstr_t IPivotField::GetSourceName ( );
__declspec(implementation_key(11697)) _variant_t IPivotField::GetSubtotals ( const _variant_t & Index );
__declspec(implementation_key(11698)) void IPivotField::PutSubtotals ( const _variant_t & Index, const _variant_t & RHS );
__declspec(implementation_key(11699)) _variant_t IPivotField::GetBaseField ( );
__declspec(implementation_key(11700)) void IPivotField::PutBaseField ( const _variant_t & RHS );
__declspec(implementation_key(11701)) _variant_t IPivotField::GetBaseItem ( );
__declspec(implementation_key(11702)) void IPivotField::PutBaseItem ( const _variant_t & RHS );
__declspec(implementation_key(11703)) _variant_t IPivotField::GetTotalLevels ( );
__declspec(implementation_key(11704)) _bstr_t IPivotField::GetValue ( );
__declspec(implementation_key(11705)) void IPivotField::PutValue ( _bstr_t RHS );
__declspec(implementation_key(11706)) _variant_t IPivotField::GetVisibleItems ( const _variant_t & Index );
__declspec(implementation_key(11707)) CalculatedItemsPtr IPivotField::CalculatedItems ( );
__declspec(implementation_key(11708)) HRESULT IPivotField::Delete ( );
__declspec(implementation_key(11709)) VARIANT_BOOL IPivotField::GetDragToColumn ( );
__declspec(implementation_key(11710)) void IPivotField::PutDragToColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(11711)) VARIANT_BOOL IPivotField::GetDragToHide ( );
__declspec(implementation_key(11712)) void IPivotField::PutDragToHide ( VARIANT_BOOL RHS );
__declspec(implementation_key(11713)) VARIANT_BOOL IPivotField::GetDragToPage ( );
__declspec(implementation_key(11714)) void IPivotField::PutDragToPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11715)) VARIANT_BOOL IPivotField::GetDragToRow ( );
__declspec(implementation_key(11716)) void IPivotField::PutDragToRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11717)) VARIANT_BOOL IPivotField::GetDragToData ( );
__declspec(implementation_key(11718)) void IPivotField::PutDragToData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11719)) _bstr_t IPivotField::GetFormula ( );
__declspec(implementation_key(11720)) void IPivotField::PutFormula ( _bstr_t RHS );
__declspec(implementation_key(11721)) VARIANT_BOOL IPivotField::GetIsCalculated ( );
__declspec(implementation_key(11722)) long IPivotField::GetMemoryUsed ( );
__declspec(implementation_key(11723)) VARIANT_BOOL IPivotField::GetServerBased ( );
__declspec(implementation_key(11724)) void IPivotField::PutServerBased ( VARIANT_BOOL RHS );
__declspec(implementation_key(11725)) HRESULT IPivotField::AutoSort ( long Order, _bstr_t Field );
__declspec(implementation_key(11726)) HRESULT IPivotField::AutoShow ( long Type, long Range, long Count, _bstr_t Field );
__declspec(implementation_key(11727)) long IPivotField::GetAutoSortOrder ( );
__declspec(implementation_key(11728)) _bstr_t IPivotField::GetAutoSortField ( );
__declspec(implementation_key(11729)) long IPivotField::GetAutoShowType ( );
__declspec(implementation_key(11730)) long IPivotField::GetAutoShowRange ( );
__declspec(implementation_key(11731)) long IPivotField::GetAutoShowCount ( );
__declspec(implementation_key(11732)) _bstr_t IPivotField::GetAutoShowField ( );
__declspec(implementation_key(11733)) VARIANT_BOOL IPivotField::GetLayoutBlankLine ( );
__declspec(implementation_key(11734)) void IPivotField::PutLayoutBlankLine ( VARIANT_BOOL RHS );
__declspec(implementation_key(11735)) enum XlSubtototalLocationType IPivotField::GetLayoutSubtotalLocation ( );
__declspec(implementation_key(11736)) void IPivotField::PutLayoutSubtotalLocation ( enum XlSubtototalLocationType RHS );
__declspec(implementation_key(11737)) VARIANT_BOOL IPivotField::GetLayoutPageBreak ( );
__declspec(implementation_key(11738)) void IPivotField::PutLayoutPageBreak ( VARIANT_BOOL RHS );
__declspec(implementation_key(11739)) enum XlLayoutFormType IPivotField::GetLayoutForm ( );
__declspec(implementation_key(11740)) void IPivotField::PutLayoutForm ( enum XlLayoutFormType RHS );
__declspec(implementation_key(11741)) _bstr_t IPivotField::GetSubtotalName ( );
__declspec(implementation_key(11742)) void IPivotField::PutSubtotalName ( _bstr_t RHS );
__declspec(implementation_key(11743)) _bstr_t IPivotField::GetCaption ( );
__declspec(implementation_key(11744)) void IPivotField::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(11745)) VARIANT_BOOL IPivotField::GetDrilledDown ( );
__declspec(implementation_key(11746)) void IPivotField::PutDrilledDown ( VARIANT_BOOL RHS );
__declspec(implementation_key(11747)) CubeFieldPtr IPivotField::GetCubeField ( );
__declspec(implementation_key(11748)) _bstr_t IPivotField::GetCurrentPageName ( );
__declspec(implementation_key(11749)) void IPivotField::PutCurrentPageName ( _bstr_t RHS );
__declspec(implementation_key(11750)) _bstr_t IPivotField::GetStandardFormula ( );
__declspec(implementation_key(11751)) void IPivotField::PutStandardFormula ( _bstr_t RHS );
__declspec(implementation_key(11752)) _variant_t IPivotField::GetHiddenItemsList ( );
__declspec(implementation_key(11753)) void IPivotField::PutHiddenItemsList ( const _variant_t & RHS );
__declspec(implementation_key(11754)) VARIANT_BOOL IPivotField::GetDatabaseSort ( );
__declspec(implementation_key(11755)) void IPivotField::PutDatabaseSort ( VARIANT_BOOL RHS );
__declspec(implementation_key(11756)) VARIANT_BOOL IPivotField::GetIsMemberProperty ( );
__declspec(implementation_key(11757)) PivotFieldPtr IPivotField::GetPropertyParentField ( );
__declspec(implementation_key(11758)) long IPivotField::GetPropertyOrder ( );
__declspec(implementation_key(11759)) void IPivotField::PutPropertyOrder ( long RHS );
__declspec(implementation_key(11760)) VARIANT_BOOL IPivotField::GetEnableItemSelection ( );
__declspec(implementation_key(11761)) void IPivotField::PutEnableItemSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(11762)) _variant_t IPivotField::GetCurrentPageList ( );
__declspec(implementation_key(11763)) void IPivotField::PutCurrentPageList ( const _variant_t & RHS );
__declspec(implementation_key(11764)) HRESULT IPivotField::AddPageItem ( _bstr_t Item, const _variant_t & ClearList );
__declspec(implementation_key(11765)) _ApplicationPtr CubeFields::GetApplication ( );
__declspec(implementation_key(11766)) enum XlCreator CubeFields::GetCreator ( );
__declspec(implementation_key(11767)) IDispatchPtr CubeFields::GetParent ( );
__declspec(implementation_key(11768)) long CubeFields::GetCount ( );
__declspec(implementation_key(11769)) CubeFieldPtr CubeFields::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11770)) CubeFieldPtr CubeFields::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11771)) IUnknownPtr CubeFields::Get_NewEnum ( );
__declspec(implementation_key(11772)) CubeFieldPtr CubeFields::AddSet ( _bstr_t Name, _bstr_t Caption );
__declspec(implementation_key(11773)) _ApplicationPtr IPivotTable::GetApplication ( );
__declspec(implementation_key(11774)) enum XlCreator IPivotTable::GetCreator ( );
__declspec(implementation_key(11775)) IDispatchPtr IPivotTable::GetParent ( );
__declspec(implementation_key(11776)) _variant_t IPivotTable::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AddToTable );
__declspec(implementation_key(11777)) IDispatchPtr IPivotTable::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(11778)) VARIANT_BOOL IPivotTable::GetColumnGrand ( );
__declspec(implementation_key(11779)) void IPivotTable::PutColumnGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(11780)) RangePtr IPivotTable::GetColumnRange ( );
__declspec(implementation_key(11781)) _variant_t IPivotTable::ShowPages ( const _variant_t & PageField );
__declspec(implementation_key(11782)) RangePtr IPivotTable::GetDataBodyRange ( );
__declspec(implementation_key(11783)) IDispatchPtr IPivotTable::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(11784)) RangePtr IPivotTable::GetDataLabelRange ( );
__declspec(implementation_key(11785)) _bstr_t IPivotTable::Get_Default ( );
__declspec(implementation_key(11786)) void IPivotTable::Put_Default ( _bstr_t RHS );
__declspec(implementation_key(11787)) VARIANT_BOOL IPivotTable::GetHasAutoFormat ( );
__declspec(implementation_key(11788)) void IPivotTable::PutHasAutoFormat ( VARIANT_BOOL RHS );
__declspec(implementation_key(11789)) IDispatchPtr IPivotTable::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(11790)) _bstr_t IPivotTable::GetInnerDetail ( );
__declspec(implementation_key(11791)) void IPivotTable::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(11792)) _bstr_t IPivotTable::GetName ( );
__declspec(implementation_key(11793)) void IPivotTable::PutName ( _bstr_t RHS );
__declspec(implementation_key(11794)) IDispatchPtr IPivotTable::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(11795)) RangePtr IPivotTable::GetPageRange ( );
__declspec(implementation_key(11796)) RangePtr IPivotTable::GetPageRangeCells ( );
__declspec(implementation_key(11797)) IDispatchPtr IPivotTable::PivotFields ( const _variant_t & Index );
__declspec(implementation_key(11798)) DATE IPivotTable::GetRefreshDate ( );
__declspec(implementation_key(11799)) _bstr_t IPivotTable::GetRefreshName ( );
__declspec(implementation_key(11800)) VARIANT_BOOL IPivotTable::RefreshTable ( );
__declspec(implementation_key(11801)) IDispatchPtr IPivotTable::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(11802)) VARIANT_BOOL IPivotTable::GetRowGrand ( );
__declspec(implementation_key(11803)) void IPivotTable::PutRowGrand ( VARIANT_BOOL RHS );
__declspec(implementation_key(11804)) RangePtr IPivotTable::GetRowRange ( );
__declspec(implementation_key(11805)) VARIANT_BOOL IPivotTable::GetSaveData ( );
__declspec(implementation_key(11806)) void IPivotTable::PutSaveData ( VARIANT_BOOL RHS );
__declspec(implementation_key(11807)) _variant_t IPivotTable::GetSourceData ( );
__declspec(implementation_key(11808)) void IPivotTable::PutSourceData ( const _variant_t & RHS );
__declspec(implementation_key(11809)) RangePtr IPivotTable::GetTableRange1 ( );
__declspec(implementation_key(11810)) RangePtr IPivotTable::GetTableRange2 ( );
__declspec(implementation_key(11811)) _bstr_t IPivotTable::GetValue ( );
__declspec(implementation_key(11812)) void IPivotTable::PutValue ( _bstr_t RHS );
__declspec(implementation_key(11813)) IDispatchPtr IPivotTable::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(11814)) long IPivotTable::GetCacheIndex ( );
__declspec(implementation_key(11815)) void IPivotTable::PutCacheIndex ( long RHS );
__declspec(implementation_key(11816)) CalculatedFieldsPtr IPivotTable::CalculatedFields ( );
__declspec(implementation_key(11817)) VARIANT_BOOL IPivotTable::GetDisplayErrorString ( );
__declspec(implementation_key(11818)) void IPivotTable::PutDisplayErrorString ( VARIANT_BOOL RHS );
__declspec(implementation_key(11819)) VARIANT_BOOL IPivotTable::GetDisplayNullString ( );
__declspec(implementation_key(11820)) void IPivotTable::PutDisplayNullString ( VARIANT_BOOL RHS );
__declspec(implementation_key(11821)) VARIANT_BOOL IPivotTable::GetEnableDrilldown ( );
__declspec(implementation_key(11822)) void IPivotTable::PutEnableDrilldown ( VARIANT_BOOL RHS );
__declspec(implementation_key(11823)) VARIANT_BOOL IPivotTable::GetEnableFieldDialog ( );
__declspec(implementation_key(11824)) void IPivotTable::PutEnableFieldDialog ( VARIANT_BOOL RHS );
__declspec(implementation_key(11825)) VARIANT_BOOL IPivotTable::GetEnableWizard ( );
__declspec(implementation_key(11826)) void IPivotTable::PutEnableWizard ( VARIANT_BOOL RHS );
__declspec(implementation_key(11827)) _bstr_t IPivotTable::GetErrorString ( );
__declspec(implementation_key(11828)) void IPivotTable::PutErrorString ( _bstr_t RHS );
__declspec(implementation_key(11829)) double IPivotTable::GetData ( _bstr_t Name );
__declspec(implementation_key(11830)) HRESULT IPivotTable::ListFormulas ( );
__declspec(implementation_key(11831)) VARIANT_BOOL IPivotTable::GetManualUpdate ( );
__declspec(implementation_key(11832)) void IPivotTable::PutManualUpdate ( VARIANT_BOOL RHS );
__declspec(implementation_key(11833)) VARIANT_BOOL IPivotTable::GetMergeLabels ( );
__declspec(implementation_key(11834)) void IPivotTable::PutMergeLabels ( VARIANT_BOOL RHS );
__declspec(implementation_key(11835)) _bstr_t IPivotTable::GetNullString ( );
__declspec(implementation_key(11836)) void IPivotTable::PutNullString ( _bstr_t RHS );
__declspec(implementation_key(11837)) PivotCachePtr IPivotTable::PivotCache ( );
__declspec(implementation_key(11838)) PivotFormulasPtr IPivotTable::GetPivotFormulas ( );
__declspec(implementation_key(11839)) HRESULT IPivotTable::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection );
__declspec(implementation_key(11840)) VARIANT_BOOL IPivotTable::GetSubtotalHiddenPageItems ( );
__declspec(implementation_key(11841)) void IPivotTable::PutSubtotalHiddenPageItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(11842)) long IPivotTable::GetPageFieldOrder ( );
__declspec(implementation_key(11843)) void IPivotTable::PutPageFieldOrder ( long RHS );
__declspec(implementation_key(11844)) _bstr_t IPivotTable::GetPageFieldStyle ( );
__declspec(implementation_key(11845)) void IPivotTable::PutPageFieldStyle ( _bstr_t RHS );
__declspec(implementation_key(11846)) long IPivotTable::GetPageFieldWrapCount ( );
__declspec(implementation_key(11847)) void IPivotTable::PutPageFieldWrapCount ( long RHS );
__declspec(implementation_key(11848)) VARIANT_BOOL IPivotTable::GetPreserveFormatting ( );
__declspec(implementation_key(11849)) void IPivotTable::PutPreserveFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(11850)) HRESULT IPivotTable::_PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode );
__declspec(implementation_key(11851)) _bstr_t IPivotTable::GetPivotSelection ( );
__declspec(implementation_key(11852)) void IPivotTable::PutPivotSelection ( _bstr_t RHS );
__declspec(implementation_key(11853)) enum XlPTSelectionMode IPivotTable::GetSelectionMode ( );
__declspec(implementation_key(11854)) void IPivotTable::PutSelectionMode ( enum XlPTSelectionMode RHS );
__declspec(implementation_key(11855)) _bstr_t IPivotTable::GetTableStyle ( );
__declspec(implementation_key(11856)) void IPivotTable::PutTableStyle ( _bstr_t RHS );
__declspec(implementation_key(11857)) _bstr_t IPivotTable::GetTag ( );
__declspec(implementation_key(11858)) void IPivotTable::PutTag ( _bstr_t RHS );
__declspec(implementation_key(11859)) HRESULT IPivotTable::Update ( );
__declspec(implementation_key(11860)) _bstr_t IPivotTable::GetVacatedStyle ( );
__declspec(implementation_key(11861)) void IPivotTable::PutVacatedStyle ( _bstr_t RHS );
__declspec(implementation_key(11862)) HRESULT IPivotTable::Format ( enum XlPivotFormatType Format );
__declspec(implementation_key(11863)) VARIANT_BOOL IPivotTable::GetPrintTitles ( );
__declspec(implementation_key(11864)) void IPivotTable::PutPrintTitles ( VARIANT_BOOL RHS );
__declspec(implementation_key(11865)) CubeFieldsPtr IPivotTable::GetCubeFields ( );
__declspec(implementation_key(11866)) _bstr_t IPivotTable::GetGrandTotalName ( );
__declspec(implementation_key(11867)) void IPivotTable::PutGrandTotalName ( _bstr_t RHS );
__declspec(implementation_key(11868)) VARIANT_BOOL IPivotTable::GetSmallGrid ( );
__declspec(implementation_key(11869)) void IPivotTable::PutSmallGrid ( VARIANT_BOOL RHS );
__declspec(implementation_key(11870)) VARIANT_BOOL IPivotTable::GetRepeatItemsOnEachPrintedPage ( );
__declspec(implementation_key(11871)) void IPivotTable::PutRepeatItemsOnEachPrintedPage ( VARIANT_BOOL RHS );
__declspec(implementation_key(11872)) VARIANT_BOOL IPivotTable::GetTotalsAnnotation ( );
__declspec(implementation_key(11873)) void IPivotTable::PutTotalsAnnotation ( VARIANT_BOOL RHS );
__declspec(implementation_key(11874)) HRESULT IPivotTable::PivotSelect ( _bstr_t Name, enum XlPTSelectionMode Mode, const _variant_t & UseStandardName );
__declspec(implementation_key(11875)) _bstr_t IPivotTable::GetPivotSelectionStandard ( );
__declspec(implementation_key(11876)) void IPivotTable::PutPivotSelectionStandard ( _bstr_t RHS );
__declspec(implementation_key(11877)) RangePtr IPivotTable::GetPivotData ( const _variant_t & DataField, const _variant_t & Field1, const _variant_t & Item1, const _variant_t & Field2, const _variant_t & Item2, const _variant_t & Field3, const _variant_t & Item3, const _variant_t & Field4, const _variant_t & Item4, const _variant_t & Field5, const _variant_t & Item5, const _variant_t & Field6, const _variant_t & Item6, const _variant_t & Field7, const _variant_t & Item7, const _variant_t & Field8, const _variant_t & Item8, const _variant_t & Field9, const _variant_t & Item9, const _variant_t & Field10, const _variant_t & Item10, const _variant_t & Field11, const _variant_t & Item11, const _variant_t & Field12, const _variant_t & Item12, const _variant_t & Field13, const _variant_t & Item13, const _variant_t & Field14, const _variant_t & Item14 );
__declspec(implementation_key(11878)) PivotFieldPtr IPivotTable::GetDataPivotField ( );
__declspec(implementation_key(11879)) VARIANT_BOOL IPivotTable::GetEnableDataValueEditing ( );
__declspec(implementation_key(11880)) void IPivotTable::PutEnableDataValueEditing ( VARIANT_BOOL RHS );
__declspec(implementation_key(11881)) PivotFieldPtr IPivotTable::AddDataField ( IDispatch * Field, const _variant_t & Caption, const _variant_t & Function );
__declspec(implementation_key(11882)) _bstr_t IPivotTable::GetMDX ( );
__declspec(implementation_key(11883)) VARIANT_BOOL IPivotTable::GetViewCalculatedMembers ( );
__declspec(implementation_key(11884)) void IPivotTable::PutViewCalculatedMembers ( VARIANT_BOOL RHS );
__declspec(implementation_key(11885)) CalculatedMembersPtr IPivotTable::GetCalculatedMembers ( );
__declspec(implementation_key(11886)) VARIANT_BOOL IPivotTable::GetDisplayImmediateItems ( );
__declspec(implementation_key(11887)) void IPivotTable::PutDisplayImmediateItems ( VARIANT_BOOL RHS );
__declspec(implementation_key(11888)) _variant_t IPivotTable::Dummy15 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(11889)) VARIANT_BOOL IPivotTable::GetEnableFieldList ( );
__declspec(implementation_key(11890)) void IPivotTable::PutEnableFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(11891)) VARIANT_BOOL IPivotTable::GetVisualTotals ( );
__declspec(implementation_key(11892)) void IPivotTable::PutVisualTotals ( VARIANT_BOOL RHS );
__declspec(implementation_key(11893)) VARIANT_BOOL IPivotTable::GetShowPageMultipleItemLabel ( );
__declspec(implementation_key(11894)) void IPivotTable::PutShowPageMultipleItemLabel ( VARIANT_BOOL RHS );
__declspec(implementation_key(11895)) enum XlPivotTableVersionList IPivotTable::GetVersion ( );
__declspec(implementation_key(11896)) _bstr_t IPivotTable::CreateCubeFile ( _bstr_t File, const _variant_t & Measures, const _variant_t & Levels, const _variant_t & Members, const _variant_t & Properties );
__declspec(implementation_key(11897)) VARIANT_BOOL IPivotTable::GetDisplayEmptyRow ( );
__declspec(implementation_key(11898)) void IPivotTable::PutDisplayEmptyRow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11899)) VARIANT_BOOL IPivotTable::GetDisplayEmptyColumn ( );
__declspec(implementation_key(11900)) void IPivotTable::PutDisplayEmptyColumn ( VARIANT_BOOL RHS );
__declspec(implementation_key(11901)) VARIANT_BOOL IPivotTable::GetShowCellBackgroundFromOLAP ( );
__declspec(implementation_key(11902)) void IPivotTable::PutShowCellBackgroundFromOLAP ( VARIANT_BOOL RHS );
__declspec(implementation_key(11903)) _ApplicationPtr IPivotLayout::GetApplication ( );
__declspec(implementation_key(11904)) enum XlCreator IPivotLayout::GetCreator ( );
__declspec(implementation_key(11905)) IDispatchPtr IPivotLayout::GetParent ( );
__declspec(implementation_key(11906)) IDispatchPtr IPivotLayout::GetColumnFields ( const _variant_t & Index );
__declspec(implementation_key(11907)) IDispatchPtr IPivotLayout::GetDataFields ( const _variant_t & Index );
__declspec(implementation_key(11908)) IDispatchPtr IPivotLayout::GetPageFields ( const _variant_t & Index );
__declspec(implementation_key(11909)) IDispatchPtr IPivotLayout::GetRowFields ( const _variant_t & Index );
__declspec(implementation_key(11910)) IDispatchPtr IPivotLayout::GetHiddenFields ( const _variant_t & Index );
__declspec(implementation_key(11911)) IDispatchPtr IPivotLayout::GetVisibleFields ( const _variant_t & Index );
__declspec(implementation_key(11912)) IDispatchPtr IPivotLayout::GetPivotFields ( const _variant_t & Index );
__declspec(implementation_key(11913)) CubeFieldsPtr IPivotLayout::GetCubeFields ( );
__declspec(implementation_key(11914)) PivotCachePtr IPivotLayout::GetPivotCache ( );
__declspec(implementation_key(11915)) PivotTablePtr IPivotLayout::GetPivotTable ( );
__declspec(implementation_key(11916)) _bstr_t IPivotLayout::GetInnerDetail ( );
__declspec(implementation_key(11917)) void IPivotLayout::PutInnerDetail ( _bstr_t RHS );
__declspec(implementation_key(11918)) HRESULT IPivotLayout::AddFields ( const _variant_t & RowFields, const _variant_t & ColumnFields, const _variant_t & PageFields, const _variant_t & AppendField );
__declspec(implementation_key(11919)) _ApplicationPtr IDisplayUnitLabel::GetApplication ( );
__declspec(implementation_key(11920)) enum XlCreator IDisplayUnitLabel::GetCreator ( );
__declspec(implementation_key(11921)) IDispatchPtr IDisplayUnitLabel::GetParent ( );
__declspec(implementation_key(11922)) _bstr_t IDisplayUnitLabel::GetName ( );
__declspec(implementation_key(11923)) _variant_t IDisplayUnitLabel::Select ( );
__declspec(implementation_key(11924)) BorderPtr IDisplayUnitLabel::GetBorder ( );
__declspec(implementation_key(11925)) _variant_t IDisplayUnitLabel::Delete ( );
__declspec(implementation_key(11926)) InteriorPtr IDisplayUnitLabel::GetInterior ( );
__declspec(implementation_key(11927)) ChartFillFormatPtr IDisplayUnitLabel::GetFill ( );
__declspec(implementation_key(11928)) _bstr_t IDisplayUnitLabel::GetCaption ( );
__declspec(implementation_key(11929)) void IDisplayUnitLabel::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(11930)) CharactersPtr IDisplayUnitLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(11931)) FontPtr IDisplayUnitLabel::GetFont ( );
__declspec(implementation_key(11932)) _variant_t IDisplayUnitLabel::GetHorizontalAlignment ( );
__declspec(implementation_key(11933)) void IDisplayUnitLabel::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11934)) double IDisplayUnitLabel::GetLeft ( );
__declspec(implementation_key(11935)) void IDisplayUnitLabel::PutLeft ( double RHS );
__declspec(implementation_key(11936)) _variant_t IDisplayUnitLabel::GetOrientation ( );
__declspec(implementation_key(11937)) void IDisplayUnitLabel::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(11938)) VARIANT_BOOL IDisplayUnitLabel::GetShadow ( );
__declspec(implementation_key(11939)) void IDisplayUnitLabel::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(11940)) _bstr_t IDisplayUnitLabel::GetText ( );
__declspec(implementation_key(11941)) void IDisplayUnitLabel::PutText ( _bstr_t RHS );
__declspec(implementation_key(11942)) double IDisplayUnitLabel::GetTop ( );
__declspec(implementation_key(11943)) void IDisplayUnitLabel::PutTop ( double RHS );
__declspec(implementation_key(11944)) _variant_t IDisplayUnitLabel::GetVerticalAlignment ( );
__declspec(implementation_key(11945)) void IDisplayUnitLabel::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11946)) long IDisplayUnitLabel::GetReadingOrder ( );
__declspec(implementation_key(11947)) void IDisplayUnitLabel::PutReadingOrder ( long RHS );
__declspec(implementation_key(11948)) _variant_t IDisplayUnitLabel::GetAutoScaleFont ( );
__declspec(implementation_key(11949)) void IDisplayUnitLabel::PutAutoScaleFont ( const _variant_t & RHS );
__declspec(implementation_key(11950)) _ApplicationPtr ICellFormat::GetApplication ( );
__declspec(implementation_key(11951)) enum XlCreator ICellFormat::GetCreator ( );
__declspec(implementation_key(11952)) IDispatchPtr ICellFormat::GetParent ( );
__declspec(implementation_key(11953)) BordersPtr ICellFormat::GetBorders ( );
__declspec(implementation_key(11954)) void ICellFormat::PutRefBorders ( struct Borders * RHS );
__declspec(implementation_key(11955)) FontPtr ICellFormat::GetFont ( );
__declspec(implementation_key(11956)) void ICellFormat::PutRefFont ( struct Font * RHS );
__declspec(implementation_key(11957)) InteriorPtr ICellFormat::GetInterior ( );
__declspec(implementation_key(11958)) void ICellFormat::PutRefInterior ( struct Interior * RHS );
__declspec(implementation_key(11959)) _variant_t ICellFormat::GetNumberFormat ( long lcid );
__declspec(implementation_key(11960)) void ICellFormat::PutNumberFormat ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(11961)) _variant_t ICellFormat::GetNumberFormatLocal ( );
__declspec(implementation_key(11962)) void ICellFormat::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(11963)) _variant_t ICellFormat::GetAddIndent ( );
__declspec(implementation_key(11964)) void ICellFormat::PutAddIndent ( const _variant_t & RHS );
__declspec(implementation_key(11965)) _variant_t ICellFormat::GetIndentLevel ( );
__declspec(implementation_key(11966)) void ICellFormat::PutIndentLevel ( const _variant_t & RHS );
__declspec(implementation_key(11967)) _variant_t ICellFormat::GetHorizontalAlignment ( );
__declspec(implementation_key(11968)) void ICellFormat::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11969)) _variant_t ICellFormat::GetVerticalAlignment ( );
__declspec(implementation_key(11970)) void ICellFormat::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(11971)) _variant_t ICellFormat::GetOrientation ( );
__declspec(implementation_key(11972)) void ICellFormat::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(11973)) _variant_t ICellFormat::GetShrinkToFit ( );
__declspec(implementation_key(11974)) void ICellFormat::PutShrinkToFit ( const _variant_t & RHS );
__declspec(implementation_key(11975)) _variant_t ICellFormat::GetWrapText ( );
__declspec(implementation_key(11976)) void ICellFormat::PutWrapText ( const _variant_t & RHS );
__declspec(implementation_key(11977)) _variant_t ICellFormat::GetLocked ( );
__declspec(implementation_key(11978)) void ICellFormat::PutLocked ( const _variant_t & RHS );
__declspec(implementation_key(11979)) _variant_t ICellFormat::GetFormulaHidden ( );
__declspec(implementation_key(11980)) void ICellFormat::PutFormulaHidden ( const _variant_t & RHS );
__declspec(implementation_key(11981)) _variant_t ICellFormat::GetMergeCells ( );
__declspec(implementation_key(11982)) void ICellFormat::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(11983)) HRESULT ICellFormat::Clear ( );
__declspec(implementation_key(11984)) _ApplicationPtr IUsedObjects::GetApplication ( );
__declspec(implementation_key(11985)) enum XlCreator IUsedObjects::GetCreator ( );
__declspec(implementation_key(11986)) IDispatchPtr IUsedObjects::GetParent ( );
__declspec(implementation_key(11987)) long IUsedObjects::GetCount ( );
__declspec(implementation_key(11988)) IUnknownPtr IUsedObjects::Get_NewEnum ( );
__declspec(implementation_key(11989)) IDispatchPtr IUsedObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11990)) IDispatchPtr IUsedObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11991)) _ApplicationPtr ICustomProperties::GetApplication ( );
__declspec(implementation_key(11992)) enum XlCreator ICustomProperties::GetCreator ( );
__declspec(implementation_key(11993)) IDispatchPtr ICustomProperties::GetParent ( );
__declspec(implementation_key(11994)) CustomPropertyPtr ICustomProperties::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(11995)) long ICustomProperties::GetCount ( );
__declspec(implementation_key(11996)) CustomPropertyPtr ICustomProperties::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(11997)) CustomPropertyPtr ICustomProperties::GetItem ( const _variant_t & Index );
__declspec(implementation_key(11998)) IUnknownPtr ICustomProperties::Get_NewEnum ( );
__declspec(implementation_key(11999)) _ApplicationPtr ICustomProperty::GetApplication ( );
__declspec(implementation_key(12000)) enum XlCreator ICustomProperty::GetCreator ( );
__declspec(implementation_key(12001)) IDispatchPtr ICustomProperty::GetParent ( );
__declspec(implementation_key(12002)) _bstr_t ICustomProperty::GetName ( );
__declspec(implementation_key(12003)) void ICustomProperty::PutName ( _bstr_t RHS );
__declspec(implementation_key(12004)) _variant_t ICustomProperty::GetValue ( );
__declspec(implementation_key(12005)) void ICustomProperty::PutValue ( const _variant_t & RHS );
__declspec(implementation_key(12006)) _variant_t ICustomProperty::Get_Default ( );
__declspec(implementation_key(12007)) HRESULT ICustomProperty::Delete ( );
__declspec(implementation_key(12008)) _ApplicationPtr ICalculatedMembers::GetApplication ( );
__declspec(implementation_key(12009)) enum XlCreator ICalculatedMembers::GetCreator ( );
__declspec(implementation_key(12010)) IDispatchPtr ICalculatedMembers::GetParent ( );
__declspec(implementation_key(12011)) long ICalculatedMembers::GetCount ( );
__declspec(implementation_key(12012)) CalculatedMemberPtr ICalculatedMembers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12013)) CalculatedMemberPtr ICalculatedMembers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12014)) IUnknownPtr ICalculatedMembers::Get_NewEnum ( );
__declspec(implementation_key(12015)) CalculatedMemberPtr ICalculatedMembers::Add ( _bstr_t Name, _bstr_t Formula, const _variant_t & SolveOrder, const _variant_t & Type );
__declspec(implementation_key(12016)) _ApplicationPtr ICalculatedMember::GetApplication ( );
__declspec(implementation_key(12017)) enum XlCreator ICalculatedMember::GetCreator ( );
__declspec(implementation_key(12018)) IDispatchPtr ICalculatedMember::GetParent ( );
__declspec(implementation_key(12019)) _bstr_t ICalculatedMember::GetName ( );
__declspec(implementation_key(12020)) _bstr_t ICalculatedMember::GetFormula ( );
__declspec(implementation_key(12021)) _bstr_t ICalculatedMember::GetSourceName ( );
__declspec(implementation_key(12022)) long ICalculatedMember::GetSolveOrder ( );
__declspec(implementation_key(12023)) VARIANT_BOOL ICalculatedMember::GetIsValid ( );
__declspec(implementation_key(12024)) _bstr_t ICalculatedMember::Get_Default ( );
__declspec(implementation_key(12025)) HRESULT ICalculatedMember::Delete ( );
__declspec(implementation_key(12026)) enum XlCalculatedMemberType ICalculatedMember::GetType ( );
__declspec(implementation_key(12027)) _ApplicationPtr IWatches::GetApplication ( );
__declspec(implementation_key(12028)) enum XlCreator IWatches::GetCreator ( );
__declspec(implementation_key(12029)) IDispatchPtr IWatches::GetParent ( );
__declspec(implementation_key(12030)) WatchPtr IWatches::Add ( const _variant_t & Source );
__declspec(implementation_key(12031)) long IWatches::GetCount ( );
__declspec(implementation_key(12032)) WatchPtr IWatches::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12033)) WatchPtr IWatches::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12034)) IUnknownPtr IWatches::Get_NewEnum ( );
__declspec(implementation_key(12035)) HRESULT IWatches::Delete ( );
__declspec(implementation_key(12036)) _ApplicationPtr IWatch::GetApplication ( );
__declspec(implementation_key(12037)) enum XlCreator IWatch::GetCreator ( );
__declspec(implementation_key(12038)) IDispatchPtr IWatch::GetParent ( );
__declspec(implementation_key(12039)) HRESULT IWatch::Delete ( );
__declspec(implementation_key(12040)) _variant_t IWatch::GetSource ( );
__declspec(implementation_key(12041)) _ApplicationPtr IPivotCell::GetApplication ( );
__declspec(implementation_key(12042)) enum XlCreator IPivotCell::GetCreator ( );
__declspec(implementation_key(12043)) IDispatchPtr IPivotCell::GetParent ( );
__declspec(implementation_key(12044)) enum XlPivotCellType IPivotCell::GetPivotCellType ( );
__declspec(implementation_key(12045)) PivotTablePtr IPivotCell::GetPivotTable ( );
__declspec(implementation_key(12046)) PivotFieldPtr IPivotCell::GetDataField ( );
__declspec(implementation_key(12047)) PivotFieldPtr IPivotCell::GetPivotField ( );
__declspec(implementation_key(12048)) PivotItemPtr IPivotCell::GetPivotItem ( );
__declspec(implementation_key(12049)) PivotItemListPtr IPivotCell::GetRowItems ( );
__declspec(implementation_key(12050)) PivotItemListPtr IPivotCell::GetColumnItems ( );
__declspec(implementation_key(12051)) RangePtr IPivotCell::GetRange ( );
__declspec(implementation_key(12052)) _bstr_t IPivotCell::GetDummy18 ( );
__declspec(implementation_key(12053)) enum XlConsolidationFunction IPivotCell::GetCustomSubtotalFunction ( );
__declspec(implementation_key(12054)) _ApplicationPtr IGraphic::GetApplication ( );
__declspec(implementation_key(12055)) enum XlCreator IGraphic::GetCreator ( );
__declspec(implementation_key(12056)) IDispatchPtr IGraphic::GetParent ( );
__declspec(implementation_key(12057)) float IGraphic::GetBrightness ( );
__declspec(implementation_key(12058)) void IGraphic::PutBrightness ( float RHS );
__declspec(implementation_key(12059)) enum Office::MsoPictureColorType IGraphic::GetColorType ( );
__declspec(implementation_key(12060)) void IGraphic::PutColorType ( enum Office::MsoPictureColorType RHS );
__declspec(implementation_key(12061)) float IGraphic::GetContrast ( );
__declspec(implementation_key(12062)) void IGraphic::PutContrast ( float RHS );
__declspec(implementation_key(12063)) float IGraphic::GetCropBottom ( );
__declspec(implementation_key(12064)) void IGraphic::PutCropBottom ( float RHS );
__declspec(implementation_key(12065)) float IGraphic::GetCropLeft ( );
__declspec(implementation_key(12066)) void IGraphic::PutCropLeft ( float RHS );
__declspec(implementation_key(12067)) float IGraphic::GetCropRight ( );
__declspec(implementation_key(12068)) void IGraphic::PutCropRight ( float RHS );
__declspec(implementation_key(12069)) float IGraphic::GetCropTop ( );
__declspec(implementation_key(12070)) void IGraphic::PutCropTop ( float RHS );
__declspec(implementation_key(12071)) _bstr_t IGraphic::GetFilename ( );
__declspec(implementation_key(12072)) void IGraphic::PutFilename ( _bstr_t RHS );
__declspec(implementation_key(12073)) float IGraphic::GetHeight ( );
__declspec(implementation_key(12074)) void IGraphic::PutHeight ( float RHS );
__declspec(implementation_key(12075)) enum Office::MsoTriState IGraphic::GetLockAspectRatio ( );
__declspec(implementation_key(12076)) void IGraphic::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(12077)) float IGraphic::GetWidth ( );
__declspec(implementation_key(12078)) void IGraphic::PutWidth ( float RHS );
__declspec(implementation_key(12079)) _ApplicationPtr IAutoRecover::GetApplication ( );
__declspec(implementation_key(12080)) enum XlCreator IAutoRecover::GetCreator ( );
__declspec(implementation_key(12081)) IDispatchPtr IAutoRecover::GetParent ( );
__declspec(implementation_key(12082)) VARIANT_BOOL IAutoRecover::GetEnabled ( );
__declspec(implementation_key(12083)) void IAutoRecover::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(12084)) long IAutoRecover::GetTime ( );
__declspec(implementation_key(12085)) void IAutoRecover::PutTime ( long RHS );
__declspec(implementation_key(12086)) _bstr_t IAutoRecover::GetPath ( );
__declspec(implementation_key(12087)) void IAutoRecover::PutPath ( _bstr_t RHS );
__declspec(implementation_key(12088)) _ApplicationPtr IErrorCheckingOptions::GetApplication ( );
__declspec(implementation_key(12089)) enum XlCreator IErrorCheckingOptions::GetCreator ( );
__declspec(implementation_key(12090)) IDispatchPtr IErrorCheckingOptions::GetParent ( );
__declspec(implementation_key(12091)) VARIANT_BOOL IErrorCheckingOptions::GetBackgroundChecking ( );
__declspec(implementation_key(12092)) void IErrorCheckingOptions::PutBackgroundChecking ( VARIANT_BOOL RHS );
__declspec(implementation_key(12093)) enum XlColorIndex IErrorCheckingOptions::GetIndicatorColorIndex ( );
__declspec(implementation_key(12094)) void IErrorCheckingOptions::PutIndicatorColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(12095)) VARIANT_BOOL IErrorCheckingOptions::GetEvaluateToError ( );
__declspec(implementation_key(12096)) void IErrorCheckingOptions::PutEvaluateToError ( VARIANT_BOOL RHS );
__declspec(implementation_key(12097)) VARIANT_BOOL IErrorCheckingOptions::GetTextDate ( );
__declspec(implementation_key(12098)) void IErrorCheckingOptions::PutTextDate ( VARIANT_BOOL RHS );
__declspec(implementation_key(12099)) VARIANT_BOOL IErrorCheckingOptions::GetNumberAsText ( );
__declspec(implementation_key(12100)) void IErrorCheckingOptions::PutNumberAsText ( VARIANT_BOOL RHS );
__declspec(implementation_key(12101)) VARIANT_BOOL IErrorCheckingOptions::GetInconsistentFormula ( );
__declspec(implementation_key(12102)) void IErrorCheckingOptions::PutInconsistentFormula ( VARIANT_BOOL RHS );
__declspec(implementation_key(12103)) VARIANT_BOOL IErrorCheckingOptions::GetOmittedCells ( );
__declspec(implementation_key(12104)) void IErrorCheckingOptions::PutOmittedCells ( VARIANT_BOOL RHS );
__declspec(implementation_key(12105)) VARIANT_BOOL IErrorCheckingOptions::GetUnlockedFormulaCells ( );
__declspec(implementation_key(12106)) void IErrorCheckingOptions::PutUnlockedFormulaCells ( VARIANT_BOOL RHS );
__declspec(implementation_key(12107)) VARIANT_BOOL IErrorCheckingOptions::GetEmptyCellReferences ( );
__declspec(implementation_key(12108)) void IErrorCheckingOptions::PutEmptyCellReferences ( VARIANT_BOOL RHS );
__declspec(implementation_key(12109)) VARIANT_BOOL IErrorCheckingOptions::GetListDataValidation ( );
__declspec(implementation_key(12110)) void IErrorCheckingOptions::PutListDataValidation ( VARIANT_BOOL RHS );
__declspec(implementation_key(12111)) _ApplicationPtr IErrors::GetApplication ( );
__declspec(implementation_key(12112)) enum XlCreator IErrors::GetCreator ( );
__declspec(implementation_key(12113)) IDispatchPtr IErrors::GetParent ( );
__declspec(implementation_key(12114)) ErrorPtr IErrors::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12115)) ErrorPtr IErrors::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12116)) _ApplicationPtr IError::GetApplication ( );
__declspec(implementation_key(12117)) enum XlCreator IError::GetCreator ( );
__declspec(implementation_key(12118)) IDispatchPtr IError::GetParent ( );
__declspec(implementation_key(12119)) VARIANT_BOOL IError::GetValue ( );
__declspec(implementation_key(12120)) VARIANT_BOOL IError::GetIgnore ( );
__declspec(implementation_key(12121)) void IError::PutIgnore ( VARIANT_BOOL RHS );
__declspec(implementation_key(12122)) _ApplicationPtr ISmartTagAction::GetApplication ( );
__declspec(implementation_key(12123)) enum XlCreator ISmartTagAction::GetCreator ( );
__declspec(implementation_key(12124)) IDispatchPtr ISmartTagAction::GetParent ( );
__declspec(implementation_key(12125)) _bstr_t ISmartTagAction::GetName ( );
__declspec(implementation_key(12126)) HRESULT ISmartTagAction::Execute ( );
__declspec(implementation_key(12127)) _bstr_t ISmartTagAction::Get_Default ( );
__declspec(implementation_key(12128)) enum XlSmartTagControlType ISmartTagAction::GetType ( );
__declspec(implementation_key(12129)) VARIANT_BOOL ISmartTagAction::GetPresentInPane ( );
__declspec(implementation_key(12130)) VARIANT_BOOL ISmartTagAction::GetExpandHelp ( );
__declspec(implementation_key(12131)) void ISmartTagAction::PutExpandHelp ( VARIANT_BOOL RHS );
__declspec(implementation_key(12132)) VARIANT_BOOL ISmartTagAction::GetCheckboxState ( );
__declspec(implementation_key(12133)) void ISmartTagAction::PutCheckboxState ( VARIANT_BOOL RHS );
__declspec(implementation_key(12134)) _bstr_t ISmartTagAction::GetTextboxText ( );
__declspec(implementation_key(12135)) void ISmartTagAction::PutTextboxText ( _bstr_t RHS );
__declspec(implementation_key(12136)) long ISmartTagAction::GetListSelection ( );
__declspec(implementation_key(12137)) void ISmartTagAction::PutListSelection ( long RHS );
__declspec(implementation_key(12138)) long ISmartTagAction::GetRadioGroupSelection ( );
__declspec(implementation_key(12139)) void ISmartTagAction::PutRadioGroupSelection ( long RHS );
__declspec(implementation_key(12140)) IDispatchPtr ISmartTagAction::GetActiveXControl ( );
__declspec(implementation_key(12141)) _ApplicationPtr ISmartTagActions::GetApplication ( );
__declspec(implementation_key(12142)) enum XlCreator ISmartTagActions::GetCreator ( );
__declspec(implementation_key(12143)) IDispatchPtr ISmartTagActions::GetParent ( );
__declspec(implementation_key(12144)) long ISmartTagActions::GetCount ( );
__declspec(implementation_key(12145)) SmartTagActionPtr ISmartTagActions::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12146)) SmartTagActionPtr ISmartTagActions::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12147)) IUnknownPtr ISmartTagActions::Get_NewEnum ( );
__declspec(implementation_key(12148)) _ApplicationPtr ISmartTag::GetApplication ( );
__declspec(implementation_key(12149)) enum XlCreator ISmartTag::GetCreator ( );
__declspec(implementation_key(12150)) IDispatchPtr ISmartTag::GetParent ( );
__declspec(implementation_key(12151)) _bstr_t ISmartTag::GetDownloadURL ( );
__declspec(implementation_key(12152)) _bstr_t ISmartTag::GetName ( );
__declspec(implementation_key(12153)) _bstr_t ISmartTag::Get_Default ( );
__declspec(implementation_key(12154)) _bstr_t ISmartTag::GetXML ( );
__declspec(implementation_key(12155)) RangePtr ISmartTag::GetRange ( );
__declspec(implementation_key(12156)) HRESULT ISmartTag::Delete ( );
__declspec(implementation_key(12157)) SmartTagActionsPtr ISmartTag::GetSmartTagActions ( );
__declspec(implementation_key(12158)) CustomPropertiesPtr ISmartTag::GetProperties ( );
__declspec(implementation_key(12159)) _ApplicationPtr ISmartTags::GetApplication ( );
__declspec(implementation_key(12160)) enum XlCreator ISmartTags::GetCreator ( );
__declspec(implementation_key(12161)) IDispatchPtr ISmartTags::GetParent ( );
__declspec(implementation_key(12162)) SmartTagPtr ISmartTags::Add ( _bstr_t SmartTagType );
__declspec(implementation_key(12163)) long ISmartTags::GetCount ( );
__declspec(implementation_key(12164)) SmartTagPtr ISmartTags::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12165)) IUnknownPtr ISmartTags::Get_NewEnum ( );
__declspec(implementation_key(12166)) _ApplicationPtr ISmartTagRecognizer::GetApplication ( );
__declspec(implementation_key(12167)) enum XlCreator ISmartTagRecognizer::GetCreator ( );
__declspec(implementation_key(12168)) IDispatchPtr ISmartTagRecognizer::GetParent ( );
__declspec(implementation_key(12169)) VARIANT_BOOL ISmartTagRecognizer::GetEnabled ( );
__declspec(implementation_key(12170)) void ISmartTagRecognizer::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(12171)) _bstr_t ISmartTagRecognizer::GetprogID ( );
__declspec(implementation_key(12172)) _bstr_t ISmartTagRecognizer::Get_Default ( );
__declspec(implementation_key(12173)) _bstr_t ISmartTagRecognizer::GetFullName ( );
__declspec(implementation_key(12174)) _ApplicationPtr ISmartTagRecognizers::GetApplication ( );
__declspec(implementation_key(12175)) enum XlCreator ISmartTagRecognizers::GetCreator ( );
__declspec(implementation_key(12176)) IDispatchPtr ISmartTagRecognizers::GetParent ( );
__declspec(implementation_key(12177)) long ISmartTagRecognizers::GetCount ( );
__declspec(implementation_key(12178)) SmartTagRecognizerPtr ISmartTagRecognizers::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12179)) SmartTagRecognizerPtr ISmartTagRecognizers::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12180)) IUnknownPtr ISmartTagRecognizers::Get_NewEnum ( );
__declspec(implementation_key(12181)) VARIANT_BOOL ISmartTagRecognizers::GetRecognize ( );
__declspec(implementation_key(12182)) void ISmartTagRecognizers::PutRecognize ( VARIANT_BOOL RHS );
__declspec(implementation_key(12183)) _ApplicationPtr ISmartTagOptions::GetApplication ( );
__declspec(implementation_key(12184)) enum XlCreator ISmartTagOptions::GetCreator ( );
__declspec(implementation_key(12185)) IDispatchPtr ISmartTagOptions::GetParent ( );
__declspec(implementation_key(12186)) enum XlSmartTagDisplayMode ISmartTagOptions::GetDisplaySmartTags ( );
__declspec(implementation_key(12187)) void ISmartTagOptions::PutDisplaySmartTags ( enum XlSmartTagDisplayMode RHS );
__declspec(implementation_key(12188)) VARIANT_BOOL ISmartTagOptions::GetEmbedSmartTags ( );
__declspec(implementation_key(12189)) void ISmartTagOptions::PutEmbedSmartTags ( VARIANT_BOOL RHS );
__declspec(implementation_key(12190)) _ApplicationPtr IPivotItemList::GetApplication ( );
__declspec(implementation_key(12191)) enum XlCreator IPivotItemList::GetCreator ( );
__declspec(implementation_key(12192)) IDispatchPtr IPivotItemList::GetParent ( );
__declspec(implementation_key(12193)) long IPivotItemList::GetCount ( );
__declspec(implementation_key(12194)) PivotItemPtr IPivotItemList::Item ( const _variant_t & Index );
__declspec(implementation_key(12195)) PivotItemPtr IPivotItemList::Get_Default ( const _variant_t & Field );
__declspec(implementation_key(12196)) IUnknownPtr IPivotItemList::_NewEnum ( );
__declspec(implementation_key(12197)) _ApplicationPtr ITab::GetApplication ( );
__declspec(implementation_key(12198)) enum XlCreator ITab::GetCreator ( );
__declspec(implementation_key(12199)) IDispatchPtr ITab::GetParent ( );
__declspec(implementation_key(12200)) _variant_t ITab::GetColor ( );
__declspec(implementation_key(12201)) void ITab::PutColor ( const _variant_t & RHS );
__declspec(implementation_key(12202)) enum XlColorIndex ITab::GetColorIndex ( );
__declspec(implementation_key(12203)) void ITab::PutColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(12204)) _ApplicationPtr IListObjects::GetApplication ( );
__declspec(implementation_key(12205)) enum XlCreator IListObjects::GetCreator ( );
__declspec(implementation_key(12206)) IDispatchPtr IListObjects::GetParent ( );
__declspec(implementation_key(12207)) ListObjectPtr IListObjects::Add ( enum XlListObjectSourceType SourceType, const _variant_t & Source, const _variant_t & LinkSource, enum XlYesNoGuess XlListObjectHasHeaders, const _variant_t & Destination );
__declspec(implementation_key(12208)) ListObjectPtr IListObjects::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12209)) IUnknownPtr IListObjects::Get_NewEnum ( );
__declspec(implementation_key(12210)) ListObjectPtr IListObjects::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12211)) long IListObjects::GetCount ( );
__declspec(implementation_key(12212)) _ApplicationPtr IListObject::GetApplication ( );
__declspec(implementation_key(12213)) enum XlCreator IListObject::GetCreator ( );
__declspec(implementation_key(12214)) IDispatchPtr IListObject::GetParent ( );
__declspec(implementation_key(12215)) HRESULT IListObject::Delete ( );
__declspec(implementation_key(12216)) _bstr_t IListObject::Publish ( const _variant_t & Target, VARIANT_BOOL LinkSource );
__declspec(implementation_key(12217)) HRESULT IListObject::Refresh ( );
__declspec(implementation_key(12218)) HRESULT IListObject::Unlink ( );
__declspec(implementation_key(12219)) HRESULT IListObject::Unlist ( );
__declspec(implementation_key(12220)) HRESULT IListObject::UpdateChanges ( enum XlListConflict iConflictType );
__declspec(implementation_key(12221)) HRESULT IListObject::Resize ( struct Range * Range );
__declspec(implementation_key(12222)) _bstr_t IListObject::Get_Default ( );
__declspec(implementation_key(12223)) VARIANT_BOOL IListObject::GetActive ( );
__declspec(implementation_key(12224)) RangePtr IListObject::GetDataBodyRange ( );
__declspec(implementation_key(12225)) VARIANT_BOOL IListObject::GetDisplayRightToLeft ( );
__declspec(implementation_key(12226)) RangePtr IListObject::GetHeaderRowRange ( );
__declspec(implementation_key(12227)) RangePtr IListObject::GetInsertRowRange ( );
__declspec(implementation_key(12228)) ListColumnsPtr IListObject::GetListColumns ( );
__declspec(implementation_key(12229)) ListRowsPtr IListObject::GetListRows ( );
__declspec(implementation_key(12230)) _bstr_t IListObject::GetName ( );
__declspec(implementation_key(12231)) void IListObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(12232)) _QueryTablePtr IListObject::GetQueryTable ( );
__declspec(implementation_key(12233)) RangePtr IListObject::GetRange ( );
__declspec(implementation_key(12234)) VARIANT_BOOL IListObject::GetShowAutoFilter ( );
__declspec(implementation_key(12235)) void IListObject::PutShowAutoFilter ( VARIANT_BOOL RHS );
__declspec(implementation_key(12236)) VARIANT_BOOL IListObject::GetShowTotals ( );
__declspec(implementation_key(12237)) void IListObject::PutShowTotals ( VARIANT_BOOL RHS );
__declspec(implementation_key(12238)) enum XlListObjectSourceType IListObject::GetSourceType ( );
__declspec(implementation_key(12239)) RangePtr IListObject::GetTotalsRowRange ( );
__declspec(implementation_key(12240)) _bstr_t IListObject::GetSharePointURL ( );
__declspec(implementation_key(12241)) XmlMapPtr IListObject::GetXmlMap ( );
__declspec(implementation_key(12242)) _ApplicationPtr IListColumns::GetApplication ( );
__declspec(implementation_key(12243)) enum XlCreator IListColumns::GetCreator ( );
__declspec(implementation_key(12244)) IDispatchPtr IListColumns::GetParent ( );
__declspec(implementation_key(12245)) ListColumnPtr IListColumns::Add ( const _variant_t & Position );
__declspec(implementation_key(12246)) ListColumnPtr IListColumns::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12247)) IUnknownPtr IListColumns::Get_NewEnum ( );
__declspec(implementation_key(12248)) ListColumnPtr IListColumns::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12249)) long IListColumns::GetCount ( );
__declspec(implementation_key(12250)) _ApplicationPtr IListColumn::GetApplication ( );
__declspec(implementation_key(12251)) enum XlCreator IListColumn::GetCreator ( );
__declspec(implementation_key(12252)) IDispatchPtr IListColumn::GetParent ( );
__declspec(implementation_key(12253)) HRESULT IListColumn::Delete ( );
__declspec(implementation_key(12254)) _bstr_t IListColumn::Get_Default ( );
__declspec(implementation_key(12255)) ListDataFormatPtr IListColumn::GetListDataFormat ( );
__declspec(implementation_key(12256)) long IListColumn::GetIndex ( );
__declspec(implementation_key(12257)) _bstr_t IListColumn::GetName ( );
__declspec(implementation_key(12258)) void IListColumn::PutName ( _bstr_t RHS );
__declspec(implementation_key(12259)) RangePtr IListColumn::GetRange ( );
__declspec(implementation_key(12260)) enum XlTotalsCalculation IListColumn::GetTotalsCalculation ( );
__declspec(implementation_key(12261)) void IListColumn::PutTotalsCalculation ( enum XlTotalsCalculation RHS );
__declspec(implementation_key(12262)) XPathPtr IListColumn::GetXPath ( );
__declspec(implementation_key(12263)) _bstr_t IListColumn::GetSharePointFormula ( );
__declspec(implementation_key(12264)) _ApplicationPtr IListRows::GetApplication ( );
__declspec(implementation_key(12265)) enum XlCreator IListRows::GetCreator ( );
__declspec(implementation_key(12266)) IDispatchPtr IListRows::GetParent ( );
__declspec(implementation_key(12267)) ListRowPtr IListRows::Add ( const _variant_t & Position );
__declspec(implementation_key(12268)) ListRowPtr IListRows::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12269)) IUnknownPtr IListRows::Get_NewEnum ( );
__declspec(implementation_key(12270)) ListRowPtr IListRows::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12271)) long IListRows::GetCount ( );
__declspec(implementation_key(12272)) _ApplicationPtr IListRow::GetApplication ( );
__declspec(implementation_key(12273)) enum XlCreator IListRow::GetCreator ( );
__declspec(implementation_key(12274)) IDispatchPtr IListRow::GetParent ( );
__declspec(implementation_key(12275)) HRESULT IListRow::Delete ( );
__declspec(implementation_key(12276)) long IListRow::GetIndex ( );
__declspec(implementation_key(12277)) VARIANT_BOOL IListRow::GetInvalidData ( );
__declspec(implementation_key(12278)) RangePtr IListRow::GetRange ( );
__declspec(implementation_key(12279)) _ApplicationPtr IXmlNamespace::GetApplication ( );
__declspec(implementation_key(12280)) enum XlCreator IXmlNamespace::GetCreator ( );
__declspec(implementation_key(12281)) IDispatchPtr IXmlNamespace::GetParent ( );
__declspec(implementation_key(12282)) _bstr_t IXmlNamespace::Get_Default ( );
__declspec(implementation_key(12283)) _bstr_t IXmlNamespace::GetUri ( );
__declspec(implementation_key(12284)) _bstr_t IXmlNamespace::GetPrefix ( );
__declspec(implementation_key(12285)) _ApplicationPtr IXmlNamespaces::GetApplication ( );
__declspec(implementation_key(12286)) enum XlCreator IXmlNamespaces::GetCreator ( );
__declspec(implementation_key(12287)) IDispatchPtr IXmlNamespaces::GetParent ( );
__declspec(implementation_key(12288)) XmlNamespacePtr IXmlNamespaces::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12289)) XmlNamespacePtr IXmlNamespaces::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12290)) long IXmlNamespaces::GetCount ( );
__declspec(implementation_key(12291)) _bstr_t IXmlNamespaces::GetValue ( );
__declspec(implementation_key(12292)) IUnknownPtr IXmlNamespaces::Get_NewEnum ( );
__declspec(implementation_key(12293)) HRESULT IXmlNamespaces::InstallManifest ( _bstr_t Path, const _variant_t & InstallForAllUsers );
__declspec(implementation_key(12294)) _ApplicationPtr IXmlDataBinding::GetApplication ( );
__declspec(implementation_key(12295)) enum XlCreator IXmlDataBinding::GetCreator ( );
__declspec(implementation_key(12296)) IDispatchPtr IXmlDataBinding::GetParent ( );
__declspec(implementation_key(12297)) _bstr_t IXmlDataBinding::Get_Default ( );
__declspec(implementation_key(12298)) enum XlXmlImportResult IXmlDataBinding::Refresh ( );
__declspec(implementation_key(12299)) HRESULT IXmlDataBinding::LoadSettings ( _bstr_t Url );
__declspec(implementation_key(12300)) HRESULT IXmlDataBinding::ClearSettings ( );
__declspec(implementation_key(12301)) _bstr_t IXmlDataBinding::GetSourceUrl ( );
__declspec(implementation_key(12302)) _ApplicationPtr IXmlSchema::GetApplication ( );
__declspec(implementation_key(12303)) enum XlCreator IXmlSchema::GetCreator ( );
__declspec(implementation_key(12304)) IDispatchPtr IXmlSchema::GetParent ( );
__declspec(implementation_key(12305)) XmlNamespacePtr IXmlSchema::GetNamespace ( );
__declspec(implementation_key(12306)) _bstr_t IXmlSchema::GetXML ( );
__declspec(implementation_key(12307)) _bstr_t IXmlSchema::GetName ( );
__declspec(implementation_key(12308)) _ApplicationPtr IXmlSchemas::GetApplication ( );
__declspec(implementation_key(12309)) enum XlCreator IXmlSchemas::GetCreator ( );
__declspec(implementation_key(12310)) IDispatchPtr IXmlSchemas::GetParent ( );
__declspec(implementation_key(12311)) XmlSchemaPtr IXmlSchemas::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12312)) XmlSchemaPtr IXmlSchemas::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12313)) long IXmlSchemas::GetCount ( );
__declspec(implementation_key(12314)) IUnknownPtr IXmlSchemas::Get_NewEnum ( );
__declspec(implementation_key(12315)) _ApplicationPtr IXmlMap::GetApplication ( );
__declspec(implementation_key(12316)) enum XlCreator IXmlMap::GetCreator ( );
__declspec(implementation_key(12317)) IDispatchPtr IXmlMap::GetParent ( );
__declspec(implementation_key(12318)) _bstr_t IXmlMap::Get_Default ( );
__declspec(implementation_key(12319)) _bstr_t IXmlMap::GetName ( );
__declspec(implementation_key(12320)) void IXmlMap::PutName ( _bstr_t RHS );
__declspec(implementation_key(12321)) VARIANT_BOOL IXmlMap::GetIsExportable ( );
__declspec(implementation_key(12322)) VARIANT_BOOL IXmlMap::GetShowImportExportValidationErrors ( );
__declspec(implementation_key(12323)) void IXmlMap::PutShowImportExportValidationErrors ( VARIANT_BOOL RHS );
__declspec(implementation_key(12324)) VARIANT_BOOL IXmlMap::GetSaveDataSourceDefinition ( );
__declspec(implementation_key(12325)) void IXmlMap::PutSaveDataSourceDefinition ( VARIANT_BOOL RHS );
__declspec(implementation_key(12326)) VARIANT_BOOL IXmlMap::GetAdjustColumnWidth ( );
__declspec(implementation_key(12327)) void IXmlMap::PutAdjustColumnWidth ( VARIANT_BOOL RHS );
__declspec(implementation_key(12328)) VARIANT_BOOL IXmlMap::GetPreserveColumnFilter ( );
__declspec(implementation_key(12329)) void IXmlMap::PutPreserveColumnFilter ( VARIANT_BOOL RHS );
__declspec(implementation_key(12330)) VARIANT_BOOL IXmlMap::GetPreserveNumberFormatting ( );
__declspec(implementation_key(12331)) void IXmlMap::PutPreserveNumberFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(12332)) VARIANT_BOOL IXmlMap::GetAppendOnImport ( );
__declspec(implementation_key(12333)) void IXmlMap::PutAppendOnImport ( VARIANT_BOOL RHS );
__declspec(implementation_key(12334)) _bstr_t IXmlMap::GetRootElementName ( );
__declspec(implementation_key(12335)) XmlNamespacePtr IXmlMap::GetRootElementNamespace ( );
__declspec(implementation_key(12336)) XmlSchemasPtr IXmlMap::GetSchemas ( );
__declspec(implementation_key(12337)) XmlDataBindingPtr IXmlMap::GetDataBinding ( );
__declspec(implementation_key(12338)) HRESULT IXmlMap::Delete ( );
__declspec(implementation_key(12339)) enum XlXmlImportResult IXmlMap::Import ( _bstr_t Url, const _variant_t & Overwrite );
__declspec(implementation_key(12340)) enum XlXmlImportResult IXmlMap::ImportXml ( _bstr_t XmlData, const _variant_t & Overwrite );
__declspec(implementation_key(12341)) enum XlXmlExportResult IXmlMap::Export ( _bstr_t Url, const _variant_t & Overwrite );
__declspec(implementation_key(12342)) enum XlXmlExportResult IXmlMap::ExportXml ( BSTR * Data );
__declspec(implementation_key(12343)) _ApplicationPtr IXmlMaps::GetApplication ( );
__declspec(implementation_key(12344)) enum XlCreator IXmlMaps::GetCreator ( );
__declspec(implementation_key(12345)) IDispatchPtr IXmlMaps::GetParent ( );
__declspec(implementation_key(12346)) XmlMapPtr IXmlMaps::Add ( _bstr_t Schema, const _variant_t & RootElementName );
__declspec(implementation_key(12347)) XmlMapPtr IXmlMaps::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12348)) XmlMapPtr IXmlMaps::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12349)) long IXmlMaps::GetCount ( );
__declspec(implementation_key(12350)) IUnknownPtr IXmlMaps::Get_NewEnum ( );
__declspec(implementation_key(12351)) _ApplicationPtr IListDataFormat::GetApplication ( );
__declspec(implementation_key(12352)) enum XlCreator IListDataFormat::GetCreator ( );
__declspec(implementation_key(12353)) IDispatchPtr IListDataFormat::GetParent ( );
__declspec(implementation_key(12354)) enum XlListDataType IListDataFormat::Get_Default ( );
__declspec(implementation_key(12355)) _variant_t IListDataFormat::GetChoices ( );
__declspec(implementation_key(12356)) long IListDataFormat::GetDecimalPlaces ( );
__declspec(implementation_key(12357)) _variant_t IListDataFormat::GetDefaultValue ( );
__declspec(implementation_key(12358)) VARIANT_BOOL IListDataFormat::GetIsPercent ( );
__declspec(implementation_key(12359)) long IListDataFormat::Getlcid ( );
__declspec(implementation_key(12360)) long IListDataFormat::GetMaxCharacters ( );
__declspec(implementation_key(12361)) _variant_t IListDataFormat::GetMaxNumber ( );
__declspec(implementation_key(12362)) _variant_t IListDataFormat::GetMinNumber ( );
__declspec(implementation_key(12363)) VARIANT_BOOL IListDataFormat::GetRequired ( );
__declspec(implementation_key(12364)) enum XlListDataType IListDataFormat::GetType ( );
__declspec(implementation_key(12365)) VARIANT_BOOL IListDataFormat::GetReadOnly ( );
__declspec(implementation_key(12366)) VARIANT_BOOL IListDataFormat::GetAllowFillIn ( );
__declspec(implementation_key(12367)) _ApplicationPtr IXPath::GetApplication ( );
__declspec(implementation_key(12368)) enum XlCreator IXPath::GetCreator ( );
__declspec(implementation_key(12369)) IDispatchPtr IXPath::GetParent ( );
__declspec(implementation_key(12370)) _bstr_t IXPath::Get_Default ( );
__declspec(implementation_key(12371)) _bstr_t IXPath::GetValue ( );
__declspec(implementation_key(12372)) XmlMapPtr IXPath::GetMap ( );
__declspec(implementation_key(12373)) HRESULT IXPath::SetValue ( struct XmlMap * Map, _bstr_t XPath, const _variant_t & SelectionNamespace, const _variant_t & Repeating );
__declspec(implementation_key(12374)) HRESULT IXPath::Clear ( );
__declspec(implementation_key(12375)) VARIANT_BOOL IXPath::GetRepeating ( );
__declspec(implementation_key(12376)) _ApplicationPtr IWindow::GetApplication ( );
__declspec(implementation_key(12377)) enum XlCreator IWindow::GetCreator ( );
__declspec(implementation_key(12378)) IDispatchPtr IWindow::GetParent ( );
__declspec(implementation_key(12379)) _variant_t IWindow::Activate ( );
__declspec(implementation_key(12380)) _variant_t IWindow::ActivateNext ( );
__declspec(implementation_key(12381)) _variant_t IWindow::ActivatePrevious ( );
__declspec(implementation_key(12382)) RangePtr IWindow::GetActiveCell ( );
__declspec(implementation_key(12383)) _ChartPtr IWindow::GetActiveChart ( );
__declspec(implementation_key(12384)) PanePtr IWindow::GetActivePane ( );
__declspec(implementation_key(12385)) IDispatchPtr IWindow::GetActiveSheet ( );
__declspec(implementation_key(12386)) _variant_t IWindow::GetCaption ( );
__declspec(implementation_key(12387)) void IWindow::PutCaption ( const _variant_t & RHS );
__declspec(implementation_key(12388)) VARIANT_BOOL IWindow::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(12389)) VARIANT_BOOL IWindow::GetDisplayFormulas ( );
__declspec(implementation_key(12390)) void IWindow::PutDisplayFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(12391)) VARIANT_BOOL IWindow::GetDisplayGridlines ( );
__declspec(implementation_key(12392)) void IWindow::PutDisplayGridlines ( VARIANT_BOOL RHS );
__declspec(implementation_key(12393)) VARIANT_BOOL IWindow::GetDisplayHeadings ( );
__declspec(implementation_key(12394)) void IWindow::PutDisplayHeadings ( VARIANT_BOOL RHS );
__declspec(implementation_key(12395)) VARIANT_BOOL IWindow::GetDisplayHorizontalScrollBar ( );
__declspec(implementation_key(12396)) void IWindow::PutDisplayHorizontalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(12397)) VARIANT_BOOL IWindow::GetDisplayOutline ( );
__declspec(implementation_key(12398)) void IWindow::PutDisplayOutline ( VARIANT_BOOL RHS );
__declspec(implementation_key(12399)) VARIANT_BOOL IWindow::Get_DisplayRightToLeft ( );
__declspec(implementation_key(12400)) void IWindow::Put_DisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(12401)) VARIANT_BOOL IWindow::GetDisplayVerticalScrollBar ( );
__declspec(implementation_key(12402)) void IWindow::PutDisplayVerticalScrollBar ( VARIANT_BOOL RHS );
__declspec(implementation_key(12403)) VARIANT_BOOL IWindow::GetDisplayWorkbookTabs ( );
__declspec(implementation_key(12404)) void IWindow::PutDisplayWorkbookTabs ( VARIANT_BOOL RHS );
__declspec(implementation_key(12405)) VARIANT_BOOL IWindow::GetDisplayZeros ( );
__declspec(implementation_key(12406)) void IWindow::PutDisplayZeros ( VARIANT_BOOL RHS );
__declspec(implementation_key(12407)) VARIANT_BOOL IWindow::GetEnableResize ( );
__declspec(implementation_key(12408)) void IWindow::PutEnableResize ( VARIANT_BOOL RHS );
__declspec(implementation_key(12409)) VARIANT_BOOL IWindow::GetFreezePanes ( );
__declspec(implementation_key(12410)) void IWindow::PutFreezePanes ( VARIANT_BOOL RHS );
__declspec(implementation_key(12411)) long IWindow::GetGridlineColor ( );
__declspec(implementation_key(12412)) void IWindow::PutGridlineColor ( long RHS );
__declspec(implementation_key(12413)) enum XlColorIndex IWindow::GetGridlineColorIndex ( );
__declspec(implementation_key(12414)) void IWindow::PutGridlineColorIndex ( enum XlColorIndex RHS );
__declspec(implementation_key(12415)) double IWindow::GetHeight ( );
__declspec(implementation_key(12416)) void IWindow::PutHeight ( double RHS );
__declspec(implementation_key(12417)) long IWindow::GetIndex ( );
__declspec(implementation_key(12418)) _variant_t IWindow::LargeScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(12419)) double IWindow::GetLeft ( );
__declspec(implementation_key(12420)) void IWindow::PutLeft ( double RHS );
__declspec(implementation_key(12421)) WindowPtr IWindow::NewWindow ( );
__declspec(implementation_key(12422)) _bstr_t IWindow::GetOnWindow ( );
__declspec(implementation_key(12423)) void IWindow::PutOnWindow ( _bstr_t RHS );
__declspec(implementation_key(12424)) PanesPtr IWindow::GetPanes ( );
__declspec(implementation_key(12425)) _variant_t IWindow::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(12426)) _variant_t IWindow::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(12427)) RangePtr IWindow::GetRangeSelection ( );
__declspec(implementation_key(12428)) long IWindow::GetScrollColumn ( );
__declspec(implementation_key(12429)) void IWindow::PutScrollColumn ( long RHS );
__declspec(implementation_key(12430)) long IWindow::GetScrollRow ( );
__declspec(implementation_key(12431)) void IWindow::PutScrollRow ( long RHS );
__declspec(implementation_key(12432)) _variant_t IWindow::ScrollWorkbookTabs ( const _variant_t & Sheets, const _variant_t & Position );
__declspec(implementation_key(12433)) SheetsPtr IWindow::GetSelectedSheets ( );
__declspec(implementation_key(12434)) IDispatchPtr IWindow::GetSelection ( );
__declspec(implementation_key(12435)) _variant_t IWindow::SmallScroll ( const _variant_t & Down, const _variant_t & Up, const _variant_t & ToRight, const _variant_t & ToLeft );
__declspec(implementation_key(12436)) VARIANT_BOOL IWindow::GetSplit ( );
__declspec(implementation_key(12437)) void IWindow::PutSplit ( VARIANT_BOOL RHS );
__declspec(implementation_key(12438)) long IWindow::GetSplitColumn ( );
__declspec(implementation_key(12439)) void IWindow::PutSplitColumn ( long RHS );
__declspec(implementation_key(12440)) double IWindow::GetSplitHorizontal ( );
__declspec(implementation_key(12441)) void IWindow::PutSplitHorizontal ( double RHS );
__declspec(implementation_key(12442)) long IWindow::GetSplitRow ( );
__declspec(implementation_key(12443)) void IWindow::PutSplitRow ( long RHS );
__declspec(implementation_key(12444)) double IWindow::GetSplitVertical ( );
__declspec(implementation_key(12445)) void IWindow::PutSplitVertical ( double RHS );
__declspec(implementation_key(12446)) double IWindow::GetTabRatio ( );
__declspec(implementation_key(12447)) void IWindow::PutTabRatio ( double RHS );
__declspec(implementation_key(12448)) double IWindow::GetTop ( );
__declspec(implementation_key(12449)) void IWindow::PutTop ( double RHS );
__declspec(implementation_key(12450)) enum XlWindowType IWindow::GetType ( );
__declspec(implementation_key(12451)) double IWindow::GetUsableHeight ( );
__declspec(implementation_key(12452)) double IWindow::GetUsableWidth ( );
__declspec(implementation_key(12453)) VARIANT_BOOL IWindow::GetVisible ( );
__declspec(implementation_key(12454)) void IWindow::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(12455)) RangePtr IWindow::GetVisibleRange ( );
__declspec(implementation_key(12456)) double IWindow::GetWidth ( );
__declspec(implementation_key(12457)) void IWindow::PutWidth ( double RHS );
__declspec(implementation_key(12458)) long IWindow::GetWindowNumber ( );
__declspec(implementation_key(12459)) enum XlWindowState IWindow::GetWindowState ( );
__declspec(implementation_key(12460)) void IWindow::PutWindowState ( enum XlWindowState RHS );
__declspec(implementation_key(12461)) _variant_t IWindow::GetZoom ( );
__declspec(implementation_key(12462)) void IWindow::PutZoom ( const _variant_t & RHS );
__declspec(implementation_key(12463)) enum XlWindowView IWindow::GetView ( );
__declspec(implementation_key(12464)) void IWindow::PutView ( enum XlWindowView RHS );
__declspec(implementation_key(12465)) VARIANT_BOOL IWindow::GetDisplayRightToLeft ( );
__declspec(implementation_key(12466)) void IWindow::PutDisplayRightToLeft ( VARIANT_BOOL RHS );
__declspec(implementation_key(12467)) long IWindow::PointsToScreenPixelsX ( long Points );
__declspec(implementation_key(12468)) long IWindow::PointsToScreenPixelsY ( long Points );
__declspec(implementation_key(12469)) IDispatchPtr IWindow::RangeFromPoint ( long x, long y );
__declspec(implementation_key(12470)) HRESULT IWindow::ScrollIntoView ( long Left, long Top, long Width, long Height, const _variant_t & Start );
__declspec(implementation_key(12471)) _ApplicationPtr _Chart::GetApplication ( );
__declspec(implementation_key(12472)) enum XlCreator _Chart::GetCreator ( );
__declspec(implementation_key(12473)) IDispatchPtr _Chart::GetParent ( );
__declspec(implementation_key(12474)) HRESULT _Chart::Activate ( long lcid );
__declspec(implementation_key(12475)) HRESULT _Chart::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(12476)) HRESULT _Chart::Delete ( long lcid );
__declspec(implementation_key(12477)) _bstr_t _Chart::GetCodeName ( );
__declspec(implementation_key(12478)) _bstr_t _Chart::Get_CodeName ( );
__declspec(implementation_key(12479)) void _Chart::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(12480)) long _Chart::GetIndex ( long lcid );
__declspec(implementation_key(12481)) HRESULT _Chart::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(12482)) _bstr_t _Chart::GetName ( );
__declspec(implementation_key(12483)) void _Chart::PutName ( _bstr_t RHS );
__declspec(implementation_key(12484)) IDispatchPtr _Chart::GetNext ( );
__declspec(implementation_key(12485)) _bstr_t _Chart::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(12486)) void _Chart::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12487)) _bstr_t _Chart::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(12488)) void _Chart::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12489)) _bstr_t _Chart::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(12490)) void _Chart::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12491)) PageSetupPtr _Chart::GetPageSetup ( );
__declspec(implementation_key(12492)) IDispatchPtr _Chart::GetPrevious ( );
__declspec(implementation_key(12493)) HRESULT _Chart::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(12494)) HRESULT _Chart::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(12495)) HRESULT _Chart::_Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly, long lcid );
__declspec(implementation_key(12496)) VARIANT_BOOL _Chart::GetProtectContents ( long lcid );
__declspec(implementation_key(12497)) VARIANT_BOOL _Chart::GetProtectDrawingObjects ( long lcid );
__declspec(implementation_key(12498)) VARIANT_BOOL _Chart::GetProtectionMode ( long lcid );
__declspec(implementation_key(12499)) HRESULT _Chart::_SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(12500)) HRESULT _Chart::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(12501)) HRESULT _Chart::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(12502)) enum XlSheetVisibility _Chart::GetVisible ( long lcid );
__declspec(implementation_key(12503)) void _Chart::PutVisible ( long lcid, enum XlSheetVisibility RHS );
__declspec(implementation_key(12504)) ShapesPtr _Chart::GetShapes ( );
__declspec(implementation_key(12505)) HRESULT _Chart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, long lcid );
__declspec(implementation_key(12506)) IDispatchPtr _Chart::Arcs ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12507)) ChartGroupPtr _Chart::GetArea3DGroup ( long lcid );
__declspec(implementation_key(12508)) IDispatchPtr _Chart::AreaGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12509)) HRESULT _Chart::AutoFormat ( long Gallery, const _variant_t & Format );
__declspec(implementation_key(12510)) VARIANT_BOOL _Chart::GetAutoScaling ( long lcid );
__declspec(implementation_key(12511)) void _Chart::PutAutoScaling ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12512)) IDispatchPtr _Chart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup, long lcid );
__declspec(implementation_key(12513)) HRESULT _Chart::SetBackgroundPicture ( _bstr_t Filename );
__declspec(implementation_key(12514)) ChartGroupPtr _Chart::GetBar3DGroup ( long lcid );
__declspec(implementation_key(12515)) IDispatchPtr _Chart::BarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12516)) IDispatchPtr _Chart::Buttons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12517)) ChartAreaPtr _Chart::GetChartArea ( long lcid );
__declspec(implementation_key(12518)) IDispatchPtr _Chart::ChartGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12519)) IDispatchPtr _Chart::ChartObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12520)) ChartTitlePtr _Chart::GetChartTitle ( long lcid );
__declspec(implementation_key(12521)) HRESULT _Chart::ChartWizard ( const _variant_t & Source, const _variant_t & Gallery, const _variant_t & Format, const _variant_t & PlotBy, const _variant_t & CategoryLabels, const _variant_t & SeriesLabels, const _variant_t & HasLegend, const _variant_t & Title, const _variant_t & CategoryTitle, const _variant_t & ValueTitle, const _variant_t & ExtraTitle, long lcid );
__declspec(implementation_key(12522)) IDispatchPtr _Chart::CheckBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12523)) HRESULT _Chart::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang, long lcid );
__declspec(implementation_key(12524)) ChartGroupPtr _Chart::GetColumn3DGroup ( long lcid );
__declspec(implementation_key(12525)) IDispatchPtr _Chart::ColumnGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12526)) HRESULT _Chart::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format, enum XlPictureAppearance Size, long lcid );
__declspec(implementation_key(12527)) CornersPtr _Chart::GetCorners ( long lcid );
__declspec(implementation_key(12528)) HRESULT _Chart::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, enum XlPictureAppearance Size, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU, long lcid );
__declspec(implementation_key(12529)) DataTablePtr _Chart::GetDataTable ( );
__declspec(implementation_key(12530)) long _Chart::GetDepthPercent ( long lcid );
__declspec(implementation_key(12531)) void _Chart::PutDepthPercent ( long lcid, long RHS );
__declspec(implementation_key(12532)) HRESULT _Chart::Deselect ( long lcid );
__declspec(implementation_key(12533)) enum XlDisplayBlanksAs _Chart::GetDisplayBlanksAs ( long lcid );
__declspec(implementation_key(12534)) void _Chart::PutDisplayBlanksAs ( long lcid, enum XlDisplayBlanksAs RHS );
__declspec(implementation_key(12535)) IDispatchPtr _Chart::DoughnutGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12536)) IDispatchPtr _Chart::Drawings ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12537)) IDispatchPtr _Chart::DrawingObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12538)) IDispatchPtr _Chart::DropDowns ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12539)) long _Chart::GetElevation ( long lcid );
__declspec(implementation_key(12540)) void _Chart::PutElevation ( long lcid, long RHS );
__declspec(implementation_key(12541)) _variant_t _Chart::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(12542)) _variant_t _Chart::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(12543)) FloorPtr _Chart::GetFloor ( long lcid );
__declspec(implementation_key(12544)) long _Chart::GetGapDepth ( long lcid );
__declspec(implementation_key(12545)) void _Chart::PutGapDepth ( long lcid, long RHS );
__declspec(implementation_key(12546)) IDispatchPtr _Chart::GroupBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12547)) IDispatchPtr _Chart::GroupObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12548)) _variant_t _Chart::GetHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(12549)) void _Chart::PutHasAxis ( const _variant_t & Index1, const _variant_t & Index2, long lcid, const _variant_t & RHS );
__declspec(implementation_key(12550)) VARIANT_BOOL _Chart::GetHasDataTable ( );
__declspec(implementation_key(12551)) void _Chart::PutHasDataTable ( VARIANT_BOOL RHS );
__declspec(implementation_key(12552)) VARIANT_BOOL _Chart::GetHasLegend ( long lcid );
__declspec(implementation_key(12553)) void _Chart::PutHasLegend ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12554)) VARIANT_BOOL _Chart::GetHasTitle ( long lcid );
__declspec(implementation_key(12555)) void _Chart::PutHasTitle ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12556)) long _Chart::GetHeightPercent ( long lcid );
__declspec(implementation_key(12557)) void _Chart::PutHeightPercent ( long lcid, long RHS );
__declspec(implementation_key(12558)) HyperlinksPtr _Chart::GetHyperlinks ( );
__declspec(implementation_key(12559)) IDispatchPtr _Chart::Labels ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12560)) LegendPtr _Chart::GetLegend ( long lcid );
__declspec(implementation_key(12561)) ChartGroupPtr _Chart::GetLine3DGroup ( long lcid );
__declspec(implementation_key(12562)) IDispatchPtr _Chart::LineGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12563)) IDispatchPtr _Chart::Lines ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12564)) IDispatchPtr _Chart::ListBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12565)) _ChartPtr _Chart::Location ( enum XlChartLocation Where, const _variant_t & Name );
__declspec(implementation_key(12566)) IDispatchPtr _Chart::OLEObjects ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12567)) IDispatchPtr _Chart::OptionButtons ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12568)) IDispatchPtr _Chart::Ovals ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12569)) HRESULT _Chart::Paste ( const _variant_t & Type, long lcid );
__declspec(implementation_key(12570)) long _Chart::GetPerspective ( long lcid );
__declspec(implementation_key(12571)) void _Chart::PutPerspective ( long lcid, long RHS );
__declspec(implementation_key(12572)) IDispatchPtr _Chart::Pictures ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12573)) ChartGroupPtr _Chart::GetPie3DGroup ( long lcid );
__declspec(implementation_key(12574)) IDispatchPtr _Chart::PieGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12575)) PlotAreaPtr _Chart::GetPlotArea ( long lcid );
__declspec(implementation_key(12576)) VARIANT_BOOL _Chart::GetPlotVisibleOnly ( long lcid );
__declspec(implementation_key(12577)) void _Chart::PutPlotVisibleOnly ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12578)) IDispatchPtr _Chart::RadarGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12579)) IDispatchPtr _Chart::Rectangles ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12580)) _variant_t _Chart::GetRightAngleAxes ( long lcid );
__declspec(implementation_key(12581)) void _Chart::PutRightAngleAxes ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12582)) _variant_t _Chart::GetRotation ( long lcid );
__declspec(implementation_key(12583)) void _Chart::PutRotation ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12584)) IDispatchPtr _Chart::ScrollBars ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12585)) IDispatchPtr _Chart::SeriesCollection ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12586)) VARIANT_BOOL _Chart::GetSizeWithWindow ( long lcid );
__declspec(implementation_key(12587)) void _Chart::PutSizeWithWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12588)) VARIANT_BOOL _Chart::GetShowWindow ( );
__declspec(implementation_key(12589)) void _Chart::PutShowWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(12590)) IDispatchPtr _Chart::Spinners ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12591)) long _Chart::GetSubType ( long lcid );
__declspec(implementation_key(12592)) void _Chart::PutSubType ( long lcid, long RHS );
__declspec(implementation_key(12593)) ChartGroupPtr _Chart::GetSurfaceGroup ( long lcid );
__declspec(implementation_key(12594)) IDispatchPtr _Chart::TextBoxes ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12595)) long _Chart::GetType ( long lcid );
__declspec(implementation_key(12596)) void _Chart::PutType ( long lcid, long RHS );
__declspec(implementation_key(12597)) enum XlChartType _Chart::GetChartType ( );
__declspec(implementation_key(12598)) void _Chart::PutChartType ( enum XlChartType RHS );
__declspec(implementation_key(12599)) HRESULT _Chart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName );
__declspec(implementation_key(12600)) WallsPtr _Chart::GetWalls ( long lcid );
__declspec(implementation_key(12601)) VARIANT_BOOL _Chart::GetWallsAndGridlines2D ( long lcid );
__declspec(implementation_key(12602)) void _Chart::PutWallsAndGridlines2D ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12603)) IDispatchPtr _Chart::XYGroups ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12604)) enum XlBarShape _Chart::GetBarShape ( );
__declspec(implementation_key(12605)) void _Chart::PutBarShape ( enum XlBarShape RHS );
__declspec(implementation_key(12606)) enum XlRowCol _Chart::GetPlotBy ( );
__declspec(implementation_key(12607)) void _Chart::PutPlotBy ( enum XlRowCol RHS );
__declspec(implementation_key(12608)) HRESULT _Chart::CopyChartBuild ( );
__declspec(implementation_key(12609)) VARIANT_BOOL _Chart::GetProtectFormatting ( );
__declspec(implementation_key(12610)) void _Chart::PutProtectFormatting ( VARIANT_BOOL RHS );
__declspec(implementation_key(12611)) VARIANT_BOOL _Chart::GetProtectData ( );
__declspec(implementation_key(12612)) void _Chart::PutProtectData ( VARIANT_BOOL RHS );
__declspec(implementation_key(12613)) VARIANT_BOOL _Chart::GetProtectGoalSeek ( );
__declspec(implementation_key(12614)) void _Chart::PutProtectGoalSeek ( VARIANT_BOOL RHS );
__declspec(implementation_key(12615)) VARIANT_BOOL _Chart::GetProtectSelection ( );
__declspec(implementation_key(12616)) void _Chart::PutProtectSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(12617)) HRESULT _Chart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 );
__declspec(implementation_key(12618)) HRESULT _Chart::SetSourceData ( struct Range * Source, const _variant_t & PlotBy );
__declspec(implementation_key(12619)) VARIANT_BOOL _Chart::Export ( _bstr_t Filename, const _variant_t & FilterName, const _variant_t & Interactive );
__declspec(implementation_key(12620)) HRESULT _Chart::Refresh ( );
__declspec(implementation_key(12621)) PivotLayoutPtr _Chart::GetPivotLayout ( );
__declspec(implementation_key(12622)) VARIANT_BOOL _Chart::GetHasPivotFields ( );
__declspec(implementation_key(12623)) void _Chart::PutHasPivotFields ( VARIANT_BOOL RHS );
__declspec(implementation_key(12624)) Office::ScriptsPtr _Chart::GetScripts ( );
__declspec(implementation_key(12625)) HRESULT _Chart::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(12626)) TabPtr _Chart::GetTab ( );
__declspec(implementation_key(12627)) Office::IMsoEnvelopeVBPtr _Chart::GetMailEnvelope ( );
__declspec(implementation_key(12628)) HRESULT _Chart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & LegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator, long lcid );
__declspec(implementation_key(12629)) HRESULT _Chart::SaveAs ( _bstr_t Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local );
__declspec(implementation_key(12630)) HRESULT _Chart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly );
__declspec(implementation_key(12631)) _ApplicationPtr _Workbook::GetApplication ( );
__declspec(implementation_key(12632)) enum XlCreator _Workbook::GetCreator ( );
__declspec(implementation_key(12633)) IDispatchPtr _Workbook::GetParent ( );
__declspec(implementation_key(12634)) VARIANT_BOOL _Workbook::GetAcceptLabelsInFormulas ( );
__declspec(implementation_key(12635)) void _Workbook::PutAcceptLabelsInFormulas ( VARIANT_BOOL RHS );
__declspec(implementation_key(12636)) HRESULT _Workbook::Activate ( long lcid );
__declspec(implementation_key(12637)) _ChartPtr _Workbook::GetActiveChart ( );
__declspec(implementation_key(12638)) IDispatchPtr _Workbook::GetActiveSheet ( );
__declspec(implementation_key(12639)) _bstr_t _Workbook::GetAuthor ( long lcid );
__declspec(implementation_key(12640)) void _Workbook::PutAuthor ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12641)) long _Workbook::GetAutoUpdateFrequency ( );
__declspec(implementation_key(12642)) void _Workbook::PutAutoUpdateFrequency ( long RHS );
__declspec(implementation_key(12643)) VARIANT_BOOL _Workbook::GetAutoUpdateSaveChanges ( );
__declspec(implementation_key(12644)) void _Workbook::PutAutoUpdateSaveChanges ( VARIANT_BOOL RHS );
__declspec(implementation_key(12645)) long _Workbook::GetChangeHistoryDuration ( );
__declspec(implementation_key(12646)) void _Workbook::PutChangeHistoryDuration ( long RHS );
__declspec(implementation_key(12647)) IDispatchPtr _Workbook::GetBuiltinDocumentProperties ( );
__declspec(implementation_key(12648)) HRESULT _Workbook::ChangeFileAccess ( enum XlFileAccess Mode, const _variant_t & WritePassword, const _variant_t & Notify, long lcid );
__declspec(implementation_key(12649)) HRESULT _Workbook::ChangeLink ( _bstr_t Name, _bstr_t NewName, enum XlLinkType Type, long lcid );
__declspec(implementation_key(12650)) SheetsPtr _Workbook::GetCharts ( );
__declspec(implementation_key(12651)) HRESULT _Workbook::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook, long lcid );
__declspec(implementation_key(12652)) _bstr_t _Workbook::GetCodeName ( );
__declspec(implementation_key(12653)) _bstr_t _Workbook::Get_CodeName ( );
__declspec(implementation_key(12654)) void _Workbook::Put_CodeName ( _bstr_t RHS );
__declspec(implementation_key(12655)) _variant_t _Workbook::GetColors ( const _variant_t & Index, long lcid );
__declspec(implementation_key(12656)) void _Workbook::PutColors ( const _variant_t & Index, long lcid, const _variant_t & RHS );
__declspec(implementation_key(12657)) Office::_CommandBarsPtr _Workbook::GetCommandBars ( );
__declspec(implementation_key(12658)) _bstr_t _Workbook::GetComments ( long lcid );
__declspec(implementation_key(12659)) void _Workbook::PutComments ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12660)) enum XlSaveConflictResolution _Workbook::GetConflictResolution ( );
__declspec(implementation_key(12661)) void _Workbook::PutConflictResolution ( enum XlSaveConflictResolution RHS );
__declspec(implementation_key(12662)) IDispatchPtr _Workbook::GetContainer ( );
__declspec(implementation_key(12663)) VARIANT_BOOL _Workbook::GetCreateBackup ( long lcid );
__declspec(implementation_key(12664)) IDispatchPtr _Workbook::GetCustomDocumentProperties ( );
__declspec(implementation_key(12665)) VARIANT_BOOL _Workbook::GetDate1904 ( long lcid );
__declspec(implementation_key(12666)) void _Workbook::PutDate1904 ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12667)) HRESULT _Workbook::DeleteNumberFormat ( _bstr_t NumberFormat, long lcid );
__declspec(implementation_key(12668)) SheetsPtr _Workbook::GetDialogSheets ( );
__declspec(implementation_key(12669)) enum XlDisplayDrawingObjects _Workbook::GetDisplayDrawingObjects ( long lcid );
__declspec(implementation_key(12670)) void _Workbook::PutDisplayDrawingObjects ( long lcid, enum XlDisplayDrawingObjects RHS );
__declspec(implementation_key(12671)) VARIANT_BOOL _Workbook::ExclusiveAccess ( long lcid );
__declspec(implementation_key(12672)) enum XlFileFormat _Workbook::GetFileFormat ( long lcid );
__declspec(implementation_key(12673)) HRESULT _Workbook::ForwardMailer ( long lcid );
__declspec(implementation_key(12674)) _bstr_t _Workbook::GetFullName ( long lcid );
__declspec(implementation_key(12675)) VARIANT_BOOL _Workbook::GetHasMailer ( long lcid );
__declspec(implementation_key(12676)) void _Workbook::PutHasMailer ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12677)) VARIANT_BOOL _Workbook::GetHasPassword ( long lcid );
__declspec(implementation_key(12678)) VARIANT_BOOL _Workbook::GetHasRoutingSlip ( long lcid );
__declspec(implementation_key(12679)) void _Workbook::PutHasRoutingSlip ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12680)) VARIANT_BOOL _Workbook::GetIsAddin ( );
__declspec(implementation_key(12681)) void _Workbook::PutIsAddin ( VARIANT_BOOL RHS );
__declspec(implementation_key(12682)) _bstr_t _Workbook::GetKeywords ( long lcid );
__declspec(implementation_key(12683)) void _Workbook::PutKeywords ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12684)) _variant_t _Workbook::LinkInfo ( _bstr_t Name, enum XlLinkInfo LinkInfo, const _variant_t & Type, const _variant_t & EditionRef, long lcid );
__declspec(implementation_key(12685)) _variant_t _Workbook::LinkSources ( const _variant_t & Type, long lcid );
__declspec(implementation_key(12686)) MailerPtr _Workbook::GetMailer ( );
__declspec(implementation_key(12687)) HRESULT _Workbook::MergeWorkbook ( const _variant_t & Filename );
__declspec(implementation_key(12688)) SheetsPtr _Workbook::GetModules ( );
__declspec(implementation_key(12689)) VARIANT_BOOL _Workbook::GetMultiUserEditing ( long lcid );
__declspec(implementation_key(12690)) _bstr_t _Workbook::GetName ( );
__declspec(implementation_key(12691)) NamesPtr _Workbook::GetNames ( );
__declspec(implementation_key(12692)) WindowPtr _Workbook::NewWindow ( long lcid );
__declspec(implementation_key(12693)) _bstr_t _Workbook::GetOnSave ( long lcid );
__declspec(implementation_key(12694)) void _Workbook::PutOnSave ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12695)) _bstr_t _Workbook::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(12696)) void _Workbook::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12697)) _bstr_t _Workbook::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(12698)) void _Workbook::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12699)) HRESULT _Workbook::OpenLinks ( _bstr_t Name, const _variant_t & ReadOnly, const _variant_t & Type, long lcid );
__declspec(implementation_key(12700)) _bstr_t _Workbook::GetPath ( long lcid );
__declspec(implementation_key(12701)) VARIANT_BOOL _Workbook::GetPersonalViewListSettings ( );
__declspec(implementation_key(12702)) void _Workbook::PutPersonalViewListSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(12703)) VARIANT_BOOL _Workbook::GetPersonalViewPrintSettings ( );
__declspec(implementation_key(12704)) void _Workbook::PutPersonalViewPrintSettings ( VARIANT_BOOL RHS );
__declspec(implementation_key(12705)) PivotCachesPtr _Workbook::PivotCaches ( );
__declspec(implementation_key(12706)) HRESULT _Workbook::Post ( const _variant_t & DestName, long lcid );
__declspec(implementation_key(12707)) VARIANT_BOOL _Workbook::GetPrecisionAsDisplayed ( long lcid );
__declspec(implementation_key(12708)) void _Workbook::PutPrecisionAsDisplayed ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12709)) HRESULT _Workbook::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(12710)) HRESULT _Workbook::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(12711)) HRESULT _Workbook::_Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows );
__declspec(implementation_key(12712)) HRESULT _Workbook::ProtectSharing ( const _variant_t & Filename, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, const _variant_t & SharingPassword );
__declspec(implementation_key(12713)) VARIANT_BOOL _Workbook::GetProtectStructure ( );
__declspec(implementation_key(12714)) VARIANT_BOOL _Workbook::GetProtectWindows ( );
__declspec(implementation_key(12715)) VARIANT_BOOL _Workbook::GetReadOnly ( long lcid );
__declspec(implementation_key(12716)) VARIANT_BOOL _Workbook::Get_ReadOnlyRecommended ( long lcid );
__declspec(implementation_key(12717)) HRESULT _Workbook::RefreshAll ( );
__declspec(implementation_key(12718)) HRESULT _Workbook::Reply ( long lcid );
__declspec(implementation_key(12719)) HRESULT _Workbook::ReplyAll ( long lcid );
__declspec(implementation_key(12720)) HRESULT _Workbook::RemoveUser ( long Index );
__declspec(implementation_key(12721)) long _Workbook::GetRevisionNumber ( long lcid );
__declspec(implementation_key(12722)) HRESULT _Workbook::Route ( long lcid );
__declspec(implementation_key(12723)) VARIANT_BOOL _Workbook::GetRouted ( long lcid );
__declspec(implementation_key(12724)) RoutingSlipPtr _Workbook::GetRoutingSlip ( );
__declspec(implementation_key(12725)) HRESULT _Workbook::RunAutoMacros ( enum XlRunAutoMacro Which, long lcid );
__declspec(implementation_key(12726)) HRESULT _Workbook::Save ( long lcid );
__declspec(implementation_key(12727)) HRESULT _Workbook::_SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(12728)) HRESULT _Workbook::SaveCopyAs ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(12729)) VARIANT_BOOL _Workbook::GetSaved ( long lcid );
__declspec(implementation_key(12730)) void _Workbook::PutSaved ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12731)) VARIANT_BOOL _Workbook::GetSaveLinkValues ( long lcid );
__declspec(implementation_key(12732)) void _Workbook::PutSaveLinkValues ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12733)) HRESULT _Workbook::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt, long lcid );
__declspec(implementation_key(12734)) HRESULT _Workbook::SendMailer ( const _variant_t & FileFormat, enum XlPriority Priority, long lcid );
__declspec(implementation_key(12735)) HRESULT _Workbook::SetLinkOnData ( _bstr_t Name, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(12736)) SheetsPtr _Workbook::GetSheets ( );
__declspec(implementation_key(12737)) VARIANT_BOOL _Workbook::GetShowConflictHistory ( long lcid );
__declspec(implementation_key(12738)) void _Workbook::PutShowConflictHistory ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12739)) StylesPtr _Workbook::GetStyles ( );
__declspec(implementation_key(12740)) _bstr_t _Workbook::GetSubject ( long lcid );
__declspec(implementation_key(12741)) void _Workbook::PutSubject ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12742)) _bstr_t _Workbook::GetTitle ( long lcid );
__declspec(implementation_key(12743)) void _Workbook::PutTitle ( long lcid, _bstr_t RHS );
__declspec(implementation_key(12744)) HRESULT _Workbook::Unprotect ( const _variant_t & Password, long lcid );
__declspec(implementation_key(12745)) HRESULT _Workbook::UnprotectSharing ( const _variant_t & SharingPassword );
__declspec(implementation_key(12746)) HRESULT _Workbook::UpdateFromFile ( long lcid );
__declspec(implementation_key(12747)) HRESULT _Workbook::UpdateLink ( const _variant_t & Name, const _variant_t & Type, long lcid );
__declspec(implementation_key(12748)) VARIANT_BOOL _Workbook::GetUpdateRemoteReferences ( long lcid );
__declspec(implementation_key(12749)) void _Workbook::PutUpdateRemoteReferences ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(12750)) VARIANT_BOOL _Workbook::GetUserControl ( );
__declspec(implementation_key(12751)) void _Workbook::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(12752)) _variant_t _Workbook::GetUserStatus ( long lcid );
__declspec(implementation_key(12753)) CustomViewsPtr _Workbook::GetCustomViews ( );
__declspec(implementation_key(12754)) WindowsPtr _Workbook::GetWindows ( );
__declspec(implementation_key(12755)) SheetsPtr _Workbook::GetWorksheets ( );
__declspec(implementation_key(12756)) VARIANT_BOOL _Workbook::GetWriteReserved ( long lcid );
__declspec(implementation_key(12757)) _bstr_t _Workbook::GetWriteReservedBy ( long lcid );
__declspec(implementation_key(12758)) SheetsPtr _Workbook::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(12759)) SheetsPtr _Workbook::GetExcel4MacroSheets ( );
__declspec(implementation_key(12760)) VARIANT_BOOL _Workbook::GetTemplateRemoveExtData ( );
__declspec(implementation_key(12761)) void _Workbook::PutTemplateRemoveExtData ( VARIANT_BOOL RHS );
__declspec(implementation_key(12762)) HRESULT _Workbook::HighlightChangesOptions ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(12763)) VARIANT_BOOL _Workbook::GetHighlightChangesOnScreen ( );
__declspec(implementation_key(12764)) void _Workbook::PutHighlightChangesOnScreen ( VARIANT_BOOL RHS );
__declspec(implementation_key(12765)) VARIANT_BOOL _Workbook::GetKeepChangeHistory ( );
__declspec(implementation_key(12766)) void _Workbook::PutKeepChangeHistory ( VARIANT_BOOL RHS );
__declspec(implementation_key(12767)) VARIANT_BOOL _Workbook::GetListChangesOnNewSheet ( );
__declspec(implementation_key(12768)) void _Workbook::PutListChangesOnNewSheet ( VARIANT_BOOL RHS );
__declspec(implementation_key(12769)) HRESULT _Workbook::PurgeChangeHistoryNow ( long Days, const _variant_t & SharingPassword );
__declspec(implementation_key(12770)) HRESULT _Workbook::AcceptAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(12771)) HRESULT _Workbook::RejectAllChanges ( const _variant_t & When, const _variant_t & Who, const _variant_t & Where );
__declspec(implementation_key(12772)) HRESULT _Workbook::PivotTableWizard ( const _variant_t & SourceType, const _variant_t & SourceData, const _variant_t & TableDestination, const _variant_t & TableName, const _variant_t & RowGrand, const _variant_t & ColumnGrand, const _variant_t & SaveData, const _variant_t & HasAutoFormat, const _variant_t & AutoPage, const _variant_t & Reserved, const _variant_t & BackgroundQuery, const _variant_t & OptimizeCache, const _variant_t & PageFieldOrder, const _variant_t & PageFieldWrapCount, const _variant_t & ReadData, const _variant_t & Connection, long lcid );
__declspec(implementation_key(12773)) HRESULT _Workbook::ResetColors ( );
__declspec(implementation_key(12774)) VBE6::_VBProjectPtr _Workbook::GetVBProject ( );
__declspec(implementation_key(12775)) HRESULT _Workbook::FollowHyperlink ( _bstr_t Address, const _variant_t & SubAddress, const _variant_t & NewWindow, const _variant_t & AddHistory, const _variant_t & ExtraInfo, const _variant_t & Method, const _variant_t & HeaderInfo );
__declspec(implementation_key(12776)) HRESULT _Workbook::AddToFavorites ( );
__declspec(implementation_key(12777)) VARIANT_BOOL _Workbook::GetIsInplace ( );
__declspec(implementation_key(12778)) HRESULT _Workbook::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(12779)) HRESULT _Workbook::WebPagePreview ( );
__declspec(implementation_key(12780)) PublishObjectsPtr _Workbook::GetPublishObjects ( );
__declspec(implementation_key(12781)) WebOptionsPtr _Workbook::GetWebOptions ( );
__declspec(implementation_key(12782)) HRESULT _Workbook::ReloadAs ( enum Office::MsoEncoding Encoding );
__declspec(implementation_key(12783)) Office::HTMLProjectPtr _Workbook::GetHTMLProject ( );
__declspec(implementation_key(12784)) VARIANT_BOOL _Workbook::GetEnvelopeVisible ( );
__declspec(implementation_key(12785)) void _Workbook::PutEnvelopeVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(12786)) long _Workbook::GetCalculationVersion ( );
__declspec(implementation_key(12787)) HRESULT _Workbook::Dummy17 ( long calcid );
__declspec(implementation_key(12788)) HRESULT _Workbook::sblt ( _bstr_t s );
__declspec(implementation_key(12789)) VARIANT_BOOL _Workbook::GetVBASigned ( );
__declspec(implementation_key(12790)) VARIANT_BOOL _Workbook::GetShowPivotTableFieldList ( );
__declspec(implementation_key(12791)) void _Workbook::PutShowPivotTableFieldList ( VARIANT_BOOL RHS );
__declspec(implementation_key(12792)) enum XlUpdateLinks _Workbook::GetUpdateLinks ( );
__declspec(implementation_key(12793)) void _Workbook::PutUpdateLinks ( enum XlUpdateLinks RHS );
__declspec(implementation_key(12794)) HRESULT _Workbook::BreakLink ( _bstr_t Name, enum XlLinkType Type );
__declspec(implementation_key(12795)) HRESULT _Workbook::Dummy16 ( );
__declspec(implementation_key(12796)) HRESULT _Workbook::SaveAs ( const _variant_t & Filename, const _variant_t & FileFormat, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & ReadOnlyRecommended, const _variant_t & CreateBackup, enum XlSaveAsAccessMode AccessMode, const _variant_t & ConflictResolution, const _variant_t & AddToMru, const _variant_t & TextCodepage, const _variant_t & TextVisualLayout, const _variant_t & Local, long lcid );
__declspec(implementation_key(12797)) VARIANT_BOOL _Workbook::GetEnableAutoRecover ( );
__declspec(implementation_key(12798)) void _Workbook::PutEnableAutoRecover ( VARIANT_BOOL RHS );
__declspec(implementation_key(12799)) VARIANT_BOOL _Workbook::GetRemovePersonalInformation ( );
__declspec(implementation_key(12800)) void _Workbook::PutRemovePersonalInformation ( VARIANT_BOOL RHS );
__declspec(implementation_key(12801)) _bstr_t _Workbook::GetFullNameURLEncoded ( long lcid );
__declspec(implementation_key(12802)) HRESULT _Workbook::CheckIn ( const _variant_t & SaveChanges, const _variant_t & Comments, const _variant_t & MakePublic );
__declspec(implementation_key(12803)) VARIANT_BOOL _Workbook::CanCheckIn ( );
__declspec(implementation_key(12804)) HRESULT _Workbook::SendForReview ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ShowMessage, const _variant_t & IncludeAttachment );
__declspec(implementation_key(12805)) HRESULT _Workbook::ReplyWithChanges ( const _variant_t & ShowMessage );
__declspec(implementation_key(12806)) HRESULT _Workbook::EndReview ( );
__declspec(implementation_key(12807)) _bstr_t _Workbook::GetPassword ( );
__declspec(implementation_key(12808)) void _Workbook::PutPassword ( _bstr_t RHS );
__declspec(implementation_key(12809)) _bstr_t _Workbook::GetWritePassword ( );
__declspec(implementation_key(12810)) void _Workbook::PutWritePassword ( _bstr_t RHS );
__declspec(implementation_key(12811)) _bstr_t _Workbook::GetPasswordEncryptionProvider ( );
__declspec(implementation_key(12812)) _bstr_t _Workbook::GetPasswordEncryptionAlgorithm ( );
__declspec(implementation_key(12813)) long _Workbook::GetPasswordEncryptionKeyLength ( );
__declspec(implementation_key(12814)) HRESULT _Workbook::SetPasswordEncryptionOptions ( const _variant_t & PasswordEncryptionProvider, const _variant_t & PasswordEncryptionAlgorithm, const _variant_t & PasswordEncryptionKeyLength, const _variant_t & PasswordEncryptionFileProperties );
__declspec(implementation_key(12815)) VARIANT_BOOL _Workbook::GetPasswordEncryptionFileProperties ( );
__declspec(implementation_key(12816)) VARIANT_BOOL _Workbook::GetReadOnlyRecommended ( );
__declspec(implementation_key(12817)) void _Workbook::PutReadOnlyRecommended ( VARIANT_BOOL RHS );
__declspec(implementation_key(12818)) HRESULT _Workbook::Protect ( const _variant_t & Password, const _variant_t & Structure, const _variant_t & Windows );
__declspec(implementation_key(12819)) SmartTagOptionsPtr _Workbook::GetSmartTagOptions ( );
__declspec(implementation_key(12820)) HRESULT _Workbook::RecheckSmartTags ( );
__declspec(implementation_key(12821)) Office::PermissionPtr _Workbook::GetPermission ( );
__declspec(implementation_key(12822)) Office::SharedWorkspacePtr _Workbook::GetSharedWorkspace ( );
__declspec(implementation_key(12823)) Office::SyncPtr _Workbook::GetSync ( );
__declspec(implementation_key(12824)) HRESULT _Workbook::SendFaxOverInternet ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ShowMessage );
__declspec(implementation_key(12825)) XmlNamespacesPtr _Workbook::GetXmlNamespaces ( );
__declspec(implementation_key(12826)) XmlMapsPtr _Workbook::GetXmlMaps ( );
__declspec(implementation_key(12827)) enum XlXmlImportResult _Workbook::XmlImport ( _bstr_t Url, struct XmlMap * * ImportMap, const _variant_t & Overwrite, const _variant_t & Destination );
__declspec(implementation_key(12828)) Office::SmartDocumentPtr _Workbook::GetSmartDocument ( );
__declspec(implementation_key(12829)) Office::DocumentLibraryVersionsPtr _Workbook::GetDocumentLibraryVersions ( );
__declspec(implementation_key(12830)) VARIANT_BOOL _Workbook::GetInactiveListBorderVisible ( );
__declspec(implementation_key(12831)) void _Workbook::PutInactiveListBorderVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(12832)) VARIANT_BOOL _Workbook::GetDisplayInkComments ( );
__declspec(implementation_key(12833)) void _Workbook::PutDisplayInkComments ( VARIANT_BOOL RHS );
__declspec(implementation_key(12834)) enum XlXmlImportResult _Workbook::XmlImportXml ( _bstr_t Data, struct XmlMap * * ImportMap, const _variant_t & Overwrite, const _variant_t & Destination );
__declspec(implementation_key(12835)) HRESULT _Workbook::SaveAsXMLData ( _bstr_t Filename, struct XmlMap * Map );
__declspec(implementation_key(12836)) HRESULT _Workbook::ToggleFormsDesign ( );
__declspec(implementation_key(12837)) _ApplicationPtr ICharts::GetApplication ( );
__declspec(implementation_key(12838)) enum XlCreator ICharts::GetCreator ( );
__declspec(implementation_key(12839)) IDispatchPtr ICharts::GetParent ( );
__declspec(implementation_key(12840)) _ChartPtr ICharts::Add ( const _variant_t & Before, const _variant_t & After, const _variant_t & Count );
__declspec(implementation_key(12841)) HRESULT ICharts::Copy ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(12842)) long ICharts::GetCount ( );
__declspec(implementation_key(12843)) HRESULT ICharts::Delete ( long lcid );
__declspec(implementation_key(12844)) IDispatchPtr ICharts::GetItem ( const _variant_t & Index );
__declspec(implementation_key(12845)) HRESULT ICharts::Move ( const _variant_t & Before, const _variant_t & After, long lcid );
__declspec(implementation_key(12846)) IUnknownPtr ICharts::Get_NewEnum ( );
__declspec(implementation_key(12847)) HRESULT ICharts::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, long lcid );
__declspec(implementation_key(12848)) HRESULT ICharts::PrintPreview ( const _variant_t & EnableChanges, long lcid );
__declspec(implementation_key(12849)) HRESULT ICharts::Select ( const _variant_t & Replace, long lcid );
__declspec(implementation_key(12850)) HPageBreaksPtr ICharts::GetHPageBreaks ( );
__declspec(implementation_key(12851)) VPageBreaksPtr ICharts::GetVPageBreaks ( );
__declspec(implementation_key(12852)) _variant_t ICharts::GetVisible ( long lcid );
__declspec(implementation_key(12853)) void ICharts::PutVisible ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12854)) IDispatchPtr ICharts::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(12855)) HRESULT ICharts::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName, long lcid );
__declspec(implementation_key(12856)) _ApplicationPtr IChartObject::GetApplication ( );
__declspec(implementation_key(12857)) enum XlCreator IChartObject::GetCreator ( );
__declspec(implementation_key(12858)) IDispatchPtr IChartObject::GetParent ( );
__declspec(implementation_key(12859)) RangePtr IChartObject::GetBottomRightCell ( );
__declspec(implementation_key(12860)) _variant_t IChartObject::BringToFront ( );
__declspec(implementation_key(12861)) _variant_t IChartObject::Copy ( );
__declspec(implementation_key(12862)) _variant_t IChartObject::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(12863)) _variant_t IChartObject::Cut ( );
__declspec(implementation_key(12864)) _variant_t IChartObject::Delete ( );
__declspec(implementation_key(12865)) IDispatchPtr IChartObject::Duplicate ( );
__declspec(implementation_key(12866)) VARIANT_BOOL IChartObject::GetEnabled ( );
__declspec(implementation_key(12867)) void IChartObject::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(12868)) double IChartObject::GetHeight ( );
__declspec(implementation_key(12869)) void IChartObject::PutHeight ( double RHS );
__declspec(implementation_key(12870)) long IChartObject::GetIndex ( );
__declspec(implementation_key(12871)) double IChartObject::GetLeft ( );
__declspec(implementation_key(12872)) void IChartObject::PutLeft ( double RHS );
__declspec(implementation_key(12873)) VARIANT_BOOL IChartObject::GetLocked ( );
__declspec(implementation_key(12874)) void IChartObject::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(12875)) _bstr_t IChartObject::GetName ( );
__declspec(implementation_key(12876)) void IChartObject::PutName ( _bstr_t RHS );
__declspec(implementation_key(12877)) _bstr_t IChartObject::GetOnAction ( );
__declspec(implementation_key(12878)) void IChartObject::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(12879)) _variant_t IChartObject::GetPlacement ( );
__declspec(implementation_key(12880)) void IChartObject::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(12881)) VARIANT_BOOL IChartObject::GetPrintObject ( );
__declspec(implementation_key(12882)) void IChartObject::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(12883)) _variant_t IChartObject::Select ( const _variant_t & Replace );
__declspec(implementation_key(12884)) _variant_t IChartObject::SendToBack ( );
__declspec(implementation_key(12885)) double IChartObject::GetTop ( );
__declspec(implementation_key(12886)) void IChartObject::PutTop ( double RHS );
__declspec(implementation_key(12887)) RangePtr IChartObject::GetTopLeftCell ( );
__declspec(implementation_key(12888)) VARIANT_BOOL IChartObject::GetVisible ( );
__declspec(implementation_key(12889)) void IChartObject::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(12890)) double IChartObject::GetWidth ( );
__declspec(implementation_key(12891)) void IChartObject::PutWidth ( double RHS );
__declspec(implementation_key(12892)) long IChartObject::GetZOrder ( );
__declspec(implementation_key(12893)) ShapeRangePtr IChartObject::GetShapeRange ( );
__declspec(implementation_key(12894)) _variant_t IChartObject::Activate ( );
__declspec(implementation_key(12895)) _ChartPtr IChartObject::GetChart ( );
__declspec(implementation_key(12896)) VARIANT_BOOL IChartObject::GetProtectChartObject ( );
__declspec(implementation_key(12897)) void IChartObject::PutProtectChartObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(12898)) VARIANT_BOOL IChartObject::GetRoundedCorners ( );
__declspec(implementation_key(12899)) void IChartObject::PutRoundedCorners ( VARIANT_BOOL RHS );
__declspec(implementation_key(12900)) BorderPtr IChartObject::GetBorder ( );
__declspec(implementation_key(12901)) InteriorPtr IChartObject::GetInterior ( );
__declspec(implementation_key(12902)) VARIANT_BOOL IChartObject::GetShadow ( );
__declspec(implementation_key(12903)) void IChartObject::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(12904)) _ApplicationPtr IRange::GetApplication ( );
__declspec(implementation_key(12905)) enum XlCreator IRange::GetCreator ( );
__declspec(implementation_key(12906)) IDispatchPtr IRange::GetParent ( );
__declspec(implementation_key(12907)) _variant_t IRange::Activate ( );
__declspec(implementation_key(12908)) _variant_t IRange::GetAddIndent ( );
__declspec(implementation_key(12909)) void IRange::PutAddIndent ( const _variant_t & RHS );
__declspec(implementation_key(12910)) _bstr_t IRange::GetAddress ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(12911)) _bstr_t IRange::GetAddressLocal ( const _variant_t & RowAbsolute, const _variant_t & ColumnAbsolute, enum XlReferenceStyle ReferenceStyle, const _variant_t & External, const _variant_t & RelativeTo );
__declspec(implementation_key(12912)) _variant_t IRange::AdvancedFilter ( enum XlFilterAction Action, const _variant_t & CriteriaRange, const _variant_t & CopyToRange, const _variant_t & Unique );
__declspec(implementation_key(12913)) _variant_t IRange::ApplyNames ( const _variant_t & Names, const _variant_t & IgnoreRelativeAbsolute, const _variant_t & UseRowColumnNames, const _variant_t & OmitColumn, const _variant_t & OmitRow, enum XlApplyNamesOrder Order, const _variant_t & AppendLast );
__declspec(implementation_key(12914)) _variant_t IRange::ApplyOutlineStyles ( );
__declspec(implementation_key(12915)) AreasPtr IRange::GetAreas ( );
__declspec(implementation_key(12916)) _bstr_t IRange::AutoComplete ( _bstr_t String );
__declspec(implementation_key(12917)) _variant_t IRange::AutoFill ( struct Range * Destination, enum XlAutoFillType Type );
__declspec(implementation_key(12918)) _variant_t IRange::AutoFilter ( const _variant_t & Field, const _variant_t & Criteria1, enum XlAutoFilterOperator Operator, const _variant_t & Criteria2, const _variant_t & VisibleDropDown );
__declspec(implementation_key(12919)) _variant_t IRange::AutoFit ( );
__declspec(implementation_key(12920)) _variant_t IRange::AutoFormat ( enum XlRangeAutoFormat Format, const _variant_t & Number, const _variant_t & Font, const _variant_t & Alignment, const _variant_t & Border, const _variant_t & Pattern, const _variant_t & Width );
__declspec(implementation_key(12921)) _variant_t IRange::AutoOutline ( );
__declspec(implementation_key(12922)) _variant_t IRange::BorderAround ( const _variant_t & LineStyle, enum XlBorderWeight Weight, enum XlColorIndex ColorIndex, const _variant_t & Color );
__declspec(implementation_key(12923)) BordersPtr IRange::GetBorders ( );
__declspec(implementation_key(12924)) _variant_t IRange::Calculate ( );
__declspec(implementation_key(12925)) RangePtr IRange::GetCells ( );
__declspec(implementation_key(12926)) CharactersPtr IRange::GetCharacters ( const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(12927)) _variant_t IRange::CheckSpelling ( const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, const _variant_t & AlwaysSuggest, const _variant_t & SpellLang );
__declspec(implementation_key(12928)) _variant_t IRange::Clear ( );
__declspec(implementation_key(12929)) _variant_t IRange::ClearContents ( );
__declspec(implementation_key(12930)) _variant_t IRange::ClearFormats ( );
__declspec(implementation_key(12931)) _variant_t IRange::ClearNotes ( );
__declspec(implementation_key(12932)) _variant_t IRange::ClearOutline ( );
__declspec(implementation_key(12933)) long IRange::GetColumn ( );
__declspec(implementation_key(12934)) RangePtr IRange::ColumnDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(12935)) RangePtr IRange::GetColumns ( );
__declspec(implementation_key(12936)) _variant_t IRange::GetColumnWidth ( );
__declspec(implementation_key(12937)) void IRange::PutColumnWidth ( const _variant_t & RHS );
__declspec(implementation_key(12938)) _variant_t IRange::Consolidate ( const _variant_t & Sources, const _variant_t & Function, const _variant_t & TopRow, const _variant_t & LeftColumn, const _variant_t & CreateLinks );
__declspec(implementation_key(12939)) _variant_t IRange::Copy ( const _variant_t & Destination );
__declspec(implementation_key(12940)) long IRange::CopyFromRecordset ( IUnknown * Data, const _variant_t & MaxRows, const _variant_t & MaxColumns );
__declspec(implementation_key(12941)) _variant_t IRange::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(12942)) long IRange::GetCount ( );
__declspec(implementation_key(12943)) _variant_t IRange::CreateNames ( const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right );
__declspec(implementation_key(12944)) _variant_t IRange::CreatePublisher ( const _variant_t & Edition, enum XlPictureAppearance Appearance, const _variant_t & ContainsPICT, const _variant_t & ContainsBIFF, const _variant_t & ContainsRTF, const _variant_t & ContainsVALU );
__declspec(implementation_key(12945)) RangePtr IRange::GetCurrentArray ( );
__declspec(implementation_key(12946)) RangePtr IRange::GetCurrentRegion ( );
__declspec(implementation_key(12947)) _variant_t IRange::Cut ( const _variant_t & Destination );
__declspec(implementation_key(12948)) _variant_t IRange::DataSeries ( const _variant_t & Rowcol, enum XlDataSeriesType Type, enum XlDataSeriesDate Date, const _variant_t & Step, const _variant_t & Stop, const _variant_t & Trend );
__declspec(implementation_key(12949)) _variant_t IRange::Get_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(12950)) void IRange::Put_Default ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(12951)) _variant_t IRange::Delete ( const _variant_t & Shift );
__declspec(implementation_key(12952)) RangePtr IRange::GetDependents ( );
__declspec(implementation_key(12953)) _variant_t IRange::DialogBoxEx ( );
__declspec(implementation_key(12954)) RangePtr IRange::GetDirectDependents ( );
__declspec(implementation_key(12955)) RangePtr IRange::GetDirectPrecedents ( );
__declspec(implementation_key(12956)) _variant_t IRange::EditionOptions ( enum XlEditionType Type, enum XlEditionOptionsOption Option, const _variant_t & Name, const _variant_t & Reference, enum XlPictureAppearance Appearance, enum XlPictureAppearance ChartSize, const _variant_t & Format );
__declspec(implementation_key(12957)) RangePtr IRange::GetEnd ( enum XlDirection Direction );
__declspec(implementation_key(12958)) RangePtr IRange::GetEntireColumn ( );
__declspec(implementation_key(12959)) RangePtr IRange::GetEntireRow ( );
__declspec(implementation_key(12960)) _variant_t IRange::FillDown ( );
__declspec(implementation_key(12961)) _variant_t IRange::FillLeft ( );
__declspec(implementation_key(12962)) _variant_t IRange::FillRight ( );
__declspec(implementation_key(12963)) _variant_t IRange::FillUp ( );
__declspec(implementation_key(12964)) RangePtr IRange::Find ( const _variant_t & What, const _variant_t & After, const _variant_t & LookIn, const _variant_t & LookAt, const _variant_t & SearchOrder, enum XlSearchDirection SearchDirection, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat );
__declspec(implementation_key(12965)) RangePtr IRange::FindNext ( const _variant_t & After );
__declspec(implementation_key(12966)) RangePtr IRange::FindPrevious ( const _variant_t & After );
__declspec(implementation_key(12967)) FontPtr IRange::GetFont ( );
__declspec(implementation_key(12968)) _variant_t IRange::GetFormula ( long lcid );
__declspec(implementation_key(12969)) void IRange::PutFormula ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12970)) _variant_t IRange::GetFormulaArray ( );
__declspec(implementation_key(12971)) void IRange::PutFormulaArray ( const _variant_t & RHS );
__declspec(implementation_key(12972)) enum XlFormulaLabel IRange::GetFormulaLabel ( );
__declspec(implementation_key(12973)) void IRange::PutFormulaLabel ( enum XlFormulaLabel RHS );
__declspec(implementation_key(12974)) _variant_t IRange::GetFormulaHidden ( );
__declspec(implementation_key(12975)) void IRange::PutFormulaHidden ( const _variant_t & RHS );
__declspec(implementation_key(12976)) _variant_t IRange::GetFormulaLocal ( );
__declspec(implementation_key(12977)) void IRange::PutFormulaLocal ( const _variant_t & RHS );
__declspec(implementation_key(12978)) _variant_t IRange::GetFormulaR1C1 ( long lcid );
__declspec(implementation_key(12979)) void IRange::PutFormulaR1C1 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(12980)) _variant_t IRange::GetFormulaR1C1Local ( );
__declspec(implementation_key(12981)) void IRange::PutFormulaR1C1Local ( const _variant_t & RHS );
__declspec(implementation_key(12982)) _variant_t IRange::FunctionWizard ( );
__declspec(implementation_key(12983)) VARIANT_BOOL IRange::GoalSeek ( const _variant_t & Goal, struct Range * ChangingCell );
__declspec(implementation_key(12984)) _variant_t IRange::Group ( const _variant_t & Start, const _variant_t & End, const _variant_t & By, const _variant_t & Periods );
__declspec(implementation_key(12985)) _variant_t IRange::GetHasArray ( );
__declspec(implementation_key(12986)) _variant_t IRange::GetHasFormula ( );
__declspec(implementation_key(12987)) _variant_t IRange::GetHeight ( );
__declspec(implementation_key(12988)) _variant_t IRange::GetHidden ( );
__declspec(implementation_key(12989)) void IRange::PutHidden ( const _variant_t & RHS );
__declspec(implementation_key(12990)) _variant_t IRange::GetHorizontalAlignment ( );
__declspec(implementation_key(12991)) void IRange::PutHorizontalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(12992)) _variant_t IRange::GetIndentLevel ( );
__declspec(implementation_key(12993)) void IRange::PutIndentLevel ( const _variant_t & RHS );
__declspec(implementation_key(12994)) HRESULT IRange::InsertIndent ( long InsertAmount );
__declspec(implementation_key(12995)) _variant_t IRange::Insert ( const _variant_t & Shift, const _variant_t & CopyOrigin );
__declspec(implementation_key(12996)) InteriorPtr IRange::GetInterior ( );
__declspec(implementation_key(12997)) _variant_t IRange::GetItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid );
__declspec(implementation_key(12998)) void IRange::PutItem ( const _variant_t & RowIndex, const _variant_t & ColumnIndex, long lcid, const _variant_t & RHS );
__declspec(implementation_key(12999)) _variant_t IRange::Justify ( );
__declspec(implementation_key(13000)) _variant_t IRange::GetLeft ( );
__declspec(implementation_key(13001)) long IRange::GetListHeaderRows ( );
__declspec(implementation_key(13002)) _variant_t IRange::ListNames ( );
__declspec(implementation_key(13003)) enum XlLocationInTable IRange::GetLocationInTable ( );
__declspec(implementation_key(13004)) _variant_t IRange::GetLocked ( );
__declspec(implementation_key(13005)) void IRange::PutLocked ( const _variant_t & RHS );
__declspec(implementation_key(13006)) HRESULT IRange::Merge ( const _variant_t & Across );
__declspec(implementation_key(13007)) HRESULT IRange::UnMerge ( );
__declspec(implementation_key(13008)) RangePtr IRange::GetMergeArea ( );
__declspec(implementation_key(13009)) _variant_t IRange::GetMergeCells ( );
__declspec(implementation_key(13010)) void IRange::PutMergeCells ( const _variant_t & RHS );
__declspec(implementation_key(13011)) _variant_t IRange::GetName ( );
__declspec(implementation_key(13012)) void IRange::PutName ( const _variant_t & RHS );
__declspec(implementation_key(13013)) _variant_t IRange::NavigateArrow ( const _variant_t & TowardPrecedent, const _variant_t & ArrowNumber, const _variant_t & LinkNumber );
__declspec(implementation_key(13014)) IUnknownPtr IRange::Get_NewEnum ( );
__declspec(implementation_key(13015)) RangePtr IRange::GetNext ( );
__declspec(implementation_key(13016)) _bstr_t IRange::NoteText ( const _variant_t & Text, const _variant_t & Start, const _variant_t & Length );
__declspec(implementation_key(13017)) _variant_t IRange::GetNumberFormat ( );
__declspec(implementation_key(13018)) void IRange::PutNumberFormat ( const _variant_t & RHS );
__declspec(implementation_key(13019)) _variant_t IRange::GetNumberFormatLocal ( );
__declspec(implementation_key(13020)) void IRange::PutNumberFormatLocal ( const _variant_t & RHS );
__declspec(implementation_key(13021)) RangePtr IRange::GetOffset ( const _variant_t & RowOffset, const _variant_t & ColumnOffset );
__declspec(implementation_key(13022)) _variant_t IRange::GetOrientation ( );
__declspec(implementation_key(13023)) void IRange::PutOrientation ( const _variant_t & RHS );
__declspec(implementation_key(13024)) _variant_t IRange::GetOutlineLevel ( );
__declspec(implementation_key(13025)) void IRange::PutOutlineLevel ( const _variant_t & RHS );
__declspec(implementation_key(13026)) long IRange::GetPageBreak ( );
__declspec(implementation_key(13027)) void IRange::PutPageBreak ( long RHS );
__declspec(implementation_key(13028)) _variant_t IRange::Parse ( const _variant_t & ParseLine, const _variant_t & Destination );
__declspec(implementation_key(13029)) _variant_t IRange::_PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(13030)) PivotFieldPtr IRange::GetPivotField ( );
__declspec(implementation_key(13031)) PivotItemPtr IRange::GetPivotItem ( );
__declspec(implementation_key(13032)) PivotTablePtr IRange::GetPivotTable ( );
__declspec(implementation_key(13033)) RangePtr IRange::GetPrecedents ( );
__declspec(implementation_key(13034)) _variant_t IRange::GetPrefixCharacter ( );
__declspec(implementation_key(13035)) RangePtr IRange::GetPrevious ( );
__declspec(implementation_key(13036)) _variant_t IRange::_PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate );
__declspec(implementation_key(13037)) _variant_t IRange::PrintPreview ( const _variant_t & EnableChanges );
__declspec(implementation_key(13038)) _QueryTablePtr IRange::GetQueryTable ( );
__declspec(implementation_key(13039)) RangePtr IRange::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(13040)) _variant_t IRange::RemoveSubtotal ( );
__declspec(implementation_key(13041)) VARIANT_BOOL IRange::Replace ( const _variant_t & What, const _variant_t & Replacement, const _variant_t & LookAt, const _variant_t & SearchOrder, const _variant_t & MatchCase, const _variant_t & MatchByte, const _variant_t & SearchFormat, const _variant_t & ReplaceFormat );
__declspec(implementation_key(13042)) RangePtr IRange::GetResize ( const _variant_t & RowSize, const _variant_t & ColumnSize );
__declspec(implementation_key(13043)) long IRange::GetRow ( );
__declspec(implementation_key(13044)) RangePtr IRange::RowDifferences ( const _variant_t & Comparison );
__declspec(implementation_key(13045)) _variant_t IRange::GetRowHeight ( );
__declspec(implementation_key(13046)) void IRange::PutRowHeight ( const _variant_t & RHS );
__declspec(implementation_key(13047)) RangePtr IRange::GetRows ( );
__declspec(implementation_key(13048)) _variant_t IRange::Run ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(13049)) _variant_t IRange::Select ( );
__declspec(implementation_key(13050)) _variant_t IRange::Show ( );
__declspec(implementation_key(13051)) _variant_t IRange::ShowDependents ( const _variant_t & Remove );
__declspec(implementation_key(13052)) _variant_t IRange::GetShowDetail ( );
__declspec(implementation_key(13053)) void IRange::PutShowDetail ( const _variant_t & RHS );
__declspec(implementation_key(13054)) _variant_t IRange::ShowErrors ( );
__declspec(implementation_key(13055)) _variant_t IRange::ShowPrecedents ( const _variant_t & Remove );
__declspec(implementation_key(13056)) _variant_t IRange::GetShrinkToFit ( );
__declspec(implementation_key(13057)) void IRange::PutShrinkToFit ( const _variant_t & RHS );
__declspec(implementation_key(13058)) _variant_t IRange::Sort ( const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Key2, const _variant_t & Type, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortMethod SortMethod, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(13059)) _variant_t IRange::SortSpecial ( enum XlSortMethod SortMethod, const _variant_t & Key1, enum XlSortOrder Order1, const _variant_t & Type, const _variant_t & Key2, enum XlSortOrder Order2, const _variant_t & Key3, enum XlSortOrder Order3, enum XlYesNoGuess Header, const _variant_t & OrderCustom, const _variant_t & MatchCase, enum XlSortOrientation Orientation, enum XlSortDataOption DataOption1, enum XlSortDataOption DataOption2, enum XlSortDataOption DataOption3 );
__declspec(implementation_key(13060)) SoundNotePtr IRange::GetSoundNote ( );
__declspec(implementation_key(13061)) RangePtr IRange::SpecialCells ( enum XlCellType Type, const _variant_t & Value );
__declspec(implementation_key(13062)) _variant_t IRange::GetStyle ( );
__declspec(implementation_key(13063)) void IRange::PutStyle ( const _variant_t & RHS );
__declspec(implementation_key(13064)) _variant_t IRange::SubscribeTo ( _bstr_t Edition, enum XlSubscribeToFormat Format );
__declspec(implementation_key(13065)) _variant_t IRange::Subtotal ( long GroupBy, enum XlConsolidationFunction Function, const _variant_t & TotalList, const _variant_t & Replace, const _variant_t & PageBreaks, enum XlSummaryRow SummaryBelowData );
__declspec(implementation_key(13066)) _variant_t IRange::GetSummary ( );
__declspec(implementation_key(13067)) _variant_t IRange::Table ( const _variant_t & RowInput, const _variant_t & ColumnInput );
__declspec(implementation_key(13068)) _variant_t IRange::GetText ( );
__declspec(implementation_key(13069)) _variant_t IRange::TextToColumns ( const _variant_t & Destination, enum XlTextParsingType DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers );
__declspec(implementation_key(13070)) _variant_t IRange::GetTop ( );
__declspec(implementation_key(13071)) _variant_t IRange::Ungroup ( );
__declspec(implementation_key(13072)) _variant_t IRange::GetUseStandardHeight ( );
__declspec(implementation_key(13073)) void IRange::PutUseStandardHeight ( const _variant_t & RHS );
__declspec(implementation_key(13074)) _variant_t IRange::GetUseStandardWidth ( );
__declspec(implementation_key(13075)) void IRange::PutUseStandardWidth ( const _variant_t & RHS );
__declspec(implementation_key(13076)) ValidationPtr IRange::GetValidation ( );
__declspec(implementation_key(13077)) _variant_t IRange::GetValue ( const _variant_t & RangeValueDataType, long lcid );
__declspec(implementation_key(13078)) void IRange::PutValue ( const _variant_t & RangeValueDataType, long lcid, const _variant_t & RHS );
__declspec(implementation_key(13079)) _variant_t IRange::GetValue2 ( long lcid );
__declspec(implementation_key(13080)) void IRange::PutValue2 ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(13081)) _variant_t IRange::GetVerticalAlignment ( );
__declspec(implementation_key(13082)) void IRange::PutVerticalAlignment ( const _variant_t & RHS );
__declspec(implementation_key(13083)) _variant_t IRange::GetWidth ( );
__declspec(implementation_key(13084)) _WorksheetPtr IRange::GetWorksheet ( );
__declspec(implementation_key(13085)) _variant_t IRange::GetWrapText ( );
__declspec(implementation_key(13086)) void IRange::PutWrapText ( const _variant_t & RHS );
__declspec(implementation_key(13087)) CommentPtr IRange::AddComment ( const _variant_t & Text );
__declspec(implementation_key(13088)) CommentPtr IRange::GetComment ( );
__declspec(implementation_key(13089)) HRESULT IRange::ClearComments ( );
__declspec(implementation_key(13090)) PhoneticPtr IRange::GetPhonetic ( );
__declspec(implementation_key(13091)) FormatConditionsPtr IRange::GetFormatConditions ( );
__declspec(implementation_key(13092)) long IRange::GetReadingOrder ( );
__declspec(implementation_key(13093)) void IRange::PutReadingOrder ( long RHS );
__declspec(implementation_key(13094)) HyperlinksPtr IRange::GetHyperlinks ( );
__declspec(implementation_key(13095)) PhoneticsPtr IRange::GetPhonetics ( );
__declspec(implementation_key(13096)) HRESULT IRange::SetPhonetic ( );
__declspec(implementation_key(13097)) _bstr_t IRange::GetID ( );
__declspec(implementation_key(13098)) void IRange::PutID ( _bstr_t RHS );
__declspec(implementation_key(13099)) _variant_t IRange::PrintOut ( const _variant_t & From, const _variant_t & To, const _variant_t & Copies, const _variant_t & Preview, const _variant_t & ActivePrinter, const _variant_t & PrintToFile, const _variant_t & Collate, const _variant_t & PrToFileName );
__declspec(implementation_key(13100)) PivotCellPtr IRange::GetPivotCell ( );
__declspec(implementation_key(13101)) HRESULT IRange::Dirty ( );
__declspec(implementation_key(13102)) ErrorsPtr IRange::GetErrors ( );
__declspec(implementation_key(13103)) SmartTagsPtr IRange::GetSmartTags ( );
__declspec(implementation_key(13104)) HRESULT IRange::Speak ( const _variant_t & SpeakDirection, const _variant_t & SpeakFormulas );
__declspec(implementation_key(13105)) _variant_t IRange::PasteSpecial ( enum XlPasteType Paste, enum XlPasteSpecialOperation Operation, const _variant_t & SkipBlanks, const _variant_t & Transpose );
__declspec(implementation_key(13106)) VARIANT_BOOL IRange::GetAllowEdit ( );
__declspec(implementation_key(13107)) ListObjectPtr IRange::GetListObject ( );
__declspec(implementation_key(13108)) XPathPtr IRange::GetXPath ( );
__declspec(implementation_key(13109)) _ApplicationPtr IVPageBreak::GetApplication ( );
__declspec(implementation_key(13110)) enum XlCreator IVPageBreak::GetCreator ( );
__declspec(implementation_key(13111)) _WorksheetPtr IVPageBreak::GetParent ( );
__declspec(implementation_key(13112)) HRESULT IVPageBreak::Delete ( );
__declspec(implementation_key(13113)) HRESULT IVPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(13114)) enum XlPageBreak IVPageBreak::GetType ( );
__declspec(implementation_key(13115)) void IVPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(13116)) enum XlPageBreakExtent IVPageBreak::GetExtent ( );
__declspec(implementation_key(13117)) RangePtr IVPageBreak::GetLocation ( );
__declspec(implementation_key(13118)) void IVPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(13119)) _ApplicationPtr IHPageBreak::GetApplication ( );
__declspec(implementation_key(13120)) enum XlCreator IHPageBreak::GetCreator ( );
__declspec(implementation_key(13121)) _WorksheetPtr IHPageBreak::GetParent ( );
__declspec(implementation_key(13122)) HRESULT IHPageBreak::Delete ( );
__declspec(implementation_key(13123)) HRESULT IHPageBreak::DragOff ( enum XlDirection Direction, long RegionIndex );
__declspec(implementation_key(13124)) enum XlPageBreak IHPageBreak::GetType ( );
__declspec(implementation_key(13125)) void IHPageBreak::PutType ( enum XlPageBreak RHS );
__declspec(implementation_key(13126)) enum XlPageBreakExtent IHPageBreak::GetExtent ( );
__declspec(implementation_key(13127)) RangePtr IHPageBreak::GetLocation ( );
__declspec(implementation_key(13128)) void IHPageBreak::PutRefLocation ( struct Range * RHS );
__declspec(implementation_key(13129)) HRESULT IAppEvents::NewWorkbook ( struct _Workbook * Wb );
__declspec(implementation_key(13130)) HRESULT IAppEvents::SheetSelectionChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(13131)) HRESULT IAppEvents::SheetBeforeDoubleClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13132)) HRESULT IAppEvents::SheetBeforeRightClick ( IDispatch * Sh, struct Range * Target, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13133)) HRESULT IAppEvents::SheetActivate ( IDispatch * Sh );
__declspec(implementation_key(13134)) HRESULT IAppEvents::SheetDeactivate ( IDispatch * Sh );
__declspec(implementation_key(13135)) HRESULT IAppEvents::SheetCalculate ( IDispatch * Sh );
__declspec(implementation_key(13136)) HRESULT IAppEvents::SheetChange ( IDispatch * Sh, struct Range * Target );
__declspec(implementation_key(13137)) HRESULT IAppEvents::WorkbookOpen ( struct _Workbook * Wb );
__declspec(implementation_key(13138)) HRESULT IAppEvents::WorkbookActivate ( struct _Workbook * Wb );
__declspec(implementation_key(13139)) HRESULT IAppEvents::WorkbookDeactivate ( struct _Workbook * Wb );
__declspec(implementation_key(13140)) HRESULT IAppEvents::WorkbookBeforeClose ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13141)) HRESULT IAppEvents::WorkbookBeforeSave ( struct _Workbook * Wb, VARIANT_BOOL SaveAsUI, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13142)) HRESULT IAppEvents::WorkbookBeforePrint ( struct _Workbook * Wb, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13143)) HRESULT IAppEvents::WorkbookNewSheet ( struct _Workbook * Wb, IDispatch * Sh );
__declspec(implementation_key(13144)) HRESULT IAppEvents::WorkbookAddinInstall ( struct _Workbook * Wb );
__declspec(implementation_key(13145)) HRESULT IAppEvents::WorkbookAddinUninstall ( struct _Workbook * Wb );
__declspec(implementation_key(13146)) HRESULT IAppEvents::WindowResize ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(13147)) HRESULT IAppEvents::WindowActivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(13148)) HRESULT IAppEvents::WindowDeactivate ( struct _Workbook * Wb, struct Window * Wn );
__declspec(implementation_key(13149)) HRESULT IAppEvents::SheetFollowHyperlink ( IDispatch * Sh, struct Hyperlink * Target );
__declspec(implementation_key(13150)) HRESULT IAppEvents::SheetPivotTableUpdate ( IDispatch * Sh, struct PivotTable * Target );
__declspec(implementation_key(13151)) HRESULT IAppEvents::WorkbookPivotTableCloseConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(13152)) HRESULT IAppEvents::WorkbookPivotTableOpenConnection ( struct _Workbook * Wb, struct PivotTable * Target );
__declspec(implementation_key(13153)) HRESULT IAppEvents::WorkbookSync ( struct _Workbook * Wb, enum Office::MsoSyncEventType SyncEventType );
__declspec(implementation_key(13154)) HRESULT IAppEvents::WorkbookBeforeXmlImport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL IsRefresh, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13155)) HRESULT IAppEvents::WorkbookAfterXmlImport ( struct _Workbook * Wb, struct XmlMap * Map, VARIANT_BOOL IsRefresh, enum XlXmlImportResult Result );
__declspec(implementation_key(13156)) HRESULT IAppEvents::WorkbookBeforeXmlExport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, VARIANT_BOOL * Cancel );
__declspec(implementation_key(13157)) HRESULT IAppEvents::WorkbookAfterXmlExport ( struct _Workbook * Wb, struct XmlMap * Map, _bstr_t Url, enum XlXmlExportResult Result );
__declspec(implementation_key(13158)) _ApplicationPtr IRecentFile::GetApplication ( );
__declspec(implementation_key(13159)) enum XlCreator IRecentFile::GetCreator ( );
__declspec(implementation_key(13160)) IDispatchPtr IRecentFile::GetParent ( );
__declspec(implementation_key(13161)) _bstr_t IRecentFile::GetName ( );
__declspec(implementation_key(13162)) _bstr_t IRecentFile::GetPath ( );
__declspec(implementation_key(13163)) long IRecentFile::GetIndex ( );
__declspec(implementation_key(13164)) _WorkbookPtr IRecentFile::Open ( );
__declspec(implementation_key(13165)) HRESULT IRecentFile::Delete ( );
__declspec(implementation_key(13166)) _ApplicationPtr Workbooks::GetApplication ( );
__declspec(implementation_key(13167)) enum XlCreator Workbooks::GetCreator ( );
__declspec(implementation_key(13168)) IDispatchPtr Workbooks::GetParent ( );
__declspec(implementation_key(13169)) _WorkbookPtr Workbooks::Add ( const _variant_t & Template, long lcid );
__declspec(implementation_key(13170)) HRESULT Workbooks::Close ( long lcid );
__declspec(implementation_key(13171)) long Workbooks::GetCount ( );
__declspec(implementation_key(13172)) _WorkbookPtr Workbooks::GetItem ( const _variant_t & Index );
__declspec(implementation_key(13173)) IUnknownPtr Workbooks::Get_NewEnum ( );
__declspec(implementation_key(13174)) _WorkbookPtr Workbooks::_Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, long lcid );
__declspec(implementation_key(13175)) HRESULT Workbooks::__OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, long lcid );
__declspec(implementation_key(13176)) _WorkbookPtr Workbooks::Get_Default ( const _variant_t & Index );
__declspec(implementation_key(13177)) HRESULT Workbooks::_OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, long lcid );
__declspec(implementation_key(13178)) _WorkbookPtr Workbooks::Open ( _bstr_t Filename, const _variant_t & UpdateLinks, const _variant_t & ReadOnly, const _variant_t & Format, const _variant_t & Password, const _variant_t & WriteResPassword, const _variant_t & IgnoreReadOnlyRecommended, const _variant_t & Origin, const _variant_t & Delimiter, const _variant_t & Editable, const _variant_t & Notify, const _variant_t & Converter, const _variant_t & AddToMru, const _variant_t & Local, const _variant_t & CorruptLoad, long lcid );
__declspec(implementation_key(13179)) HRESULT Workbooks::OpenText ( _bstr_t Filename, const _variant_t & Origin, const _variant_t & StartRow, const _variant_t & DataType, enum XlTextQualifier TextQualifier, const _variant_t & ConsecutiveDelimiter, const _variant_t & Tab, const _variant_t & Semicolon, const _variant_t & Comma, const _variant_t & Space, const _variant_t & Other, const _variant_t & OtherChar, const _variant_t & FieldInfo, const _variant_t & TextVisualLayout, const _variant_t & DecimalSeparator, const _variant_t & ThousandsSeparator, const _variant_t & TrailingMinusNumbers, const _variant_t & Local, long lcid );
__declspec(implementation_key(13180)) _WorkbookPtr Workbooks::OpenDatabase ( _bstr_t Filename, const _variant_t & CommandText, const _variant_t & CommandType, const _variant_t & BackgroundQuery, const _variant_t & ImportDataAs );
__declspec(implementation_key(13181)) HRESULT Workbooks::CheckOut ( _bstr_t Filename );
__declspec(implementation_key(13182)) VARIANT_BOOL Workbooks::CanCheckOut ( _bstr_t Filename );
__declspec(implementation_key(13183)) _WorkbookPtr Workbooks::_OpenXML ( _bstr_t Filename, const _variant_t & Stylesheets );
__declspec(implementation_key(13184)) _WorkbookPtr Workbooks::OpenXML ( _bstr_t Filename, const _variant_t & Stylesheets, const _variant_t & LoadOption );
__declspec(implementation_key(13185)) _ApplicationPtr _Application::GetApplication ( );
__declspec(implementation_key(13186)) enum XlCreator _Application::GetCreator ( );
__declspec(implementation_key(13187)) _ApplicationPtr _Application::GetParent ( );
__declspec(implementation_key(13188)) RangePtr _Application::GetActiveCell ( );
__declspec(implementation_key(13189)) _ChartPtr _Application::GetActiveChart ( );
__declspec(implementation_key(13190)) DialogSheetPtr _Application::GetActiveDialog ( );
__declspec(implementation_key(13191)) MenuBarPtr _Application::GetActiveMenuBar ( );
__declspec(implementation_key(13192)) _bstr_t _Application::GetActivePrinter ( long lcid );
__declspec(implementation_key(13193)) void _Application::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13194)) IDispatchPtr _Application::GetActiveSheet ( );
__declspec(implementation_key(13195)) WindowPtr _Application::GetActiveWindow ( );
__declspec(implementation_key(13196)) _WorkbookPtr _Application::GetActiveWorkbook ( );
__declspec(implementation_key(13197)) AddInsPtr _Application::GetAddIns ( );
__declspec(implementation_key(13198)) Office::AssistantPtr _Application::GetAssistant ( );
__declspec(implementation_key(13199)) HRESULT _Application::Calculate ( long lcid );
__declspec(implementation_key(13200)) RangePtr _Application::GetCells ( );
__declspec(implementation_key(13201)) SheetsPtr _Application::GetCharts ( );
__declspec(implementation_key(13202)) RangePtr _Application::GetColumns ( );
__declspec(implementation_key(13203)) Office::_CommandBarsPtr _Application::GetCommandBars ( );
__declspec(implementation_key(13204)) long _Application::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(13205)) HRESULT _Application::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(13206)) long _Application::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(13207)) HRESULT _Application::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(13208)) _variant_t _Application::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(13209)) HRESULT _Application::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(13210)) SheetsPtr _Application::GetDialogSheets ( );
__declspec(implementation_key(13211)) _variant_t _Application::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(13212)) _variant_t _Application::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(13213)) _variant_t _Application::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(13214)) RangePtr _Application::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13215)) MenuBarsPtr _Application::GetMenuBars ( );
__declspec(implementation_key(13216)) ModulesPtr _Application::GetModules ( );
__declspec(implementation_key(13217)) NamesPtr _Application::GetNames ( );
__declspec(implementation_key(13218)) RangePtr _Application::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(13219)) RangePtr _Application::GetRows ( );
__declspec(implementation_key(13220)) _variant_t _Application::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(13221)) _variant_t _Application::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13222)) IDispatchPtr _Application::GetSelection ( long lcid );
__declspec(implementation_key(13223)) HRESULT _Application::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(13224)) SheetsPtr _Application::GetSheets ( );
__declspec(implementation_key(13225)) MenuPtr _Application::GetShortcutMenus ( long Index );
__declspec(implementation_key(13226)) _WorkbookPtr _Application::GetThisWorkbook ( long lcid );
__declspec(implementation_key(13227)) ToolbarsPtr _Application::GetToolbars ( );
__declspec(implementation_key(13228)) RangePtr _Application::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13229)) WindowsPtr _Application::GetWindows ( );
__declspec(implementation_key(13230)) WorkbooksPtr _Application::GetWorkbooks ( );
__declspec(implementation_key(13231)) WorksheetFunctionPtr _Application::GetWorksheetFunction ( );
__declspec(implementation_key(13232)) SheetsPtr _Application::GetWorksheets ( );
__declspec(implementation_key(13233)) SheetsPtr _Application::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(13234)) SheetsPtr _Application::GetExcel4MacroSheets ( );
__declspec(implementation_key(13235)) HRESULT _Application::ActivateMicrosoftApp ( enum XlMSApplication Index, long lcid );
__declspec(implementation_key(13236)) HRESULT _Application::AddChartAutoFormat ( const _variant_t & Chart, _bstr_t Name, const _variant_t & Description, long lcid );
__declspec(implementation_key(13237)) HRESULT _Application::AddCustomList ( const _variant_t & ListArray, const _variant_t & ByRow, long lcid );
__declspec(implementation_key(13238)) VARIANT_BOOL _Application::GetAlertBeforeOverwriting ( long lcid );
__declspec(implementation_key(13239)) void _Application::PutAlertBeforeOverwriting ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13240)) _bstr_t _Application::GetAltStartupPath ( long lcid );
__declspec(implementation_key(13241)) void _Application::PutAltStartupPath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13242)) VARIANT_BOOL _Application::GetAskToUpdateLinks ( long lcid );
__declspec(implementation_key(13243)) void _Application::PutAskToUpdateLinks ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13244)) VARIANT_BOOL _Application::GetEnableAnimations ( long lcid );
__declspec(implementation_key(13245)) void _Application::PutEnableAnimations ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13246)) AutoCorrectPtr _Application::GetAutoCorrect ( );
__declspec(implementation_key(13247)) long _Application::GetBuild ( long lcid );
__declspec(implementation_key(13248)) VARIANT_BOOL _Application::GetCalculateBeforeSave ( long lcid );
__declspec(implementation_key(13249)) void _Application::PutCalculateBeforeSave ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13250)) enum XlCalculation _Application::GetCalculation ( long lcid );
__declspec(implementation_key(13251)) void _Application::PutCalculation ( long lcid, enum XlCalculation RHS );
__declspec(implementation_key(13252)) _variant_t _Application::GetCaller ( const _variant_t & Index, long lcid );
__declspec(implementation_key(13253)) VARIANT_BOOL _Application::GetCanPlaySounds ( long lcid );
__declspec(implementation_key(13254)) VARIANT_BOOL _Application::GetCanRecordSounds ( long lcid );
__declspec(implementation_key(13255)) _bstr_t _Application::GetCaption ( );
__declspec(implementation_key(13256)) void _Application::PutCaption ( _bstr_t RHS );
__declspec(implementation_key(13257)) VARIANT_BOOL _Application::GetCellDragAndDrop ( long lcid );
__declspec(implementation_key(13258)) void _Application::PutCellDragAndDrop ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13259)) double _Application::CentimetersToPoints ( double Centimeters, long lcid );
__declspec(implementation_key(13260)) VARIANT_BOOL _Application::CheckSpelling ( _bstr_t Word, const _variant_t & CustomDictionary, const _variant_t & IgnoreUppercase, long lcid );
__declspec(implementation_key(13261)) _variant_t _Application::GetClipboardFormats ( const _variant_t & Index, long lcid );
__declspec(implementation_key(13262)) VARIANT_BOOL _Application::GetDisplayClipboardWindow ( long lcid );
__declspec(implementation_key(13263)) void _Application::PutDisplayClipboardWindow ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13264)) VARIANT_BOOL _Application::GetColorButtons ( );
__declspec(implementation_key(13265)) void _Application::PutColorButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(13266)) enum XlCommandUnderlines _Application::GetCommandUnderlines ( long lcid );
__declspec(implementation_key(13267)) void _Application::PutCommandUnderlines ( long lcid, enum XlCommandUnderlines RHS );
__declspec(implementation_key(13268)) VARIANT_BOOL _Application::GetConstrainNumeric ( long lcid );
__declspec(implementation_key(13269)) void _Application::PutConstrainNumeric ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13270)) _variant_t _Application::ConvertFormula ( const _variant_t & Formula, enum XlReferenceStyle FromReferenceStyle, const _variant_t & ToReferenceStyle, const _variant_t & ToAbsolute, const _variant_t & RelativeTo, long lcid );
__declspec(implementation_key(13271)) VARIANT_BOOL _Application::GetCopyObjectsWithCells ( long lcid );
__declspec(implementation_key(13272)) void _Application::PutCopyObjectsWithCells ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13273)) enum XlMousePointer _Application::GetCursor ( long lcid );
__declspec(implementation_key(13274)) void _Application::PutCursor ( long lcid, enum XlMousePointer RHS );
__declspec(implementation_key(13275)) long _Application::GetCustomListCount ( long lcid );
__declspec(implementation_key(13276)) enum XlCutCopyMode _Application::GetCutCopyMode ( long lcid );
__declspec(implementation_key(13277)) void _Application::PutCutCopyMode ( long lcid, enum XlCutCopyMode RHS );
__declspec(implementation_key(13278)) long _Application::GetDataEntryMode ( long lcid );
__declspec(implementation_key(13279)) void _Application::PutDataEntryMode ( long lcid, long RHS );
__declspec(implementation_key(13280)) _variant_t _Application::Dummy1 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(13281)) _variant_t _Application::Dummy2 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8 );
__declspec(implementation_key(13282)) _variant_t _Application::Dummy3 ( );
__declspec(implementation_key(13283)) _variant_t _Application::Dummy4 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15 );
__declspec(implementation_key(13284)) _variant_t _Application::Dummy5 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13 );
__declspec(implementation_key(13285)) _variant_t _Application::Dummy6 ( );
__declspec(implementation_key(13286)) _variant_t _Application::Dummy7 ( );
__declspec(implementation_key(13287)) _variant_t _Application::Dummy8 ( const _variant_t & Arg1 );
__declspec(implementation_key(13288)) _variant_t _Application::Dummy9 ( );
__declspec(implementation_key(13289)) VARIANT_BOOL _Application::Dummy10 ( const _variant_t & arg );
__declspec(implementation_key(13290)) HRESULT _Application::Dummy11 ( );
__declspec(implementation_key(13291)) _bstr_t _Application::Get_Default ( );
__declspec(implementation_key(13292)) _bstr_t _Application::GetDefaultFilePath ( long lcid );
__declspec(implementation_key(13293)) void _Application::PutDefaultFilePath ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13294)) HRESULT _Application::DeleteChartAutoFormat ( _bstr_t Name, long lcid );
__declspec(implementation_key(13295)) HRESULT _Application::DeleteCustomList ( long ListNum, long lcid );
__declspec(implementation_key(13296)) DialogsPtr _Application::GetDialogs ( );
__declspec(implementation_key(13297)) VARIANT_BOOL _Application::GetDisplayAlerts ( long lcid );
__declspec(implementation_key(13298)) void _Application::PutDisplayAlerts ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13299)) VARIANT_BOOL _Application::GetDisplayFormulaBar ( long lcid );
__declspec(implementation_key(13300)) void _Application::PutDisplayFormulaBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13301)) VARIANT_BOOL _Application::GetDisplayFullScreen ( long lcid );
__declspec(implementation_key(13302)) void _Application::PutDisplayFullScreen ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13303)) VARIANT_BOOL _Application::GetDisplayNoteIndicator ( );
__declspec(implementation_key(13304)) void _Application::PutDisplayNoteIndicator ( VARIANT_BOOL RHS );
__declspec(implementation_key(13305)) enum XlCommentDisplayMode _Application::GetDisplayCommentIndicator ( );
__declspec(implementation_key(13306)) void _Application::PutDisplayCommentIndicator ( enum XlCommentDisplayMode RHS );
__declspec(implementation_key(13307)) VARIANT_BOOL _Application::GetDisplayExcel4Menus ( long lcid );
__declspec(implementation_key(13308)) void _Application::PutDisplayExcel4Menus ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13309)) VARIANT_BOOL _Application::GetDisplayRecentFiles ( );
__declspec(implementation_key(13310)) void _Application::PutDisplayRecentFiles ( VARIANT_BOOL RHS );
__declspec(implementation_key(13311)) VARIANT_BOOL _Application::GetDisplayScrollBars ( long lcid );
__declspec(implementation_key(13312)) void _Application::PutDisplayScrollBars ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13313)) VARIANT_BOOL _Application::GetDisplayStatusBar ( long lcid );
__declspec(implementation_key(13314)) void _Application::PutDisplayStatusBar ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13315)) HRESULT _Application::DoubleClick ( long lcid );
__declspec(implementation_key(13316)) VARIANT_BOOL _Application::GetEditDirectlyInCell ( long lcid );
__declspec(implementation_key(13317)) void _Application::PutEditDirectlyInCell ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13318)) VARIANT_BOOL _Application::GetEnableAutoComplete ( );
__declspec(implementation_key(13319)) void _Application::PutEnableAutoComplete ( VARIANT_BOOL RHS );
__declspec(implementation_key(13320)) enum XlEnableCancelKey _Application::GetEnableCancelKey ( long lcid );
__declspec(implementation_key(13321)) void _Application::PutEnableCancelKey ( long lcid, enum XlEnableCancelKey RHS );
__declspec(implementation_key(13322)) VARIANT_BOOL _Application::GetEnableSound ( );
__declspec(implementation_key(13323)) void _Application::PutEnableSound ( VARIANT_BOOL RHS );
__declspec(implementation_key(13324)) VARIANT_BOOL _Application::GetEnableTipWizard ( long lcid );
__declspec(implementation_key(13325)) void _Application::PutEnableTipWizard ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13326)) _variant_t _Application::GetFileConverters ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(13327)) Office::FileSearchPtr _Application::GetFileSearch ( );
__declspec(implementation_key(13328)) Office::IFindPtr _Application::GetFileFind ( );
__declspec(implementation_key(13329)) HRESULT _Application::_FindFile ( long lcid );
__declspec(implementation_key(13330)) VARIANT_BOOL _Application::GetFixedDecimal ( long lcid );
__declspec(implementation_key(13331)) void _Application::PutFixedDecimal ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13332)) long _Application::GetFixedDecimalPlaces ( long lcid );
__declspec(implementation_key(13333)) void _Application::PutFixedDecimalPlaces ( long lcid, long RHS );
__declspec(implementation_key(13334)) _variant_t _Application::GetCustomListContents ( long ListNum, long lcid );
__declspec(implementation_key(13335)) long _Application::GetCustomListNum ( const _variant_t & ListArray, long lcid );
__declspec(implementation_key(13336)) _variant_t _Application::GetOpenFilename ( const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, const _variant_t & MultiSelect, long lcid );
__declspec(implementation_key(13337)) _variant_t _Application::GetSaveAsFilename ( const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & ButtonText, long lcid );
__declspec(implementation_key(13338)) HRESULT _Application::Goto ( const _variant_t & Reference, const _variant_t & Scroll, long lcid );
__declspec(implementation_key(13339)) double _Application::GetHeight ( long lcid );
__declspec(implementation_key(13340)) void _Application::PutHeight ( long lcid, double RHS );
__declspec(implementation_key(13341)) HRESULT _Application::Help ( const _variant_t & HelpFile, const _variant_t & HelpContextID, long lcid );
__declspec(implementation_key(13342)) VARIANT_BOOL _Application::GetIgnoreRemoteRequests ( long lcid );
__declspec(implementation_key(13343)) void _Application::PutIgnoreRemoteRequests ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13344)) double _Application::InchesToPoints ( double Inches, long lcid );
__declspec(implementation_key(13345)) _variant_t _Application::InputBox ( _bstr_t Prompt, const _variant_t & Title, const _variant_t & Default, const _variant_t & Left, const _variant_t & Top, const _variant_t & HelpFile, const _variant_t & HelpContextID, const _variant_t & Type, long lcid );
__declspec(implementation_key(13346)) VARIANT_BOOL _Application::GetInteractive ( long lcid );
__declspec(implementation_key(13347)) void _Application::PutInteractive ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13348)) _variant_t _Application::GetInternational ( const _variant_t & Index, long lcid );
__declspec(implementation_key(13349)) VARIANT_BOOL _Application::GetIteration ( long lcid );
__declspec(implementation_key(13350)) void _Application::PutIteration ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13351)) VARIANT_BOOL _Application::GetLargeButtons ( );
__declspec(implementation_key(13352)) void _Application::PutLargeButtons ( VARIANT_BOOL RHS );
__declspec(implementation_key(13353)) double _Application::GetLeft ( long lcid );
__declspec(implementation_key(13354)) void _Application::PutLeft ( long lcid, double RHS );
__declspec(implementation_key(13355)) _bstr_t _Application::GetLibraryPath ( long lcid );
__declspec(implementation_key(13356)) HRESULT _Application::MacroOptions ( const _variant_t & Macro, const _variant_t & Description, const _variant_t & HasMenu, const _variant_t & MenuText, const _variant_t & HasShortcutKey, const _variant_t & ShortcutKey, const _variant_t & Category, const _variant_t & StatusBar, const _variant_t & HelpContextID, const _variant_t & HelpFile, long lcid );
__declspec(implementation_key(13357)) HRESULT _Application::MailLogoff ( long lcid );
__declspec(implementation_key(13358)) HRESULT _Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail, long lcid );
__declspec(implementation_key(13359)) _variant_t _Application::GetMailSession ( long lcid );
__declspec(implementation_key(13360)) enum XlMailSystem _Application::GetMailSystem ( long lcid );
__declspec(implementation_key(13361)) VARIANT_BOOL _Application::GetMathCoprocessorAvailable ( long lcid );
__declspec(implementation_key(13362)) double _Application::GetMaxChange ( long lcid );
__declspec(implementation_key(13363)) void _Application::PutMaxChange ( long lcid, double RHS );
__declspec(implementation_key(13364)) long _Application::GetMaxIterations ( long lcid );
__declspec(implementation_key(13365)) void _Application::PutMaxIterations ( long lcid, long RHS );
__declspec(implementation_key(13366)) long _Application::GetMemoryFree ( long lcid );
__declspec(implementation_key(13367)) long _Application::GetMemoryTotal ( long lcid );
__declspec(implementation_key(13368)) long _Application::GetMemoryUsed ( long lcid );
__declspec(implementation_key(13369)) VARIANT_BOOL _Application::GetMouseAvailable ( long lcid );
__declspec(implementation_key(13370)) VARIANT_BOOL _Application::GetMoveAfterReturn ( long lcid );
__declspec(implementation_key(13371)) void _Application::PutMoveAfterReturn ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13372)) enum XlDirection _Application::GetMoveAfterReturnDirection ( long lcid );
__declspec(implementation_key(13373)) void _Application::PutMoveAfterReturnDirection ( long lcid, enum XlDirection RHS );
__declspec(implementation_key(13374)) RecentFilesPtr _Application::GetRecentFiles ( );
__declspec(implementation_key(13375)) _bstr_t _Application::GetName ( );
__declspec(implementation_key(13376)) _WorkbookPtr _Application::NextLetter ( long lcid );
__declspec(implementation_key(13377)) _bstr_t _Application::GetNetworkTemplatesPath ( long lcid );
__declspec(implementation_key(13378)) ODBCErrorsPtr _Application::GetODBCErrors ( );
__declspec(implementation_key(13379)) long _Application::GetODBCTimeout ( );
__declspec(implementation_key(13380)) void _Application::PutODBCTimeout ( long RHS );
__declspec(implementation_key(13381)) _bstr_t _Application::GetOnCalculate ( long lcid );
__declspec(implementation_key(13382)) void _Application::PutOnCalculate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13383)) _bstr_t _Application::GetOnData ( long lcid );
__declspec(implementation_key(13384)) void _Application::PutOnData ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13385)) _bstr_t _Application::GetOnDoubleClick ( long lcid );
__declspec(implementation_key(13386)) void _Application::PutOnDoubleClick ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13387)) _bstr_t _Application::GetOnEntry ( long lcid );
__declspec(implementation_key(13388)) void _Application::PutOnEntry ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13389)) HRESULT _Application::OnKey ( _bstr_t Key, const _variant_t & Procedure, long lcid );
__declspec(implementation_key(13390)) HRESULT _Application::OnRepeat ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(13391)) _bstr_t _Application::GetOnSheetActivate ( long lcid );
__declspec(implementation_key(13392)) void _Application::PutOnSheetActivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13393)) _bstr_t _Application::GetOnSheetDeactivate ( long lcid );
__declspec(implementation_key(13394)) void _Application::PutOnSheetDeactivate ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13395)) HRESULT _Application::OnTime ( const _variant_t & EarliestTime, _bstr_t Procedure, const _variant_t & LatestTime, const _variant_t & Schedule, long lcid );
__declspec(implementation_key(13396)) HRESULT _Application::OnUndo ( _bstr_t Text, _bstr_t Procedure, long lcid );
__declspec(implementation_key(13397)) _bstr_t _Application::GetOnWindow ( long lcid );
__declspec(implementation_key(13398)) void _Application::PutOnWindow ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13399)) _bstr_t _Application::GetOperatingSystem ( long lcid );
__declspec(implementation_key(13400)) _bstr_t _Application::GetOrganizationName ( long lcid );
__declspec(implementation_key(13401)) _bstr_t _Application::GetPath ( long lcid );
__declspec(implementation_key(13402)) _bstr_t _Application::GetPathSeparator ( long lcid );
__declspec(implementation_key(13403)) _variant_t _Application::GetPreviousSelections ( const _variant_t & Index, long lcid );
__declspec(implementation_key(13404)) VARIANT_BOOL _Application::GetPivotTableSelection ( );
__declspec(implementation_key(13405)) void _Application::PutPivotTableSelection ( VARIANT_BOOL RHS );
__declspec(implementation_key(13406)) VARIANT_BOOL _Application::GetPromptForSummaryInfo ( long lcid );
__declspec(implementation_key(13407)) void _Application::PutPromptForSummaryInfo ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13408)) HRESULT _Application::Quit ( );
__declspec(implementation_key(13409)) HRESULT _Application::RecordMacro ( const _variant_t & BasicCode, const _variant_t & XlmCode, long lcid );
__declspec(implementation_key(13410)) VARIANT_BOOL _Application::GetRecordRelative ( long lcid );
__declspec(implementation_key(13411)) enum XlReferenceStyle _Application::GetReferenceStyle ( long lcid );
__declspec(implementation_key(13412)) void _Application::PutReferenceStyle ( long lcid, enum XlReferenceStyle RHS );
__declspec(implementation_key(13413)) _variant_t _Application::GetRegisteredFunctions ( const _variant_t & Index1, const _variant_t & Index2, long lcid );
__declspec(implementation_key(13414)) VARIANT_BOOL _Application::RegisterXLL ( _bstr_t Filename, long lcid );
__declspec(implementation_key(13415)) HRESULT _Application::Repeat ( long lcid );
__declspec(implementation_key(13416)) HRESULT _Application::ResetTipWizard ( long lcid );
__declspec(implementation_key(13417)) VARIANT_BOOL _Application::GetRollZoom ( );
__declspec(implementation_key(13418)) void _Application::PutRollZoom ( VARIANT_BOOL RHS );
__declspec(implementation_key(13419)) HRESULT _Application::Save ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(13420)) HRESULT _Application::SaveWorkspace ( const _variant_t & Filename, long lcid );
__declspec(implementation_key(13421)) VARIANT_BOOL _Application::GetScreenUpdating ( long lcid );
__declspec(implementation_key(13422)) void _Application::PutScreenUpdating ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13423)) HRESULT _Application::SetDefaultChart ( const _variant_t & FormatName, const _variant_t & Gallery );
__declspec(implementation_key(13424)) long _Application::GetSheetsInNewWorkbook ( long lcid );
__declspec(implementation_key(13425)) void _Application::PutSheetsInNewWorkbook ( long lcid, long RHS );
__declspec(implementation_key(13426)) VARIANT_BOOL _Application::GetShowChartTipNames ( );
__declspec(implementation_key(13427)) void _Application::PutShowChartTipNames ( VARIANT_BOOL RHS );
__declspec(implementation_key(13428)) VARIANT_BOOL _Application::GetShowChartTipValues ( );
__declspec(implementation_key(13429)) void _Application::PutShowChartTipValues ( VARIANT_BOOL RHS );
__declspec(implementation_key(13430)) _bstr_t _Application::GetStandardFont ( long lcid );
__declspec(implementation_key(13431)) void _Application::PutStandardFont ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13432)) double _Application::GetStandardFontSize ( long lcid );
__declspec(implementation_key(13433)) void _Application::PutStandardFontSize ( long lcid, double RHS );
__declspec(implementation_key(13434)) _bstr_t _Application::GetStartupPath ( long lcid );
__declspec(implementation_key(13435)) _variant_t _Application::GetStatusBar ( long lcid );
__declspec(implementation_key(13436)) void _Application::PutStatusBar ( long lcid, const _variant_t & RHS );
__declspec(implementation_key(13437)) _bstr_t _Application::GetTemplatesPath ( long lcid );
__declspec(implementation_key(13438)) VARIANT_BOOL _Application::GetShowToolTips ( );
__declspec(implementation_key(13439)) void _Application::PutShowToolTips ( VARIANT_BOOL RHS );
__declspec(implementation_key(13440)) double _Application::GetTop ( long lcid );
__declspec(implementation_key(13441)) void _Application::PutTop ( long lcid, double RHS );
__declspec(implementation_key(13442)) enum XlFileFormat _Application::GetDefaultSaveFormat ( );
__declspec(implementation_key(13443)) void _Application::PutDefaultSaveFormat ( enum XlFileFormat RHS );
__declspec(implementation_key(13444)) _bstr_t _Application::GetTransitionMenuKey ( long lcid );
__declspec(implementation_key(13445)) void _Application::PutTransitionMenuKey ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13446)) long _Application::GetTransitionMenuKeyAction ( long lcid );
__declspec(implementation_key(13447)) void _Application::PutTransitionMenuKeyAction ( long lcid, long RHS );
__declspec(implementation_key(13448)) VARIANT_BOOL _Application::GetTransitionNavigKeys ( long lcid );
__declspec(implementation_key(13449)) void _Application::PutTransitionNavigKeys ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13450)) HRESULT _Application::Undo ( long lcid );
__declspec(implementation_key(13451)) double _Application::GetUsableHeight ( long lcid );
__declspec(implementation_key(13452)) double _Application::GetUsableWidth ( long lcid );
__declspec(implementation_key(13453)) VARIANT_BOOL _Application::GetUserControl ( );
__declspec(implementation_key(13454)) void _Application::PutUserControl ( VARIANT_BOOL RHS );
__declspec(implementation_key(13455)) _bstr_t _Application::GetUserName ( long lcid );
__declspec(implementation_key(13456)) void _Application::PutUserName ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13457)) _bstr_t _Application::GetValue ( );
__declspec(implementation_key(13458)) VBE6::VBEPtr _Application::GetVBE ( );
__declspec(implementation_key(13459)) _bstr_t _Application::GetVersion ( long lcid );
__declspec(implementation_key(13460)) VARIANT_BOOL _Application::GetVisible ( long lcid );
__declspec(implementation_key(13461)) void _Application::PutVisible ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13462)) HRESULT _Application::Volatile ( const _variant_t & Volatile, long lcid );
__declspec(implementation_key(13463)) HRESULT _Application::_Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(13464)) double _Application::GetWidth ( long lcid );
__declspec(implementation_key(13465)) void _Application::PutWidth ( long lcid, double RHS );
__declspec(implementation_key(13466)) VARIANT_BOOL _Application::GetWindowsForPens ( long lcid );
__declspec(implementation_key(13467)) enum XlWindowState _Application::GetWindowState ( long lcid );
__declspec(implementation_key(13468)) void _Application::PutWindowState ( long lcid, enum XlWindowState RHS );
__declspec(implementation_key(13469)) long _Application::GetUILanguage ( long lcid );
__declspec(implementation_key(13470)) void _Application::PutUILanguage ( long lcid, long RHS );
__declspec(implementation_key(13471)) long _Application::GetDefaultSheetDirection ( long lcid );
__declspec(implementation_key(13472)) void _Application::PutDefaultSheetDirection ( long lcid, long RHS );
__declspec(implementation_key(13473)) long _Application::GetCursorMovement ( long lcid );
__declspec(implementation_key(13474)) void _Application::PutCursorMovement ( long lcid, long RHS );
__declspec(implementation_key(13475)) VARIANT_BOOL _Application::GetControlCharacters ( long lcid );
__declspec(implementation_key(13476)) void _Application::PutControlCharacters ( long lcid, VARIANT_BOOL RHS );
__declspec(implementation_key(13477)) _variant_t _Application::_WSFunction ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13478)) VARIANT_BOOL _Application::GetEnableEvents ( );
__declspec(implementation_key(13479)) void _Application::PutEnableEvents ( VARIANT_BOOL RHS );
__declspec(implementation_key(13480)) VARIANT_BOOL _Application::GetDisplayInfoWindow ( );
__declspec(implementation_key(13481)) void _Application::PutDisplayInfoWindow ( VARIANT_BOOL RHS );
__declspec(implementation_key(13482)) VARIANT_BOOL _Application::Wait ( const _variant_t & Time, long lcid );
__declspec(implementation_key(13483)) VARIANT_BOOL _Application::GetExtendList ( );
__declspec(implementation_key(13484)) void _Application::PutExtendList ( VARIANT_BOOL RHS );
__declspec(implementation_key(13485)) OLEDBErrorsPtr _Application::GetOLEDBErrors ( );
__declspec(implementation_key(13486)) _bstr_t _Application::GetPhonetic ( const _variant_t & Text );
__declspec(implementation_key(13487)) Office::COMAddInsPtr _Application::GetCOMAddIns ( );
__declspec(implementation_key(13488)) DefaultWebOptionsPtr _Application::GetDefaultWebOptions ( );
__declspec(implementation_key(13489)) _bstr_t _Application::GetProductCode ( );
__declspec(implementation_key(13490)) _bstr_t _Application::GetUserLibraryPath ( );
__declspec(implementation_key(13491)) VARIANT_BOOL _Application::GetAutoPercentEntry ( );
__declspec(implementation_key(13492)) void _Application::PutAutoPercentEntry ( VARIANT_BOOL RHS );
__declspec(implementation_key(13493)) Office::LanguageSettingsPtr _Application::GetLanguageSettings ( );
__declspec(implementation_key(13494)) IDispatchPtr _Application::GetDummy101 ( );
__declspec(implementation_key(13495)) HRESULT _Application::Dummy12 ( struct PivotTable * p1, struct PivotTable * p2 );
__declspec(implementation_key(13496)) Office::AnswerWizardPtr _Application::GetAnswerWizard ( );
__declspec(implementation_key(13497)) HRESULT _Application::CalculateFull ( );
__declspec(implementation_key(13498)) VARIANT_BOOL _Application::FindFile ( long lcid );
__declspec(implementation_key(13499)) long _Application::GetCalculationVersion ( );
__declspec(implementation_key(13500)) VARIANT_BOOL _Application::GetShowWindowsInTaskbar ( );
__declspec(implementation_key(13501)) void _Application::PutShowWindowsInTaskbar ( VARIANT_BOOL RHS );
__declspec(implementation_key(13502)) enum Office::MsoFeatureInstall _Application::GetFeatureInstall ( );
__declspec(implementation_key(13503)) void _Application::PutFeatureInstall ( enum Office::MsoFeatureInstall RHS );
__declspec(implementation_key(13504)) VARIANT_BOOL _Application::GetReady ( );
__declspec(implementation_key(13505)) _variant_t _Application::Dummy13 ( const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(13506)) CellFormatPtr _Application::GetFindFormat ( );
__declspec(implementation_key(13507)) void _Application::PutRefFindFormat ( struct CellFormat * RHS );
__declspec(implementation_key(13508)) CellFormatPtr _Application::GetReplaceFormat ( );
__declspec(implementation_key(13509)) void _Application::PutRefReplaceFormat ( struct CellFormat * RHS );
__declspec(implementation_key(13510)) UsedObjectsPtr _Application::GetUsedObjects ( );
__declspec(implementation_key(13511)) enum XlCalculationState _Application::GetCalculationState ( );
__declspec(implementation_key(13512)) enum XlCalculationInterruptKey _Application::GetCalculationInterruptKey ( );
__declspec(implementation_key(13513)) void _Application::PutCalculationInterruptKey ( enum XlCalculationInterruptKey RHS );
__declspec(implementation_key(13514)) WatchesPtr _Application::GetWatches ( );
__declspec(implementation_key(13515)) VARIANT_BOOL _Application::GetDisplayFunctionToolTips ( );
__declspec(implementation_key(13516)) void _Application::PutDisplayFunctionToolTips ( VARIANT_BOOL RHS );
__declspec(implementation_key(13517)) enum Office::MsoAutomationSecurity _Application::GetAutomationSecurity ( );
__declspec(implementation_key(13518)) void _Application::PutAutomationSecurity ( enum Office::MsoAutomationSecurity RHS );
__declspec(implementation_key(13519)) Office::FileDialogPtr _Application::GetFileDialog ( enum Office::MsoFileDialogType fileDialogType );
__declspec(implementation_key(13520)) HRESULT _Application::Dummy14 ( );
__declspec(implementation_key(13521)) HRESULT _Application::CalculateFullRebuild ( );
__declspec(implementation_key(13522)) VARIANT_BOOL _Application::GetDisplayPasteOptions ( );
__declspec(implementation_key(13523)) void _Application::PutDisplayPasteOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(13524)) VARIANT_BOOL _Application::GetDisplayInsertOptions ( );
__declspec(implementation_key(13525)) void _Application::PutDisplayInsertOptions ( VARIANT_BOOL RHS );
__declspec(implementation_key(13526)) VARIANT_BOOL _Application::GetGenerateGetPivotData ( );
__declspec(implementation_key(13527)) void _Application::PutGenerateGetPivotData ( VARIANT_BOOL RHS );
__declspec(implementation_key(13528)) AutoRecoverPtr _Application::GetAutoRecover ( );
__declspec(implementation_key(13529)) long _Application::GetHwnd ( );
__declspec(implementation_key(13530)) long _Application::GetHinstance ( );
__declspec(implementation_key(13531)) HRESULT _Application::CheckAbort ( const _variant_t & KeepAbort );
__declspec(implementation_key(13532)) ErrorCheckingOptionsPtr _Application::GetErrorCheckingOptions ( );
__declspec(implementation_key(13533)) VARIANT_BOOL _Application::GetAutoFormatAsYouTypeReplaceHyperlinks ( );
__declspec(implementation_key(13534)) void _Application::PutAutoFormatAsYouTypeReplaceHyperlinks ( VARIANT_BOOL RHS );
__declspec(implementation_key(13535)) SmartTagRecognizersPtr _Application::GetSmartTagRecognizers ( );
__declspec(implementation_key(13536)) Office::NewFilePtr _Application::GetNewWorkbook ( );
__declspec(implementation_key(13537)) SpellingOptionsPtr _Application::GetSpellingOptions ( );
__declspec(implementation_key(13538)) SpeechPtr _Application::GetSpeech ( );
__declspec(implementation_key(13539)) VARIANT_BOOL _Application::GetMapPaperSize ( );
__declspec(implementation_key(13540)) void _Application::PutMapPaperSize ( VARIANT_BOOL RHS );
__declspec(implementation_key(13541)) VARIANT_BOOL _Application::GetShowStartupDialog ( );
__declspec(implementation_key(13542)) void _Application::PutShowStartupDialog ( VARIANT_BOOL RHS );
__declspec(implementation_key(13543)) _bstr_t _Application::GetDecimalSeparator ( );
__declspec(implementation_key(13544)) void _Application::PutDecimalSeparator ( _bstr_t RHS );
__declspec(implementation_key(13545)) _bstr_t _Application::GetThousandsSeparator ( );
__declspec(implementation_key(13546)) void _Application::PutThousandsSeparator ( _bstr_t RHS );
__declspec(implementation_key(13547)) VARIANT_BOOL _Application::GetUseSystemSeparators ( );
__declspec(implementation_key(13548)) void _Application::PutUseSystemSeparators ( VARIANT_BOOL RHS );
__declspec(implementation_key(13549)) RangePtr _Application::GetThisCell ( );
__declspec(implementation_key(13550)) RTDPtr _Application::GetRTD ( );
__declspec(implementation_key(13551)) VARIANT_BOOL _Application::GetDisplayDocumentActionTaskPane ( );
__declspec(implementation_key(13552)) void _Application::PutDisplayDocumentActionTaskPane ( VARIANT_BOOL RHS );
__declspec(implementation_key(13553)) HRESULT _Application::DisplayXMLSourcePane ( const _variant_t & XmlMap );
__declspec(implementation_key(13554)) VARIANT_BOOL _Application::GetArbitraryXMLSupportAvailable ( );
__declspec(implementation_key(13555)) _variant_t _Application::Support ( IDispatch * Object, long ID, const _variant_t & arg );
__declspec(implementation_key(13556)) _ApplicationPtr _Global::GetApplication ( );
__declspec(implementation_key(13557)) enum XlCreator _Global::GetCreator ( );
__declspec(implementation_key(13558)) _ApplicationPtr _Global::GetParent ( );
__declspec(implementation_key(13559)) RangePtr _Global::GetActiveCell ( );
__declspec(implementation_key(13560)) _ChartPtr _Global::GetActiveChart ( );
__declspec(implementation_key(13561)) DialogSheetPtr _Global::GetActiveDialog ( );
__declspec(implementation_key(13562)) MenuBarPtr _Global::GetActiveMenuBar ( );
__declspec(implementation_key(13563)) _bstr_t _Global::GetActivePrinter ( long lcid );
__declspec(implementation_key(13564)) void _Global::PutActivePrinter ( long lcid, _bstr_t RHS );
__declspec(implementation_key(13565)) IDispatchPtr _Global::GetActiveSheet ( );
__declspec(implementation_key(13566)) WindowPtr _Global::GetActiveWindow ( );
__declspec(implementation_key(13567)) _WorkbookPtr _Global::GetActiveWorkbook ( );
__declspec(implementation_key(13568)) AddInsPtr _Global::GetAddIns ( );
__declspec(implementation_key(13569)) Office::AssistantPtr _Global::GetAssistant ( );
__declspec(implementation_key(13570)) HRESULT _Global::Calculate ( long lcid );
__declspec(implementation_key(13571)) RangePtr _Global::GetCells ( );
__declspec(implementation_key(13572)) SheetsPtr _Global::GetCharts ( );
__declspec(implementation_key(13573)) RangePtr _Global::GetColumns ( );
__declspec(implementation_key(13574)) Office::_CommandBarsPtr _Global::GetCommandBars ( );
__declspec(implementation_key(13575)) long _Global::GetDDEAppReturnCode ( long lcid );
__declspec(implementation_key(13576)) HRESULT _Global::DDEExecute ( long Channel, _bstr_t String, long lcid );
__declspec(implementation_key(13577)) long _Global::DDEInitiate ( _bstr_t App, _bstr_t Topic, long lcid );
__declspec(implementation_key(13578)) HRESULT _Global::DDEPoke ( long Channel, const _variant_t & Item, const _variant_t & Data, long lcid );
__declspec(implementation_key(13579)) _variant_t _Global::DDERequest ( long Channel, _bstr_t Item, long lcid );
__declspec(implementation_key(13580)) HRESULT _Global::DDETerminate ( long Channel, long lcid );
__declspec(implementation_key(13581)) SheetsPtr _Global::GetDialogSheets ( );
__declspec(implementation_key(13582)) _variant_t _Global::Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(13583)) _variant_t _Global::_Evaluate ( const _variant_t & Name, long lcid );
__declspec(implementation_key(13584)) _variant_t _Global::ExecuteExcel4Macro ( _bstr_t String, long lcid );
__declspec(implementation_key(13585)) RangePtr _Global::Intersect ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13586)) MenuBarsPtr _Global::GetMenuBars ( );
__declspec(implementation_key(13587)) ModulesPtr _Global::GetModules ( );
__declspec(implementation_key(13588)) NamesPtr _Global::GetNames ( );
__declspec(implementation_key(13589)) RangePtr _Global::GetRange ( const _variant_t & Cell1, const _variant_t & Cell2 );
__declspec(implementation_key(13590)) RangePtr _Global::GetRows ( );
__declspec(implementation_key(13591)) _variant_t _Global::Run ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30 );
__declspec(implementation_key(13592)) _variant_t _Global::_Run2 ( const _variant_t & Macro, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13593)) IDispatchPtr _Global::GetSelection ( long lcid );
__declspec(implementation_key(13594)) HRESULT _Global::SendKeys ( const _variant_t & Keys, const _variant_t & Wait, long lcid );
__declspec(implementation_key(13595)) SheetsPtr _Global::GetSheets ( );
__declspec(implementation_key(13596)) MenuPtr _Global::GetShortcutMenus ( long Index );
__declspec(implementation_key(13597)) _WorkbookPtr _Global::GetThisWorkbook ( long lcid );
__declspec(implementation_key(13598)) ToolbarsPtr _Global::GetToolbars ( );
__declspec(implementation_key(13599)) RangePtr _Global::Union ( struct Range * Arg1, struct Range * Arg2, const _variant_t & Arg3, const _variant_t & Arg4, const _variant_t & Arg5, const _variant_t & Arg6, const _variant_t & Arg7, const _variant_t & Arg8, const _variant_t & Arg9, const _variant_t & Arg10, const _variant_t & Arg11, const _variant_t & Arg12, const _variant_t & Arg13, const _variant_t & Arg14, const _variant_t & Arg15, const _variant_t & Arg16, const _variant_t & Arg17, const _variant_t & Arg18, const _variant_t & Arg19, const _variant_t & Arg20, const _variant_t & Arg21, const _variant_t & Arg22, const _variant_t & Arg23, const _variant_t & Arg24, const _variant_t & Arg25, const _variant_t & Arg26, const _variant_t & Arg27, const _variant_t & Arg28, const _variant_t & Arg29, const _variant_t & Arg30, long lcid );
__declspec(implementation_key(13600)) WindowsPtr _Global::GetWindows ( );
__declspec(implementation_key(13601)) WorkbooksPtr _Global::GetWorkbooks ( );
__declspec(implementation_key(13602)) WorksheetFunctionPtr _Global::GetWorksheetFunction ( );
__declspec(implementation_key(13603)) SheetsPtr _Global::GetWorksheets ( );
__declspec(implementation_key(13604)) SheetsPtr _Global::GetExcel4IntlMacroSheets ( );
__declspec(implementation_key(13605)) SheetsPtr _Global::GetExcel4MacroSheets ( );
__declspec(implementation_key(13606)) _ApplicationPtr IOLEObjects::GetApplication ( );
__declspec(implementation_key(13607)) enum XlCreator IOLEObjects::GetCreator ( );
__declspec(implementation_key(13608)) IDispatchPtr IOLEObjects::GetParent ( );
__declspec(implementation_key(13609)) _variant_t IOLEObjects::BringToFront ( );
__declspec(implementation_key(13610)) _variant_t IOLEObjects::Copy ( );
__declspec(implementation_key(13611)) _variant_t IOLEObjects::CopyPicture ( enum XlPictureAppearance Appearance, enum XlCopyPictureFormat Format );
__declspec(implementation_key(13612)) _variant_t IOLEObjects::Cut ( );
__declspec(implementation_key(13613)) _variant_t IOLEObjects::Delete ( );
__declspec(implementation_key(13614)) IDispatchPtr IOLEObjects::Duplicate ( );
__declspec(implementation_key(13615)) VARIANT_BOOL IOLEObjects::GetEnabled ( );
__declspec(implementation_key(13616)) void IOLEObjects::PutEnabled ( VARIANT_BOOL RHS );
__declspec(implementation_key(13617)) double IOLEObjects::GetHeight ( );
__declspec(implementation_key(13618)) void IOLEObjects::PutHeight ( double RHS );
__declspec(implementation_key(13619)) double IOLEObjects::GetLeft ( );
__declspec(implementation_key(13620)) void IOLEObjects::PutLeft ( double RHS );
__declspec(implementation_key(13621)) VARIANT_BOOL IOLEObjects::GetLocked ( );
__declspec(implementation_key(13622)) void IOLEObjects::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(13623)) _bstr_t IOLEObjects::GetOnAction ( );
__declspec(implementation_key(13624)) void IOLEObjects::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(13625)) _variant_t IOLEObjects::GetPlacement ( );
__declspec(implementation_key(13626)) void IOLEObjects::PutPlacement ( const _variant_t & RHS );
__declspec(implementation_key(13627)) VARIANT_BOOL IOLEObjects::GetPrintObject ( );
__declspec(implementation_key(13628)) void IOLEObjects::PutPrintObject ( VARIANT_BOOL RHS );
__declspec(implementation_key(13629)) _variant_t IOLEObjects::Select ( const _variant_t & Replace );
__declspec(implementation_key(13630)) _variant_t IOLEObjects::SendToBack ( );
__declspec(implementation_key(13631)) double IOLEObjects::GetTop ( );
__declspec(implementation_key(13632)) void IOLEObjects::PutTop ( double RHS );
__declspec(implementation_key(13633)) VARIANT_BOOL IOLEObjects::GetVisible ( );
__declspec(implementation_key(13634)) void IOLEObjects::PutVisible ( VARIANT_BOOL RHS );
__declspec(implementation_key(13635)) double IOLEObjects::GetWidth ( );
__declspec(implementation_key(13636)) void IOLEObjects::PutWidth ( double RHS );
__declspec(implementation_key(13637)) long IOLEObjects::GetZOrder ( );
__declspec(implementation_key(13638)) ShapeRangePtr IOLEObjects::GetShapeRange ( );
__declspec(implementation_key(13639)) BorderPtr IOLEObjects::GetBorder ( );
__declspec(implementation_key(13640)) InteriorPtr IOLEObjects::GetInterior ( );
__declspec(implementation_key(13641)) VARIANT_BOOL IOLEObjects::GetShadow ( );
__declspec(implementation_key(13642)) void IOLEObjects::PutShadow ( VARIANT_BOOL RHS );
__declspec(implementation_key(13643)) VARIANT_BOOL IOLEObjects::GetAutoLoad ( );
__declspec(implementation_key(13644)) void IOLEObjects::PutAutoLoad ( VARIANT_BOOL RHS );
__declspec(implementation_key(13645)) _bstr_t IOLEObjects::GetSourceName ( );
__declspec(implementation_key(13646)) void IOLEObjects::PutSourceName ( _bstr_t RHS );
__declspec(implementation_key(13647)) _OLEObjectPtr IOLEObjects::Add ( const _variant_t & ClassType, const _variant_t & Filename, const _variant_t & Link, const _variant_t & DisplayAsIcon, const _variant_t & IconFileName, const _variant_t & IconIndex, const _variant_t & IconLabel, const _variant_t & Left, const _variant_t & Top, const _variant_t & Width, const _variant_t & Height );
__declspec(implementation_key(13648)) long IOLEObjects::GetCount ( );
__declspec(implementation_key(13649)) GroupObjectPtr IOLEObjects::Group ( );
__declspec(implementation_key(13650)) IDispatchPtr IOLEObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(13651)) IUnknownPtr IOLEObjects::_NewEnum ( );
__declspec(implementation_key(13652)) IUnknownPtr DiagramNodes::Get_NewEnum ( );
__declspec(implementation_key(13653)) DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index );
__declspec(implementation_key(13654)) HRESULT DiagramNodes::SelectAll ( );
__declspec(implementation_key(13655)) IDispatchPtr DiagramNodes::GetParent ( );
__declspec(implementation_key(13656)) int DiagramNodes::GetCount ( );
__declspec(implementation_key(13657)) _ApplicationPtr IDiagram::GetApplication ( );
__declspec(implementation_key(13658)) enum XlCreator IDiagram::GetCreator ( );
__declspec(implementation_key(13659)) IDispatchPtr IDiagram::GetParent ( );
__declspec(implementation_key(13660)) DiagramNodesPtr IDiagram::GetNodes ( );
__declspec(implementation_key(13661)) enum Office::MsoDiagramType IDiagram::GetType ( );
__declspec(implementation_key(13662)) enum Office::MsoTriState IDiagram::GetAutoLayout ( );
__declspec(implementation_key(13663)) void IDiagram::PutAutoLayout ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13664)) enum Office::MsoTriState IDiagram::GetReverse ( );
__declspec(implementation_key(13665)) void IDiagram::PutReverse ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13666)) enum Office::MsoTriState IDiagram::GetAutoFormat ( );
__declspec(implementation_key(13667)) void IDiagram::PutAutoFormat ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13668)) HRESULT IDiagram::Convert ( enum Office::MsoDiagramType Type );
__declspec(implementation_key(13669)) HRESULT IDiagram::FitText ( );
__declspec(implementation_key(13670)) IUnknownPtr DiagramNodeChildren::Get_NewEnum ( );
__declspec(implementation_key(13671)) DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index );
__declspec(implementation_key(13672)) DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, enum Office::MsoDiagramNodeType nodeType );
__declspec(implementation_key(13673)) HRESULT DiagramNodeChildren::SelectAll ( );
__declspec(implementation_key(13674)) IDispatchPtr DiagramNodeChildren::GetParent ( );
__declspec(implementation_key(13675)) int DiagramNodeChildren::GetCount ( );
__declspec(implementation_key(13676)) DiagramNodePtr DiagramNodeChildren::GetFirstChild ( );
__declspec(implementation_key(13677)) DiagramNodePtr DiagramNodeChildren::GetLastChild ( );
__declspec(implementation_key(13678)) DiagramNodePtr DiagramNode::AddNode ( enum Office::MsoRelativeNodePosition pos, enum Office::MsoDiagramNodeType nodeType );
__declspec(implementation_key(13679)) HRESULT DiagramNode::Delete ( );
__declspec(implementation_key(13680)) HRESULT DiagramNode::MoveNode ( struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos );
__declspec(implementation_key(13681)) HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * pTargetNode );
__declspec(implementation_key(13682)) HRESULT DiagramNode::SwapNode ( struct DiagramNode * pTargetNode, VARIANT_BOOL swapChildren );
__declspec(implementation_key(13683)) DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL copyChildren, struct DiagramNode * pTargetNode, enum Office::MsoRelativeNodePosition pos );
__declspec(implementation_key(13684)) HRESULT DiagramNode::TransferChildren ( struct DiagramNode * pReceivingNode );
__declspec(implementation_key(13685)) DiagramNodePtr DiagramNode::NextNode ( );
__declspec(implementation_key(13686)) DiagramNodePtr DiagramNode::PrevNode ( );
__declspec(implementation_key(13687)) IDispatchPtr DiagramNode::GetParent ( );
__declspec(implementation_key(13688)) DiagramNodeChildrenPtr DiagramNode::GetChildren ( );
__declspec(implementation_key(13689)) ShapePtr DiagramNode::GetShape ( );
__declspec(implementation_key(13690)) DiagramNodePtr DiagramNode::GetRoot ( );
__declspec(implementation_key(13691)) Office::IMsoDiagramPtr DiagramNode::GetDiagram ( );
__declspec(implementation_key(13692)) enum Office::MsoOrgChartLayoutType DiagramNode::GetLayout ( );
__declspec(implementation_key(13693)) void DiagramNode::PutLayout ( enum Office::MsoOrgChartLayoutType pdgmType );
__declspec(implementation_key(13694)) ShapePtr DiagramNode::GetTextShape ( );
__declspec(implementation_key(13695)) _ApplicationPtr IShape::GetApplication ( );
__declspec(implementation_key(13696)) enum XlCreator IShape::GetCreator ( );
__declspec(implementation_key(13697)) IDispatchPtr IShape::GetParent ( );
__declspec(implementation_key(13698)) HRESULT IShape::Apply ( );
__declspec(implementation_key(13699)) HRESULT IShape::Delete ( );
__declspec(implementation_key(13700)) ShapePtr IShape::Duplicate ( );
__declspec(implementation_key(13701)) HRESULT IShape::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(13702)) HRESULT IShape::IncrementLeft ( float Increment );
__declspec(implementation_key(13703)) HRESULT IShape::IncrementRotation ( float Increment );
__declspec(implementation_key(13704)) HRESULT IShape::IncrementTop ( float Increment );
__declspec(implementation_key(13705)) HRESULT IShape::PickUp ( );
__declspec(implementation_key(13706)) HRESULT IShape::RerouteConnections ( );
__declspec(implementation_key(13707)) HRESULT IShape::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(13708)) HRESULT IShape::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(13709)) HRESULT IShape::Select ( const _variant_t & Replace );
__declspec(implementation_key(13710)) HRESULT IShape::SetShapesDefaultProperties ( );
__declspec(implementation_key(13711)) ShapeRangePtr IShape::Ungroup ( );
__declspec(implementation_key(13712)) HRESULT IShape::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(13713)) AdjustmentsPtr IShape::GetAdjustments ( );
__declspec(implementation_key(13714)) TextFramePtr IShape::GetTextFrame ( );
__declspec(implementation_key(13715)) enum Office::MsoAutoShapeType IShape::GetAutoShapeType ( );
__declspec(implementation_key(13716)) void IShape::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(13717)) CalloutFormatPtr IShape::GetCallout ( );
__declspec(implementation_key(13718)) long IShape::GetConnectionSiteCount ( );
__declspec(implementation_key(13719)) enum Office::MsoTriState IShape::GetConnector ( );
__declspec(implementation_key(13720)) ConnectorFormatPtr IShape::GetConnectorFormat ( );
__declspec(implementation_key(13721)) FillFormatPtr IShape::GetFill ( );
__declspec(implementation_key(13722)) GroupShapesPtr IShape::GetGroupItems ( );
__declspec(implementation_key(13723)) float IShape::GetHeight ( );
__declspec(implementation_key(13724)) void IShape::PutHeight ( float RHS );
__declspec(implementation_key(13725)) enum Office::MsoTriState IShape::GetHorizontalFlip ( );
__declspec(implementation_key(13726)) float IShape::GetLeft ( );
__declspec(implementation_key(13727)) void IShape::PutLeft ( float RHS );
__declspec(implementation_key(13728)) LineFormatPtr IShape::GetLine ( );
__declspec(implementation_key(13729)) enum Office::MsoTriState IShape::GetLockAspectRatio ( );
__declspec(implementation_key(13730)) void IShape::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13731)) _bstr_t IShape::GetName ( );
__declspec(implementation_key(13732)) void IShape::PutName ( _bstr_t RHS );
__declspec(implementation_key(13733)) ShapeNodesPtr IShape::GetNodes ( );
__declspec(implementation_key(13734)) float IShape::GetRotation ( );
__declspec(implementation_key(13735)) void IShape::PutRotation ( float RHS );
__declspec(implementation_key(13736)) PictureFormatPtr IShape::GetPictureFormat ( );
__declspec(implementation_key(13737)) ShadowFormatPtr IShape::GetShadow ( );
__declspec(implementation_key(13738)) TextEffectFormatPtr IShape::GetTextEffect ( );
__declspec(implementation_key(13739)) ThreeDFormatPtr IShape::GetThreeD ( );
__declspec(implementation_key(13740)) float IShape::GetTop ( );
__declspec(implementation_key(13741)) void IShape::PutTop ( float RHS );
__declspec(implementation_key(13742)) enum Office::MsoShapeType IShape::GetType ( );
__declspec(implementation_key(13743)) enum Office::MsoTriState IShape::GetVerticalFlip ( );
__declspec(implementation_key(13744)) _variant_t IShape::GetVertices ( );
__declspec(implementation_key(13745)) enum Office::MsoTriState IShape::GetVisible ( );
__declspec(implementation_key(13746)) void IShape::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13747)) float IShape::GetWidth ( );
__declspec(implementation_key(13748)) void IShape::PutWidth ( float RHS );
__declspec(implementation_key(13749)) long IShape::GetZOrderPosition ( );
__declspec(implementation_key(13750)) HyperlinkPtr IShape::GetHyperlink ( );
__declspec(implementation_key(13751)) enum Office::MsoBlackWhiteMode IShape::GetBlackWhiteMode ( );
__declspec(implementation_key(13752)) void IShape::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(13753)) IDispatchPtr IShape::GetDrawingObject ( );
__declspec(implementation_key(13754)) _bstr_t IShape::GetOnAction ( );
__declspec(implementation_key(13755)) void IShape::PutOnAction ( _bstr_t RHS );
__declspec(implementation_key(13756)) VARIANT_BOOL IShape::GetLocked ( );
__declspec(implementation_key(13757)) void IShape::PutLocked ( VARIANT_BOOL RHS );
__declspec(implementation_key(13758)) RangePtr IShape::GetTopLeftCell ( );
__declspec(implementation_key(13759)) RangePtr IShape::GetBottomRightCell ( );
__declspec(implementation_key(13760)) enum XlPlacement IShape::GetPlacement ( );
__declspec(implementation_key(13761)) void IShape::PutPlacement ( enum XlPlacement RHS );
__declspec(implementation_key(13762)) HRESULT IShape::Copy ( );
__declspec(implementation_key(13763)) HRESULT IShape::Cut ( );
__declspec(implementation_key(13764)) HRESULT IShape::CopyPicture ( const _variant_t & Appearance, const _variant_t & Format );
__declspec(implementation_key(13765)) ControlFormatPtr IShape::GetControlFormat ( );
__declspec(implementation_key(13766)) LinkFormatPtr IShape::GetLinkFormat ( );
__declspec(implementation_key(13767)) OLEFormatPtr IShape::GetOLEFormat ( );
__declspec(implementation_key(13768)) enum XlFormControl IShape::GetFormControlType ( );
__declspec(implementation_key(13769)) _bstr_t IShape::GetAlternativeText ( );
__declspec(implementation_key(13770)) void IShape::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(13771)) Office::ScriptPtr IShape::GetScript ( );
__declspec(implementation_key(13772)) DiagramNodePtr IShape::GetDiagramNode ( );
__declspec(implementation_key(13773)) enum Office::MsoTriState IShape::GetHasDiagramNode ( );
__declspec(implementation_key(13774)) DiagramPtr IShape::GetDiagram ( );
__declspec(implementation_key(13775)) enum Office::MsoTriState IShape::GetHasDiagram ( );
__declspec(implementation_key(13776)) enum Office::MsoTriState IShape::GetChild ( );
__declspec(implementation_key(13777)) ShapePtr IShape::GetParentGroup ( );
__declspec(implementation_key(13778)) Office::CanvasShapesPtr IShape::GetCanvasItems ( );
__declspec(implementation_key(13779)) long IShape::GetID ( );
__declspec(implementation_key(13780)) HRESULT IShape::CanvasCropLeft ( float Increment );
__declspec(implementation_key(13781)) HRESULT IShape::CanvasCropTop ( float Increment );
__declspec(implementation_key(13782)) HRESULT IShape::CanvasCropRight ( float Increment );
__declspec(implementation_key(13783)) HRESULT IShape::CanvasCropBottom ( float Increment );
__declspec(implementation_key(13784)) _ApplicationPtr IShapeRange::GetApplication ( );
__declspec(implementation_key(13785)) enum XlCreator IShapeRange::GetCreator ( );
__declspec(implementation_key(13786)) IDispatchPtr IShapeRange::GetParent ( );
__declspec(implementation_key(13787)) long IShapeRange::GetCount ( );
__declspec(implementation_key(13788)) ShapePtr IShapeRange::Item ( const _variant_t & Index );
__declspec(implementation_key(13789)) ShapePtr IShapeRange::_Default ( const _variant_t & Index );
__declspec(implementation_key(13790)) IUnknownPtr IShapeRange::Get_NewEnum ( );
__declspec(implementation_key(13791)) HRESULT IShapeRange::Align ( enum Office::MsoAlignCmd AlignCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(13792)) HRESULT IShapeRange::Apply ( );
__declspec(implementation_key(13793)) HRESULT IShapeRange::Delete ( );
__declspec(implementation_key(13794)) HRESULT IShapeRange::Distribute ( enum Office::MsoDistributeCmd DistributeCmd, enum Office::MsoTriState RelativeTo );
__declspec(implementation_key(13795)) ShapeRangePtr IShapeRange::Duplicate ( );
__declspec(implementation_key(13796)) HRESULT IShapeRange::Flip ( enum Office::MsoFlipCmd FlipCmd );
__declspec(implementation_key(13797)) HRESULT IShapeRange::IncrementLeft ( float Increment );
__declspec(implementation_key(13798)) HRESULT IShapeRange::IncrementRotation ( float Increment );
__declspec(implementation_key(13799)) HRESULT IShapeRange::IncrementTop ( float Increment );
__declspec(implementation_key(13800)) ShapePtr IShapeRange::Group ( );
__declspec(implementation_key(13801)) HRESULT IShapeRange::PickUp ( );
__declspec(implementation_key(13802)) HRESULT IShapeRange::RerouteConnections ( );
__declspec(implementation_key(13803)) ShapePtr IShapeRange::Regroup ( );
__declspec(implementation_key(13804)) HRESULT IShapeRange::ScaleHeight ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(13805)) HRESULT IShapeRange::ScaleWidth ( float Factor, enum Office::MsoTriState RelativeToOriginalSize, const _variant_t & Scale );
__declspec(implementation_key(13806)) HRESULT IShapeRange::Select ( const _variant_t & Replace );
__declspec(implementation_key(13807)) HRESULT IShapeRange::SetShapesDefaultProperties ( );
__declspec(implementation_key(13808)) ShapeRangePtr IShapeRange::Ungroup ( );
__declspec(implementation_key(13809)) HRESULT IShapeRange::ZOrder ( enum Office::MsoZOrderCmd ZOrderCmd );
__declspec(implementation_key(13810)) AdjustmentsPtr IShapeRange::GetAdjustments ( );
__declspec(implementation_key(13811)) TextFramePtr IShapeRange::GetTextFrame ( );
__declspec(implementation_key(13812)) enum Office::MsoAutoShapeType IShapeRange::GetAutoShapeType ( );
__declspec(implementation_key(13813)) void IShapeRange::PutAutoShapeType ( enum Office::MsoAutoShapeType RHS );
__declspec(implementation_key(13814)) CalloutFormatPtr IShapeRange::GetCallout ( );
__declspec(implementation_key(13815)) long IShapeRange::GetConnectionSiteCount ( );
__declspec(implementation_key(13816)) enum Office::MsoTriState IShapeRange::GetConnector ( );
__declspec(implementation_key(13817)) ConnectorFormatPtr IShapeRange::GetConnectorFormat ( );
__declspec(implementation_key(13818)) FillFormatPtr IShapeRange::GetFill ( );
__declspec(implementation_key(13819)) GroupShapesPtr IShapeRange::GetGroupItems ( );
__declspec(implementation_key(13820)) float IShapeRange::GetHeight ( );
__declspec(implementation_key(13821)) void IShapeRange::PutHeight ( float RHS );
__declspec(implementation_key(13822)) enum Office::MsoTriState IShapeRange::GetHorizontalFlip ( );
__declspec(implementation_key(13823)) float IShapeRange::GetLeft ( );
__declspec(implementation_key(13824)) void IShapeRange::PutLeft ( float RHS );
__declspec(implementation_key(13825)) LineFormatPtr IShapeRange::GetLine ( );
__declspec(implementation_key(13826)) enum Office::MsoTriState IShapeRange::GetLockAspectRatio ( );
__declspec(implementation_key(13827)) void IShapeRange::PutLockAspectRatio ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13828)) _bstr_t IShapeRange::GetName ( );
__declspec(implementation_key(13829)) void IShapeRange::PutName ( _bstr_t RHS );
__declspec(implementation_key(13830)) ShapeNodesPtr IShapeRange::GetNodes ( );
__declspec(implementation_key(13831)) float IShapeRange::GetRotation ( );
__declspec(implementation_key(13832)) void IShapeRange::PutRotation ( float RHS );
__declspec(implementation_key(13833)) PictureFormatPtr IShapeRange::GetPictureFormat ( );
__declspec(implementation_key(13834)) ShadowFormatPtr IShapeRange::GetShadow ( );
__declspec(implementation_key(13835)) TextEffectFormatPtr IShapeRange::GetTextEffect ( );
__declspec(implementation_key(13836)) ThreeDFormatPtr IShapeRange::GetThreeD ( );
__declspec(implementation_key(13837)) float IShapeRange::GetTop ( );
__declspec(implementation_key(13838)) void IShapeRange::PutTop ( float RHS );
__declspec(implementation_key(13839)) enum Office::MsoShapeType IShapeRange::GetType ( );
__declspec(implementation_key(13840)) enum Office::MsoTriState IShapeRange::GetVerticalFlip ( );
__declspec(implementation_key(13841)) _variant_t IShapeRange::GetVertices ( );
__declspec(implementation_key(13842)) enum Office::MsoTriState IShapeRange::GetVisible ( );
__declspec(implementation_key(13843)) void IShapeRange::PutVisible ( enum Office::MsoTriState RHS );
__declspec(implementation_key(13844)) float IShapeRange::GetWidth ( );
__declspec(implementation_key(13845)) void IShapeRange::PutWidth ( float RHS );
__declspec(implementation_key(13846)) long IShapeRange::GetZOrderPosition ( );
__declspec(implementation_key(13847)) enum Office::MsoBlackWhiteMode IShapeRange::GetBlackWhiteMode ( );
__declspec(implementation_key(13848)) void IShapeRange::PutBlackWhiteMode ( enum Office::MsoBlackWhiteMode RHS );
__declspec(implementation_key(13849)) _bstr_t IShapeRange::GetAlternativeText ( );
__declspec(implementation_key(13850)) void IShapeRange::PutAlternativeText ( _bstr_t RHS );
__declspec(implementation_key(13851)) DiagramNodePtr IShapeRange::GetDiagramNode ( );
__declspec(implementation_key(13852)) enum Office::MsoTriState IShapeRange::GetHasDiagramNode ( );
__declspec(implementation_key(13853)) DiagramPtr IShapeRange::GetDiagram ( );
__declspec(implementation_key(13854)) enum Office::MsoTriState IShapeRange::GetHasDiagram ( );
__declspec(implementation_key(13855)) enum Office::MsoTriState IShapeRange::GetChild ( );
__declspec(implementation_key(13856)) ShapePtr IShapeRange::GetParentGroup ( );
__declspec(implementation_key(13857)) Office::CanvasShapesPtr IShapeRange::GetCanvasItems ( );
__declspec(implementation_key(13858)) long IShapeRange::GetID ( );
__declspec(implementation_key(13859)) HRESULT IShapeRange::CanvasCropLeft ( float Increment );
__declspec(implementation_key(13860)) HRESULT IShapeRange::CanvasCropTop ( float Increment );
__declspec(implementation_key(13861)) HRESULT IShapeRange::CanvasCropRight ( float Increment );
__declspec(implementation_key(13862)) HRESULT IShapeRange::CanvasCropBottom ( float Increment );
#pragma stop_map_region

} // namespace MSExcel

#pragma pack(pop)
